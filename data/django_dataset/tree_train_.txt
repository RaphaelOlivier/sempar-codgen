(root (ImportFrom (str{module}{val=threading}) (alias*{names} (alias (str{name}{val=local}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=warnings})))))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core}) (alias*{names} (alias (str{name}{val=signals}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.cache.backends.base}) (alias*{names} (alias (str{name}{val=InvalidCacheBackendError})) (alias (str{name}{val=CacheKeyWarning})) (alias (str{name}{val=BaseCache}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.exceptions}) (alias*{names} (alias (str{name}{val=ImproperlyConfigured}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.deprecation}) (alias*{names} (alias (str{name}{val=RemovedInDjango19Warning}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.module_loading}) (alias*{names} (alias (str{name}{val=import_string}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__all__})))) (expr{value} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=_STR:3_}))) (expr (Str (str{s}{val=CacheKeyWarning}))) (expr (Str (str{s}{val=BaseCache}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=DEFAULT_CACHE_ALIAS})))) (expr{value} (Str (str{s}{val=_STR:2_})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=DEFAULT_CACHE_ALIAS}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=CACHES})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ImproperlyConfigured}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=DEFAULT_CACHE_ALIAS}))))))))))
(root (FunctionDef (str{name}{val=get_cache}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=backend})))) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=warnings}))) (str{attr}{val=warn}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=RemovedInDjango19Warning})))) (keyword*{keywords} (keyword (str{arg}{val=stacklevel}) (expr{value} (Num (int{n}{val=2})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cache})))) (expr{value} (Call (expr{func} (Name (str{id}{val=_create_cache}))) (expr*{args} (expr (Name (str{id}{val=backend})))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=signals}))) (str{attr}{val=request_finished}))) (str{attr}{val=connect}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=cache}))) (str{attr}{val=close}))))))))
(root (Return (expr{value} (Name (str{id}{val=cache})))))
(root (FunctionDef (str{name}{val=_create_cache}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=backend})))) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=conf})))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=CACHES}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=backend})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=KeyError}))) (stmt*{body} (stmt (Pass)))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=import_string}))) (expr*{args} (expr (Name (str{id}{val=backend}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ImportError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=InvalidCacheBackendError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=backend}))) (expr (Name (str{id}{val=e})))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=location})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=kwargs}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=params})))) (expr{value} (Name (str{id}{val=kwargs})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=params})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=conf}))) (str{attr}{val=copy})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=params}))) (str{attr}{val=update}))) (expr*{args} (expr (Name (str{id}{val=kwargs}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=backend})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=params}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=location})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=params}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=backend_cls})))) (expr{value} (Call (expr{func} (Name (str{id}{val=import_string}))) (expr*{args} (expr (Name (str{id}{val=backend}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ImportError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=InvalidCacheBackendError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=backend}))) (expr (Name (str{id}{val=e})))))))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=backend_cls}))) (expr*{args} (expr (Name (str{id}{val=location}))) (expr (Name (str{id}{val=params}))))))))
(root (ClassDef (str{name}{val=CacheHandler}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_caches})))) (expr{value} (Call (expr{func} (Name (str{id}{val=local})))))))
(root (FunctionDef (str{name}{val=__getitem__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=alias})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_caches}))) (str{attr}{val=caches}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=alias})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=AttributeError}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_caches}))) (str{attr}{val=caches})))) (expr{value} (Dict (epsilon)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=KeyError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=alias}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=CACHES})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=InvalidCacheBackendError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=alias}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cache})))) (expr{value} (Call (expr{func} (Name (str{id}{val=_create_cache}))) (expr*{args} (expr (Name (str{id}{val=alias}))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_caches}))) (str{attr}{val=caches}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=alias})))))))) (expr{value} (Name (str{id}{val=cache})))))
(root (Return (expr{value} (Name (str{id}{val=cache})))))
(root (FunctionDef (str{name}{val=all}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_caches}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Dict (epsilon)))))) (str{attr}{val=values})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=caches})))) (expr{value} (Call (expr{func} (Name (str{id}{val=CacheHandler})))))))
(root (ClassDef (str{name}{val=DefaultCacheProxy}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__getattr__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=caches}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=DEFAULT_CACHE_ALIAS}))))))) (expr (Name (str{id}{val=name}))))))))
(root (FunctionDef (str{name}{val=__setattr__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=setattr}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=caches}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=DEFAULT_CACHE_ALIAS}))))))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=value}))))))))
(root (FunctionDef (str{name}{val=__delattr__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=delattr}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=caches}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=DEFAULT_CACHE_ALIAS}))))))) (expr (Name (str{id}{val=name}))))))))
(root (FunctionDef (str{name}{val=__contains__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Compare (expr{left} (Name (str{id}{val=key}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Subscript (expr{value} (Name (str{id}{val=caches}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=DEFAULT_CACHE_ALIAS}))))))))))))
(root (FunctionDef (str{name}{val=__eq__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=other})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=caches}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=DEFAULT_CACHE_ALIAS}))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=other}))))))))
(root (FunctionDef (str{name}{val=__ne__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=other})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=caches}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=DEFAULT_CACHE_ALIAS}))))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Name (str{id}{val=other}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cache})))) (expr{value} (Call (expr{func} (Name (str{id}{val=DefaultCacheProxy})))))))
(root (FunctionDef (str{name}{val=close_caches}) (arguments{args} (arguments (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=cache}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=caches}))) (str{attr}{val=all}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=cache}))) (str{attr}{val=close})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=signals}))) (str{attr}{val=request_finished}))) (str{attr}{val=connect}))) (expr*{args} (expr (Name (str{id}{val=close_caches}))))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=time})))))
(root (Import (alias*{names} (alias (str{name}{val=warnings})))))
(root (ImportFrom (str{module}{val=django.core.exceptions}) (alias*{names} (alias (str{name}{val=ImproperlyConfigured})) (alias (str{name}{val=DjangoRuntimeWarning}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.module_loading}) (alias*{names} (alias (str{name}{val=import_string}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=InvalidCacheBackendError}) (expr*{bases} (expr (Name (str{id}{val=ImproperlyConfigured})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (ClassDef (str{name}{val=CacheKeyWarning}) (expr*{bases} (expr (Name (str{id}{val=DjangoRuntimeWarning})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=DEFAULT_TIMEOUT})))) (expr{value} (Call (expr{func} (Name (str{id}{val=object})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=MEMCACHE_MAX_KEY_LENGTH})))) (expr{value} (Num (int{n}{val=250})))))
(root (FunctionDef (str{name}{val=default_key_func}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=key_prefix}))) (expr (Name (str{id}{val=version})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=%s:%s:%s}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=key_prefix}))) (expr (Name (str{id}{val=version}))) (expr (Name (str{id}{val=key}))))))))))
(root (FunctionDef (str{name}{val=get_key_func}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=key_func})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=key_func}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=callable}))) (expr*{args} (expr (Name (str{id}{val=key_func})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=key_func})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=import_string}))) (expr*{args} (expr (Name (str{id}{val=key_func}))))))))
(root (Return (expr{value} (Name (str{id}{val=default_key_func})))))
(root (ClassDef (str{name}{val=BaseCache}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=params})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=timeout})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=params}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=params}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Num (int{n}{val=300})))))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=timeout}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=timeout})))) (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=timeout}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=ValueError}))) (expr (Name (str{id}{val=TypeError})))))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=timeout})))) (expr{value} (Num (int{n}{val=300})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=default_timeout})))) (expr{value} (Name (str{id}{val=timeout})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=options})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=params}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Dict (epsilon))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=max_entries})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=params}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Num (int{n}{val=300})))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_max_entries})))) (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=max_entries}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=ValueError}))) (expr (Name (str{id}{val=TypeError})))))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_max_entries})))) (expr{value} (Num (int{n}{val=300})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cull_frequency})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=params}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Num (int{n}{val=3})))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_cull_frequency})))) (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=cull_frequency}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=ValueError}))) (expr (Name (str{id}{val=TypeError})))))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_cull_frequency})))) (expr{value} (Num (int{n}{val=3})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=key_prefix})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=params}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=version})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=params}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Num (int{n}{val=1}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=key_func})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_key_func}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=params}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None})))))))))))
(root (FunctionDef (str{name}{val=get_backend_timeout}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=timeout})))) (expr*{defaults} (expr (Name (str{id}{val=DEFAULT_TIMEOUT})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=timeout}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=DEFAULT_TIMEOUT})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=timeout})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=default_timeout})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Name (str{id}{val=timeout}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=timeout})))) (expr{value} (Num (int{n}{val=-1})))))
(root (Return (expr{value} (IfExp (expr{test} (Compare (expr{left} (Name (str{id}{val=timeout}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr{body} (Name (str{id}{val=None}))) (expr{orelse} (BinOp (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=time}))) (str{attr}{val=time}))))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=timeout})))))))))
(root (FunctionDef (str{name}{val=make_key}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=version}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=version})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=version})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=new_key})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=key_func}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=key_prefix}))) (expr (Name (str{id}{val=version}))))))))
(root (Return (expr{value} (Name (str{id}{val=new_key})))))
(root (FunctionDef (str{name}{val=add}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=timeout}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Name (str{id}{val=DEFAULT_TIMEOUT}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Str (str{s}{val=         Set a value in the cache if the key does not already exist. If         timeout is given, that timeout will be used for the key; otherwise         the default cache timeout will be used.         Returns True if the value was stored, False otherwise.         })))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=NotImplementedError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=get}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=default}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=NotImplementedError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=set}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=timeout}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Name (str{id}{val=DEFAULT_TIMEOUT}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=NotImplementedError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=delete}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=NotImplementedError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=get_many}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=keys}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=d})))) (expr{value} (Dict (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=k}))) (expr{iter} (Name (str{id}{val=keys}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=val})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=k})))) (keyword*{keywords} (keyword (str{arg}{val=version}) (expr{value} (Name (str{id}{val=version})))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=val}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=d}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=k})))))))) (expr{value} (Name (str{id}{val=val})))))
(root (Return (expr{value} (Name (str{id}{val=d})))))
(root (FunctionDef (str{name}{val=has_key}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=key})))) (keyword*{keywords} (keyword (str{arg}{val=version}) (expr{value} (Name (str{id}{val=version}))))))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None}))))))))
(root (FunctionDef (str{name}{val=incr}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=delta}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Num (int{n}{val=1}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=key})))) (keyword*{keywords} (keyword (str{arg}{val=version}) (expr{value} (Name (str{id}{val=version})))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=key}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=new_value})))) (expr{value} (BinOp (expr{left} (Name (str{id}{val=value}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=delta})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=set}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=new_value})))) (keyword*{keywords} (keyword (str{arg}{val=version}) (expr{value} (Name (str{id}{val=version})))))))))
(root (Return (expr{value} (Name (str{id}{val=new_value})))))
(root (FunctionDef (str{name}{val=decr}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=delta}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Num (int{n}{val=1}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=incr}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (UnaryOp (unaryop{op} (USub)) (expr{operand} (Name (str{id}{val=delta})))))) (keyword*{keywords} (keyword (str{arg}{val=version}) (expr{value} (Name (str{id}{val=version})))))))))
(root (FunctionDef (str{name}{val=__contains__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=has_key}))) (expr*{args} (expr (Name (str{id}{val=key}))))))))
(root (FunctionDef (str{name}{val=set_many}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=data}))) (expr (Name (str{id}{val=timeout}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Name (str{id}{val=DEFAULT_TIMEOUT}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=data}))) (str{attr}{val=items}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=set}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value})))) (keyword*{keywords} (keyword (str{arg}{val=timeout}) (expr{value} (Name (str{id}{val=timeout})))) (keyword (str{arg}{val=version}) (expr{value} (Name (str{id}{val=version})))))))))
(root (FunctionDef (str{name}{val=delete_many}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=keys}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=key}))) (expr{iter} (Name (str{id}{val=keys}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=delete}))) (expr*{args} (expr (Name (str{id}{val=key})))) (keyword*{keywords} (keyword (str{arg}{val=version}) (expr{value} (Name (str{id}{val=version})))))))))
(root (FunctionDef (str{name}{val=clear}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=NotImplementedError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=validate_key}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=key})))))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Name (str{id}{val=MEMCACHE_MAX_KEY_LENGTH})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=warnings}))) (str{attr}{val=warn}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=Cache key will cause errors if used with memcached: %s (longer than %s)}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=MEMCACHE_MAX_KEY_LENGTH})))))))) (expr (Name (str{id}{val=CacheKeyWarning}))))))))
(root (For (expr{target} (Name (str{id}{val=char}))) (expr{iter} (Name (str{id}{val=key}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=ord}))) (expr*{args} (expr (Name (str{id}{val=char})))))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Num (int{n}{val=33})))))) (expr (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=ord}))) (expr*{args} (expr (Name (str{id}{val=char})))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=127}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=warnings}))) (str{attr}{val=warn}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=Cache key contains characters that will cause errors if used with memcached: %r}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=key}))))) (expr (Name (str{id}{val=CacheKeyWarning}))))))))
(root (FunctionDef (str{name}{val=incr_version}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=delta}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Num (int{n}{val=1}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=version}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=version})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=version})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=key})))) (keyword*{keywords} (keyword (str{arg}{val=version}) (expr{value} (Name (str{id}{val=version})))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=key}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=set}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value})))) (keyword*{keywords} (keyword (str{arg}{val=version}) (expr{value} (BinOp (expr{left} (Name (str{id}{val=version}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=delta})))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=delete}))) (expr*{args} (expr (Name (str{id}{val=key})))) (keyword*{keywords} (keyword (str{arg}{val=version}) (expr{value} (Name (str{id}{val=version})))))))))
(root (Return (expr{value} (BinOp (expr{left} (Name (str{id}{val=version}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=delta})))))))
(root (FunctionDef (str{name}{val=decr_version}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=delta}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Num (int{n}{val=1}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=incr_version}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (UnaryOp (unaryop{op} (USub)) (expr{operand} (Name (str{id}{val=delta}))))) (expr (Name (str{id}{val=version}))))))))
(root (FunctionDef (str{name}{val=close}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Str (str{s}{val=Close the cache connection})))))
(root (Pass))
(root (Import (alias*{names} (alias (str{name}{val=base64})))))
(root (ImportFrom (str{module}{val=datetime}) (alias*{names} (alias (str{name}{val=datetime}))) (int{level}{val=0})))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (ImportFrom (str{module}{val=django.utils.six.moves}) (alias*{names} (alias (str{name}{val=cPickle}) (str{asname}{val=pickle}))) (int{level}{val=0})))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ImportError}))) (stmt*{body} (stmt (Pass)))))))
(root (Import (alias*{names} (alias (str{name}{val=pickle})))))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.cache.backends.base}) (alias*{names} (alias (str{name}{val=BaseCache})) (alias (str{name}{val=DEFAULT_TIMEOUT}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.db}) (alias*{names} (alias (str{name}{val=connections})) (alias (str{name}{val=transaction})) (alias (str{name}{val=router})) (alias (str{name}{val=DatabaseError}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.db.backends.utils}) (alias*{names} (alias (str{name}{val=typecast_timestamp}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=timezone})) (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=force_bytes}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=Options}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=table})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=db_table})))) (expr{value} (Name (str{id}{val=table})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=app_label})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=model_name})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbose_name})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbose_name_plural})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=object_name})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=abstract})))) (expr{value} (Name (str{id}{val=False})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=managed})))) (expr{value} (Name (str{id}{val=True})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=proxy})))) (expr{value} (Name (str{id}{val=False})))))
(root (ClassDef (str{name}{val=BaseDatabaseCache}) (expr*{bases} (expr (Name (str{id}{val=BaseCache})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=table}))) (expr (Name (str{id}{val=params})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=BaseCache}))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=params}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_table})))) (expr{value} (Name (str{id}{val=table})))))
(root (ClassDef (str{name}{val=CacheEntry}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_meta})))) (expr{value} (Call (expr{func} (Name (str{id}{val=Options}))) (expr*{args} (expr (Name (str{id}{val=table}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=cache_model_class})))) (expr{value} (Name (str{id}{val=CacheEntry})))))
(root (ClassDef (str{name}{val=DatabaseCache}) (expr*{bases} (expr (Name (str{id}{val=BaseDatabaseCache})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=get}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=default}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=key})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=make_key}))) (expr*{args} (expr (Name (str{id}{val=key})))) (keyword*{keywords} (keyword (str{arg}{val=version}) (expr{value} (Name (str{id}{val=version})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=validate_key}))) (expr*{args} (expr (Name (str{id}{val=key}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=db})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=router}))) (str{attr}{val=db_for_read}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=cache_model_class}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=table})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=connections}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=db}))))))) (str{attr}{val=ops}))) (str{attr}{val=quote_name}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_table}))))))))
(root (With (expr{context_expr} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=connections}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=db}))))))) (str{attr}{val=cursor}))))) (expr{optional_vars} (Name (str{id}{val=cursor}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=cursor}))) (str{attr}{val=execute}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=SELECT cache_key, value, expires FROM %s WHERE cache_key = %%s}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=table}))))) (expr (List (expr*{elts} (expr (Name (str{id}{val=key})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=row})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=cursor}))) (str{attr}{val=fetchone})))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=row}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=default})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=now})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=timezone}))) (str{attr}{val=now})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=expires})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=row}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=2})))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=connections}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=db}))))))) (str{attr}{val=features}))) (str{attr}{val=needs_datetime_string_cast}))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=expires}))) (expr (Name (str{id}{val=datetime}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=expires})))) (expr{value} (Call (expr{func} (Name (str{id}{val=typecast_timestamp}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Name (str{id}{val=expires})))))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=expires}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Name (str{id}{val=now})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=db})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=router}))) (str{attr}{val=db_for_write}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=cache_model_class}))))))))
(root (With (expr{context_expr} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=connections}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=db}))))))) (str{attr}{val=cursor}))))) (expr{optional_vars} (Name (str{id}{val=cursor}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=cursor}))) (str{attr}{val=execute}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=DELETE FROM %s WHERE cache_key = %%s}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=table}))))) (expr (List (expr*{elts} (expr (Name (str{id}{val=key})))))))))))
(root (Return (expr{value} (Name (str{id}{val=default})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=connections}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=db}))))))) (str{attr}{val=ops}))) (str{attr}{val=process_clob}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=row}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=pickle}))) (str{attr}{val=loads}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=base64}))) (str{attr}{val=b64decode}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=force_bytes}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))))))))
(root (FunctionDef (str{name}{val=set}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=timeout}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Name (str{id}{val=DEFAULT_TIMEOUT}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=key})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=make_key}))) (expr*{args} (expr (Name (str{id}{val=key})))) (keyword*{keywords} (keyword (str{arg}{val=version}) (expr{value} (Name (str{id}{val=version})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=validate_key}))) (expr*{args} (expr (Name (str{id}{val=key}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_base_set}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=timeout}))))))))
(root (FunctionDef (str{name}{val=add}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=timeout}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Name (str{id}{val=DEFAULT_TIMEOUT}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=key})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=make_key}))) (expr*{args} (expr (Name (str{id}{val=key})))) (keyword*{keywords} (keyword (str{arg}{val=version}) (expr{value} (Name (str{id}{val=version})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=validate_key}))) (expr*{args} (expr (Name (str{id}{val=key}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_base_set}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=timeout}))))))))
(root (FunctionDef (str{name}{val=_base_set}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=mode}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=timeout})))) (expr*{defaults} (expr (Name (str{id}{val=DEFAULT_TIMEOUT})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=timeout})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get_backend_timeout}))) (expr*{args} (expr (Name (str{id}{val=timeout}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=db})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=router}))) (str{attr}{val=db_for_write}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=cache_model_class}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=table})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=connections}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=db}))))))) (str{attr}{val=ops}))) (str{attr}{val=quote_name}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_table}))))))))
(root (With (expr{context_expr} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=connections}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=db}))))))) (str{attr}{val=cursor}))))) (expr{optional_vars} (Name (str{id}{val=cursor}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=cursor}))) (str{attr}{val=execute}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=table}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=num})))) (expr{value} (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=cursor}))) (str{attr}{val=fetchone}))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=now})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=timezone}))) (str{attr}{val=now})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=now})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=now}))) (str{attr}{val=replace}))) (keyword*{keywords} (keyword (str{arg}{val=microsecond}) (expr{value} (Num (int{n}{val=0})))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=timeout}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=exp})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=max})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=USE_TZ}))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=exp})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=utcfromtimestamp}))) (expr*{args} (expr (Name (str{id}{val=timeout}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=exp})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=fromtimestamp}))) (expr*{args} (expr (Name (str{id}{val=timeout}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=exp})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=exp}))) (str{attr}{val=replace}))) (keyword*{keywords} (keyword (str{arg}{val=microsecond}) (expr{value} (Num (int{n}{val=0})))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=num}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_max_entries})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_cull}))) (expr*{args} (expr (Name (str{id}{val=db}))) (expr (Name (str{id}{val=cursor}))) (expr (Name (str{id}{val=now}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=pickled})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=pickle}))) (str{attr}{val=dumps}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Attribute (expr{value} (Name (str{id}{val=pickle}))) (str{attr}{val=HIGHEST_PROTOCOL}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=b64encoded})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=base64}))) (str{attr}{val=b64encode}))) (expr*{args} (expr (Name (str{id}{val=pickled}))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=PY3}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=b64encoded})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=b64encoded}))) (str{attr}{val=decode}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (With (expr{context_expr} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=transaction}))) (str{attr}{val=atomic}))) (keyword*{keywords} (keyword (str{arg}{val=using}) (expr{value} (Name (str{id}{val=db}))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=cursor}))) (str{attr}{val=execute}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=SELECT cache_key, expires FROM %s WHERE cache_key = %%s}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=table}))))) (expr (List (expr*{elts} (expr (Name (str{id}{val=key})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=cursor}))) (str{attr}{val=fetchone})))))))
(root (If (expr{test} (Name (str{id}{val=result}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=current_expires})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=result}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1})))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=connections}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=db}))))))) (str{attr}{val=features}))) (str{attr}{val=needs_datetime_string_cast}))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=current_expires}))) (expr (Name (str{id}{val=datetime}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=current_expires})))) (expr{value} (Call (expr{func} (Name (str{id}{val=typecast_timestamp}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Name (str{id}{val=current_expires})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=exp})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=connections}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=db}))))))) (str{attr}{val=ops}))) (str{attr}{val=value_to_db_datetime}))) (expr*{args} (expr (Name (str{id}{val=exp}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=result}))) (expr (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=mode}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:1_})))))) (expr (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=mode}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (expr (Compare (expr{left} (Name (str{id}{val=current_expires}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Name (str{id}{val=now}))))))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=cursor}))) (str{attr}{val=execute}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=UPDATE %s SET value = %%s, expires = %%s WHERE cache_key = %%s}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=table}))))) (expr (List (expr*{elts} (expr (Name (str{id}{val=b64encoded}))) (expr (Name (str{id}{val=exp}))) (expr (Name (str{id}{val=key})))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=cursor}))) (str{attr}{val=execute}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=INSERT INTO %s (cache_key, value, expires) VALUES (%%s, %%s, %%s)}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=table}))))) (expr (List (expr*{elts} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=b64encoded}))) (expr (Name (str{id}{val=exp})))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=DatabaseError}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=True})))))
(root (FunctionDef (str{name}{val=delete}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=key})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=make_key}))) (expr*{args} (expr (Name (str{id}{val=key})))) (keyword*{keywords} (keyword (str{arg}{val=version}) (expr{value} (Name (str{id}{val=version})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=validate_key}))) (expr*{args} (expr (Name (str{id}{val=key}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=db})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=router}))) (str{attr}{val=db_for_write}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=cache_model_class}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=table})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=connections}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=db}))))))) (str{attr}{val=ops}))) (str{attr}{val=quote_name}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_table}))))))))
(root (With (expr{context_expr} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=connections}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=db}))))))) (str{attr}{val=cursor}))))) (expr{optional_vars} (Name (str{id}{val=cursor}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=cursor}))) (str{attr}{val=execute}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=table}))))) (expr (List (expr*{elts} (expr (Name (str{id}{val=key})))))))))))
(root (FunctionDef (str{name}{val=has_key}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=key})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=make_key}))) (expr*{args} (expr (Name (str{id}{val=key})))) (keyword*{keywords} (keyword (str{arg}{val=version}) (expr{value} (Name (str{id}{val=version})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=validate_key}))) (expr*{args} (expr (Name (str{id}{val=key}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=db})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=router}))) (str{attr}{val=db_for_read}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=cache_model_class}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=table})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=connections}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=db}))))))) (str{attr}{val=ops}))) (str{attr}{val=quote_name}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_table}))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=USE_TZ}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=now})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=utcnow})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=now})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=now})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=now})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=now}))) (str{attr}{val=replace}))) (keyword*{keywords} (keyword (str{arg}{val=microsecond}) (expr{value} (Num (int{n}{val=0})))))))))
(root (With (expr{context_expr} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=connections}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=db}))))))) (str{attr}{val=cursor}))))) (expr{optional_vars} (Name (str{id}{val=cursor}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=cursor}))) (str{attr}{val=execute}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=SELECT cache_key FROM %s WHERE cache_key = %%s and expires > %%s}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=table}))))) (expr (List (expr*{elts} (expr (Name (str{id}{val=key}))) (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=connections}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=db}))))))) (str{attr}{val=ops}))) (str{attr}{val=value_to_db_datetime}))) (expr*{args} (expr (Name (str{id}{val=now}))))))))))))))
(root (Return (expr{value} (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=cursor}))) (str{attr}{val=fetchone}))))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None}))))))))
(root (FunctionDef (str{name}{val=_cull}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=db}))) (expr (Name (str{id}{val=cursor}))) (expr (Name (str{id}{val=now})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_cull_frequency}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=clear})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=now})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=now}))) (str{attr}{val=replace}))) (keyword*{keywords} (keyword (str{arg}{val=tzinfo}) (expr{value} (Name (str{id}{val=None})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=table})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=connections}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=db}))))))) (str{attr}{val=ops}))) (str{attr}{val=quote_name}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_table}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=cursor}))) (str{attr}{val=execute}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=table}))))) (expr (List (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=connections}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=db}))))))) (str{attr}{val=ops}))) (str{attr}{val=value_to_db_datetime}))) (expr*{args} (expr (Name (str{id}{val=now}))))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=cursor}))) (str{attr}{val=execute}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=table}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=num})))) (expr{value} (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=cursor}))) (str{attr}{val=fetchone}))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=num}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_max_entries})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cull_num})))) (expr{value} (BinOp (expr{left} (Name (str{id}{val=num}))) (operator{op} (FloorDiv)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_cull_frequency})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=cursor}))) (str{attr}{val=execute}))) (expr*{args} (expr (BinOp (expr{left} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=connections}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=db}))))))) (str{attr}{val=ops}))) (str{attr}{val=cache_key_culling_sql}))))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=table}))))) (expr (List (expr*{elts} (expr (Name (str{id}{val=cull_num})))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=cursor}))) (str{attr}{val=execute}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=DELETE FROM %s WHERE cache_key < %%s}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=table}))))) (expr (List (expr*{elts} (expr (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=cursor}))) (str{attr}{val=fetchone}))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))))))))
(root (FunctionDef (str{name}{val=clear}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=db})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=router}))) (str{attr}{val=db_for_write}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=cache_model_class}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=table})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=connections}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=db}))))))) (str{attr}{val=ops}))) (str{attr}{val=quote_name}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_table}))))))))
(root (With (expr{context_expr} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=connections}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=db}))))))) (str{attr}{val=cursor}))))) (expr{optional_vars} (Name (str{id}{val=cursor}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=cursor}))) (str{attr}{val=execute}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=DELETE FROM %s}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=table}))))))))))
(root (ClassDef (str{name}{val=CacheClass}) (expr*{bases} (expr (Name (str{id}{val=DatabaseCache})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (ImportFrom (str{module}{val=django.core.cache.backends.base}) (alias*{names} (alias (str{name}{val=BaseCache})) (alias (str{name}{val=DEFAULT_TIMEOUT}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=DummyCache}) (expr*{bases} (expr (Name (str{id}{val=BaseCache})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=host})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=BaseCache}))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=self})))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (FunctionDef (str{name}{val=add}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=timeout}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Name (str{id}{val=DEFAULT_TIMEOUT}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=key})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=make_key}))) (expr*{args} (expr (Name (str{id}{val=key})))) (keyword*{keywords} (keyword (str{arg}{val=version}) (expr{value} (Name (str{id}{val=version})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=validate_key}))) (expr*{args} (expr (Name (str{id}{val=key}))))))))
(root (Return (expr{value} (Name (str{id}{val=True})))))
(root (FunctionDef (str{name}{val=get}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=default}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=key})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=make_key}))) (expr*{args} (expr (Name (str{id}{val=key})))) (keyword*{keywords} (keyword (str{arg}{val=version}) (expr{value} (Name (str{id}{val=version})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=validate_key}))) (expr*{args} (expr (Name (str{id}{val=key}))))))))
(root (Return (expr{value} (Name (str{id}{val=default})))))
(root (FunctionDef (str{name}{val=set}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=timeout}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Name (str{id}{val=DEFAULT_TIMEOUT}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=key})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=make_key}))) (expr*{args} (expr (Name (str{id}{val=key})))) (keyword*{keywords} (keyword (str{arg}{val=version}) (expr{value} (Name (str{id}{val=version})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=validate_key}))) (expr*{args} (expr (Name (str{id}{val=key}))))))))
(root (FunctionDef (str{name}{val=delete}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=key})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=make_key}))) (expr*{args} (expr (Name (str{id}{val=key})))) (keyword*{keywords} (keyword (str{arg}{val=version}) (expr{value} (Name (str{id}{val=version})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=validate_key}))) (expr*{args} (expr (Name (str{id}{val=key}))))))))
(root (FunctionDef (str{name}{val=get_many}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=keys}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Dict (epsilon)))))
(root (FunctionDef (str{name}{val=has_key}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=key})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=make_key}))) (expr*{args} (expr (Name (str{id}{val=key})))) (keyword*{keywords} (keyword (str{arg}{val=version}) (expr{value} (Name (str{id}{val=version})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=validate_key}))) (expr*{args} (expr (Name (str{id}{val=key}))))))))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (FunctionDef (str{name}{val=set_many}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=data}))) (expr (Name (str{id}{val=timeout}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Name (str{id}{val=DEFAULT_TIMEOUT}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (FunctionDef (str{name}{val=delete_many}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=keys}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (FunctionDef (str{name}{val=clear}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (ClassDef (str{name}{val=CacheClass}) (expr*{bases} (expr (Name (str{id}{val=DummyCache})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (Import (alias*{names} (alias (str{name}{val=errno})))))
(root (Import (alias*{names} (alias (str{name}{val=glob})))))
(root (Import (alias*{names} (alias (str{name}{val=hashlib})))))
(root (Import (alias*{names} (alias (str{name}{val=io})))))
(root (Import (alias*{names} (alias (str{name}{val=os})))))
(root (Import (alias*{names} (alias (str{name}{val=random})))))
(root (Import (alias*{names} (alias (str{name}{val=tempfile})))))
(root (Import (alias*{names} (alias (str{name}{val=time})))))
(root (Import (alias*{names} (alias (str{name}{val=zlib})))))
(root (ImportFrom (str{module}{val=django.core.cache.backends.base}) (alias*{names} (alias (str{name}{val=BaseCache})) (alias (str{name}{val=DEFAULT_TIMEOUT}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.files.move}) (alias*{names} (alias (str{name}{val=file_move_safe}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=force_bytes}))) (int{level}{val=0})))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (ImportFrom (str{module}{val=django.utils.six.moves}) (alias*{names} (alias (str{name}{val=cPickle}) (str{asname}{val=pickle}))) (int{level}{val=0})))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ImportError}))) (stmt*{body} (stmt (Pass)))))))
(root (Import (alias*{names} (alias (str{name}{val=pickle})))))
(root (ClassDef (str{name}{val=FileBasedCache}) (expr*{bases} (expr (Name (str{id}{val=BaseCache})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cache_suffix})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=dir}))) (expr (Name (str{id}{val=params})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=FileBasedCache}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=params}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_dir})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=abspath}))) (expr*{args} (expr (Name (str{id}{val=dir}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_createdir})))))))
(root (FunctionDef (str{name}{val=add}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=timeout}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Name (str{id}{val=DEFAULT_TIMEOUT}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=has_key}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=version})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=set}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=timeout}))) (expr (Name (str{id}{val=version}))))))))
(root (Return (expr{value} (Name (str{id}{val=True})))))
(root (FunctionDef (str{name}{val=get}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=default}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=fname})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_key_to_file}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=version}))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=exists}))) (expr*{args} (expr (Name (str{id}{val=fname})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (With (expr{context_expr} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=io}))) (str{attr}{val=open}))) (expr*{args} (expr (Name (str{id}{val=fname}))) (expr (Str (str{s}{val=_STR:0_})))))) (expr{optional_vars} (Name (str{id}{val=f}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_is_expired}))) (expr*{args} (expr (Name (str{id}{val=f})))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=pickle}))) (str{attr}{val=loads}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=zlib}))) (str{attr}{val=decompress}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=read})))))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=IOError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=errno}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=errno}))) (str{attr}{val=ENOENT})))))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (Return (expr{value} (Name (str{id}{val=default})))))
(root (FunctionDef (str{name}{val=set}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=timeout}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Name (str{id}{val=DEFAULT_TIMEOUT}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_createdir})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=fname})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_key_to_file}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=version}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_cull})))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=fd}))) (expr (Name (str{id}{val=tmp_path}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=tempfile}))) (str{attr}{val=mkstemp}))) (keyword*{keywords} (keyword (str{arg}{val=dir}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_dir})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=renamed})))) (expr{value} (Name (str{id}{val=False})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (With (expr{context_expr} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=io}))) (str{attr}{val=open}))) (expr*{args} (expr (Name (str{id}{val=fd}))) (expr (Str (str{s}{val=wb})))))) (expr{optional_vars} (Name (str{id}{val=f}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=expiry})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get_backend_timeout}))) (expr*{args} (expr (Name (str{id}{val=timeout}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=write}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=pickle}))) (str{attr}{val=dumps}))) (expr*{args} (expr (Name (str{id}{val=expiry}))) (expr (Num (int{n}{val=-1})))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=write}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=zlib}))) (str{attr}{val=compress}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=pickle}))) (str{attr}{val=dumps}))) (expr*{args} (expr (Name (str{id}{val=value})))))) (expr (Num (int{n}{val=-1})))))))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=file_move_safe}))) (expr*{args} (expr (Name (str{id}{val=tmp_path}))) (expr (Name (str{id}{val=fname})))) (keyword*{keywords} (keyword (str{arg}{val=allow_overwrite}) (expr{value} (Name (str{id}{val=True})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=renamed})))) (expr{value} (Name (str{id}{val=True})))))
(root (TryFinally (stmt*{body} (stmt (Pass))) (stmt*{finalbody} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=renamed}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=remove}))) (expr*{args} (expr (Name (str{id}{val=tmp_path}))))))))
(root (FunctionDef (str{name}{val=delete}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_delete}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_key_to_file}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=version})))))))))))
(root (FunctionDef (str{name}{val=_delete}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=fname})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=fname}))) (str{attr}{val=startswith}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_dir})))))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=exists}))) (expr*{args} (expr (Name (str{id}{val=fname}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (epsilon)))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=remove}))) (expr*{args} (expr (Name (str{id}{val=fname}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=OSError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=errno}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=errno}))) (str{attr}{val=ENOENT})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (epsilon)))
(root (FunctionDef (str{name}{val=has_key}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=fname})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_key_to_file}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=version}))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=exists}))) (expr*{args} (expr (Name (str{id}{val=fname})))))) (stmt*{body} (stmt (Pass)))))
(root (With (expr{context_expr} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=io}))) (str{attr}{val=open}))) (expr*{args} (expr (Name (str{id}{val=fname}))) (expr (Str (str{s}{val=_STR:0_})))))) (expr{optional_vars} (Name (str{id}{val=f}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_is_expired}))) (expr*{args} (expr (Name (str{id}{val=f}))))))))))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (FunctionDef (str{name}{val=_cull}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=filelist})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_list_cache_files})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=num_entries})))) (expr{value} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=filelist}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=num_entries}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_max_entries})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (epsilon)))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_cull_frequency}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=clear})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=filelist})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=random}))) (str{attr}{val=sample}))) (expr*{args} (expr (Name (str{id}{val=filelist}))) (expr (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (BinOp (expr{left} (Name (str{id}{val=num_entries}))) (operator{op} (Div)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_cull_frequency})))))))))))))
(root (For (expr{target} (Name (str{id}{val=fname}))) (expr{iter} (Name (str{id}{val=filelist}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_delete}))) (expr*{args} (expr (Name (str{id}{val=fname}))))))))
(root (FunctionDef (str{name}{val=_createdir}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=exists}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_dir})))))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=makedirs}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_dir}))) (expr (Num (int{n}{val=448}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=OSError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=errno}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=errno}))) (str{attr}{val=EEXIST})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=EnvironmentError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=Cache directory '%s' does not exist and could not be created'}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_dir}))))))))))
(root (FunctionDef (str{name}{val=_key_to_file}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=key})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=make_key}))) (expr*{args} (expr (Name (str{id}{val=key})))) (keyword*{keywords} (keyword (str{arg}{val=version}) (expr{value} (Name (str{id}{val=version})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=validate_key}))) (expr*{args} (expr (Name (str{id}{val=key}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_dir}))) (expr (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=}))) (str{attr}{val=join}))) (expr*{args} (expr (List (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=hashlib}))) (str{attr}{val=md5}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=force_bytes}))) (expr*{args} (expr (Name (str{id}{val=key}))))))))) (str{attr}{val=hexdigest}))))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=cache_suffix}))))))))))))))
(root (FunctionDef (str{name}{val=clear}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=exists}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_dir})))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (epsilon)))
(root (For (expr{target} (Name (str{id}{val=fname}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_list_cache_files}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_delete}))) (expr*{args} (expr (Name (str{id}{val=fname}))))))))
(root (FunctionDef (str{name}{val=_is_expired}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=f})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=exp})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=pickle}))) (str{attr}{val=load}))) (expr*{args} (expr (Name (str{id}{val=f}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=exp}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Compare (expr{left} (Name (str{id}{val=exp}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=time}))) (str{attr}{val=time}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=close})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_delete}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=name}))))))))
(root (Return (expr{value} (Name (str{id}{val=True})))))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (FunctionDef (str{name}{val=_list_cache_files}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=exists}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_dir})))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=filelist})))) (expr{value} (ListComp (expr{elt} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_dir}))) (expr (Name (str{id}{val=fname})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=fname}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=glob}))) (str{attr}{val=glob1}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_dir}))) (expr (BinOp (expr{left} (Str (str{s}{val=*%s}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=cache_suffix}))))))))))))))
(root (Return (expr{value} (Name (str{id}{val=filelist})))))
(root (ClassDef (str{name}{val=CacheClass}) (expr*{bases} (expr (Name (str{id}{val=FileBasedCache})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (Import (alias*{names} (alias (str{name}{val=time})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (ImportFrom (str{module}{val=django.utils.six.moves}) (alias*{names} (alias (str{name}{val=cPickle}) (str{asname}{val=pickle}))) (int{level}{val=0})))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ImportError}))) (stmt*{body} (stmt (Pass)))))))
(root (Import (alias*{names} (alias (str{name}{val=pickle})))))
(root (ImportFrom (str{module}{val=django.core.cache.backends.base}) (alias*{names} (alias (str{name}{val=BaseCache})) (alias (str{name}{val=DEFAULT_TIMEOUT}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.synch}) (alias*{names} (alias (str{name}{val=RWLock}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_caches})))) (expr{value} (Dict (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_expire_info})))) (expr{value} (Dict (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_locks})))) (expr{value} (Dict (epsilon)))))
(root (ClassDef (str{name}{val=LocMemCache}) (expr*{bases} (expr (Name (str{id}{val=BaseCache})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=params})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=BaseCache}))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=params}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_cache})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=_caches}))) (str{attr}{val=setdefault}))) (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Dict (epsilon))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_expire_info})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=_expire_info}))) (str{attr}{val=setdefault}))) (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Dict (epsilon))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_lock})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=_locks}))) (str{attr}{val=setdefault}))) (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Call (expr{func} (Name (str{id}{val=RWLock}))))))))))
(root (FunctionDef (str{name}{val=add}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=timeout}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Name (str{id}{val=DEFAULT_TIMEOUT}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=key})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=make_key}))) (expr*{args} (expr (Name (str{id}{val=key})))) (keyword*{keywords} (keyword (str{arg}{val=version}) (expr{value} (Name (str{id}{val=version})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=validate_key}))) (expr*{args} (expr (Name (str{id}{val=key}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=pickled})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=pickle}))) (str{attr}{val=dumps}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Attribute (expr{value} (Name (str{id}{val=pickle}))) (str{attr}{val=HIGHEST_PROTOCOL}))))))))
(root (With (expr{context_expr} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_lock}))) (str{attr}{val=writer}))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_has_expired}))) (expr*{args} (expr (Name (str{id}{val=key})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_set}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=pickled}))) (expr (Name (str{id}{val=timeout}))))))))
(root (Return (expr{value} (Name (str{id}{val=True})))))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (FunctionDef (str{name}{val=get}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=default}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=key})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=make_key}))) (expr*{args} (expr (Name (str{id}{val=key})))) (keyword*{keywords} (keyword (str{arg}{val=version}) (expr{value} (Name (str{id}{val=version})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=validate_key}))) (expr*{args} (expr (Name (str{id}{val=key}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=pickled})))) (expr{value} (Name (str{id}{val=None})))))
(root (With (expr{context_expr} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_lock}))) (str{attr}{val=reader}))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_has_expired}))) (expr*{args} (expr (Name (str{id}{val=key})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=pickled})))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_cache}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key})))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=pickled}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=pickle}))) (str{attr}{val=loads}))) (expr*{args} (expr (Name (str{id}{val=pickled}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Attribute (expr{value} (Name (str{id}{val=pickle}))) (str{attr}{val=PickleError}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Name (str{id}{val=default})))))
(root (With (expr{context_expr} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_lock}))) (str{attr}{val=writer}))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Delete (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_cache}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key}))))))))))
(root (Delete (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_expire_info}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key}))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=KeyError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (Return (expr{value} (Name (str{id}{val=default})))))
(root (FunctionDef (str{name}{val=_set}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=timeout})))) (expr*{defaults} (expr (Name (str{id}{val=DEFAULT_TIMEOUT})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_cache})))))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_max_entries})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_cull})))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_cache}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key})))))))) (expr{value} (Name (str{id}{val=value})))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_expire_info}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key})))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get_backend_timeout}))) (expr*{args} (expr (Name (str{id}{val=timeout}))))))))
(root (FunctionDef (str{name}{val=set}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=timeout}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Name (str{id}{val=DEFAULT_TIMEOUT}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=key})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=make_key}))) (expr*{args} (expr (Name (str{id}{val=key})))) (keyword*{keywords} (keyword (str{arg}{val=version}) (expr{value} (Name (str{id}{val=version})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=validate_key}))) (expr*{args} (expr (Name (str{id}{val=key}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=pickled})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=pickle}))) (str{attr}{val=dumps}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Attribute (expr{value} (Name (str{id}{val=pickle}))) (str{attr}{val=HIGHEST_PROTOCOL}))))))))
(root (With (expr{context_expr} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_lock}))) (str{attr}{val=writer}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_set}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=pickled}))) (expr (Name (str{id}{val=timeout}))))))))
(root (FunctionDef (str{name}{val=incr}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=delta}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Num (int{n}{val=1}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=key})))) (keyword*{keywords} (keyword (str{arg}{val=version}) (expr{value} (Name (str{id}{val=version})))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=key}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=new_value})))) (expr{value} (BinOp (expr{left} (Name (str{id}{val=value}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=delta})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=key})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=make_key}))) (expr*{args} (expr (Name (str{id}{val=key})))) (keyword*{keywords} (keyword (str{arg}{val=version}) (expr{value} (Name (str{id}{val=version})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=pickled})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=pickle}))) (str{attr}{val=dumps}))) (expr*{args} (expr (Name (str{id}{val=new_value}))) (expr (Attribute (expr{value} (Name (str{id}{val=pickle}))) (str{attr}{val=HIGHEST_PROTOCOL}))))))))
(root (With (expr{context_expr} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_lock}))) (str{attr}{val=writer}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_cache}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key})))))))) (expr{value} (Name (str{id}{val=pickled})))))
(root (Return (expr{value} (Name (str{id}{val=new_value})))))
(root (FunctionDef (str{name}{val=has_key}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=key})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=make_key}))) (expr*{args} (expr (Name (str{id}{val=key})))) (keyword*{keywords} (keyword (str{arg}{val=version}) (expr{value} (Name (str{id}{val=version})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=validate_key}))) (expr*{args} (expr (Name (str{id}{val=key}))))))))
(root (With (expr{context_expr} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_lock}))) (str{attr}{val=reader}))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_has_expired}))) (expr*{args} (expr (Name (str{id}{val=key})))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=True})))))
(root (With (expr{context_expr} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_lock}))) (str{attr}{val=writer}))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Delete (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_cache}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key}))))))))))
(root (Delete (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_expire_info}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key}))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=KeyError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (FunctionDef (str{name}{val=_has_expired}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=exp})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_expire_info}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (Num (int{n}{val=-1}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=exp}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Compare (expr{left} (Name (str{id}{val=exp}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=time}))) (str{attr}{val=time}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (Return (expr{value} (Name (str{id}{val=True})))))
(root (FunctionDef (str{name}{val=_cull}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_cull_frequency}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=clear})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=doomed})))) (expr{value} (ListComp (expr{elt} (Name (str{id}{val=k}))) (comprehension*{generators} (comprehension (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=i}))) (expr (Name (str{id}{val=k})))))) (expr{iter} (Call (expr{func} (Name (str{id}{val=enumerate}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_cache})))))) (expr*{ifs} (expr (Compare (expr{left} (BinOp (expr{left} (Name (str{id}{val=i}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_cull_frequency}))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=0})))))))))))))
(root (For (expr{target} (Name (str{id}{val=k}))) (expr{iter} (Name (str{id}{val=doomed}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_delete}))) (expr*{args} (expr (Name (str{id}{val=k}))))))))
(root (FunctionDef (str{name}{val=_delete}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Delete (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_cache}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key}))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=KeyError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Delete (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_expire_info}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key}))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=KeyError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (FunctionDef (str{name}{val=delete}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=key})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=make_key}))) (expr*{args} (expr (Name (str{id}{val=key})))) (keyword*{keywords} (keyword (str{arg}{val=version}) (expr{value} (Name (str{id}{val=version})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=validate_key}))) (expr*{args} (expr (Name (str{id}{val=key}))))))))
(root (With (expr{context_expr} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_lock}))) (str{attr}{val=writer}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_delete}))) (expr*{args} (expr (Name (str{id}{val=key}))))))))
(root (FunctionDef (str{name}{val=clear}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_cache}))) (str{attr}{val=clear})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_expire_info}))) (str{attr}{val=clear})))))))
(root (ClassDef (str{name}{val=CacheClass}) (expr*{bases} (expr (Name (str{id}{val=LocMemCache})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (Import (alias*{names} (alias (str{name}{val=time})))))
(root (Import (alias*{names} (alias (str{name}{val=pickle})))))
(root (ImportFrom (str{module}{val=django.core.cache.backends.base}) (alias*{names} (alias (str{name}{val=BaseCache})) (alias (str{name}{val=DEFAULT_TIMEOUT}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.deprecation}) (alias*{names} (alias (str{name}{val=RenameMethodsBase})) (alias (str{name}{val=RemovedInDjango19Warning}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=force_str}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.functional}) (alias*{names} (alias (str{name}{val=cached_property}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=BaseMemcachedCacheMethods}) (expr*{bases} (expr (Name (str{id}{val=RenameMethodsBase})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=renamed_methods})))) (expr{value} (Tuple (expr*{elts} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Name (str{id}{val=RemovedInDjango19Warning})))))))))))
(root (ClassDef (str{name}{val=BaseMemcachedCache}) (expr*{bases} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=with_metaclass}))) (expr*{args} (expr (Name (str{id}{val=BaseMemcachedCacheMethods}))) (expr (Name (str{id}{val=BaseCache}))))))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=server}))) (expr (Name (str{id}{val=params}))) (expr (Name (str{id}{val=library}))) (expr (Name (str{id}{val=value_not_found_exception})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=BaseMemcachedCache}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=params}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=server}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=string_types})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_servers})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=server}))) (str{attr}{val=split}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_servers})))) (expr{value} (Name (str{id}{val=server})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=LibraryValueNotFoundException})))) (expr{value} (Name (str{id}{val=value_not_found_exception})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_lib})))) (expr{value} (Name (str{id}{val=library})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_options})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=params}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=_cache}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None})))))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_client})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_lib}))) (str{attr}{val=Client}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_servers}))))))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_client})))))
(root (FunctionDef (str{name}{val=get_backend_timeout}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=timeout})))) (expr*{defaults} (expr (Name (str{id}{val=DEFAULT_TIMEOUT})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=timeout}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=DEFAULT_TIMEOUT})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=timeout})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=default_timeout})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=timeout}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Num (int{n}{val=0})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=timeout})))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=timeout})))) (expr{value} (Num (int{n}{val=-1})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=timeout}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=2592000})))))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=timeout}))) (operator{op} (Add)) (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=time}))) (str{attr}{val=time}))))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=timeout}))))))))
(root (FunctionDef (str{name}{val=make_key}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=force_str}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=BaseMemcachedCache}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=make_key}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=version})))))))))))
(root (FunctionDef (str{name}{val=add}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=timeout}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Name (str{id}{val=DEFAULT_TIMEOUT}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=key})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=make_key}))) (expr*{args} (expr (Name (str{id}{val=key})))) (keyword*{keywords} (keyword (str{arg}{val=version}) (expr{value} (Name (str{id}{val=version})))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_cache}))) (str{attr}{val=add}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get_backend_timeout}))) (expr*{args} (expr (Name (str{id}{val=timeout})))))))))))
(root (FunctionDef (str{name}{val=get}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=default}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=key})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=make_key}))) (expr*{args} (expr (Name (str{id}{val=key})))) (keyword*{keywords} (keyword (str{arg}{val=version}) (expr{value} (Name (str{id}{val=version})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=val})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_cache}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=key}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=val}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=default})))))
(root (Return (expr{value} (Name (str{id}{val=val})))))
(root (FunctionDef (str{name}{val=set}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=timeout}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Name (str{id}{val=DEFAULT_TIMEOUT}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=key})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=make_key}))) (expr*{args} (expr (Name (str{id}{val=key})))) (keyword*{keywords} (keyword (str{arg}{val=version}) (expr{value} (Name (str{id}{val=version})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_cache}))) (str{attr}{val=set}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get_backend_timeout}))) (expr*{args} (expr (Name (str{id}{val=timeout})))))))))))
(root (FunctionDef (str{name}{val=delete}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=key})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=make_key}))) (expr*{args} (expr (Name (str{id}{val=key})))) (keyword*{keywords} (keyword (str{arg}{val=version}) (expr{value} (Name (str{id}{val=version})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_cache}))) (str{attr}{val=delete}))) (expr*{args} (expr (Name (str{id}{val=key}))))))))
(root (FunctionDef (str{name}{val=get_many}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=keys}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=new_keys})))) (expr{value} (ListComp (expr{elt} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=make_key}))) (expr*{args} (expr (Name (str{id}{val=x})))) (keyword*{keywords} (keyword (str{arg}{val=version}) (expr{value} (Name (str{id}{val=version}))))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=x}))) (expr{iter} (Name (str{id}{val=keys})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ret})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_cache}))) (str{attr}{val=get_multi}))) (expr*{args} (expr (Name (str{id}{val=new_keys}))))))))
(root (If (expr{test} (Name (str{id}{val=ret}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_})))) (expr{value} (Dict (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=m})))) (expr{value} (Call (expr{func} (Name (str{id}{val=dict}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=zip}))) (expr*{args} (expr (Name (str{id}{val=new_keys}))) (expr (Name (str{id}{val=keys})))))))))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Name (str{id}{val=v})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=ret}))) (str{attr}{val=items}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=_}))) (slice{slice} (Index (expr{value} (Subscript (expr{value} (Name (str{id}{val=m}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=k})))))))))))) (expr{value} (Name (str{id}{val=v})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ret})))) (expr{value} (Name (str{id}{val=_})))))
(root (Return (expr{value} (Name (str{id}{val=ret})))))
(root (FunctionDef (str{name}{val=close}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_cache}))) (str{attr}{val=disconnect_all})))))))
(root (FunctionDef (str{name}{val=incr}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=delta}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Num (int{n}{val=1}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=key})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=make_key}))) (expr*{args} (expr (Name (str{id}{val=key})))) (keyword*{keywords} (keyword (str{arg}{val=version}) (expr{value} (Name (str{id}{val=version})))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=delta}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_cache}))) (str{attr}{val=decr}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (UnaryOp (unaryop{op} (USub)) (expr{operand} (Name (str{id}{val=delta}))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=val})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_cache}))) (str{attr}{val=incr}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=delta}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=LibraryValueNotFoundException}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=val})))) (expr{value} (Name (str{id}{val=None})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=val}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=key}))))))))))
(root (Return (expr{value} (Name (str{id}{val=val})))))
(root (FunctionDef (str{name}{val=decr}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=delta}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Num (int{n}{val=1}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=key})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=make_key}))) (expr*{args} (expr (Name (str{id}{val=key})))) (keyword*{keywords} (keyword (str{arg}{val=version}) (expr{value} (Name (str{id}{val=version})))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=delta}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_cache}))) (str{attr}{val=incr}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (UnaryOp (unaryop{op} (USub)) (expr{operand} (Name (str{id}{val=delta}))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=val})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_cache}))) (str{attr}{val=decr}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=delta}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=LibraryValueNotFoundException}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=val})))) (expr{value} (Name (str{id}{val=None})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=val}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=key}))))))))))
(root (Return (expr{value} (Name (str{id}{val=val})))))
(root (FunctionDef (str{name}{val=set_many}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=data}))) (expr (Name (str{id}{val=timeout}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Name (str{id}{val=DEFAULT_TIMEOUT}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=safe_data})))) (expr{value} (Dict (epsilon)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=data}))) (str{attr}{val=items}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=key})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=make_key}))) (expr*{args} (expr (Name (str{id}{val=key})))) (keyword*{keywords} (keyword (str{arg}{val=version}) (expr{value} (Name (str{id}{val=version})))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=safe_data}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key})))))))) (expr{value} (Name (str{id}{val=value})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_cache}))) (str{attr}{val=set_multi}))) (expr*{args} (expr (Name (str{id}{val=safe_data}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get_backend_timeout}))) (expr*{args} (expr (Name (str{id}{val=timeout})))))))))))
(root (FunctionDef (str{name}{val=delete_many}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=keys}))) (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=l})))) (expr{value} (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=x})))))) (expr{body} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=make_key}))) (expr*{args} (expr (Name (str{id}{val=x})))) (keyword*{keywords} (keyword (str{arg}{val=version}) (expr{value} (Name (str{id}{val=version})))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_cache}))) (str{attr}{val=delete_multi}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=map}))) (expr*{args} (expr (Name (str{id}{val=l}))) (expr (Name (str{id}{val=keys})))))))))))
(root (FunctionDef (str{name}{val=clear}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_cache}))) (str{attr}{val=flush_all})))))))
(root (ClassDef (str{name}{val=MemcachedCache}) (expr*{bases} (expr (Name (str{id}{val=BaseMemcachedCache})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=server}))) (expr (Name (str{id}{val=params})))))) (stmt*{body} (stmt (Pass)))))
(root (Import (alias*{names} (alias (str{name}{val=memcache})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=MemcachedCache}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=server}))) (expr (Name (str{id}{val=params})))) (keyword*{keywords} (keyword (str{arg}{val=library}) (expr{value} (Name (str{id}{val=memcache})))) (keyword (str{arg}{val=value_not_found_exception}) (expr{value} (Name (str{id}{val=ValueError})))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=_cache}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None})))))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_client})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_lib}))) (str{attr}{val=Client}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_servers})))) (keyword*{keywords} (keyword (str{arg}{val=pickleProtocol}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=pickle}))) (str{attr}{val=HIGHEST_PROTOCOL})))))))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_client})))))
(root (ClassDef (str{name}{val=PyLibMCCache}) (expr*{bases} (expr (Name (str{id}{val=BaseMemcachedCache})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=server}))) (expr (Name (str{id}{val=params})))))) (stmt*{body} (stmt (Pass)))))
(root (Import (alias*{names} (alias (str{name}{val=pylibmc})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=PyLibMCCache}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=server}))) (expr (Name (str{id}{val=params})))) (keyword*{keywords} (keyword (str{arg}{val=library}) (expr{value} (Name (str{id}{val=pylibmc})))) (keyword (str{arg}{val=value_not_found_exception}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=pylibmc}))) (str{attr}{val=NotFound})))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=cached_property}))))))
(root (FunctionDef (str{name}{val=_cache}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=client})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_lib}))) (str{attr}{val=Client}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_servers}))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_options}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=client}))) (str{attr}{val=behaviors})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_options})))))
(root (Return (expr{value} (Name (str{id}{val=client})))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=hashlib})))))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=force_bytes}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.http}) (alias*{names} (alias (str{name}{val=urlquote}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=TEMPLATE_FRAGMENT_KEY_TEMPLATE})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (FunctionDef (str{name}{val=make_template_fragment_key}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=fragment_name}))) (expr (Name (str{id}{val=vary_on})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=vary_on}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=vary_on})))) (expr{value} (Tuple (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=key})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=_STR:0_}))) (str{attr}{val=join}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Call (expr{func} (Name (str{id}{val=urlquote}))) (expr*{args} (expr (Name (str{id}{val=var})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=var}))) (expr{iter} (Name (str{id}{val=vary_on}))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=args})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=hashlib}))) (str{attr}{val=md5}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=force_bytes}))) (expr*{args} (expr (Name (str{id}{val=key})))))))))))
(root (Return (expr{value} (BinOp (expr{left} (Name (str{id}{val=TEMPLATE_FRAGMENT_KEY_TEMPLATE}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=fragment_name}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=args}))) (str{attr}{val=hexdigest}))))))))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=messages}) (alias*{names} (alias (str{name}{val=CheckMessage})) (alias (str{name}{val=Debug})) (alias (str{name}{val=Info})) (alias (str{name}{val=Warning})) (alias (str{name}{val=Error})) (alias (str{name}{val=Critical})) (alias (str{name}{val=DEBUG})) (alias (str{name}{val=INFO})) (alias (str{name}{val=WARNING})) (alias (str{name}{val=ERROR})) (alias (str{name}{val=CRITICAL}))) (int{level}{val=1})))
(root (ImportFrom (str{module}{val=registry}) (alias*{names} (alias (str{name}{val=register})) (alias (str{name}{val=run_checks})) (alias (str{name}{val=tag_exists})) (alias (str{name}{val=Tags}))) (int{level}{val=1})))
(root (Import (alias*{names} (alias (str{name}{val=django.core.checks.compatibility.django_1_6_0})))))
(root (Import (alias*{names} (alias (str{name}{val=django.core.checks.compatibility.django_1_7_0})))))
(root (Import (alias*{names} (alias (str{name}{val=django.core.checks.model_checks})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__all__})))) (expr{value} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=_STR:3_}))) (expr (Str (str{s}{val=_STR:4_}))) (expr (Str (str{s}{val=_STR:5_}))) (expr (Str (str{s}{val=DEBUG}))) (expr (Str (str{s}{val=INFO}))) (expr (Str (str{s}{val=WARNING}))) (expr (Str (str{s}{val=ERROR}))) (expr (Str (str{s}{val=CRITICAL}))) (expr (Str (str{s}{val=register}))) (expr (Str (str{s}{val=run_checks}))) (expr (Str (str{s}{val=tag_exists}))) (expr (Str (str{s}{val=Tags}))))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.apps}) (alias*{names} (alias (str{name}{val=apps}))) (int{level}{val=0})))
(root (ImportFrom (alias*{names} (alias (str{name}{val=Warning})) (alias (str{name}{val=register})) (alias (str{name}{val=Tags}))) (int{level}{val=2})))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Name (str{id}{val=register}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=Tags}))) (str{attr}{val=compatibility})))))))))
(root (FunctionDef (str{name}{val=check_1_6_compatibility}) (arguments{args} (arguments (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=errors})))) (expr{value} (List (epsilon)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=errors}))) (str{attr}{val=extend}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=_check_test_runner}))) (expr{kwargs} (Name (str{id}{val=kwargs}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=errors}))) (str{attr}{val=extend}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=_check_boolean_field_default_value}))) (expr{kwargs} (Name (str{id}{val=kwargs}))))))))))
(root (Return (expr{value} (Name (str{id}{val=errors})))))
(root (FunctionDef (str{name}{val=_check_test_runner}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=app_configs})))) (str{kwarg}{val=kwargs}) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=weight})))) (expr{value} (Num (int{n}{val=0})))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=is_overridden}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=SITE_ID})))))
(root (AugAssign (expr{target} (Name (str{id}{val=weight}))) (operator{op} (Add)) (expr{value} (Num (int{n}{val=2})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=AttributeError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=BASE_DIR})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=AttributeError}))) (stmt*{body} (stmt (Pass)))))))
(root (AugAssign (expr{target} (Name (str{id}{val=weight}))) (operator{op} (Add)) (expr{value} (Num (int{n}{val=2})))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=is_overridden}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=weight}))) (operator{op} (Add)) (expr{value} (Num (int{n}{val=2})))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=is_overridden}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=weight}))) (operator{op} (Add)) (expr{value} (Num (int{n}{val=2})))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=is_overridden}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=weight}))) (operator{op} (Add)) (expr{value} (Num (int{n}{val=1})))))
(root (If (expr{test} (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Call (expr{func} (Name (str{id}{val=set}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=MIDDLEWARE_CLASSES}))))))))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=weight}))) (operator{op} (Add)) (expr{value} (Num (int{n}{val=1})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=weight}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Num (int{n}{val=6})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (List (expr*{elts} (expr (Call (expr{func} (Name (str{id}{val=Warning}))) (expr*{args} (expr (Str (str{s}{val=Some project unittests may not execute as expected.})))) (keyword*{keywords} (keyword (str{arg}{val=hint}) (expr{value} (Str (str{s}{val=Django 1.6 introduced a new default test runner. It looks like this project was generated using Django 1.5 or earlier. You should ensure your tests are all running & behaving as expected. See https://docs.djangoproject.com/en/dev/releases/1.6/#new-test-runner for more information.})))) (keyword (str{arg}{val=obj}) (expr{value} (Name (str{id}{val=None})))) (keyword (str{arg}{val=id}) (expr{value} (Str (str{s}{val=1_6.W001}))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (List (epsilon)))))
(root (FunctionDef (str{name}{val=_check_boolean_field_default_value}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=app_configs})))) (str{kwarg}{val=kwargs}) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=django.db}) (alias*{names} (alias (str{name}{val=models}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=problem_fields})))) (expr{value} (ListComp (expr{elt} (Name (str{id}{val=field}))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=model}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=apps}))) (str{attr}{val=get_models}))) (expr{kwargs} (Name (str{id}{val=kwargs}))))) (expr*{ifs} (expr (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=app_configs}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Compare (expr{left} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=model}))) (str{attr}{val=_meta}))) (str{attr}{val=app_config}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=app_configs}))))))))))) (comprehension (expr{target} (Name (str{id}{val=field}))) (expr{iter} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=model}))) (str{attr}{val=_meta}))) (str{attr}{val=local_fields}))) (expr*{ifs} (expr (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=field}))) (expr (Attribute (expr{value} (Name (str{id}{val=models}))) (str{attr}{val=BooleanField})))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=has_default})))))))))))))))))
(root (Return (expr{value} (ListComp (expr{elt} (Call (expr{func} (Name (str{id}{val=Warning}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=hint}) (expr{value} (Str (str{s}{val=Django 1.6 changed the default value of BooleanField from False to None. See https://docs.djangoproject.com/en/1.6/ref/models/fields/#booleanfield for more information.})))) (keyword (str{arg}{val=obj}) (expr{value} (Name (str{id}{val=field})))) (keyword (str{arg}{val=id}) (expr{value} (Str (str{s}{val=1_6.W002}))))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=field}))) (expr{iter} (Name (str{id}{val=problem_fields})))))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (ImportFrom (alias*{names} (alias (str{name}{val=Warning})) (alias (str{name}{val=register})) (alias (str{name}{val=Tags}))) (int{level}{val=2})))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Name (str{id}{val=register}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=Tags}))) (str{attr}{val=compatibility})))))))))
(root (FunctionDef (str{name}{val=check_1_7_compatibility}) (arguments{args} (arguments (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=errors})))) (expr{value} (List (epsilon)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=errors}))) (str{attr}{val=extend}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=_check_middleware_classes}))) (expr{kwargs} (Name (str{id}{val=kwargs}))))))))))
(root (Return (expr{value} (Name (str{id}{val=errors})))))
(root (FunctionDef (str{name}{val=_check_middleware_classes}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=app_configs})))) (str{kwarg}{val=kwargs}) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=is_overridden}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (List (expr*{elts} (expr (Call (expr{func} (Name (str{id}{val=Warning}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=hint}) (expr{value} (Str (str{s}{val=Django 1.7 changed the global defaults for the MIDDLEWARE_CLASSES. django.contrib.sessions.middleware.SessionMiddleware, django.contrib.auth.middleware.AuthenticationMiddleware, and django.contrib.messages.middleware.MessageMiddleware were removed from the defaults. If your project needs these middleware then you should configure this setting.})))) (keyword (str{arg}{val=obj}) (expr{value} (Name (str{id}{val=None})))) (keyword (str{arg}{val=id}) (expr{value} (Str (str{s}{val=1_7.W001}))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (List (epsilon)))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=python_2_unicode_compatible})) (alias (str{name}{val=force_str}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=DEBUG})))) (expr{value} (Num (int{n}{val=10})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=INFO})))) (expr{value} (Num (int{n}{val=20})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=WARNING})))) (expr{value} (Num (int{n}{val=30})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ERROR})))) (expr{value} (Num (int{n}{val=40})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=CRITICAL})))) (expr{value} (Num (int{n}{val=50})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=python_2_unicode_compatible}))))))
(root (ClassDef (str{name}{val=CheckMessage}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=level}))) (expr (Name (str{id}{val=msg}))) (expr (Name (str{id}{val=hint}))) (expr (Name (str{id}{val=obj}))) (expr (Name (str{id}{val=id})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assert (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=level}))) (expr (Name (str{id}{val=int})))))) (expr{msg} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=level})))) (expr{value} (Name (str{id}{val=level})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=msg})))) (expr{value} (Name (str{id}{val=msg})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=hint})))) (expr{value} (Name (str{id}{val=hint})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=obj})))) (expr{value} (Name (str{id}{val=obj})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=id})))) (expr{value} (Name (str{id}{val=id})))))
(root (FunctionDef (str{name}{val=__eq__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=other})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=all}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=attr})))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=other}))) (expr (Name (str{id}{val=attr}))))))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=attr}))) (expr{iter} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=_STR:3_}))) (expr (Str (str{s}{val=_STR:4_})))))))))))))))
(root (FunctionDef (str{name}{val=__ne__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=other})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Compare (expr{left} (Name (str{id}{val=self}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=other}))))))))))
(root (FunctionDef (str{name}{val=__str__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=django.db}) (alias*{names} (alias (str{name}{val=models}))) (int{level}{val=0})))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=obj}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=obj})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=obj}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=models}))) (str{attr}{val=base}))) (str{attr}{val=ModelBase})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=model})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=obj})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=app})))) (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=model}))) (str{attr}{val=_meta}))) (str{attr}{val=app_label})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=obj})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=%s.%s}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=app}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=model}))) (str{attr}{val=_meta}))) (str{attr}{val=object_name}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=obj})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_str}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=obj}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=id})))) (expr{value} (IfExp (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=id}))) (expr{body} (BinOp (expr{left} (Str (str{s}{val=(%s) }))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=id}))))) (expr{orelse} (Str (str{s}{val=})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=hint})))) (expr{value} (IfExp (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=hint}))) (expr{body} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=hint}))))) (expr{orelse} (Str (str{s}{val=})))))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=obj}))) (expr (Name (str{id}{val=id}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=msg}))) (expr (Name (str{id}{val=hint}))))))))))
(root (FunctionDef (str{name}{val=__repr__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__class__}))) (str{attr}{val=__name__}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=level}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=msg}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=hint}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=obj}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=id}))))))))))
(root (FunctionDef (str{name}{val=is_serious}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=level}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Name (str{id}{val=ERROR}))))))))
(root (FunctionDef (str{name}{val=is_silenced}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (Return (expr{value} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=id}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=SILENCED_SYSTEM_CHECKS}))))))))
(root (ClassDef (str{name}{val=Debug}) (expr*{bases} (expr (Name (str{id}{val=CheckMessage})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=Debug}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=DEBUG})))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (ClassDef (str{name}{val=Info}) (expr*{bases} (expr (Name (str{id}{val=CheckMessage})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=Info}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=INFO})))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (ClassDef (str{name}{val=Warning}) (expr*{bases} (expr (Name (str{id}{val=CheckMessage})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=Warning}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=WARNING})))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (ClassDef (str{name}{val=Error}) (expr*{bases} (expr (Name (str{id}{val=CheckMessage})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=Error}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=ERROR})))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (ClassDef (str{name}{val=Critical}) (expr*{bases} (expr (Name (str{id}{val=CheckMessage})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=Critical}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=CRITICAL})))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=itertools}) (alias*{names} (alias (str{name}{val=chain}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=types})))))
(root (ImportFrom (str{module}{val=django.apps}) (alias*{names} (alias (str{name}{val=apps}))) (int{level}{val=0})))
(root (ImportFrom (alias*{names} (alias (str{name}{val=Error})) (alias (str{name}{val=Tags})) (alias (str{name}{val=register}))) (int{level}{val=1})))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Name (str{id}{val=register}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=Tags}))) (str{attr}{val=models})))))))))
(root (FunctionDef (str{name}{val=check_all_models}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=app_configs})))) (str{kwarg}{val=kwargs}) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=errors})))) (expr{value} (ListComp (expr{elt} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=model}))) (str{attr}{val=check}))) (expr{kwargs} (Name (str{id}{val=kwargs}))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=model}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=apps}))) (str{attr}{val=get_models}))))) (expr*{ifs} (expr (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=app_configs}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Compare (expr{left} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=model}))) (str{attr}{val=_meta}))) (str{attr}{val=app_config}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=app_configs}))))))))))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=chain}))) (expr{starargs} (Name (str{id}{val=errors}))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Name (str{id}{val=register}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=Tags}))) (str{attr}{val=models}))) (expr (Attribute (expr{value} (Name (str{id}{val=Tags}))) (str{attr}{val=signals})))))))))
(root (FunctionDef (str{name}{val=check_model_signals}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=app_configs})))) (str{kwarg}{val=kwargs}) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=django.db}) (alias*{names} (alias (str{name}{val=models}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=errors})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=name}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=dir}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=models}))) (str{attr}{val=signals})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=obj})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=models}))) (str{attr}{val=signals}))) (expr (Name (str{id}{val=name}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=obj}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=models}))) (str{attr}{val=signals}))) (str{attr}{val=ModelSignal})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=reference}))) (expr (Name (str{id}{val=receivers})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=obj}))) (str{attr}{val=unresolved_references}))) (str{attr}{val=items}))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=receiver}))) (expr (Name (str{id}{val=_}))) (expr (Name (str{id}{val=_})))))) (expr{iter} (Name (str{id}{val=receivers}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=receiver}))) (expr (Attribute (expr{value} (Name (str{id}{val=types}))) (str{attr}{val=FunctionType})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=description})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=receiver}))) (str{attr}{val=__name__})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=description})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=receiver}))) (str{attr}{val=__class__}))) (str{attr}{val=__name__})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=errors}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=Error}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=%s was connected to the '%s' signal with a lazy reference to the '%s' sender, which has not been installed.}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=description}))) (expr (Name (str{id}{val=name}))) (expr (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=.}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=reference})))))))))))) (keyword*{keywords} (keyword (str{arg}{val=obj}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=receiver}))) (str{attr}{val=__module__})))) (keyword (str{arg}{val=hint}) (expr{value} (Name (str{id}{val=None})))) (keyword (str{arg}{val=id}) (expr{value} (Str (str{s}{val=signals.E001}))))))))))))
(root (Return (expr{value} (Name (str{id}{val=errors})))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=itertools}) (alias*{names} (alias (str{name}{val=chain}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.itercompat}) (alias*{names} (alias (str{name}{val=is_iterable}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=Tags}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=admin})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=compatibility})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=models})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=signals})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (ClassDef (str{name}{val=CheckRegistry}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=registered_checks})))) (expr{value} (List (epsilon)))))
(root (FunctionDef (str{name}{val=register}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=tags}))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=inner}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=check})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=check}))) (str{attr}{val=tags})))) (expr{value} (Name (str{id}{val=tags})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=check}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=registered_checks})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=registered_checks}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=check}))))))))
(root (Return (expr{value} (Name (str{id}{val=check})))))
(root (Return (expr{value} (Name (str{id}{val=inner})))))
(root (FunctionDef (str{name}{val=run_checks}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=app_configs}))) (expr (Name (str{id}{val=tags})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=errors})))) (expr{value} (List (epsilon)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=tags}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=checks})))) (expr{value} (ListComp (expr{elt} (Name (str{id}{val=check}))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=check}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=registered_checks}))) (expr*{ifs} (expr (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=check}))) (expr (Str (str{s}{val=_STR:0_})))))) (expr (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=set}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=check}))) (str{attr}{val=tags})))))) (operator{op} (BitAnd)) (expr{right} (Call (expr{func} (Name (str{id}{val=set}))) (expr*{args} (expr (Name (str{id}{val=tags}))))))))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=checks})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=registered_checks})))))
(root (For (expr{target} (Name (str{id}{val=check}))) (expr{iter} (Name (str{id}{val=checks}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=new_errors})))) (expr{value} (Call (expr{func} (Name (str{id}{val=check}))) (keyword*{keywords} (keyword (str{arg}{val=app_configs}) (expr{value} (Name (str{id}{val=app_configs})))))))))
(root (Assert (expr{test} (Call (expr{func} (Name (str{id}{val=is_iterable}))) (expr*{args} (expr (Name (str{id}{val=new_errors})))))) (expr{msg} (BinOp (expr{left} (Str (str{s}{val=The function %r did not return a list. All functions registered with the checks registry must return a list.}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=check})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=errors}))) (str{attr}{val=extend}))) (expr*{args} (expr (Name (str{id}{val=new_errors}))))))))
(root (Return (expr{value} (Name (str{id}{val=errors})))))
(root (FunctionDef (str{name}{val=tag_exists}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=tag})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Compare (expr{left} (Name (str{id}{val=tag}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=tags_available}))))))))))
(root (FunctionDef (str{name}{val=tags_available}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=set}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=chain}))) (expr{starargs} (ListComp (expr{elt} (Attribute (expr{value} (Name (str{id}{val=check}))) (str{attr}{val=tags}))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=check}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=registered_checks}))) (expr*{ifs} (expr (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=check}))) (expr (Str (str{s}{val=_STR:0_}))))))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=registry})))) (expr{value} (Call (expr{func} (Name (str{id}{val=CheckRegistry})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=register})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=registry}))) (str{attr}{val=register})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=run_checks})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=registry}))) (str{attr}{val=run_checks})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=tag_exists})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=registry}))) (str{attr}{val=tag_exists})))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.middleware.csrf}) (alias*{names} (alias (str{name}{val=get_token}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=smart_text}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.functional}) (alias*{names} (alias (str{name}{val=lazy}))) (int{level}{val=0})))
(root (FunctionDef (str{name}{val=csrf}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=request})))))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=_get_val}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=token})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_token}))) (expr*{args} (expr (Name (str{id}{val=request}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=token}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=smart_text}))) (expr*{args} (expr (Name (str{id}{val=token}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_get_val})))) (expr{value} (Call (expr{func} (Name (str{id}{val=lazy}))) (expr*{args} (expr (Name (str{id}{val=_get_val}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))))))))
(root (Return (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:0_})))) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=_get_val}))))))))))
(root (FunctionDef (str{name}{val=debug}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=request})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=context_extras})))) (expr{value} (Dict (epsilon)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=DEBUG}))) (expr (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=request}))) (str{attr}{val=META}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=INTERNAL_IPS}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=context_extras}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Name (str{id}{val=True})))))
(root (ImportFrom (str{module}{val=django.db}) (alias*{names} (alias (str{name}{val=connection}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=context_extras}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=sql_queries})))))))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=queries})))))
(root (Return (expr{value} (Name (str{id}{val=context_extras})))))
(root (FunctionDef (str{name}{val=i18n}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=request})))))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=translation}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=context_extras})))) (expr{value} (Dict (epsilon)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=context_extras}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=LANGUAGES})))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=context_extras}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=translation}))) (str{attr}{val=get_language})))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=context_extras}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=translation}))) (str{attr}{val=get_language_bidi})))))))
(root (Return (expr{value} (Name (str{id}{val=context_extras})))))
(root (FunctionDef (str{name}{val=tz}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=request})))))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=timezone}))) (int{level}{val=0})))
(root (Return (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:0_})))) (expr*{values} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=timezone}))) (str{attr}{val=get_current_timezone_name}))))))))))
(root (FunctionDef (str{name}{val=static}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=request})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:0_})))) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=STATIC_URL}))))))))
(root (FunctionDef (str{name}{val=media}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=request})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:0_})))) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=MEDIA_URL}))))))))
(root (FunctionDef (str{name}{val=request}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=request})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:0_})))) (expr*{values} (expr (Name (str{id}{val=request}))))))))
(root (ImportFrom (str{module}{val=functools}) (alias*{names} (alias (str{name}{val=reduce}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=operator})))))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=force_text}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=DjangoRuntimeWarning}) (expr*{bases} (expr (Name (str{id}{val=RuntimeWarning})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (ClassDef (str{name}{val=AppRegistryNotReady}) (expr*{bases} (expr (Name (str{id}{val=Exception})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (ClassDef (str{name}{val=ObjectDoesNotExist}) (expr*{bases} (expr (Name (str{id}{val=Exception})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=silent_variable_failure})))) (expr{value} (Name (str{id}{val=True})))))
(root (ClassDef (str{name}{val=MultipleObjectsReturned}) (expr*{bases} (expr (Name (str{id}{val=Exception})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (ClassDef (str{name}{val=SuspiciousOperation}) (expr*{bases} (expr (Name (str{id}{val=Exception})))) (stmt*{body} (stmt (Pass)))))
(root (ClassDef (str{name}{val=SuspiciousMultipartForm}) (expr*{bases} (expr (Name (str{id}{val=SuspiciousOperation})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (ClassDef (str{name}{val=SuspiciousFileOperation}) (expr*{bases} (expr (Name (str{id}{val=SuspiciousOperation})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (ClassDef (str{name}{val=DisallowedHost}) (expr*{bases} (expr (Name (str{id}{val=SuspiciousOperation})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (ClassDef (str{name}{val=DisallowedRedirect}) (expr*{bases} (expr (Name (str{id}{val=SuspiciousOperation})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (ClassDef (str{name}{val=PermissionDenied}) (expr*{bases} (expr (Name (str{id}{val=Exception})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (ClassDef (str{name}{val=ViewDoesNotExist}) (expr*{bases} (expr (Name (str{id}{val=Exception})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (ClassDef (str{name}{val=MiddlewareNotUsed}) (expr*{bases} (expr (Name (str{id}{val=Exception})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (ClassDef (str{name}{val=ImproperlyConfigured}) (expr*{bases} (expr (Name (str{id}{val=Exception})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (ClassDef (str{name}{val=FieldError}) (expr*{bases} (expr (Name (str{id}{val=Exception})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=NON_FIELD_ERRORS})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (ClassDef (str{name}{val=ValidationError}) (expr*{bases} (expr (Name (str{id}{val=Exception})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=message}))) (expr (Name (str{id}{val=code}))) (expr (Name (str{id}{val=params})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=ValidationError}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=message}))) (expr (Name (str{id}{val=code}))) (expr (Name (str{id}{val=params}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=message}))) (expr (Name (str{id}{val=ValidationError})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=message}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=message})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=message}))) (str{attr}{val=error_dict})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=message}))) (expr (IfExp (expr{test} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=PY3}))) (expr{body} (Str (str{s}{val=_STR:0_}))) (expr{orelse} (Str (str{s}{val=_STR:1_})))))))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=message})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=message}))) (str{attr}{val=error_list})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=message}))) (expr (Name (str{id}{val=code}))) (expr (Name (str{id}{val=params}))))))) (expr{value} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=message}))) (str{attr}{val=message}))) (expr (Attribute (expr{value} (Name (str{id}{val=message}))) (str{attr}{val=code}))) (expr (Attribute (expr{value} (Name (str{id}{val=message}))) (str{attr}{val=params}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=message}))) (expr (Name (str{id}{val=dict})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_dict})))) (expr{value} (Dict (epsilon)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=field}))) (expr (Name (str{id}{val=messages})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=message}))) (str{attr}{val=items}))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=messages}))) (expr (Name (str{id}{val=ValidationError})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=messages})))) (expr{value} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Name (str{id}{val=messages}))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_dict}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=field})))))))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=messages}))) (str{attr}{val=error_list})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=message}))) (expr (Name (str{id}{val=list})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_list})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=message}))) (expr{iter} (Name (str{id}{val=message}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=message}))) (expr (Name (str{id}{val=ValidationError})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=message})))) (expr{value} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Name (str{id}{val=message}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_list}))) (str{attr}{val=extend}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=message}))) (str{attr}{val=error_list}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=message})))) (expr{value} (Name (str{id}{val=message})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=code})))) (expr{value} (Name (str{id}{val=code})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=params})))) (expr{value} (Name (str{id}{val=params})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_list})))) (expr{value} (List (expr*{elts} (expr (Name (str{id}{val=self}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=message_dict}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=dict}))) (expr*{args} (expr (Name (str{id}{val=self}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=messages}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=reduce}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=operator}))) (str{attr}{val=add}))) (expr (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=dict}))) (expr*{args} (expr (Name (str{id}{val=self})))))) (str{attr}{val=values}))))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Name (str{id}{val=self}))))))))
(root (FunctionDef (str{name}{val=update_error_dict}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=error_dict})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=field}))) (expr (Name (str{id}{val=error_list})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_dict}))) (str{attr}{val=items}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=error_dict}))) (str{attr}{val=setdefault}))) (expr*{args} (expr (Name (str{id}{val=field}))) (expr (List (epsilon)))))) (str{attr}{val=extend}))) (expr*{args} (expr (Name (str{id}{val=error_list}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=error_dict}))) (str{attr}{val=setdefault}))) (expr*{args} (expr (Name (str{id}{val=NON_FIELD_ERRORS}))) (expr (List (epsilon)))))) (str{attr}{val=extend}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_list}))))))))
(root (Return (expr{value} (Name (str{id}{val=error_dict})))))
(root (FunctionDef (str{name}{val=__iter__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=field}))) (expr (Name (str{id}{val=errors})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_dict}))) (str{attr}{val=items}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Yield (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=field}))) (expr (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Name (str{id}{val=errors}))))))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=error}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_list}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=message})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=error}))) (str{attr}{val=message})))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=error}))) (str{attr}{val=params}))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=message}))) (operator{op} (Mod)) (expr{value} (Attribute (expr{value} (Name (str{id}{val=error}))) (str{attr}{val=params})))))
(root (Expr (expr{value} (Yield (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=message}))))))))))
(root (FunctionDef (str{name}{val=__str__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=repr}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=dict}))) (expr*{args} (expr (Name (str{id}{val=self})))))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=repr}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Name (str{id}{val=self})))))))))))
(root (FunctionDef (str{name}{val=__repr__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=self})))))))
(root (ImportFrom (str{module}{val=django.core.files.base}) (alias*{names} (alias (str{name}{val=File}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__all__})))) (expr{value} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=os})))))
(root (ImportFrom (str{module}{val=io}) (alias*{names} (alias (str{name}{val=BytesIO})) (alias (str{name}{val=StringIO})) (alias (str{name}{val=UnsupportedOperation}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=smart_text}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.files.utils}) (alias*{names} (alias (str{name}{val=FileProxyMixin}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=force_bytes})) (alias (str{name}{val=python_2_unicode_compatible}))) (int{level}{val=0})))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=python_2_unicode_compatible}))))))
(root (ClassDef (str{name}{val=File}) (expr*{bases} (expr (Name (str{id}{val=FileProxyMixin})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=DEFAULT_CHUNK_SIZE})))) (expr{value} (BinOp (expr{left} (Num (int{n}{val=64}))) (operator{op} (Mult)) (expr{right} (BinOp (expr{left} (Num (int{n}{val=2}))) (operator{op} (Pow)) (expr{right} (Num (int{n}{val=10})))))))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=file}))) (expr (Name (str{id}{val=name})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file})))) (expr{value} (Name (str{id}{val=file})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=name}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=name})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=file}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=name})))) (expr{value} (Name (str{id}{val=name})))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=file}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=mode})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=file}))) (str{attr}{val=mode})))))
(root (FunctionDef (str{name}{val=__str__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=smart_text}))) (expr*{args} (expr (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=name}))) (expr (Str (str{s}{val=})))))))))))
(root (FunctionDef (str{name}{val=__repr__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=<%s: %s>}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__class__}))) (str{attr}{val=__name__}))) (expr (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=self}))) (expr (Str (str{s}{val=None})))))))))))))
(root (FunctionDef (str{name}{val=__bool__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=bool}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=name}))))))))
(root (FunctionDef (str{name}{val=__nonzero__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=type}))) (expr*{args} (expr (Name (str{id}{val=self})))))) (str{attr}{val=__bool__}))) (expr*{args} (expr (Name (str{id}{val=self}))))))))
(root (FunctionDef (str{name}{val=__len__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=size})))))
(root (FunctionDef (str{name}{val=_get_size_from_underlying_file}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))) (str{attr}{val=size})))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=getsize}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))) (str{attr}{val=name}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=OSError}))) (expr (Name (str{id}{val=TypeError})))))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))) (expr (Str (str{s}{val=_STR:0_})))))) (expr (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))) (expr (Str (str{s}{val=_STR:1_}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=pos})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))) (str{attr}{val=tell})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))) (str{attr}{val=seek}))) (expr*{args} (expr (Num (int{n}{val=0}))) (expr (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=SEEK_END}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=size})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))) (str{attr}{val=tell})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))) (str{attr}{val=seek}))) (expr*{args} (expr (Name (str{id}{val=pos}))))))))
(root (Return (expr{value} (Name (str{id}{val=size})))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=AttributeError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=_get_size}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_size})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_size})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_get_size_from_underlying_file})))))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_size})))))
(root (FunctionDef (str{name}{val=_set_size}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=size})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_size})))) (expr{value} (Name (str{id}{val=size})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=size})))) (expr{value} (Call (expr{func} (Name (str{id}{val=property}))) (expr*{args} (expr (Name (str{id}{val=_get_size}))) (expr (Name (str{id}{val=_set_size}))))))))
(root (FunctionDef (str{name}{val=_get_closed}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))) (str{attr}{val=closed}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=closed})))) (expr{value} (Call (expr{func} (Name (str{id}{val=property}))) (expr*{args} (expr (Name (str{id}{val=_get_closed}))))))))
(root (FunctionDef (str{name}{val=chunks}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=chunk_size})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=chunk_size}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=chunk_size})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=DEFAULT_CHUNK_SIZE})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=seek}))) (expr*{args} (expr (Num (int{n}{val=0}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=AttributeError}))) (expr (Name (str{id}{val=UnsupportedOperation})))))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (While (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=data})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=read}))) (expr*{args} (expr (Name (str{id}{val=chunk_size}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=data}))))) (stmt*{body} (stmt (Pass)))))
(root (Break))
(root (Expr (expr{value} (Yield (expr{value} (Name (str{id}{val=data})))))))
(root (FunctionDef (str{name}{val=multiple_chunks}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=chunk_size})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=chunk_size}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=chunk_size})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=DEFAULT_CHUNK_SIZE})))))
(root (Return (expr{value} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=size}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Name (str{id}{val=chunk_size}))))))))
(root (FunctionDef (str{name}{val=__iter__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=buffer_})))) (expr{value} (Name (str{id}{val=None})))))
(root (For (expr{target} (Name (str{id}{val=chunk}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=chunks}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=chunk_buffer})))) (expr{value} (Call (expr{func} (Name (str{id}{val=BytesIO}))) (expr*{args} (expr (Name (str{id}{val=chunk}))))))))
(root (For (expr{target} (Name (str{id}{val=line}))) (expr{iter} (Name (str{id}{val=chunk_buffer}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=buffer_}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=line})))) (expr{value} (BinOp (expr{left} (Name (str{id}{val=buffer_}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=line})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=buffer_})))) (expr{value} (Name (str{id}{val=None})))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=line}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=-1}))))))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=\n}))) (expr (Str (str{s}{val=}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Yield (expr{value} (Name (str{id}{val=line})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=buffer_})))) (expr{value} (Name (str{id}{val=line})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=buffer_}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Yield (expr{value} (Name (str{id}{val=buffer_})))))))
(root (FunctionDef (str{name}{val=__enter__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=self})))))
(root (FunctionDef (str{name}{val=__exit__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=exc_type}))) (expr (Name (str{id}{val=exc_value}))) (expr (Name (str{id}{val=tb})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=close})))))))
(root (FunctionDef (str{name}{val=open}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=mode})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=closed}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=seek}))) (expr*{args} (expr (Num (int{n}{val=0}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=name}))) (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=exists}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=name}))))))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file})))) (expr{value} (Call (expr{func} (Name (str{id}{val=open}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=name}))) (expr (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=mode}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=mode})))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=close}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))) (str{attr}{val=close})))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=python_2_unicode_compatible}))))))
(root (ClassDef (str{name}{val=ContentFile}) (expr*{bases} (expr (Name (str{id}{val=File})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=content}))) (expr (Name (str{id}{val=name})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=PY3}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=stream_class})))) (expr{value} (IfExp (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=content}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type})))))) (expr{body} (Name (str{id}{val=StringIO}))) (expr{orelse} (Name (str{id}{val=BytesIO})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=stream_class})))) (expr{value} (Name (str{id}{val=BytesIO})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=content})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_bytes}))) (expr*{args} (expr (Name (str{id}{val=content}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=ContentFile}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=stream_class}))) (expr*{args} (expr (Name (str{id}{val=content}))))))) (keyword*{keywords} (keyword (str{arg}{val=name}) (expr{value} (Name (str{id}{val=name})))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=size})))) (expr{value} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=content}))))))))
(root (FunctionDef (str{name}{val=__str__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (FunctionDef (str{name}{val=__bool__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=True})))))
(root (FunctionDef (str{name}{val=__nonzero__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=type}))) (expr*{args} (expr (Name (str{id}{val=self})))))) (str{attr}{val=__bool__}))) (expr*{args} (expr (Name (str{id}{val=self}))))))))
(root (FunctionDef (str{name}{val=open}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=mode})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=seek}))) (expr*{args} (expr (Num (int{n}{val=0}))))))))
(root (FunctionDef (str{name}{val=close}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (Import (alias*{names} (alias (str{name}{val=zlib})))))
(root (ImportFrom (str{module}{val=django.core.files}) (alias*{names} (alias (str{name}{val=File}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=ImageFile}) (expr*{bases} (expr (Name (str{id}{val=File})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=_get_width}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_get_image_dimensions}))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=width})))) (expr{value} (Call (expr{func} (Name (str{id}{val=property}))) (expr*{args} (expr (Name (str{id}{val=_get_width}))))))))
(root (FunctionDef (str{name}{val=_get_height}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_get_image_dimensions}))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=height})))) (expr{value} (Call (expr{func} (Name (str{id}{val=property}))) (expr*{args} (expr (Name (str{id}{val=_get_height}))))))))
(root (FunctionDef (str{name}{val=_get_image_dimensions}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Str (str{s}{val=_STR:0_})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=close})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=closed})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=open})))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_dimensions_cache})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_image_dimensions}))) (expr*{args} (expr (Name (str{id}{val=self})))) (keyword*{keywords} (keyword (str{arg}{val=close}) (expr{value} (Name (str{id}{val=close})))))))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_dimensions_cache})))))
(root (FunctionDef (str{name}{val=get_image_dimensions}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=file_or_path}))) (expr (Name (str{id}{val=close})))) (expr*{defaults} (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=PIL}) (alias*{names} (alias (str{name}{val=ImageFile}) (str{asname}{val=PillowImageFile}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=p})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=PillowImageFile}))) (str{attr}{val=Parser})))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=file_or_path}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=file})))) (expr{value} (Name (str{id}{val=file_or_path})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=file_pos})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=file}))) (str{attr}{val=tell})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=file}))) (str{attr}{val=seek}))) (expr*{args} (expr (Num (int{n}{val=0}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=file})))) (expr{value} (Call (expr{func} (Name (str{id}{val=open}))) (expr*{args} (expr (Name (str{id}{val=file_or_path}))) (expr (Str (str{s}{val=rb}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=close})))) (expr{value} (Name (str{id}{val=True})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=chunk_size})))) (expr{value} (Num (int{n}{val=1024})))))
(root (While (expr{test} (Num (int{n}{val=1}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=data})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=file}))) (str{attr}{val=read}))) (expr*{args} (expr (Name (str{id}{val=chunk_size}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=data}))))) (stmt*{body} (stmt (Pass)))))
(root (Break))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=p}))) (str{attr}{val=feed}))) (expr*{args} (expr (Name (str{id}{val=data}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Attribute (expr{value} (Name (str{id}{val=zlib}))) (str{attr}{val=error}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=args}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (str{attr}{val=startswith}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Raise (epsilon)))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=p}))) (str{attr}{val=image}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=p}))) (str{attr}{val=image}))) (str{attr}{val=size})))))
(root (AugAssign (expr{target} (Name (str{id}{val=chunk_size}))) (operator{op} (Mult)) (expr{value} (Num (int{n}{val=2})))))
(root (Return (expr{value} (Name (str{id}{val=None})))))
(root (TryFinally (stmt*{body} (stmt (Pass))) (stmt*{finalbody} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=close}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=file}))) (str{attr}{val=close})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=file}))) (str{attr}{val=seek}))) (expr*{args} (expr (Name (str{id}{val=file_pos}))))))))
(root (Import (alias*{names} (alias (str{name}{val=os})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__all__})))) (expr{value} (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=_STR:3_}))) (expr (Str (str{s}{val=_STR:4_}))))))))
(root (FunctionDef (str{name}{val=_fd}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=f})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (IfExp (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=f}))) (expr (Str (str{s}{val=_STR:0_})))))) (expr{body} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=fileno}))))) (expr{orelse} (Name (str{id}{val=f})))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=name}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Import (alias*{names} (alias (str{name}{val=msvcrt})))))
(root (ImportFrom (str{module}{val=ctypes}) (alias*{names} (alias (str{name}{val=sizeof})) (alias (str{name}{val=c_ulong})) (alias (str{name}{val=c_void_p})) (alias (str{name}{val=c_int64})) (alias (str{name}{val=Structure})) (alias (str{name}{val=Union})) (alias (str{name}{val=POINTER})) (alias (str{name}{val=windll})) (alias (str{name}{val=byref}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=ctypes.wintypes}) (alias*{names} (alias (str{name}{val=BOOL})) (alias (str{name}{val=DWORD})) (alias (str{name}{val=HANDLE}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=LOCK_SH})))) (expr{value} (Num (int{n}{val=0})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=LOCK_NB})))) (expr{value} (Num (int{n}{val=1})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=LOCK_EX})))) (expr{value} (Num (int{n}{val=2})))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=sizeof}))) (expr*{args} (expr (Name (str{id}{val=c_ulong})))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Call (expr{func} (Name (str{id}{val=sizeof}))) (expr*{args} (expr (Name (str{id}{val=c_void_p}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ULONG_PTR})))) (expr{value} (Name (str{id}{val=c_int64})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ULONG_PTR})))) (expr{value} (Name (str{id}{val=c_ulong})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=PVOID})))) (expr{value} (Name (str{id}{val=c_void_p})))))
(root (ClassDef (str{name}{val=_OFFSET}) (expr*{bases} (expr (Name (str{id}{val=Structure})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_fields_})))) (expr{value} (List (expr*{elts} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=DWORD})))))) (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:1_}))) (expr (Name (str{id}{val=DWORD})))))))))))
(root (ClassDef (str{name}{val=_OFFSET_UNION}) (expr*{bases} (expr (Name (str{id}{val=Union})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_anonymous_})))) (expr{value} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_fields_})))) (expr{value} (List (expr*{elts} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=_OFFSET})))))) (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:1_}))) (expr (Name (str{id}{val=PVOID})))))))))))
(root (ClassDef (str{name}{val=OVERLAPPED}) (expr*{bases} (expr (Name (str{id}{val=Structure})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_anonymous_})))) (expr{value} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_fields_})))) (expr{value} (List (expr*{elts} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=ULONG_PTR})))))) (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=InternalHigh}))) (expr (Name (str{id}{val=ULONG_PTR})))))) (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_offset_union}))) (expr (Name (str{id}{val=_OFFSET_UNION})))))) (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=hEvent}))) (expr (Name (str{id}{val=HANDLE})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=LPOVERLAPPED})))) (expr{value} (Call (expr{func} (Name (str{id}{val=POINTER}))) (expr*{args} (expr (Name (str{id}{val=OVERLAPPED}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=LockFileEx})))) (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=windll}))) (str{attr}{val=kernel32}))) (str{attr}{val=LockFileEx})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=LockFileEx}))) (str{attr}{val=restype})))) (expr{value} (Name (str{id}{val=BOOL})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=LockFileEx}))) (str{attr}{val=argtypes})))) (expr{value} (List (expr*{elts} (expr (Name (str{id}{val=HANDLE}))) (expr (Name (str{id}{val=DWORD}))) (expr (Name (str{id}{val=DWORD}))) (expr (Name (str{id}{val=DWORD}))) (expr (Name (str{id}{val=DWORD}))) (expr (Name (str{id}{val=LPOVERLAPPED}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=UnlockFileEx})))) (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=windll}))) (str{attr}{val=kernel32}))) (str{attr}{val=UnlockFileEx})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=UnlockFileEx}))) (str{attr}{val=restype})))) (expr{value} (Name (str{id}{val=BOOL})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=UnlockFileEx}))) (str{attr}{val=argtypes})))) (expr{value} (List (expr*{elts} (expr (Name (str{id}{val=HANDLE}))) (expr (Name (str{id}{val=DWORD}))) (expr (Name (str{id}{val=DWORD}))) (expr (Name (str{id}{val=DWORD}))) (expr (Name (str{id}{val=LPOVERLAPPED}))))))))
(root (FunctionDef (str{name}{val=lock}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=f}))) (expr (Name (str{id}{val=flags})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=hfile})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=msvcrt}))) (str{attr}{val=get_osfhandle}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=_fd}))) (expr*{args} (expr (Name (str{id}{val=f})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=overlapped})))) (expr{value} (Call (expr{func} (Name (str{id}{val=OVERLAPPED})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ret})))) (expr{value} (Call (expr{func} (Name (str{id}{val=LockFileEx}))) (expr*{args} (expr (Name (str{id}{val=hfile}))) (expr (Name (str{id}{val=flags}))) (expr (Num (int{n}{val=0}))) (expr (Num (int{n}{val=0}))) (expr (Num (int{n}{val=4294901760}))) (expr (Call (expr{func} (Name (str{id}{val=byref}))) (expr*{args} (expr (Name (str{id}{val=overlapped})))))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=bool}))) (expr*{args} (expr (Name (str{id}{val=ret}))))))))
(root (FunctionDef (str{name}{val=unlock}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=f})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=hfile})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=msvcrt}))) (str{attr}{val=get_osfhandle}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=_fd}))) (expr*{args} (expr (Name (str{id}{val=f})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=overlapped})))) (expr{value} (Call (expr{func} (Name (str{id}{val=OVERLAPPED})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ret})))) (expr{value} (Call (expr{func} (Name (str{id}{val=UnlockFileEx}))) (expr*{args} (expr (Name (str{id}{val=hfile}))) (expr (Num (int{n}{val=0}))) (expr (Num (int{n}{val=0}))) (expr (Num (int{n}{val=4294901760}))) (expr (Call (expr{func} (Name (str{id}{val=byref}))) (expr*{args} (expr (Name (str{id}{val=overlapped})))))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=bool}))) (expr*{args} (expr (Name (str{id}{val=ret}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Import (alias*{names} (alias (str{name}{val=fcntl})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=LOCK_SH})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=fcntl}))) (str{attr}{val=LOCK_SH})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=LOCK_NB})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=fcntl}))) (str{attr}{val=LOCK_NB})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=LOCK_EX})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=fcntl}))) (str{attr}{val=LOCK_EX})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=ImportError}))) (expr (Name (str{id}{val=AttributeError})))))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=LOCK_EX}))) (expr (Name (str{id}{val=LOCK_SH}))) (expr (Name (str{id}{val=LOCK_NB})))) (expr{value} (Num (int{n}{val=0})))))
(root (FunctionDef (str{name}{val=lock}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=f}))) (expr (Name (str{id}{val=flags})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (FunctionDef (str{name}{val=unlock}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=f})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=True})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=lock}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=f}))) (expr (Name (str{id}{val=flags})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ret})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=fcntl}))) (str{attr}{val=flock}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=_fd}))) (expr*{args} (expr (Name (str{id}{val=f})))))) (expr (Name (str{id}{val=flags}))))))))
(root (Return (expr{value} (Compare (expr{left} (Name (str{id}{val=ret}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=0}))))))))
(root (FunctionDef (str{name}{val=unlock}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=f})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ret})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=fcntl}))) (str{attr}{val=flock}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=_fd}))) (expr*{args} (expr (Name (str{id}{val=f})))))) (expr (Attribute (expr{value} (Name (str{id}{val=fcntl}))) (str{attr}{val=LOCK_UN}))))))))
(root (Return (expr{value} (Compare (expr{left} (Name (str{id}{val=ret}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=0}))))))))
(root (Import (alias*{names} (alias (str{name}{val=os})))))
(root (ImportFrom (str{module}{val=django.core.files}) (alias*{names} (alias (str{name}{val=locks}))) (int{level}{val=0})))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (ImportFrom (str{module}{val=shutil}) (alias*{names} (alias (str{name}{val=copystat}))) (int{level}{val=0})))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ImportError}))) (stmt*{body} (stmt (Pass)))))))
(root (Import (alias*{names} (alias (str{name}{val=stat})))))
(root (FunctionDef (str{name}{val=copystat}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=src}))) (expr (Name (str{id}{val=dst})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=st})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=stat}))) (expr*{args} (expr (Name (str{id}{val=src}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=mode})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=stat}))) (str{attr}{val=S_IMODE}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=st}))) (str{attr}{val=st_mode}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=os}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=utime}))) (expr*{args} (expr (Name (str{id}{val=dst}))) (expr (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=st}))) (str{attr}{val=st_atime}))) (expr (Attribute (expr{value} (Name (str{id}{val=st}))) (str{attr}{val=st_mtime})))))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=os}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=chmod}))) (expr*{args} (expr (Name (str{id}{val=dst}))) (expr (Name (str{id}{val=mode}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__all__})))) (expr{value} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=_samefile}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=src}))) (expr (Name (str{id}{val=dst})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=samefile}))) (expr*{args} (expr (Name (str{id}{val=src}))) (expr (Name (str{id}{val=dst}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=OSError}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (Return (expr{value} (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=normcase}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=abspath}))) (expr*{args} (expr (Name (str{id}{val=src}))))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=normcase}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=abspath}))) (expr*{args} (expr (Name (str{id}{val=dst}))))))))))))))
(root (FunctionDef (str{name}{val=file_move_safe}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=old_file_name}))) (expr (Name (str{id}{val=new_file_name}))) (expr (Name (str{id}{val=chunk_size}))) (expr (Name (str{id}{val=allow_overwrite})))) (expr*{defaults} (expr (BinOp (expr{left} (Num (int{n}{val=1024}))) (operator{op} (Mult)) (expr{right} (Num (int{n}{val=64}))))) (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=_samefile}))) (expr*{args} (expr (Name (str{id}{val=old_file_name}))) (expr (Name (str{id}{val=new_file_name})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (epsilon)))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=allow_overwrite}))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=access}))) (expr*{args} (expr (Name (str{id}{val=new_file_name}))) (expr (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=F_OK}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=IOError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=new_file_name}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=rename}))) (expr*{args} (expr (Name (str{id}{val=old_file_name}))) (expr (Name (str{id}{val=new_file_name}))))))))
(root (Return (epsilon)))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=OSError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (With (expr{context_expr} (Call (expr{func} (Name (str{id}{val=open}))) (expr*{args} (expr (Name (str{id}{val=old_file_name}))) (expr (Str (str{s}{val=rb})))))) (expr{optional_vars} (Name (str{id}{val=old_file}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=fd})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=open}))) (expr*{args} (expr (Name (str{id}{val=new_file_name}))) (expr (BinOp (expr{left} (BinOp (expr{left} (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=O_WRONLY}))) (operator{op} (BitOr)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=O_CREAT}))))) (operator{op} (BitOr)) (expr{right} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=os}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Num (int{n}{val=0})))))))) (operator{op} (BitOr)) (expr{right} (IfExp (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=allow_overwrite}))))) (expr{body} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=O_EXCL}))) (expr{orelse} (Num (int{n}{val=0}))))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=locks}))) (str{attr}{val=lock}))) (expr*{args} (expr (Name (str{id}{val=fd}))) (expr (Attribute (expr{value} (Name (str{id}{val=locks}))) (str{attr}{val=LOCK_EX}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=current_chunk})))) (expr{value} (Name (str{id}{val=None})))))
(root (While (expr{test} (Compare (expr{left} (Name (str{id}{val=current_chunk}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Str (str{s}{val=})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=current_chunk})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=old_file}))) (str{attr}{val=read}))) (expr*{args} (expr (Name (str{id}{val=chunk_size}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=write}))) (expr*{args} (expr (Name (str{id}{val=fd}))) (expr (Name (str{id}{val=current_chunk}))))))))
(root (TryFinally (stmt*{body} (stmt (Pass))) (stmt*{finalbody} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=locks}))) (str{attr}{val=unlock}))) (expr*{args} (expr (Name (str{id}{val=fd}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=close}))) (expr*{args} (expr (Name (str{id}{val=fd}))))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=copystat}))) (expr*{args} (expr (Name (str{id}{val=old_file_name}))) (expr (Name (str{id}{val=new_file_name}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=remove}))) (expr*{args} (expr (Name (str{id}{val=old_file_name}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=OSError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=e}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Num (int{n}{val=0})))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Num (int{n}{val=32})))))) (expr (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=e}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Num (int{n}{val=0})))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Num (int{n}{val=13}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (epsilon)))
(root (Import (alias*{names} (alias (str{name}{val=os})))))
(root (Import (alias*{names} (alias (str{name}{val=errno})))))
(root (Import (alias*{names} (alias (str{name}{val=itertools})))))
(root (ImportFrom (str{module}{val=datetime}) (alias*{names} (alias (str{name}{val=datetime}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.exceptions}) (alias*{names} (alias (str{name}{val=SuspiciousFileOperation}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.files}) (alias*{names} (alias (str{name}{val=locks})) (alias (str{name}{val=File}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.files.move}) (alias*{names} (alias (str{name}{val=file_move_safe}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=force_text})) (alias (str{name}{val=filepath_to_uri}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.functional}) (alias*{names} (alias (str{name}{val=LazyObject}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.module_loading}) (alias*{names} (alias (str{name}{val=import_string}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.six.moves.urllib.parse}) (alias*{names} (alias (str{name}{val=urljoin}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.text}) (alias*{names} (alias (str{name}{val=get_valid_filename}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils._os}) (alias*{names} (alias (str{name}{val=safe_join})) (alias (str{name}{val=abspathu}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.deconstruct}) (alias*{names} (alias (str{name}{val=deconstructible}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__all__})))) (expr{value} (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=_STR:3_}))))))))
(root (ClassDef (str{name}{val=Storage}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=open}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=mode})))) (expr*{defaults} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_open}))) (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=mode}))))))))
(root (FunctionDef (str{name}{val=save}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=content})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=name}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=name})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=content}))) (str{attr}{val=name})))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=content}))) (expr (Str (str{s}{val=_STR:0_})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=content})))) (expr{value} (Call (expr{func} (Name (str{id}{val=File}))) (expr*{args} (expr (Name (str{id}{val=content}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=name})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get_available_name}))) (expr*{args} (expr (Name (str{id}{val=name}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=name})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_save}))) (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=content}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=name}))) (str{attr}{val=replace}))) (expr*{args} (expr (Str (str{s}{val=\}))) (expr (Str (str{s}{val=/})))))))))))
(root (FunctionDef (str{name}{val=get_valid_name}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=get_valid_filename}))) (expr*{args} (expr (Name (str{id}{val=name}))))))))
(root (FunctionDef (str{name}{val=get_available_name}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=dir_name}))) (expr (Name (str{id}{val=file_name}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=split}))) (expr*{args} (expr (Name (str{id}{val=name}))))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=file_root}))) (expr (Name (str{id}{val=file_ext}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=splitext}))) (expr*{args} (expr (Name (str{id}{val=file_name}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=count})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=itertools}))) (str{attr}{val=count}))) (expr*{args} (expr (Num (int{n}{val=1}))))))))
(root (While (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=exists}))) (expr*{args} (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=name})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=dir_name}))) (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=file_root}))) (expr (Call (expr{func} (Name (str{id}{val=next}))) (expr*{args} (expr (Name (str{id}{val=count})))))) (expr (Name (str{id}{val=file_ext})))))))))))))
(root (Return (expr{value} (Name (str{id}{val=name})))))
(root (FunctionDef (str{name}{val=path}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=NotImplementedError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=delete}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=NotImplementedError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=exists}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=NotImplementedError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=listdir}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=path})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=NotImplementedError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=size}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=NotImplementedError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=url}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=NotImplementedError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=accessed_time}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=NotImplementedError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=created_time}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=NotImplementedError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=modified_time}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=NotImplementedError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=deconstructible}))))))
(root (ClassDef (str{name}{val=FileSystemStorage}) (expr*{bases} (expr (Name (str{id}{val=Storage})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=location}))) (expr (Name (str{id}{val=base_url}))) (expr (Name (str{id}{val=file_permissions_mode}))) (expr (Name (str{id}{val=directory_permissions_mode})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=location}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=location})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=MEDIA_ROOT})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=base_location})))) (expr{value} (Name (str{id}{val=location})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=location})))) (expr{value} (Call (expr{func} (Name (str{id}{val=abspathu}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=base_location}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=base_url}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=base_url})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=MEDIA_URL})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=base_url}))) (str{attr}{val=endswith}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))) (stmt*{body} (stmt (Pass))))))))
(root (AugAssign (expr{target} (Name (str{id}{val=base_url}))) (operator{op} (Add)) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=base_url})))) (expr{value} (Name (str{id}{val=base_url})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file_permissions_mode})))) (expr{value} (IfExp (expr{test} (Compare (expr{left} (Name (str{id}{val=file_permissions_mode}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr{body} (Name (str{id}{val=file_permissions_mode}))) (expr{orelse} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=FILE_UPLOAD_PERMISSIONS})))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=directory_permissions_mode})))) (expr{value} (IfExp (expr{test} (Compare (expr{left} (Name (str{id}{val=directory_permissions_mode}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr{body} (Name (str{id}{val=directory_permissions_mode}))) (expr{orelse} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=FILE_UPLOAD_DIRECTORY_PERMISSIONS})))))))
(root (FunctionDef (str{name}{val=_open}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=mode})))) (expr*{defaults} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=File}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=open}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=path}))) (expr*{args} (expr (Name (str{id}{val=name})))))) (expr (Name (str{id}{val=mode})))))))))))
(root (FunctionDef (str{name}{val=_save}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=content})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=full_path})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=path}))) (expr*{args} (expr (Name (str{id}{val=name}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=directory})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=dirname}))) (expr*{args} (expr (Name (str{id}{val=full_path}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=exists}))) (expr*{args} (expr (Name (str{id}{val=directory})))))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=directory_permissions_mode}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=old_umask})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=umask}))) (expr*{args} (expr (Num (int{n}{val=0}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=makedirs}))) (expr*{args} (expr (Name (str{id}{val=directory}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=directory_permissions_mode}))))))))
(root (TryFinally (stmt*{body} (stmt (Pass))) (stmt*{finalbody} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=umask}))) (expr*{args} (expr (Name (str{id}{val=old_umask}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=makedirs}))) (expr*{args} (expr (Name (str{id}{val=directory}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=OSError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=errno}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=errno}))) (str{attr}{val=EEXIST})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (epsilon)))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=isdir}))) (expr*{args} (expr (Name (str{id}{val=directory})))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=IOError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=directory}))))))))))
(root (While (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=content}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=file_move_safe}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=content}))) (str{attr}{val=temporary_file_path}))))) (expr (Name (str{id}{val=full_path}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=flags})))) (expr{value} (BinOp (expr{left} (BinOp (expr{left} (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=O_WRONLY}))) (operator{op} (BitOr)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=O_CREAT}))))) (operator{op} (BitOr)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=O_EXCL}))))) (operator{op} (BitOr)) (expr{right} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=os}))) (expr (Str (str{s}{val=O_BINARY}))) (expr (Num (int{n}{val=0}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=fd})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=open}))) (expr*{args} (expr (Name (str{id}{val=full_path}))) (expr (Name (str{id}{val=flags}))) (expr (Num (int{n}{val=438}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_file})))) (expr{value} (Name (str{id}{val=None})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=locks}))) (str{attr}{val=lock}))) (expr*{args} (expr (Name (str{id}{val=fd}))) (expr (Attribute (expr{value} (Name (str{id}{val=locks}))) (str{attr}{val=LOCK_EX}))))))))
(root (For (expr{target} (Name (str{id}{val=chunk}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=content}))) (str{attr}{val=chunks}))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=_file}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=mode})))) (expr{value} (IfExp (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=chunk}))) (expr (Name (str{id}{val=bytes})))))) (expr{body} (Str (str{s}{val=_STR:0_}))) (expr{orelse} (Str (str{s}{val=_STR:1_})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_file})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=fdopen}))) (expr*{args} (expr (Name (str{id}{val=fd}))) (expr (Name (str{id}{val=mode}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=_file}))) (str{attr}{val=write}))) (expr*{args} (expr (Name (str{id}{val=chunk}))))))))
(root (TryFinally (stmt*{body} (stmt (Pass))) (stmt*{finalbody} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=locks}))) (str{attr}{val=unlock}))) (expr*{args} (expr (Name (str{id}{val=fd}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=_file}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=_file}))) (str{attr}{val=close})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=close}))) (expr*{args} (expr (Name (str{id}{val=fd}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=OSError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=errno}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=errno}))) (str{attr}{val=EEXIST})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=name})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get_available_name}))) (expr*{args} (expr (Name (str{id}{val=name}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=full_path})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=path}))) (expr*{args} (expr (Name (str{id}{val=name}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Raise (epsilon)))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Break))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file_permissions_mode}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=chmod}))) (expr*{args} (expr (Name (str{id}{val=full_path}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file_permissions_mode}))))))))
(root (Return (expr{value} (Name (str{id}{val=name})))))
(root (FunctionDef (str{name}{val=delete}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (Assert (expr{test} (Name (str{id}{val=name}))) (expr{msg} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=name})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=path}))) (expr*{args} (expr (Name (str{id}{val=name}))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=exists}))) (expr*{args} (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=remove}))) (expr*{args} (expr (Name (str{id}{val=name}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=OSError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=errno}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=errno}))) (str{attr}{val=ENOENT})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (epsilon)))
(root (FunctionDef (str{name}{val=exists}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=exists}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=path}))) (expr*{args} (expr (Name (str{id}{val=name})))))))))))
(root (FunctionDef (str{name}{val=listdir}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=path})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=path})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=path}))) (expr*{args} (expr (Name (str{id}{val=path}))))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=directories}))) (expr (Name (str{id}{val=files}))))))) (expr{value} (Tuple (expr*{elts} (expr (List (epsilon))) (expr (List (epsilon))))))))
(root (For (expr{target} (Name (str{id}{val=entry}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=listdir}))) (expr*{args} (expr (Name (str{id}{val=path})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=isdir}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=path}))) (expr (Name (str{id}{val=entry}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=directories}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=entry}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=files}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=entry}))))))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=directories}))) (expr (Name (str{id}{val=files}))))))))
(root (FunctionDef (str{name}{val=path}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=path})))) (expr{value} (Call (expr{func} (Name (str{id}{val=safe_join}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=location}))) (expr (Name (str{id}{val=name}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ValueError}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=SuspiciousFileOperation}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=name}))))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=normpath}))) (expr*{args} (expr (Name (str{id}{val=path}))))))))
(root (FunctionDef (str{name}{val=size}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=getsize}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=path}))) (expr*{args} (expr (Name (str{id}{val=name})))))))))))
(root (FunctionDef (str{name}{val=url}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=base_url}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=urljoin}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=base_url}))) (expr (Call (expr{func} (Name (str{id}{val=filepath_to_uri}))) (expr*{args} (expr (Name (str{id}{val=name})))))))))))
(root (FunctionDef (str{name}{val=accessed_time}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=fromtimestamp}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=getatime}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=path}))) (expr*{args} (expr (Name (str{id}{val=name}))))))))))))))
(root (FunctionDef (str{name}{val=created_time}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=fromtimestamp}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=getctime}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=path}))) (expr*{args} (expr (Name (str{id}{val=name}))))))))))))))
(root (FunctionDef (str{name}{val=modified_time}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=fromtimestamp}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=getmtime}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=path}))) (expr*{args} (expr (Name (str{id}{val=name}))))))))))))))
(root (FunctionDef (str{name}{val=get_storage_class}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=import_path})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=import_string}))) (expr*{args} (expr (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=import_path}))) (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=DEFAULT_FILE_STORAGE})))))))))))
(root (ClassDef (str{name}{val=DefaultStorage}) (expr*{bases} (expr (Name (str{id}{val=LazyObject})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=_setup}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_wrapped})))) (expr{value} (Call (expr{func} (Call (expr{func} (Name (str{id}{val=get_storage_class})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=default_storage})))) (expr{value} (Call (expr{func} (Name (str{id}{val=DefaultStorage})))))))
(root (Import (alias*{names} (alias (str{name}{val=os})))))
(root (Import (alias*{names} (alias (str{name}{val=tempfile})))))
(root (ImportFrom (str{module}{val=django.core.files.utils}) (alias*{names} (alias (str{name}{val=FileProxyMixin}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__all__})))) (expr{value} (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=name}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (ClassDef (str{name}{val=TemporaryFile}) (expr*{bases} (expr (Name (str{id}{val=FileProxyMixin})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=mode}))) (expr (Name (str{id}{val=bufsize}))) (expr (Name (str{id}{val=suffix}))) (expr (Name (str{id}{val=prefix}))) (expr (Name (str{id}{val=dir})))) (expr*{defaults} (expr (Str (str{s}{val=_STR:0_}))) (expr (Num (int{n}{val=-1}))) (expr (Str (str{s}{val=}))) (expr (Str (str{s}{val=}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=fd}))) (expr (Name (str{id}{val=name}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=tempfile}))) (str{attr}{val=mkstemp}))) (keyword*{keywords} (keyword (str{arg}{val=suffix}) (expr{value} (Name (str{id}{val=suffix})))) (keyword (str{arg}{val=prefix}) (expr{value} (Name (str{id}{val=prefix})))) (keyword (str{arg}{val=dir}) (expr{value} (Name (str{id}{val=dir})))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=name})))) (expr{value} (Name (str{id}{val=name})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=fdopen}))) (expr*{args} (expr (Name (str{id}{val=fd}))) (expr (Name (str{id}{val=mode}))) (expr (Name (str{id}{val=bufsize}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=close_called})))) (expr{value} (Name (str{id}{val=False})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=unlink})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=unlink})))))
(root (FunctionDef (str{name}{val=close}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=close_called}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=close_called})))) (expr{value} (Name (str{id}{val=True})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))) (str{attr}{val=close})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=OSError}))) (expr (Name (str{id}{val=IOError})))))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=unlink}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=name}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=OSError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=closed}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))) (str{attr}{val=closed})))))
(root (FunctionDef (str{name}{val=__del__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=close})))))))
(root (FunctionDef (str{name}{val=__enter__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))) (str{attr}{val=__enter__})))))))
(root (Return (expr{value} (Name (str{id}{val=self})))))
(root (FunctionDef (str{name}{val=__exit__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=exc}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=tb})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))) (str{attr}{val=__exit__}))) (expr*{args} (expr (Name (str{id}{val=exc}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=tb}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=NamedTemporaryFile})))) (expr{value} (Name (str{id}{val=TemporaryFile})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=NamedTemporaryFile})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=tempfile}))) (str{attr}{val=NamedTemporaryFile})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=gettempdir})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=tempfile}))) (str{attr}{val=gettempdir})))))
(root (Import (alias*{names} (alias (str{name}{val=errno})))))
(root (Import (alias*{names} (alias (str{name}{val=os})))))
(root (ImportFrom (str{module}{val=io}) (alias*{names} (alias (str{name}{val=BytesIO}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.files.base}) (alias*{names} (alias (str{name}{val=File}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.files}) (alias*{names} (alias (str{name}{val=temp}) (str{asname}{val=tempfile}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=force_str}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__all__})))) (expr{value} (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=_STR:3_}))))))))
(root (ClassDef (str{name}{val=UploadedFile}) (expr*{bases} (expr (Name (str{id}{val=File})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=DEFAULT_CHUNK_SIZE})))) (expr{value} (BinOp (expr{left} (Num (int{n}{val=64}))) (operator{op} (Mult)) (expr{right} (BinOp (expr{left} (Num (int{n}{val=2}))) (operator{op} (Pow)) (expr{right} (Num (int{n}{val=10})))))))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=file}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=content_type}))) (expr (Name (str{id}{val=size}))) (expr (Name (str{id}{val=charset}))) (expr (Name (str{id}{val=content_type_extra})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=UploadedFile}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=file}))) (expr (Name (str{id}{val=name}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=size})))) (expr{value} (Name (str{id}{val=size})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=content_type})))) (expr{value} (Name (str{id}{val=content_type})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=charset})))) (expr{value} (Name (str{id}{val=charset})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=content_type_extra})))) (expr{value} (Name (str{id}{val=content_type_extra})))))
(root (FunctionDef (str{name}{val=__repr__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=force_str}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__class__}))) (str{attr}{val=__name__}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=name}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=content_type})))))))))))))
(root (FunctionDef (str{name}{val=_get_name}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_name})))))
(root (FunctionDef (str{name}{val=_set_name}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=name}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=name})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=basename}))) (expr*{args} (expr (Name (str{id}{val=name}))))))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=name})))))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=255})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=ext}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=splitext}))) (expr*{args} (expr (Name (str{id}{val=name}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ext})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=ext}))) (slice{slice} (Slice (expr{upper} (Num (int{n}{val=255})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=name})))) (expr{value} (BinOp (expr{left} (Subscript (expr{value} (Name (str{id}{val=name}))) (slice{slice} (Slice (expr{upper} (BinOp (expr{left} (Num (int{n}{val=255}))) (operator{op} (Sub)) (expr{right} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=ext})))))))))))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=ext})))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_name})))) (expr{value} (Name (str{id}{val=name})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=name})))) (expr{value} (Call (expr{func} (Name (str{id}{val=property}))) (expr*{args} (expr (Name (str{id}{val=_get_name}))) (expr (Name (str{id}{val=_set_name}))))))))
(root (ClassDef (str{name}{val=TemporaryUploadedFile}) (expr*{bases} (expr (Name (str{id}{val=UploadedFile})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=content_type}))) (expr (Name (str{id}{val=size}))) (expr (Name (str{id}{val=charset}))) (expr (Name (str{id}{val=content_type_extra})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=FILE_UPLOAD_TEMP_DIR}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=file})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=tempfile}))) (str{attr}{val=NamedTemporaryFile}))) (keyword*{keywords} (keyword (str{arg}{val=suffix}) (expr{value} (Str (str{s}{val=_STR:0_})))) (keyword (str{arg}{val=dir}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=FILE_UPLOAD_TEMP_DIR})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=file})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=tempfile}))) (str{attr}{val=NamedTemporaryFile}))) (keyword*{keywords} (keyword (str{arg}{val=suffix}) (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=TemporaryUploadedFile}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=file}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=content_type}))) (expr (Name (str{id}{val=size}))) (expr (Name (str{id}{val=charset}))) (expr (Name (str{id}{val=content_type_extra}))))))))
(root (FunctionDef (str{name}{val=temporary_file_path}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))) (str{attr}{val=name})))))
(root (FunctionDef (str{name}{val=close}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))) (str{attr}{val=close})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=OSError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=errno}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=errno}))) (str{attr}{val=ENOENT})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (epsilon)))
(root (ClassDef (str{name}{val=InMemoryUploadedFile}) (expr*{bases} (expr (Name (str{id}{val=UploadedFile})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=file}))) (expr (Name (str{id}{val=field_name}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=content_type}))) (expr (Name (str{id}{val=size}))) (expr (Name (str{id}{val=charset}))) (expr (Name (str{id}{val=content_type_extra})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=InMemoryUploadedFile}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=file}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=content_type}))) (expr (Name (str{id}{val=size}))) (expr (Name (str{id}{val=charset}))) (expr (Name (str{id}{val=content_type_extra}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=field_name})))) (expr{value} (Name (str{id}{val=field_name})))))
(root (FunctionDef (str{name}{val=open}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=mode})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))) (str{attr}{val=seek}))) (expr*{args} (expr (Num (int{n}{val=0}))))))))
(root (FunctionDef (str{name}{val=chunks}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=chunk_size})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))) (str{attr}{val=seek}))) (expr*{args} (expr (Num (int{n}{val=0}))))))))
(root (Expr (expr{value} (Yield (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=read})))))))))
(root (FunctionDef (str{name}{val=multiple_chunks}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=chunk_size})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (ClassDef (str{name}{val=SimpleUploadedFile}) (expr*{bases} (expr (Name (str{id}{val=InMemoryUploadedFile})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=content}))) (expr (Name (str{id}{val=content_type})))) (expr*{defaults} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=content})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=content}))) (expr (Str (str{s}{val=}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=SimpleUploadedFile}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=BytesIO}))) (expr*{args} (expr (Name (str{id}{val=content})))))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=content_type}))) (expr (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=content})))))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=classmethod}))))))
(root (FunctionDef (str{name}{val=from_dict}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=cls}))) (expr (Name (str{id}{val=file_dict})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=cls}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=file_dict}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (expr (Subscript (expr{value} (Name (str{id}{val=file_dict}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:1_}))))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=file_dict}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=content-type}))) (expr (Str (str{s}{val=text/plain})))))))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=io}) (alias*{names} (alias (str{name}{val=BytesIO}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.files.uploadedfile}) (alias*{names} (alias (str{name}{val=TemporaryUploadedFile})) (alias (str{name}{val=InMemoryUploadedFile}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=python_2_unicode_compatible}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.module_loading}) (alias*{names} (alias (str{name}{val=import_string}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__all__})))) (expr{value} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=_STR:3_}))) (expr (Str (str{s}{val=TemporaryFileUploadHandler}))) (expr (Str (str{s}{val=MemoryFileUploadHandler}))) (expr (Str (str{s}{val=load_handler}))) (expr (Str (str{s}{val=StopFutureHandlers}))))))))
(root (ClassDef (str{name}{val=UploadFileException}) (expr*{bases} (expr (Name (str{id}{val=Exception})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=python_2_unicode_compatible}))))))
(root (ClassDef (str{name}{val=StopUpload}) (expr*{bases} (expr (Name (str{id}{val=UploadFileException})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=connection_reset})))) (expr*{defaults} (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=connection_reset})))) (expr{value} (Name (str{id}{val=connection_reset})))))
(root (FunctionDef (str{name}{val=__str__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=connection_reset}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (ClassDef (str{name}{val=SkipFile}) (expr*{bases} (expr (Name (str{id}{val=UploadFileException})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (ClassDef (str{name}{val=StopFutureHandlers}) (expr*{bases} (expr (Name (str{id}{val=UploadFileException})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (ClassDef (str{name}{val=FileUploadHandler}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=chunk_size})))) (expr{value} (BinOp (expr{left} (Num (int{n}{val=64}))) (operator{op} (Mult)) (expr{right} (BinOp (expr{left} (Num (int{n}{val=2}))) (operator{op} (Pow)) (expr{right} (Num (int{n}{val=10})))))))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=request})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file_name})))) (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=content_type})))) (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=content_length})))) (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=charset})))) (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=content_type_extra})))) (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=request})))) (expr{value} (Name (str{id}{val=request})))))
(root (FunctionDef (str{name}{val=handle_raw_input}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=input_data}))) (expr (Name (str{id}{val=META}))) (expr (Name (str{id}{val=content_length}))) (expr (Name (str{id}{val=boundary}))) (expr (Name (str{id}{val=encoding})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (FunctionDef (str{name}{val=new_file}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=field_name}))) (expr (Name (str{id}{val=file_name}))) (expr (Name (str{id}{val=content_type}))) (expr (Name (str{id}{val=content_length}))) (expr (Name (str{id}{val=charset}))) (expr (Name (str{id}{val=content_type_extra})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=field_name})))) (expr{value} (Name (str{id}{val=field_name})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file_name})))) (expr{value} (Name (str{id}{val=file_name})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=content_type})))) (expr{value} (Name (str{id}{val=content_type})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=content_length})))) (expr{value} (Name (str{id}{val=content_length})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=charset})))) (expr{value} (Name (str{id}{val=charset})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=content_type_extra})))) (expr{value} (Name (str{id}{val=content_type_extra})))))
(root (FunctionDef (str{name}{val=receive_data_chunk}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=raw_data}))) (expr (Name (str{id}{val=start})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=NotImplementedError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=file_complete}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=file_size})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=NotImplementedError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=upload_complete}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (ClassDef (str{name}{val=TemporaryFileUploadHandler}) (expr*{bases} (expr (Name (str{id}{val=FileUploadHandler})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=TemporaryFileUploadHandler}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (FunctionDef (str{name}{val=new_file}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=file_name})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=TemporaryFileUploadHandler}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=new_file}))) (expr*{args} (expr (Name (str{id}{val=file_name})))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file})))) (expr{value} (Call (expr{func} (Name (str{id}{val=TemporaryUploadedFile}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file_name}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=content_type}))) (expr (Num (int{n}{val=0}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=charset}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=content_type_extra}))))))))
(root (FunctionDef (str{name}{val=receive_data_chunk}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=raw_data}))) (expr (Name (str{id}{val=start})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))) (str{attr}{val=write}))) (expr*{args} (expr (Name (str{id}{val=raw_data}))))))))
(root (FunctionDef (str{name}{val=file_complete}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=file_size})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))) (str{attr}{val=seek}))) (expr*{args} (expr (Num (int{n}{val=0}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))) (str{attr}{val=size})))) (expr{value} (Name (str{id}{val=file_size})))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file})))))
(root (ClassDef (str{name}{val=MemoryFileUploadHandler}) (expr*{bases} (expr (Name (str{id}{val=FileUploadHandler})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=handle_raw_input}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=input_data}))) (expr (Name (str{id}{val=META}))) (expr (Name (str{id}{val=content_length}))) (expr (Name (str{id}{val=boundary}))) (expr (Name (str{id}{val=encoding})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=content_length}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=FILE_UPLOAD_MAX_MEMORY_SIZE})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=activated})))) (expr{value} (Name (str{id}{val=False})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=activated})))) (expr{value} (Name (str{id}{val=True})))))
(root (FunctionDef (str{name}{val=new_file}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=MemoryFileUploadHandler}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=new_file}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=activated}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file})))) (expr{value} (Call (expr{func} (Name (str{id}{val=BytesIO})))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=StopFutureHandlers})))))))
(root (FunctionDef (str{name}{val=receive_data_chunk}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=raw_data}))) (expr (Name (str{id}{val=start})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=activated}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))) (str{attr}{val=write}))) (expr*{args} (expr (Name (str{id}{val=raw_data}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=raw_data})))))
(root (FunctionDef (str{name}{val=file_complete}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=file_size})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=activated}))))) (stmt*{body} (stmt (Pass)))))
(root (Return (epsilon)))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))) (str{attr}{val=seek}))) (expr*{args} (expr (Num (int{n}{val=0}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=InMemoryUploadedFile}))) (keyword*{keywords} (keyword (str{arg}{val=file}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file})))) (keyword (str{arg}{val=field_name}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=field_name})))) (keyword (str{arg}{val=name}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file_name})))) (keyword (str{arg}{val=content_type}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=content_type})))) (keyword (str{arg}{val=size}) (expr{value} (Name (str{id}{val=file_size})))) (keyword (str{arg}{val=charset}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=charset})))) (keyword (str{arg}{val=content_type_extra}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=content_type_extra})))))))))
(root (FunctionDef (str{name}{val=load_handler}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=path})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Call (expr{func} (Name (str{id}{val=import_string}))) (expr*{args} (expr (Name (str{id}{val=path})))))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (ClassDef (str{name}{val=FileProxyMixin}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=encoding})))) (expr{value} (Call (expr{func} (Name (str{id}{val=property}))) (expr*{args} (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (expr{body} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))) (str{attr}{val=encoding}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=fileno})))) (expr{value} (Call (expr{func} (Name (str{id}{val=property}))) (expr*{args} (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (expr{body} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))) (str{attr}{val=fileno}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=flush})))) (expr{value} (Call (expr{func} (Name (str{id}{val=property}))) (expr*{args} (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (expr{body} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))) (str{attr}{val=flush}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=isatty})))) (expr{value} (Call (expr{func} (Name (str{id}{val=property}))) (expr*{args} (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (expr{body} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))) (str{attr}{val=isatty}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=newlines})))) (expr{value} (Call (expr{func} (Name (str{id}{val=property}))) (expr*{args} (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (expr{body} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))) (str{attr}{val=newlines}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=read})))) (expr{value} (Call (expr{func} (Name (str{id}{val=property}))) (expr*{args} (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (expr{body} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))) (str{attr}{val=read}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=readinto})))) (expr{value} (Call (expr{func} (Name (str{id}{val=property}))) (expr*{args} (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (expr{body} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))) (str{attr}{val=readinto}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=readline})))) (expr{value} (Call (expr{func} (Name (str{id}{val=property}))) (expr*{args} (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (expr{body} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))) (str{attr}{val=readline}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=readlines})))) (expr{value} (Call (expr{func} (Name (str{id}{val=property}))) (expr*{args} (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (expr{body} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))) (str{attr}{val=readlines}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=seek})))) (expr{value} (Call (expr{func} (Name (str{id}{val=property}))) (expr*{args} (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (expr{body} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))) (str{attr}{val=seek}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=softspace})))) (expr{value} (Call (expr{func} (Name (str{id}{val=property}))) (expr*{args} (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (expr{body} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))) (str{attr}{val=softspace}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=tell})))) (expr{value} (Call (expr{func} (Name (str{id}{val=property}))) (expr*{args} (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (expr{body} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))) (str{attr}{val=tell}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=truncate})))) (expr{value} (Call (expr{func} (Name (str{id}{val=property}))) (expr*{args} (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (expr{body} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))) (str{attr}{val=truncate}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=write})))) (expr{value} (Call (expr{func} (Name (str{id}{val=property}))) (expr*{args} (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (expr{body} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))) (str{attr}{val=write}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=writelines})))) (expr{value} (Call (expr{func} (Name (str{id}{val=property}))) (expr*{args} (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (expr{body} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))) (str{attr}{val=writelines}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=xreadlines})))) (expr{value} (Call (expr{func} (Name (str{id}{val=property}))) (expr*{args} (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (expr{body} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))) (str{attr}{val=xreadlines}))))))))))
(root (FunctionDef (str{name}{val=__iter__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=iter}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=logging})))))
(root (Import (alias*{names} (alias (str{name}{val=sys})))))
(root (Import (alias*{names} (alias (str{name}{val=types})))))
(root (ImportFrom (str{module}{val=django}) (alias*{names} (alias (str{name}{val=http}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core}) (alias*{names} (alias (str{name}{val=urlresolvers}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core}) (alias*{names} (alias (str{name}{val=signals}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.exceptions}) (alias*{names} (alias (str{name}{val=MiddlewareNotUsed})) (alias (str{name}{val=PermissionDenied})) (alias (str{name}{val=SuspiciousOperation}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.db}) (alias*{names} (alias (str{name}{val=connections})) (alias (str{name}{val=transaction}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=force_text}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.module_loading}) (alias*{names} (alias (str{name}{val=import_string}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.views}) (alias*{names} (alias (str{name}{val=debug}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=logger})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=logging}))) (str{attr}{val=getLogger}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (ClassDef (str{name}{val=BaseHandler}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=response_fixes})))) (expr{value} (List (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=http}))) (str{attr}{val=fix_location_header}))) (expr (Attribute (expr{value} (Name (str{id}{val=http}))) (str{attr}{val=conditional_content_removal}))))))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_request_middleware}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_view_middleware}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_template_response_middleware}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_response_middleware}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_exception_middleware})))) (expr{value} (Name (str{id}{val=None})))))
(root (FunctionDef (str{name}{val=load_middleware}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_view_middleware})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_template_response_middleware})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_response_middleware})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_exception_middleware})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=request_middleware})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=middleware_path}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=MIDDLEWARE_CLASSES}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=mw_class})))) (expr{value} (Call (expr{func} (Name (str{id}{val=import_string}))) (expr*{args} (expr (Name (str{id}{val=middleware_path}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=mw_instance})))) (expr{value} (Call (expr{func} (Name (str{id}{val=mw_class})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=MiddlewareNotUsed}))) (stmt*{body} (stmt (Pass)))))))
(root (Continue))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=mw_instance}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=request_middleware}))) (str{attr}{val=append}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=mw_instance}))) (str{attr}{val=process_request}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=mw_instance}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_view_middleware}))) (str{attr}{val=append}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=mw_instance}))) (str{attr}{val=process_view}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=mw_instance}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_template_response_middleware}))) (str{attr}{val=insert}))) (expr*{args} (expr (Num (int{n}{val=0}))) (expr (Attribute (expr{value} (Name (str{id}{val=mw_instance}))) (str{attr}{val=process_template_response}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=mw_instance}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_response_middleware}))) (str{attr}{val=insert}))) (expr*{args} (expr (Num (int{n}{val=0}))) (expr (Attribute (expr{value} (Name (str{id}{val=mw_instance}))) (str{attr}{val=process_response}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=mw_instance}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_exception_middleware}))) (str{attr}{val=insert}))) (expr*{args} (expr (Num (int{n}{val=0}))) (expr (Attribute (expr{value} (Name (str{id}{val=mw_instance}))) (str{attr}{val=process_exception}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_request_middleware})))) (expr{value} (Name (str{id}{val=request_middleware})))))
(root (FunctionDef (str{name}{val=make_view_atomic}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=view})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=non_atomic_requests})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=view}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Call (expr{func} (Name (str{id}{val=set}))))))))))
(root (For (expr{target} (Name (str{id}{val=db}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=connections}))) (str{attr}{val=all}))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=db}))) (str{attr}{val=settings_dict}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=ATOMIC_REQUESTS}))))))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=db}))) (str{attr}{val=alias}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=non_atomic_requests}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=view})))) (expr{value} (Call (expr{func} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=transaction}))) (str{attr}{val=atomic}))) (keyword*{keywords} (keyword (str{arg}{val=using}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=db}))) (str{attr}{val=alias}))))))) (expr*{args} (expr (Name (str{id}{val=view}))))))))
(root (Return (expr{value} (Name (str{id}{val=view})))))
(root (FunctionDef (str{name}{val=get_exception_response}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=request}))) (expr (Name (str{id}{val=resolver}))) (expr (Name (str{id}{val=status_code})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=callback}))) (expr (Name (str{id}{val=param_dict}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=resolver}))) (str{attr}{val=resolve_error_handler}))) (expr*{args} (expr (Name (str{id}{val=status_code}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=response})))) (expr{value} (Call (expr{func} (Name (str{id}{val=callback}))) (expr*{args} (expr (Name (str{id}{val=request})))) (expr{kwargs} (Name (str{id}{val=param_dict})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=signals}))) (str{attr}{val=got_request_exception}))) (str{attr}{val=send}))) (keyword*{keywords} (keyword (str{arg}{val=sender}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__class__})))) (keyword (str{arg}{val=request}) (expr{value} (Name (str{id}{val=request})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=response})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=handle_uncaught_exception}))) (expr*{args} (expr (Name (str{id}{val=request}))) (expr (Name (str{id}{val=resolver}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=exc_info}))))))))))
(root (Return (expr{value} (Name (str{id}{val=response})))))
(root (FunctionDef (str{name}{val=get_response}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=request})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=urlconf})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=ROOT_URLCONF})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=urlresolvers}))) (str{attr}{val=set_urlconf}))) (expr*{args} (expr (Name (str{id}{val=urlconf}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=resolver})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=urlresolvers}))) (str{attr}{val=RegexURLResolver}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=urlconf}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=response})))) (expr{value} (Name (str{id}{val=None})))))
(root (For (expr{target} (Name (str{id}{val=middleware_method}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_request_middleware}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=response})))) (expr{value} (Call (expr{func} (Name (str{id}{val=middleware_method}))) (expr*{args} (expr (Name (str{id}{val=request}))))))))
(root (If (expr{test} (Name (str{id}{val=response}))) (stmt*{body} (stmt (Pass)))))
(root (Break))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=response}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=request}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=urlconf})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=request}))) (str{attr}{val=urlconf})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=urlresolvers}))) (str{attr}{val=set_urlconf}))) (expr*{args} (expr (Name (str{id}{val=urlconf}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=resolver})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=urlresolvers}))) (str{attr}{val=RegexURLResolver}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=urlconf}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=resolver_match})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=resolver}))) (str{attr}{val=resolve}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=request}))) (str{attr}{val=path_info}))))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=callback}))) (expr (Name (str{id}{val=callback_args}))) (expr (Name (str{id}{val=callback_kwargs}))))))) (expr{value} (Name (str{id}{val=resolver_match})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=request}))) (str{attr}{val=resolver_match})))) (expr{value} (Name (str{id}{val=resolver_match})))))
(root (For (expr{target} (Name (str{id}{val=middleware_method}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_view_middleware}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=response})))) (expr{value} (Call (expr{func} (Name (str{id}{val=middleware_method}))) (expr*{args} (expr (Name (str{id}{val=request}))) (expr (Name (str{id}{val=callback}))) (expr (Name (str{id}{val=callback_args}))) (expr (Name (str{id}{val=callback_kwargs}))))))))
(root (If (expr{test} (Name (str{id}{val=response}))) (stmt*{body} (stmt (Pass)))))
(root (Break))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=response}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=wrapped_callback})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=make_view_atomic}))) (expr*{args} (expr (Name (str{id}{val=callback}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=response})))) (expr{value} (Call (expr{func} (Name (str{id}{val=wrapped_callback}))) (expr*{args} (expr (Name (str{id}{val=request})))) (expr{starargs} (Name (str{id}{val=callback_args}))) (expr{kwargs} (Name (str{id}{val=callback_kwargs})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=Exception}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (For (expr{target} (Name (str{id}{val=middleware_method}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_exception_middleware}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=response})))) (expr{value} (Call (expr{func} (Name (str{id}{val=middleware_method}))) (expr*{args} (expr (Name (str{id}{val=request}))) (expr (Name (str{id}{val=e}))))))))
(root (If (expr{test} (Name (str{id}{val=response}))) (stmt*{body} (stmt (Pass)))))
(root (Break))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=response}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (epsilon)))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=response}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=callback}))) (expr (Attribute (expr{value} (Name (str{id}{val=types}))) (str{attr}{val=FunctionType})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=view_name})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=callback}))) (str{attr}{val=__name__})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=view_name})))) (expr{value} (BinOp (expr{left} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=callback}))) (str{attr}{val=__class__}))) (str{attr}{val=__name__}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=_STR:0_})))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=callback}))) (str{attr}{val=__module__}))) (expr (Name (str{id}{val=view_name})))))))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=response}))) (expr (Str (str{s}{val=_STR:0_})))))) (expr (Call (expr{func} (Name (str{id}{val=callable}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=response}))) (str{attr}{val=render}))))))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=middleware_method}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_template_response_middleware}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=response})))) (expr{value} (Call (expr{func} (Name (str{id}{val=middleware_method}))) (expr*{args} (expr (Name (str{id}{val=request}))) (expr (Name (str{id}{val=response}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=response}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=%s.process_template_response didn't return an HttpResponse object. It returned None instead.}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=middleware_method}))) (str{attr}{val=__self__}))) (str{attr}{val=__class__}))) (str{attr}{val=__name__}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=response})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=response}))) (str{attr}{val=render})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Attribute (expr{value} (Name (str{id}{val=http}))) (str{attr}{val=Http404}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=logger}))) (str{attr}{val=warning}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Attribute (expr{value} (Name (str{id}{val=request}))) (str{attr}{val=path})))) (keyword*{keywords} (keyword (str{arg}{val=extra}) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=request})))) (expr*{values} (expr (Num (int{n}{val=404}))) (expr (Name (str{id}{val=request}))))))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=DEBUG}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=response})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=debug}))) (str{attr}{val=technical_404_response}))) (expr*{args} (expr (Name (str{id}{val=request}))) (expr (Name (str{id}{val=e}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=response})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get_exception_response}))) (expr*{args} (expr (Name (str{id}{val=request}))) (expr (Name (str{id}{val=resolver}))) (expr (Num (int{n}{val=404}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=PermissionDenied}))) (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=logger}))) (str{attr}{val=warning}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Attribute (expr{value} (Name (str{id}{val=request}))) (str{attr}{val=path})))) (keyword*{keywords} (keyword (str{arg}{val=extra}) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=status_code}))) (expr (Str (str{s}{val=request})))) (expr*{values} (expr (Num (int{n}{val=403}))) (expr (Name (str{id}{val=request}))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=response})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get_exception_response}))) (expr*{args} (expr (Name (str{id}{val=request}))) (expr (Name (str{id}{val=resolver}))) (expr (Num (int{n}{val=403}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=SuspiciousOperation}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=security_logger})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=logging}))) (str{attr}{val=getLogger}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=__class__}))) (str{attr}{val=__name__}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=security_logger}))) (str{attr}{val=error}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=e}))))))) (keyword*{keywords} (keyword (str{arg}{val=extra}) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=status_code}))) (expr (Str (str{s}{val=request})))) (expr*{values} (expr (Num (int{n}{val=400}))) (expr (Name (str{id}{val=request}))))))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=DEBUG}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=debug}))) (str{attr}{val=technical_500_response}))) (expr*{args} (expr (Name (str{id}{val=request})))) (keyword*{keywords} (keyword (str{arg}{val=status_code}) (expr{value} (Num (int{n}{val=400}))))) (expr{starargs} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=exc_info})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=response})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get_exception_response}))) (expr*{args} (expr (Name (str{id}{val=request}))) (expr (Name (str{id}{val=resolver}))) (expr (Num (int{n}{val=400}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=SystemExit}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (epsilon)))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=signals}))) (str{attr}{val=got_request_exception}))) (str{attr}{val=send}))) (keyword*{keywords} (keyword (str{arg}{val=sender}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__class__})))) (keyword (str{arg}{val=request}) (expr{value} (Name (str{id}{val=request})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=response})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=handle_uncaught_exception}))) (expr*{args} (expr (Name (str{id}{val=request}))) (expr (Name (str{id}{val=resolver}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=exc_info}))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (For (expr{target} (Name (str{id}{val=middleware_method}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_response_middleware}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=response})))) (expr{value} (Call (expr{func} (Name (str{id}{val=middleware_method}))) (expr*{args} (expr (Name (str{id}{val=request}))) (expr (Name (str{id}{val=response}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=response}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=%s.process_response didn't return an HttpResponse object. It returned None instead.}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=middleware_method}))) (str{attr}{val=__self__}))) (str{attr}{val=__class__}))) (str{attr}{val=__name__}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=response})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=apply_response_fixes}))) (expr*{args} (expr (Name (str{id}{val=request}))) (expr (Name (str{id}{val=response}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=signals}))) (str{attr}{val=got_request_exception}))) (str{attr}{val=send}))) (keyword*{keywords} (keyword (str{arg}{val=sender}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__class__})))) (keyword (str{arg}{val=request}) (expr{value} (Name (str{id}{val=request})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=response})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=handle_uncaught_exception}))) (expr*{args} (expr (Name (str{id}{val=request}))) (expr (Name (str{id}{val=resolver}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=exc_info}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=response}))) (str{attr}{val=_closable_objects}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=request}))))))))
(root (Return (expr{value} (Name (str{id}{val=response})))))
(root (FunctionDef (str{name}{val=handle_uncaught_exception}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=request}))) (expr (Name (str{id}{val=resolver}))) (expr (Name (str{id}{val=exc_info})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=DEBUG_PROPAGATE_EXCEPTIONS}))) (stmt*{body} (stmt (Pass)))))
(root (Raise (epsilon)))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=logger}))) (str{attr}{val=error}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Attribute (expr{value} (Name (str{id}{val=request}))) (str{attr}{val=path})))) (keyword*{keywords} (keyword (str{arg}{val=exc_info}) (expr{value} (Name (str{id}{val=exc_info})))) (keyword (str{arg}{val=extra}) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=status_code}))) (expr (Str (str{s}{val=request})))) (expr*{values} (expr (Num (int{n}{val=500}))) (expr (Name (str{id}{val=request}))))))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=DEBUG}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=debug}))) (str{attr}{val=technical_500_response}))) (expr*{args} (expr (Name (str{id}{val=request})))) (expr{starargs} (Name (str{id}{val=exc_info})))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=resolver}))) (str{attr}{val=urlconf_module}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=reraise}))) (expr{starargs} (Name (str{id}{val=exc_info})))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=callback}))) (expr (Name (str{id}{val=param_dict}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=resolver}))) (str{attr}{val=resolve_error_handler}))) (expr*{args} (expr (Num (int{n}{val=500}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=callback}))) (expr*{args} (expr (Name (str{id}{val=request})))) (expr{kwargs} (Name (str{id}{val=param_dict})))))))
(root (FunctionDef (str{name}{val=apply_response_fixes}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=request}))) (expr (Name (str{id}{val=response})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=func}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=response_fixes}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=response})))) (expr{value} (Call (expr{func} (Name (str{id}{val=func}))) (expr*{args} (expr (Name (str{id}{val=request}))) (expr (Name (str{id}{val=response}))))))))
(root (Return (expr{value} (Name (str{id}{val=response})))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=cgi})))))
(root (Import (alias*{names} (alias (str{name}{val=codecs})))))
(root (Import (alias*{names} (alias (str{name}{val=logging})))))
(root (Import (alias*{names} (alias (str{name}{val=sys})))))
(root (ImportFrom (str{module}{val=io}) (alias*{names} (alias (str{name}{val=BytesIO}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=threading}) (alias*{names} (alias (str{name}{val=Lock}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=warnings})))))
(root (ImportFrom (str{module}{val=django}) (alias*{names} (alias (str{name}{val=http}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core}) (alias*{names} (alias (str{name}{val=signals}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.handlers}) (alias*{names} (alias (str{name}{val=base}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.urlresolvers}) (alias*{names} (alias (str{name}{val=set_script_prefix}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=datastructures}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.deprecation}) (alias*{names} (alias (str{name}{val=RemovedInDjango19Warning}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=force_str})) (alias (str{name}{val=force_text}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.functional}) (alias*{names} (alias (str{name}{val=cached_property}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.http.response}) (alias*{names} (alias (str{name}{val=REASON_PHRASES}) (str{asname}{val=STATUS_CODE_TEXT}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=logger})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=logging}))) (str{attr}{val=getLogger}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=ISO_8859_1}))) (expr (Name (str{id}{val=UTF_8}))))))) (expr{value} (Tuple (expr*{elts} (expr (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (expr (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_})))))))))))
(root (ClassDef (str{name}{val=LimitedStream}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=stream}))) (expr (Name (str{id}{val=limit}))) (expr (Name (str{id}{val=buf_size})))) (expr*{defaults} (expr (BinOp (expr{left} (BinOp (expr{left} (Num (int{n}{val=64}))) (operator{op} (Mult)) (expr{right} (Num (int{n}{val=1024}))))) (operator{op} (Mult)) (expr{right} (Num (int{n}{val=1024})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stream})))) (expr{value} (Name (str{id}{val=stream})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=remaining})))) (expr{value} (Name (str{id}{val=limit})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=buffer})))) (expr{value} (Str (str{s}{val=})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=buf_size})))) (expr{value} (Name (str{id}{val=buf_size})))))
(root (FunctionDef (str{name}{val=_read_limited}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=size})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=size}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Compare (expr{left} (Name (str{id}{val=size}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=remaining}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=size})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=remaining})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=size}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stream}))) (str{attr}{val=read}))) (expr*{args} (expr (Name (str{id}{val=size}))))))))
(root (AugAssign (expr{target} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=remaining}))) (operator{op} (Sub)) (expr{value} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=result}))))))))
(root (Return (expr{value} (Name (str{id}{val=result})))))
(root (FunctionDef (str{name}{val=read}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=size})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=size}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=buffer}))) (operator{op} (Add)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_read_limited})))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=buffer})))) (expr{value} (Str (str{s}{val=})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Name (str{id}{val=size}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=buffer}))))))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=buffer}))) (slice{slice} (Slice (expr{upper} (Name (str{id}{val=size})))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=buffer})))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=buffer}))) (slice{slice} (Slice (expr{lower} (Name (str{id}{val=size})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=buffer}))) (operator{op} (Add)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_read_limited}))) (expr*{args} (expr (BinOp (expr{left} (Name (str{id}{val=size}))) (operator{op} (Sub)) (expr{right} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=buffer})))))))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=buffer})))) (expr{value} (Str (str{s}{val=})))))
(root (Return (expr{value} (Name (str{id}{val=result})))))
(root (FunctionDef (str{name}{val=readline}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=size})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (While (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Str (str{s}{val=\n}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=buffer})))))) (expr (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=size}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=buffer})))))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Name (str{id}{val=size})))))))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=size}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=chunk})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_read_limited}))) (expr*{args} (expr (BinOp (expr{left} (Name (str{id}{val=size}))) (operator{op} (Sub)) (expr{right} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=buffer})))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=chunk})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_read_limited})))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=chunk}))))) (stmt*{body} (stmt (Pass)))))
(root (Break))
(root (AugAssign (expr{target} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=buffer}))) (operator{op} (Add)) (expr{value} (Name (str{id}{val=chunk})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=sio})))) (expr{value} (Call (expr{func} (Name (str{id}{val=BytesIO}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=buffer}))))))))
(root (If (expr{test} (Name (str{id}{val=size}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=line})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sio}))) (str{attr}{val=readline}))) (expr*{args} (expr (Name (str{id}{val=size}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=line})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sio}))) (str{attr}{val=readline})))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=buffer})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sio}))) (str{attr}{val=read})))))))
(root (Return (expr{value} (Name (str{id}{val=line})))))
(root (ClassDef (str{name}{val=WSGIRequest}) (expr*{bases} (expr (Attribute (expr{value} (Name (str{id}{val=http}))) (str{attr}{val=HttpRequest})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=environ})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=script_name})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_script_name}))) (expr*{args} (expr (Name (str{id}{val=environ}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=path_info})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_path_info}))) (expr*{args} (expr (Name (str{id}{val=environ}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=path_info}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=path_info})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=environ})))) (expr{value} (Name (str{id}{val=environ})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=path_info})))) (expr{value} (Name (str{id}{val=path_info})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=path})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=%s/%s}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=script_name}))) (str{attr}{val=rstrip}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=path_info}))) (str{attr}{val=replace}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=}))) (expr (Num (int{n}{val=1})))))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=META})))) (expr{value} (Name (str{id}{val=environ})))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=META}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Name (str{id}{val=path_info})))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=META}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=SCRIPT_NAME})))))))) (expr{value} (Name (str{id}{val=script_name})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=method})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=environ}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (str{attr}{val=upper})))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=_}))) (expr (Name (str{id}{val=content_params}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=cgi}))) (str{attr}{val=parse_header}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=environ}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=})))))))))))
(root (If (expr{test} (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=content_params})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=codecs}))) (str{attr}{val=lookup}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=content_params}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=LookupError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=encoding})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=content_params}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_post_parse_error})))) (expr{value} (Name (str{id}{val=False})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=content_length})))) (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=environ}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=ValueError}))) (expr (Name (str{id}{val=TypeError})))))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=content_length})))) (expr{value} (Num (int{n}{val=0})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_stream})))) (expr{value} (Call (expr{func} (Name (str{id}{val=LimitedStream}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=environ}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (expr (Name (str{id}{val=content_length}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_read_started})))) (expr{value} (Name (str{id}{val=False})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=resolver_match})))) (expr{value} (Name (str{id}{val=None})))))
(root (FunctionDef (str{name}{val=_get_scheme}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=environ}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=_get_request}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=warnings}))) (str{attr}{val=warn}))) (expr*{args} (expr (Str (str{s}{val=`request.REQUEST` is deprecated, use `request.GET` or `request.POST` instead.}))) (expr (Name (str{id}{val=RemovedInDjango19Warning}))) (expr (Num (int{n}{val=2}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Str (str{s}{val=_STR:0_})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_request})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=datastructures}))) (str{attr}{val=MergeDict}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=POST}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=GET}))))))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_request})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=cached_property}))))))
(root (FunctionDef (str{name}{val=GET}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=raw_query_string})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_bytes_from_wsgi}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=environ}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=http}))) (str{attr}{val=QueryDict}))) (expr*{args} (expr (Name (str{id}{val=raw_query_string})))) (keyword*{keywords} (keyword (str{arg}{val=encoding}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_encoding})))))))))
(root (FunctionDef (str{name}{val=_get_post}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Str (str{s}{val=_STR:0_})))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_load_post_and_files})))))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_post})))))
(root (FunctionDef (str{name}{val=_set_post}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=post})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_post})))) (expr{value} (Name (str{id}{val=post})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=cached_property}))))))
(root (FunctionDef (str{name}{val=COOKIES}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=raw_cookie})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_str_from_wsgi}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=environ}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=http}))) (str{attr}{val=parse_cookie}))) (expr*{args} (expr (Name (str{id}{val=raw_cookie}))))))))
(root (FunctionDef (str{name}{val=_get_files}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Str (str{s}{val=_STR:0_})))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_load_post_and_files})))))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_files})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=POST})))) (expr{value} (Call (expr{func} (Name (str{id}{val=property}))) (expr*{args} (expr (Name (str{id}{val=_get_post}))) (expr (Name (str{id}{val=_set_post}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=FILES})))) (expr{value} (Call (expr{func} (Name (str{id}{val=property}))) (expr*{args} (expr (Name (str{id}{val=_get_files}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=REQUEST})))) (expr{value} (Call (expr{func} (Name (str{id}{val=property}))) (expr*{args} (expr (Name (str{id}{val=_get_request}))))))))
(root (ClassDef (str{name}{val=WSGIHandler}) (expr*{bases} (expr (Attribute (expr{value} (Name (str{id}{val=base}))) (str{attr}{val=BaseHandler})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=initLock})))) (expr{value} (Call (expr{func} (Name (str{id}{val=Lock})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=request_class})))) (expr{value} (Name (str{id}{val=WSGIRequest})))))
(root (FunctionDef (str{name}{val=__call__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=environ}))) (expr (Name (str{id}{val=start_response})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_request_middleware}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (With (expr{context_expr} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=initLock}))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_request_middleware}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=load_middleware})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_request_middleware})))) (expr{value} (Name (str{id}{val=None})))))
(root (Raise (epsilon)))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=set_script_prefix}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=get_script_name}))) (expr*{args} (expr (Name (str{id}{val=environ})))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=signals}))) (str{attr}{val=request_started}))) (str{attr}{val=send}))) (keyword*{keywords} (keyword (str{arg}{val=sender}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__class__})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=request})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=request_class}))) (expr*{args} (expr (Name (str{id}{val=environ}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=UnicodeDecodeError}))) (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=logger}))) (str{attr}{val=warning}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=exc_info}) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=exc_info})))))) (keyword (str{arg}{val=extra}) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=status_code})))) (expr*{values} (expr (Num (int{n}{val=400}))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=response})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=http}))) (str{attr}{val=HttpResponseBadRequest})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=response})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get_response}))) (expr*{args} (expr (Name (str{id}{val=request}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=response}))) (str{attr}{val=_handler_class})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__class__})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=status})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=response}))) (str{attr}{val=status_code}))) (expr (Attribute (expr{value} (Name (str{id}{val=response}))) (str{attr}{val=reason_phrase}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=response_headers})))) (expr{value} (ListComp (expr{elt} (Tuple (expr*{elts} (expr (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Name (str{id}{val=k})))))) (expr (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Name (str{id}{val=v}))))))))) (comprehension*{generators} (comprehension (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Name (str{id}{val=v})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=response}))) (str{attr}{val=items})))))))))))
(root (For (expr{target} (Name (str{id}{val=c}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=response}))) (str{attr}{val=cookies}))) (str{attr}{val=values}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=response_headers}))) (str{attr}{val=append}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (expr (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=c}))) (str{attr}{val=output}))) (keyword*{keywords} (keyword (str{arg}{val=header}) (expr{value} (Str (str{s}{val=_STR:1_}))))))))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=start_response}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=force_str}))) (expr*{args} (expr (Name (str{id}{val=status})))))) (expr (Name (str{id}{val=response_headers}))))))))
(root (Return (expr{value} (Name (str{id}{val=response})))))
(root (FunctionDef (str{name}{val=get_path_info}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=environ})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=path_info})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_bytes_from_wsgi}))) (expr*{args} (expr (Name (str{id}{val=environ}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=path_info}))) (str{attr}{val=decode}))) (expr*{args} (expr (Name (str{id}{val=UTF_8}))))))))
(root (FunctionDef (str{name}{val=get_script_name}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=environ})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=FORCE_SCRIPT_NAME}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=FORCE_SCRIPT_NAME}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=script_url})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_bytes_from_wsgi}))) (expr*{args} (expr (Name (str{id}{val=environ}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=script_url}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=script_url})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_bytes_from_wsgi}))) (expr*{args} (expr (Name (str{id}{val=environ}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=}))))))))
(root (If (expr{test} (Name (str{id}{val=script_url}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=path_info})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_bytes_from_wsgi}))) (expr*{args} (expr (Name (str{id}{val=environ}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=script_name})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=script_url}))) (slice{slice} (Slice (expr{upper} (UnaryOp (unaryop{op} (USub)) (expr{operand} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=path_info}))))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=script_name})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_bytes_from_wsgi}))) (expr*{args} (expr (Name (str{id}{val=environ}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=script_name}))) (str{attr}{val=decode}))) (expr*{args} (expr (Name (str{id}{val=UTF_8}))))))))
(root (FunctionDef (str{name}{val=get_bytes_from_wsgi}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=environ}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=default})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=environ}))) (str{attr}{val=get}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Name (str{id}{val=key})))))) (expr (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Name (str{id}{val=default})))))))))))
(root (Return (expr{value} (IfExp (expr{test} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=PY2}))) (expr{body} (Name (str{id}{val=value}))) (expr{orelse} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=encode}))) (expr*{args} (expr (Name (str{id}{val=ISO_8859_1}))))))))))
(root (FunctionDef (str{name}{val=get_str_from_wsgi}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=environ}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=default})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=environ}))) (str{attr}{val=get}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Name (str{id}{val=key})))))) (expr (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Name (str{id}{val=default})))))))))))
(root (Return (expr{value} (IfExp (expr{test} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=PY2}))) (expr{body} (Name (str{id}{val=value}))) (expr{orelse} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=encode}))) (expr*{args} (expr (Name (str{id}{val=ISO_8859_1})))))) (str{attr}{val=decode}))) (expr*{args} (expr (Name (str{id}{val=UTF_8}))))))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.module_loading}) (alias*{names} (alias (str{name}{val=import_string}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.mail.utils}) (alias*{names} (alias (str{name}{val=CachedDnsName})) (alias (str{name}{val=DNS_NAME}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.mail.message}) (alias*{names} (alias (str{name}{val=EmailMessage})) (alias (str{name}{val=EmailMultiAlternatives})) (alias (str{name}{val=SafeMIMEText})) (alias (str{name}{val=SafeMIMEMultipart})) (alias (str{name}{val=DEFAULT_ATTACHMENT_MIME_TYPE})) (alias (str{name}{val=make_msgid})) (alias (str{name}{val=BadHeaderError})) (alias (str{name}{val=forbid_multi_line_headers}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__all__})))) (expr{value} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=_STR:3_}))) (expr (Str (str{s}{val=_STR:4_}))) (expr (Str (str{s}{val=SafeMIMEMultipart}))) (expr (Str (str{s}{val=DEFAULT_ATTACHMENT_MIME_TYPE}))) (expr (Str (str{s}{val=make_msgid}))) (expr (Str (str{s}{val=BadHeaderError}))) (expr (Str (str{s}{val=forbid_multi_line_headers}))) (expr (Str (str{s}{val=get_connection}))) (expr (Str (str{s}{val=send_mail}))) (expr (Str (str{s}{val=send_mass_mail}))) (expr (Str (str{s}{val=mail_admins}))) (expr (Str (str{s}{val=mail_managers}))))))))
(root (FunctionDef (str{name}{val=get_connection}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=backend}))) (expr (Name (str{id}{val=fail_silently})))) (str{kwarg}{val=kwds}) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=klass})))) (expr{value} (Call (expr{func} (Name (str{id}{val=import_string}))) (expr*{args} (expr (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=backend}))) (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=EMAIL_BACKEND})))))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=klass}))) (keyword*{keywords} (keyword (str{arg}{val=fail_silently}) (expr{value} (Name (str{id}{val=fail_silently}))))) (expr{kwargs} (Name (str{id}{val=kwds})))))))
(root (FunctionDef (str{name}{val=send_mail}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=subject}))) (expr (Name (str{id}{val=message}))) (expr (Name (str{id}{val=from_email}))) (expr (Name (str{id}{val=recipient_list}))) (expr (Name (str{id}{val=fail_silently}))) (expr (Name (str{id}{val=auth_user}))) (expr (Name (str{id}{val=auth_password}))) (expr (Name (str{id}{val=connection}))) (expr (Name (str{id}{val=html_message})))) (expr*{defaults} (expr (Name (str{id}{val=False}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=connection})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=connection}))) (expr (Call (expr{func} (Name (str{id}{val=get_connection}))) (keyword*{keywords} (keyword (str{arg}{val=username}) (expr{value} (Name (str{id}{val=auth_user})))) (keyword (str{arg}{val=password}) (expr{value} (Name (str{id}{val=auth_password})))) (keyword (str{arg}{val=fail_silently}) (expr{value} (Name (str{id}{val=fail_silently}))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=mail})))) (expr{value} (Call (expr{func} (Name (str{id}{val=EmailMultiAlternatives}))) (expr*{args} (expr (Name (str{id}{val=subject}))) (expr (Name (str{id}{val=message}))) (expr (Name (str{id}{val=from_email}))) (expr (Name (str{id}{val=recipient_list})))) (keyword*{keywords} (keyword (str{arg}{val=connection}) (expr{value} (Name (str{id}{val=connection})))))))))
(root (If (expr{test} (Name (str{id}{val=html_message}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=mail}))) (str{attr}{val=attach_alternative}))) (expr*{args} (expr (Name (str{id}{val=html_message}))) (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=mail}))) (str{attr}{val=send})))))))
(root (FunctionDef (str{name}{val=send_mass_mail}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=datatuple}))) (expr (Name (str{id}{val=fail_silently}))) (expr (Name (str{id}{val=auth_user}))) (expr (Name (str{id}{val=auth_password}))) (expr (Name (str{id}{val=connection})))) (expr*{defaults} (expr (Name (str{id}{val=False}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=connection})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=connection}))) (expr (Call (expr{func} (Name (str{id}{val=get_connection}))) (keyword*{keywords} (keyword (str{arg}{val=username}) (expr{value} (Name (str{id}{val=auth_user})))) (keyword (str{arg}{val=password}) (expr{value} (Name (str{id}{val=auth_password})))) (keyword (str{arg}{val=fail_silently}) (expr{value} (Name (str{id}{val=fail_silently}))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=messages})))) (expr{value} (ListComp (expr{elt} (Call (expr{func} (Name (str{id}{val=EmailMessage}))) (expr*{args} (expr (Name (str{id}{val=subject}))) (expr (Name (str{id}{val=message}))) (expr (Name (str{id}{val=sender}))) (expr (Name (str{id}{val=recipient})))) (keyword*{keywords} (keyword (str{arg}{val=connection}) (expr{value} (Name (str{id}{val=connection}))))))) (comprehension*{generators} (comprehension (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=subject}))) (expr (Name (str{id}{val=message}))) (expr (Name (str{id}{val=sender}))) (expr (Name (str{id}{val=recipient})))))) (expr{iter} (Name (str{id}{val=datatuple})))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=send_messages}))) (expr*{args} (expr (Name (str{id}{val=messages}))))))))
(root (FunctionDef (str{name}{val=mail_admins}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=subject}))) (expr (Name (str{id}{val=message}))) (expr (Name (str{id}{val=fail_silently}))) (expr (Name (str{id}{val=connection}))) (expr (Name (str{id}{val=html_message})))) (expr*{defaults} (expr (Name (str{id}{val=False}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=ADMINS}))))) (stmt*{body} (stmt (Pass)))))
(root (Return (epsilon)))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=mail})))) (expr{value} (Call (expr{func} (Name (str{id}{val=EmailMultiAlternatives}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=%s%s}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=EMAIL_SUBJECT_PREFIX}))) (expr (Name (str{id}{val=subject})))))))) (expr (Name (str{id}{val=message}))) (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=SERVER_EMAIL}))) (expr (ListComp (expr{elt} (Subscript (expr{value} (Name (str{id}{val=a}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=a}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=ADMINS})))))))) (keyword*{keywords} (keyword (str{arg}{val=connection}) (expr{value} (Name (str{id}{val=connection})))))))))
(root (If (expr{test} (Name (str{id}{val=html_message}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=mail}))) (str{attr}{val=attach_alternative}))) (expr*{args} (expr (Name (str{id}{val=html_message}))) (expr (Str (str{s}{val=text/html}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=mail}))) (str{attr}{val=send}))) (keyword*{keywords} (keyword (str{arg}{val=fail_silently}) (expr{value} (Name (str{id}{val=fail_silently})))))))))
(root (FunctionDef (str{name}{val=mail_managers}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=subject}))) (expr (Name (str{id}{val=message}))) (expr (Name (str{id}{val=fail_silently}))) (expr (Name (str{id}{val=connection}))) (expr (Name (str{id}{val=html_message})))) (expr*{defaults} (expr (Name (str{id}{val=False}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=MANAGERS}))))) (stmt*{body} (stmt (Pass)))))
(root (Return (epsilon)))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=mail})))) (expr{value} (Call (expr{func} (Name (str{id}{val=EmailMultiAlternatives}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=%s%s}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=EMAIL_SUBJECT_PREFIX}))) (expr (Name (str{id}{val=subject})))))))) (expr (Name (str{id}{val=message}))) (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=SERVER_EMAIL}))) (expr (ListComp (expr{elt} (Subscript (expr{value} (Name (str{id}{val=a}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=a}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=MANAGERS})))))))) (keyword*{keywords} (keyword (str{arg}{val=connection}) (expr{value} (Name (str{id}{val=connection})))))))))
(root (If (expr{test} (Name (str{id}{val=html_message}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=mail}))) (str{attr}{val=attach_alternative}))) (expr*{args} (expr (Name (str{id}{val=html_message}))) (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=mail}))) (str{attr}{val=send}))) (keyword*{keywords} (keyword (str{arg}{val=fail_silently}) (expr{value} (Name (str{id}{val=fail_silently})))))))))
(root (ClassDef (str{name}{val=BaseEmailBackend}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=fail_silently})))) (str{kwarg}{val=kwargs}) (expr*{defaults} (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fail_silently})))) (expr{value} (Name (str{id}{val=fail_silently})))))
(root (FunctionDef (str{name}{val=open}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (FunctionDef (str{name}{val=close}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (FunctionDef (str{name}{val=__enter__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=open})))))))
(root (Return (expr{value} (Name (str{id}{val=self})))))
(root (FunctionDef (str{name}{val=__exit__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=exc_type}))) (expr (Name (str{id}{val=exc_value}))) (expr (Name (str{id}{val=traceback})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=close})))))))
(root (FunctionDef (str{name}{val=send_messages}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=email_messages})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=NotImplementedError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Import (alias*{names} (alias (str{name}{val=sys})))))
(root (Import (alias*{names} (alias (str{name}{val=threading})))))
(root (ImportFrom (str{module}{val=django.core.mail.backends.base}) (alias*{names} (alias (str{name}{val=BaseEmailBackend}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=EmailBackend}) (expr*{bases} (expr (Name (str{id}{val=BaseEmailBackend})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stream})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=kwargs}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=stdout}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_lock})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=threading}))) (str{attr}{val=RLock})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=EmailBackend}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (FunctionDef (str{name}{val=write_message}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=message})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=msg})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=message}))) (str{attr}{val=message})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=msg_data})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=msg}))) (str{attr}{val=as_bytes})))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=PY3}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=charset})))) (expr{value} (IfExp (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=msg}))) (str{attr}{val=get_charset}))))) (expr{body} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=msg}))) (str{attr}{val=get_charset}))))) (str{attr}{val=get_output_charset}))))) (expr{orelse} (Str (str{s}{val=_STR:0_})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=msg_data})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=msg_data}))) (str{attr}{val=decode}))) (expr*{args} (expr (Name (str{id}{val=charset}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stream}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=msg_data}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stream}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mult)) (expr{right} (Num (int{n}{val=79}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stream}))) (str{attr}{val=write}))) (expr*{args} (expr (Str (str{s}{val=\n}))))))))
(root (FunctionDef (str{name}{val=send_messages}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=email_messages})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=email_messages}))))) (stmt*{body} (stmt (Pass)))))
(root (Return (epsilon)))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=msg_count})))) (expr{value} (Num (int{n}{val=0})))))
(root (With (expr{context_expr} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_lock}))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=stream_created})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=open})))))))
(root (For (expr{target} (Name (str{id}{val=message}))) (expr{iter} (Name (str{id}{val=email_messages}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=write_message}))) (expr*{args} (expr (Name (str{id}{val=message}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stream}))) (str{attr}{val=flush})))))))
(root (AugAssign (expr{target} (Name (str{id}{val=msg_count}))) (operator{op} (Add)) (expr{value} (Num (int{n}{val=1})))))
(root (If (expr{test} (Name (str{id}{val=stream_created}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=close})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=Exception}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fail_silently}))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (epsilon)))
(root (Return (expr{value} (Name (str{id}{val=msg_count})))))
(root (ImportFrom (str{module}{val=django.core.mail.backends.base}) (alias*{names} (alias (str{name}{val=BaseEmailBackend}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=EmailBackend}) (expr*{bases} (expr (Name (str{id}{val=BaseEmailBackend})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=send_messages}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=email_messages})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Name (str{id}{val=email_messages})))))))))))
(root (Import (alias*{names} (alias (str{name}{val=datetime})))))
(root (Import (alias*{names} (alias (str{name}{val=os})))))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.exceptions}) (alias*{names} (alias (str{name}{val=ImproperlyConfigured}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.mail.backends.console}) (alias*{names} (alias (str{name}{val=EmailBackend}) (str{asname}{val=ConsoleEmailBackend}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=EmailBackend}) (expr*{bases} (expr (Name (str{id}{val=ConsoleEmailBackend})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_fname})))) (expr{value} (Name (str{id}{val=None})))))
(root (If (expr{test} (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=kwargs})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file_path})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=kwargs}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file_path})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=settings}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file_path}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=string_types})))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ImproperlyConfigured}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file_path}))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file_path})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=abspath}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file_path}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=exists}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file_path})))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=isdir}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file_path}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ImproperlyConfigured}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file_path}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=exists}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file_path})))))))) (stmt*{body} (stmt (Pass))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=makedirs}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file_path}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=OSError}))) (expr{name} (Name (str{id}{val=err}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ImproperlyConfigured}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file_path}))) (expr (Name (str{id}{val=err})))))))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=access}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file_path}))) (expr (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=W_OK})))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ImproperlyConfigured}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file_path}))))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=kwargs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Name (str{id}{val=None})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=EmailBackend}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (FunctionDef (str{name}{val=write_message}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=message})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stream}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=message}))) (str{attr}{val=message}))))) (str{attr}{val=as_bytes}))))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=_STR:0_}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stream}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mult)) (expr{right} (Num (int{n}{val=79}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stream}))) (str{attr}{val=write}))) (expr*{args} (expr (Str (str{s}{val=\n}))))))))
(root (FunctionDef (str{name}{val=_get_filename}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_fname}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=timestamp})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=datetime}))) (str{attr}{val=now}))))) (str{attr}{val=strftime}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=fname})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=timestamp}))) (expr (Call (expr{func} (Name (str{id}{val=abs}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=id}))) (expr*{args} (expr (Name (str{id}{val=self}))))))))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_fname})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file_path}))) (expr (Name (str{id}{val=fname}))))))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_fname})))))
(root (FunctionDef (str{name}{val=open}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stream}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stream})))) (expr{value} (Call (expr{func} (Name (str{id}{val=open}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_get_filename}))))) (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Return (expr{value} (Name (str{id}{val=True})))))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (FunctionDef (str{name}{val=close}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stream}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stream}))) (str{attr}{val=close})))))))
(root (TryFinally (stmt*{body} (stmt (Pass))) (stmt*{finalbody} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stream})))) (expr{value} (Name (str{id}{val=None})))))
(root (ImportFrom (str{module}{val=django.core}) (alias*{names} (alias (str{name}{val=mail}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.mail.backends.base}) (alias*{names} (alias (str{name}{val=BaseEmailBackend}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=EmailBackend}) (expr*{bases} (expr (Name (str{id}{val=BaseEmailBackend})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=EmailBackend}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=mail}))) (expr (Str (str{s}{val=_STR:0_})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=mail}))) (str{attr}{val=outbox})))) (expr{value} (List (epsilon)))))
(root (FunctionDef (str{name}{val=send_messages}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=messages})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=msg_count})))) (expr{value} (Num (int{n}{val=0})))))
(root (For (expr{target} (Name (str{id}{val=message}))) (expr{iter} (Name (str{id}{val=messages}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=message}))) (str{attr}{val=message})))))))
(root (AugAssign (expr{target} (Name (str{id}{val=msg_count}))) (operator{op} (Add)) (expr{value} (Num (int{n}{val=1})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=mail}))) (str{attr}{val=outbox}))) (str{attr}{val=extend}))) (expr*{args} (expr (Name (str{id}{val=messages}))))))))
(root (Return (expr{value} (Name (str{id}{val=msg_count})))))
(root (Import (alias*{names} (alias (str{name}{val=smtplib})))))
(root (Import (alias*{names} (alias (str{name}{val=ssl})))))
(root (Import (alias*{names} (alias (str{name}{val=threading})))))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.mail.backends.base}) (alias*{names} (alias (str{name}{val=BaseEmailBackend}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.mail.utils}) (alias*{names} (alias (str{name}{val=DNS_NAME}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.mail.message}) (alias*{names} (alias (str{name}{val=sanitize_address}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=EmailBackend}) (expr*{bases} (expr (Name (str{id}{val=BaseEmailBackend})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=host}))) (expr (Name (str{id}{val=port}))) (expr (Name (str{id}{val=username}))) (expr (Name (str{id}{val=password}))) (expr (Name (str{id}{val=use_tls}))) (expr (Name (str{id}{val=fail_silently}))) (expr (Name (str{id}{val=use_ssl}))) (expr (Name (str{id}{val=timeout})))) (str{kwarg}{val=kwargs}) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=False}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=EmailBackend}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (keyword*{keywords} (keyword (str{arg}{val=fail_silently}) (expr{value} (Name (str{id}{val=fail_silently})))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=host})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=host}))) (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=EMAIL_HOST}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=port})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=port}))) (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=EMAIL_PORT}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=username})))) (expr{value} (IfExp (expr{test} (Compare (expr{left} (Name (str{id}{val=username}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr{body} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=EMAIL_HOST_USER}))) (expr{orelse} (Name (str{id}{val=username})))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=password})))) (expr{value} (IfExp (expr{test} (Compare (expr{left} (Name (str{id}{val=password}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr{body} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=EMAIL_HOST_PASSWORD}))) (expr{orelse} (Name (str{id}{val=password})))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=use_tls})))) (expr{value} (IfExp (expr{test} (Compare (expr{left} (Name (str{id}{val=use_tls}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr{body} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=EMAIL_USE_TLS}))) (expr{orelse} (Name (str{id}{val=use_tls})))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=use_ssl})))) (expr{value} (IfExp (expr{test} (Compare (expr{left} (Name (str{id}{val=use_ssl}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr{body} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=EMAIL_USE_SSL}))) (expr{orelse} (Name (str{id}{val=use_ssl})))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=timeout})))) (expr{value} (Name (str{id}{val=timeout})))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=use_ssl}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=use_tls})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (Str (str{s}{val=EMAIL_USE_TLS/EMAIL_USE_SSL are mutually exclusive, so only set one of those settings to True.}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=connection})))) (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_lock})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=threading}))) (str{attr}{val=RLock})))))))
(root (FunctionDef (str{name}{val=open}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=connection}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=connection_class})))) (expr{value} (IfExp (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=use_ssl}))) (expr{body} (Attribute (expr{value} (Name (str{id}{val=smtplib}))) (str{attr}{val=SMTP_SSL}))) (expr{orelse} (Attribute (expr{value} (Name (str{id}{val=smtplib}))) (str{attr}{val=SMTP})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=connection_params})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:0_})))) (expr*{values} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=DNS_NAME}))) (str{attr}{val=get_fqdn}))))))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=timeout}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=connection_params}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=timeout})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=connection})))) (expr{value} (Call (expr{func} (Name (str{id}{val=connection_class}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=host}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=port})))) (expr{kwargs} (Name (str{id}{val=connection_params})))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=use_ssl}))))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=use_tls})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=connection}))) (str{attr}{val=ehlo})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=connection}))) (str{attr}{val=starttls})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=connection}))) (str{attr}{val=ehlo})))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=username}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=password})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=connection}))) (str{attr}{val=login}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=username}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=password}))))))))
(root (Return (expr{value} (Name (str{id}{val=True})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Attribute (expr{value} (Name (str{id}{val=smtplib}))) (str{attr}{val=SMTPException}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fail_silently}))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (epsilon)))
(root (FunctionDef (str{name}{val=close}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=connection}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (epsilon)))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=connection}))) (str{attr}{val=quit})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=ssl}))) (str{attr}{val=SSLError}))) (expr (Attribute (expr{value} (Name (str{id}{val=smtplib}))) (str{attr}{val=SMTPServerDisconnected})))))) (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=connection}))) (str{attr}{val=close})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Attribute (expr{value} (Name (str{id}{val=smtplib}))) (str{attr}{val=SMTPException}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fail_silently}))) (stmt*{body} (stmt (Pass)))))
(root (Return (epsilon)))
(root (Raise (epsilon)))
(root (TryFinally (stmt*{body} (stmt (Pass))) (stmt*{finalbody} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=connection})))) (expr{value} (Name (str{id}{val=None})))))
(root (FunctionDef (str{name}{val=send_messages}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=email_messages})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=email_messages}))))) (stmt*{body} (stmt (Pass)))))
(root (Return (epsilon)))
(root (With (expr{context_expr} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_lock}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=new_conn_created})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=open})))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=connection}))))) (stmt*{body} (stmt (Pass)))))
(root (Return (epsilon)))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=num_sent})))) (expr{value} (Num (int{n}{val=0})))))
(root (For (expr{target} (Name (str{id}{val=message}))) (expr{iter} (Name (str{id}{val=email_messages}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=sent})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_send}))) (expr*{args} (expr (Name (str{id}{val=message}))))))))
(root (If (expr{test} (Name (str{id}{val=sent}))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=num_sent}))) (operator{op} (Add)) (expr{value} (Num (int{n}{val=1})))))
(root (If (expr{test} (Name (str{id}{val=new_conn_created}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=close})))))))
(root (Return (expr{value} (Name (str{id}{val=num_sent})))))
(root (FunctionDef (str{name}{val=_send}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=email_message})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=email_message}))) (str{attr}{val=recipients}))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=from_email})))) (expr{value} (Call (expr{func} (Name (str{id}{val=sanitize_address}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=email_message}))) (str{attr}{val=from_email}))) (expr (Attribute (expr{value} (Name (str{id}{val=email_message}))) (str{attr}{val=encoding}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=recipients})))) (expr{value} (ListComp (expr{elt} (Call (expr{func} (Name (str{id}{val=sanitize_address}))) (expr*{args} (expr (Name (str{id}{val=addr}))) (expr (Attribute (expr{value} (Name (str{id}{val=email_message}))) (str{attr}{val=encoding})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=addr}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=email_message}))) (str{attr}{val=recipients})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=message})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=email_message}))) (str{attr}{val=message})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=connection}))) (str{attr}{val=sendmail}))) (expr*{args} (expr (Name (str{id}{val=from_email}))) (expr (Name (str{id}{val=recipients}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=message}))) (str{attr}{val=as_bytes}))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Attribute (expr{value} (Name (str{id}{val=smtplib}))) (str{attr}{val=SMTPException}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fail_silently}))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (epsilon)))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (Return (expr{value} (Name (str{id}{val=True})))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=mimetypes})))))
(root (Import (alias*{names} (alias (str{name}{val=os})))))
(root (Import (alias*{names} (alias (str{name}{val=random})))))
(root (Import (alias*{names} (alias (str{name}{val=sys})))))
(root (Import (alias*{names} (alias (str{name}{val=time})))))
(root (ImportFrom (str{module}{val=email}) (alias*{names} (alias (str{name}{val=charset}) (str{asname}{val=Charset})) (alias (str{name}{val=encoders}) (str{asname}{val=Encoders})) (alias (str{name}{val=message_from_string})) (alias (str{name}{val=generator}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=email.message}) (alias*{names} (alias (str{name}{val=Message}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=email.mime.text}) (alias*{names} (alias (str{name}{val=MIMEText}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=email.mime.multipart}) (alias*{names} (alias (str{name}{val=MIMEMultipart}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=email.mime.base}) (alias*{names} (alias (str{name}{val=MIMEBase}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=email.mime.message}) (alias*{names} (alias (str{name}{val=MIMEMessage}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=email.header}) (alias*{names} (alias (str{name}{val=Header}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=email.utils}) (alias*{names} (alias (str{name}{val=formatdate})) (alias (str{name}{val=getaddresses})) (alias (str{name}{val=formataddr})) (alias (str{name}{val=parseaddr}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.mail.utils}) (alias*{names} (alias (str{name}{val=DNS_NAME}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=force_text}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=utf8_charset})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=Charset}))) (str{attr}{val=Charset}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=utf8_charset}))) (str{attr}{val=body_encoding})))) (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=DEFAULT_ATTACHMENT_MIME_TYPE})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (ClassDef (str{name}{val=BadHeaderError}) (expr*{bases} (expr (Name (str{id}{val=ValueError})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (FunctionDef (str{name}{val=make_msgid}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=idstring})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=timeval})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=time}))) (str{attr}{val=time})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=utcdate})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=time}))) (str{attr}{val=strftime}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=time}))) (str{attr}{val=gmtime}))) (expr*{args} (expr (Name (str{id}{val=timeval})))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=pid})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=getpid})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=AttributeError}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=pid})))) (expr{value} (Num (int{n}{val=1})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=randint})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=random}))) (str{attr}{val=randrange}))) (expr*{args} (expr (Num (int{n}{val=100000}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=idstring}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=idstring})))) (expr{value} (Str (str{s}{val=})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=idstring})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=idstring})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=idhost})))) (expr{value} (Name (str{id}{val=DNS_NAME})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=msgid})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=utcdate}))) (expr (Name (str{id}{val=pid}))) (expr (Name (str{id}{val=randint}))) (expr (Name (str{id}{val=idstring}))) (expr (Name (str{id}{val=idhost}))))))))))
(root (Return (expr{value} (Name (str{id}{val=msgid})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ADDRESS_HEADERS})))) (expr{value} (Call (expr{func} (Name (str{id}{val=set}))) (expr*{args} (expr (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=_STR:3_}))) (expr (Str (str{s}{val=_STR:4_}))) (expr (Str (str{s}{val=_STR:5_}))) (expr (Str (str{s}{val=_STR:6_}))) (expr (Str (str{s}{val=_STR:7_}))) (expr (Str (str{s}{val=resent-to}))) (expr (Str (str{s}{val=resent-cc}))) (expr (Str (str{s}{val=resent-bcc})))))))))))
(root (FunctionDef (str{name}{val=forbid_multi_line_headers}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=val}))) (expr (Name (str{id}{val=encoding})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=encoding})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=encoding}))) (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=DEFAULT_CHARSET}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=val})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=val}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=val})))))) (expr (Compare (expr{left} (Str (str{s}{val=_STR:1_}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=val}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=BadHeaderError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=val}))) (expr (Name (str{id}{val=name})))))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=val}))) (str{attr}{val=encode}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=UnicodeEncodeError}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=name}))) (str{attr}{val=lower}))))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=ADDRESS_HEADERS})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=val})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=_STR:0_}))) (str{attr}{val=join}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Call (expr{func} (Name (str{id}{val=sanitize_address}))) (expr*{args} (expr (Name (str{id}{val=addr}))) (expr (Name (str{id}{val=encoding})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=addr}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=getaddresses}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=val}))))))))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=val})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=Header}))) (expr*{args} (expr (Name (str{id}{val=val}))) (expr (Name (str{id}{val=encoding})))))) (str{attr}{val=encode})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=name}))) (str{attr}{val=lower}))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=val})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=Header}))) (expr*{args} (expr (Name (str{id}{val=val})))))) (str{attr}{val=encode})))))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Name (str{id}{val=name})))))) (expr (Name (str{id}{val=val}))))))))
(root (FunctionDef (str{name}{val=sanitize_address}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=addr}))) (expr (Name (str{id}{val=encoding})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=addr}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=string_types})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=addr})))) (expr{value} (Call (expr{func} (Name (str{id}{val=parseaddr}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=addr})))))))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=nm}))) (expr (Name (str{id}{val=addr}))))))) (expr{value} (Name (str{id}{val=addr})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=nm})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=Header}))) (expr*{args} (expr (Name (str{id}{val=nm}))) (expr (Name (str{id}{val=encoding})))))) (str{attr}{val=encode})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=UnicodeEncodeError}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=nm})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=Header}))) (expr*{args} (expr (Name (str{id}{val=nm}))) (expr (Str (str{s}{val=_STR:0_})))))) (str{attr}{val=encode})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=addr}))) (str{attr}{val=encode}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=UnicodeEncodeError}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=addr})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=localpart}))) (expr (Name (str{id}{val=domain}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=addr}))) (str{attr}{val=split}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Num (int{n}{val=1}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=localpart})))) (expr{value} (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=Header}))) (expr*{args} (expr (Name (str{id}{val=localpart}))) (expr (Name (str{id}{val=encoding})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=domain})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=domain}))) (str{attr}{val=encode}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_})))))) (str{attr}{val=decode}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=addr})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=_STR:0_}))) (str{attr}{val=join}))) (expr*{args} (expr (List (expr*{elts} (expr (Name (str{id}{val=localpart}))) (expr (Name (str{id}{val=domain})))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=addr})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=Header}))) (expr*{args} (expr (Name (str{id}{val=addr}))) (expr (Name (str{id}{val=encoding})))))) (str{attr}{val=encode})))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=formataddr}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=nm}))) (expr (Name (str{id}{val=addr})))))))))))
(root (ClassDef (str{name}{val=MIMEMixin}) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=as_string}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=unixfrom})))) (expr*{defaults} (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=fp})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=StringIO})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=g})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=generator}))) (str{attr}{val=Generator}))) (expr*{args} (expr (Name (str{id}{val=fp})))) (keyword*{keywords} (keyword (str{arg}{val=mangle_from_}) (expr{value} (Name (str{id}{val=False})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=g}))) (str{attr}{val=flatten}))) (expr*{args} (expr (Name (str{id}{val=self})))) (keyword*{keywords} (keyword (str{arg}{val=unixfrom}) (expr{value} (Name (str{id}{val=unixfrom})))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=fp}))) (str{attr}{val=getvalue})))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=PY2}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=as_bytes})))) (expr{value} (Name (str{id}{val=as_string})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=as_bytes}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=unixfrom})))) (expr*{defaults} (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=fp})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=BytesIO})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=g})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=generator}))) (str{attr}{val=BytesGenerator}))) (expr*{args} (expr (Name (str{id}{val=fp})))) (keyword*{keywords} (keyword (str{arg}{val=mangle_from_}) (expr{value} (Name (str{id}{val=False})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=g}))) (str{attr}{val=flatten}))) (expr*{args} (expr (Name (str{id}{val=self})))) (keyword*{keywords} (keyword (str{arg}{val=unixfrom}) (expr{value} (Name (str{id}{val=unixfrom})))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=fp}))) (str{attr}{val=getvalue})))))))
(root (ClassDef (str{name}{val=SafeMIMEMessage}) (expr*{bases} (expr (Name (str{id}{val=MIMEMixin}))) (expr (Name (str{id}{val=MIMEMessage})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__setitem__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=val})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=val}))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=forbid_multi_line_headers}))) (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=val}))) (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=MIMEMessage}))) (str{attr}{val=__setitem__}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=val}))))))))
(root (ClassDef (str{name}{val=SafeMIMEText}) (expr*{bases} (expr (Name (str{id}{val=MIMEMixin}))) (expr (Name (str{id}{val=MIMEText})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=text}))) (expr (Name (str{id}{val=subtype}))) (expr (Name (str{id}{val=charset})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=encoding})))) (expr{value} (Name (str{id}{val=charset})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=charset}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=MIMEText}))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=text}))) (expr (Name (str{id}{val=subtype}))) (expr (Name (str{id}{val=None}))))))))
(root (Delete (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=self}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))))))
(root (If (expr{test} (Compare (expr{left} (Tuple (expr*{elts} (expr (Num (int{n}{val=3}))) (expr (Num (int{n}{val=2})))))) (cmpop*{ops} (cmpop (Lt)) (cmpop (Lt))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=version_info}))) (expr (Tuple (expr*{elts} (expr (Num (int{n}{val=3}))) (expr (Num (int{n}{val=3}))) (expr (Num (int{n}{val=4}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=payload})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=text}))) (str{attr}{val=encode}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=utf8_charset}))) (str{attr}{val=output_charset}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_payload})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=payload}))) (str{attr}{val=decode}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=set_charset}))) (expr*{args} (expr (Name (str{id}{val=utf8_charset}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=set_payload}))) (expr*{args} (expr (Name (str{id}{val=text}))) (expr (Name (str{id}{val=utf8_charset}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=replace_header}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (BinOp (expr{left} (Str (str{s}{val=_STR:1_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=subtype}))) (expr (Name (str{id}{val=charset})))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=MIMEText}))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=text}))) (expr (Name (str{id}{val=subtype}))) (expr (Name (str{id}{val=charset}))))))))
(root (FunctionDef (str{name}{val=__setitem__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=val})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=val}))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=forbid_multi_line_headers}))) (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=val}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=encoding}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=MIMEText}))) (str{attr}{val=__setitem__}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=val}))))))))
(root (ClassDef (str{name}{val=SafeMIMEMultipart}) (expr*{bases} (expr (Name (str{id}{val=MIMEMixin}))) (expr (Name (str{id}{val=MIMEMultipart})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=_subtype}))) (expr (Name (str{id}{val=boundary}))) (expr (Name (str{id}{val=_subparts}))) (expr (Name (str{id}{val=encoding})))) (str{kwarg}{val=_params}) (expr*{defaults} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=encoding})))) (expr{value} (Name (str{id}{val=encoding})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=MIMEMultipart}))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=_subtype}))) (expr (Name (str{id}{val=boundary}))) (expr (Name (str{id}{val=_subparts})))) (expr{kwargs} (Name (str{id}{val=_params})))))))
(root (FunctionDef (str{name}{val=__setitem__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=val})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=val}))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=forbid_multi_line_headers}))) (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=val}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=encoding}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=MIMEMultipart}))) (str{attr}{val=__setitem__}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=val}))))))))
(root (ClassDef (str{name}{val=EmailMessage}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=content_subtype})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=mixed_subtype})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=encoding})))) (expr{value} (Name (str{id}{val=None})))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=subject}))) (expr (Name (str{id}{val=body}))) (expr (Name (str{id}{val=from_email}))) (expr (Name (str{id}{val=to}))) (expr (Name (str{id}{val=bcc}))) (expr (Name (str{id}{val=connection}))) (expr (Name (str{id}{val=attachments}))) (expr (Name (str{id}{val=headers}))) (expr (Name (str{id}{val=cc})))) (expr*{defaults} (expr (Str (str{s}{val=}))) (expr (Str (str{s}{val=}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=to}))) (stmt*{body} (stmt (Pass)))))
(root (Assert (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=to}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=string_types})))))))) (expr{msg} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=to})))) (expr{value} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Name (str{id}{val=to}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=to})))) (expr{value} (List (epsilon)))))
(root (If (expr{test} (Name (str{id}{val=cc}))) (stmt*{body} (stmt (Pass)))))
(root (Assert (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=cc}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=string_types})))))))) (expr{msg} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=cc})))) (expr{value} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Name (str{id}{val=cc}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=cc})))) (expr{value} (List (epsilon)))))
(root (If (expr{test} (Name (str{id}{val=bcc}))) (stmt*{body} (stmt (Pass)))))
(root (Assert (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=bcc}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=string_types})))))))) (expr{msg} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=bcc})))) (expr{value} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Name (str{id}{val=bcc}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=bcc})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=from_email})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=from_email}))) (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=DEFAULT_FROM_EMAIL}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=subject})))) (expr{value} (Name (str{id}{val=subject})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=body})))) (expr{value} (Name (str{id}{val=body})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=attachments})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=attachments}))) (expr (List (epsilon))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=extra_headers})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=headers}))) (expr (Dict (epsilon))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=connection})))) (expr{value} (Name (str{id}{val=connection})))))
(root (FunctionDef (str{name}{val=get_connection}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=fail_silently})))) (expr*{defaults} (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=django.core.mail}) (alias*{names} (alias (str{name}{val=get_connection}))) (int{level}{val=0})))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=connection}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=connection})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_connection}))) (keyword*{keywords} (keyword (str{arg}{val=fail_silently}) (expr{value} (Name (str{id}{val=fail_silently})))))))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=connection})))))
(root (FunctionDef (str{name}{val=message}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=encoding})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=encoding}))) (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=DEFAULT_CHARSET}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=msg})))) (expr{value} (Call (expr{func} (Name (str{id}{val=SafeMIMEText}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=body}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=content_subtype}))) (expr (Name (str{id}{val=encoding}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=msg})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_create_message}))) (expr*{args} (expr (Name (str{id}{val=msg}))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=msg}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=subject})))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=msg}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=extra_headers}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=from_email}))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=msg}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=extra_headers}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=_STR:1_}))) (str{attr}{val=join}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=to})))))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=cc}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=msg}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:1_})))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=_STR:0_}))) (str{attr}{val=join}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=cc}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=header_names})))) (expr{value} (ListComp (expr{elt} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=key}))) (str{attr}{val=lower}))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=key}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=extra_headers})))))))))
(root (If (expr{test} (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=header_names})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=msg}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=formatdate})))))))
(root (If (expr{test} (Compare (expr{left} (Str (str{s}{val=message-id}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=header_names})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=msg}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=make_msgid})))))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=value})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=extra_headers}))) (str{attr}{val=items}))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=name}))) (str{attr}{val=lower}))))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=to}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=msg}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=name})))))))) (expr{value} (Name (str{id}{val=value})))))
(root (Return (expr{value} (Name (str{id}{val=msg})))))
(root (FunctionDef (str{name}{val=recipients}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=to}))) (operator{op} (Add)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=cc}))))) (operator{op} (Add)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=bcc})))))))
(root (FunctionDef (str{name}{val=send}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=fail_silently})))) (expr*{defaults} (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=recipients}))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Num (int{n}{val=0})))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get_connection}))) (expr*{args} (expr (Name (str{id}{val=fail_silently})))))) (str{attr}{val=send_messages}))) (expr*{args} (expr (List (expr*{elts} (expr (Name (str{id}{val=self})))))))))))
(root (FunctionDef (str{name}{val=attach}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=filename}))) (expr (Name (str{id}{val=content}))) (expr (Name (str{id}{val=mimetype})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=filename}))) (expr (Name (str{id}{val=MIMEBase})))))) (stmt*{body} (stmt (Pass)))))
(root (Assert (expr{test} (Compare (expr{left} (Name (str{id}{val=content}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None}))))))))
(root (Assert (expr{test} (Compare (expr{left} (Name (str{id}{val=mimetype}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=attachments}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=filename}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assert (expr{test} (Compare (expr{left} (Name (str{id}{val=content}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=attachments}))) (str{attr}{val=append}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=filename}))) (expr (Name (str{id}{val=content}))) (expr (Name (str{id}{val=mimetype})))))))))))
(root (FunctionDef (str{name}{val=attach_file}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=path}))) (expr (Name (str{id}{val=mimetype})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=filename})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=basename}))) (expr*{args} (expr (Name (str{id}{val=path}))))))))
(root (With (expr{context_expr} (Call (expr{func} (Name (str{id}{val=open}))) (expr*{args} (expr (Name (str{id}{val=path}))) (expr (Str (str{s}{val=_STR:0_})))))) (expr{optional_vars} (Name (str{id}{val=f}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=content})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=read})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=attach}))) (expr*{args} (expr (Name (str{id}{val=filename}))) (expr (Name (str{id}{val=content}))) (expr (Name (str{id}{val=mimetype}))))))))
(root (FunctionDef (str{name}{val=_create_message}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=msg})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_create_attachments}))) (expr*{args} (expr (Name (str{id}{val=msg}))))))))
(root (FunctionDef (str{name}{val=_create_attachments}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=msg})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=attachments}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=encoding})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=encoding}))) (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=DEFAULT_CHARSET}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=body_msg})))) (expr{value} (Name (str{id}{val=msg})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=msg})))) (expr{value} (Call (expr{func} (Name (str{id}{val=SafeMIMEMultipart}))) (keyword*{keywords} (keyword (str{arg}{val=_subtype}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=mixed_subtype})))) (keyword (str{arg}{val=encoding}) (expr{value} (Name (str{id}{val=encoding})))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=body}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=msg}))) (str{attr}{val=attach}))) (expr*{args} (expr (Name (str{id}{val=body_msg}))))))))
(root (For (expr{target} (Name (str{id}{val=attachment}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=attachments}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=attachment}))) (expr (Name (str{id}{val=MIMEBase})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=msg}))) (str{attr}{val=attach}))) (expr*{args} (expr (Name (str{id}{val=attachment}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=msg}))) (str{attr}{val=attach}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_create_attachment}))) (expr{starargs} (Name (str{id}{val=attachment}))))))))))
(root (Return (expr{value} (Name (str{id}{val=msg})))))
(root (FunctionDef (str{name}{val=_create_mime_attachment}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=content}))) (expr (Name (str{id}{val=mimetype})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=basetype}))) (expr (Name (str{id}{val=subtype}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=mimetype}))) (str{attr}{val=split}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Num (int{n}{val=1}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=basetype}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=encoding})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=encoding}))) (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=DEFAULT_CHARSET}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=attachment})))) (expr{value} (Call (expr{func} (Name (str{id}{val=SafeMIMEText}))) (expr*{args} (expr (Name (str{id}{val=content}))) (expr (Name (str{id}{val=subtype}))) (expr (Name (str{id}{val=encoding}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=basetype}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (expr (Compare (expr{left} (Name (str{id}{val=subtype}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:1_}))))))))) (stmt*{body} (stmt (Pass))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=content}))) (expr (Name (str{id}{val=EmailMessage})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=content})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=content}))) (str{attr}{val=message})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=content}))) (expr (Name (str{id}{val=Message})))))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=content})))) (expr{value} (Call (expr{func} (Name (str{id}{val=message_from_string}))) (expr*{args} (expr (Name (str{id}{val=content}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=attachment})))) (expr{value} (Call (expr{func} (Name (str{id}{val=SafeMIMEMessage}))) (expr*{args} (expr (Name (str{id}{val=content}))) (expr (Name (str{id}{val=subtype}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=attachment})))) (expr{value} (Call (expr{func} (Name (str{id}{val=MIMEBase}))) (expr*{args} (expr (Name (str{id}{val=basetype}))) (expr (Name (str{id}{val=subtype}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=attachment}))) (str{attr}{val=set_payload}))) (expr*{args} (expr (Name (str{id}{val=content}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=Encoders}))) (str{attr}{val=encode_base64}))) (expr*{args} (expr (Name (str{id}{val=attachment}))))))))
(root (Return (expr{value} (Name (str{id}{val=attachment})))))
(root (FunctionDef (str{name}{val=_create_attachment}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=filename}))) (expr (Name (str{id}{val=content}))) (expr (Name (str{id}{val=mimetype})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=mimetype}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=mimetype}))) (expr (Name (str{id}{val=_}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=mimetypes}))) (str{attr}{val=guess_type}))) (expr*{args} (expr (Name (str{id}{val=filename}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=mimetype}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=mimetype})))) (expr{value} (Name (str{id}{val=DEFAULT_ATTACHMENT_MIME_TYPE})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=attachment})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_create_mime_attachment}))) (expr*{args} (expr (Name (str{id}{val=content}))) (expr (Name (str{id}{val=mimetype}))))))))
(root (If (expr{test} (Name (str{id}{val=filename}))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=filename}))) (str{attr}{val=encode}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=UnicodeEncodeError}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=PY2}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=filename})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=filename}))) (str{attr}{val=encode}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=filename})))) (expr{value} (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=}))) (expr (Name (str{id}{val=filename}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=attachment}))) (str{attr}{val=add_header}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_})))) (keyword*{keywords} (keyword (str{arg}{val=filename}) (expr{value} (Name (str{id}{val=filename})))))))))
(root (Return (expr{value} (Name (str{id}{val=attachment})))))
(root (ClassDef (str{name}{val=EmailMultiAlternatives}) (expr*{bases} (expr (Name (str{id}{val=EmailMessage})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=alternative_subtype})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=subject}))) (expr (Name (str{id}{val=body}))) (expr (Name (str{id}{val=from_email}))) (expr (Name (str{id}{val=to}))) (expr (Name (str{id}{val=bcc}))) (expr (Name (str{id}{val=connection}))) (expr (Name (str{id}{val=attachments}))) (expr (Name (str{id}{val=headers}))) (expr (Name (str{id}{val=alternatives}))) (expr (Name (str{id}{val=cc})))) (expr*{defaults} (expr (Str (str{s}{val=}))) (expr (Str (str{s}{val=}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=EmailMultiAlternatives}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=subject}))) (expr (Name (str{id}{val=body}))) (expr (Name (str{id}{val=from_email}))) (expr (Name (str{id}{val=to}))) (expr (Name (str{id}{val=bcc}))) (expr (Name (str{id}{val=connection}))) (expr (Name (str{id}{val=attachments}))) (expr (Name (str{id}{val=headers}))) (expr (Name (str{id}{val=cc}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=alternatives})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=alternatives}))) (expr (List (epsilon))))))))
(root (FunctionDef (str{name}{val=attach_alternative}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=content}))) (expr (Name (str{id}{val=mimetype})))))) (stmt*{body} (stmt (Pass)))))
(root (Assert (expr{test} (Compare (expr{left} (Name (str{id}{val=content}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None}))))))))
(root (Assert (expr{test} (Compare (expr{left} (Name (str{id}{val=mimetype}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=alternatives}))) (str{attr}{val=append}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=content}))) (expr (Name (str{id}{val=mimetype})))))))))))
(root (FunctionDef (str{name}{val=_create_message}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=msg})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_create_attachments}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_create_alternatives}))) (expr*{args} (expr (Name (str{id}{val=msg})))))))))))
(root (FunctionDef (str{name}{val=_create_alternatives}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=msg})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=encoding})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=encoding}))) (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=DEFAULT_CHARSET}))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=alternatives}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=body_msg})))) (expr{value} (Name (str{id}{val=msg})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=msg})))) (expr{value} (Call (expr{func} (Name (str{id}{val=SafeMIMEMultipart}))) (keyword*{keywords} (keyword (str{arg}{val=_subtype}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=alternative_subtype})))) (keyword (str{arg}{val=encoding}) (expr{value} (Name (str{id}{val=encoding})))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=body}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=msg}))) (str{attr}{val=attach}))) (expr*{args} (expr (Name (str{id}{val=body_msg}))))))))
(root (For (expr{target} (Name (str{id}{val=alternative}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=alternatives}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=msg}))) (str{attr}{val=attach}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_create_mime_attachment}))) (expr{starargs} (Name (str{id}{val=alternative}))))))))))
(root (Return (expr{value} (Name (str{id}{val=msg})))))
(root (Import (alias*{names} (alias (str{name}{val=socket})))))
(root (ClassDef (str{name}{val=CachedDnsName}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__str__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get_fqdn})))))))
(root (FunctionDef (str{name}{val=get_fqdn}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Str (str{s}{val=_STR:0_})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_fqdn})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=socket}))) (str{attr}{val=getfqdn})))))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_fqdn})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=DNS_NAME})))) (expr{value} (Call (expr{func} (Name (str{id}{val=CachedDnsName})))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=collections})))))
(root (ImportFrom (str{module}{val=importlib}) (alias*{names} (alias (str{name}{val=import_module}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=os})))))
(root (Import (alias*{names} (alias (str{name}{val=sys})))))
(root (Import (alias*{names} (alias (str{name}{val=django})))))
(root (ImportFrom (str{module}{val=django.apps}) (alias*{names} (alias (str{name}{val=apps}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.exceptions}) (alias*{names} (alias (str{name}{val=ImproperlyConfigured}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management.base}) (alias*{names} (alias (str{name}{val=BaseCommand})) (alias (str{name}{val=CommandError})) (alias (str{name}{val=CommandParser})) (alias (str{name}{val=handle_default_options}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management.color}) (alias*{names} (alias (str{name}{val=color_style}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=lru_cache}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (FunctionDef (str{name}{val=find_commands}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=management_dir})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=command_dir})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=management_dir}))) (expr (Str (str{s}{val=_STR:0_}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (ListComp (expr{elt} (Subscript (expr{value} (Name (str{id}{val=f}))) (slice{slice} (Slice (expr{upper} (Num (int{n}{val=-3}))))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=f}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=listdir}))) (expr*{args} (expr (Name (str{id}{val=command_dir})))))) (expr*{ifs} (expr (BoolOp (boolop{op} (And)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=startswith}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=endswith}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_}))))))))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=OSError}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (List (epsilon)))))
(root (FunctionDef (str{name}{val=load_command_class}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=app_name}))) (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=module})))) (expr{value} (Call (expr{func} (Name (str{id}{val=import_module}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=app_name}))) (expr (Name (str{id}{val=name})))))))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=module}))) (str{attr}{val=Command})))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=lru_cache}))) (str{attr}{val=lru_cache}))) (keyword*{keywords} (keyword (str{arg}{val=maxsize}) (expr{value} (Name (str{id}{val=None}))))))))))
(root (FunctionDef (str{name}{val=get_commands}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=commands})))) (expr{value} (DictComp (expr{key} (Name (str{id}{val=name}))) (expr{value} (Str (str{s}{val=_STR:0_}))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=name}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=find_commands}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=__path__}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))))))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=configured}))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=commands})))))
(root (For (expr{target} (Name (str{id}{val=app_config}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=reversed}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=apps}))) (str{attr}{val=get_app_configs}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=path})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=app_config}))) (str{attr}{val=path}))) (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=commands}))) (str{attr}{val=update}))) (expr*{args} (expr (DictComp (expr{key} (Name (str{id}{val=name}))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=app_config}))) (str{attr}{val=name}))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=name}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=find_commands}))) (expr*{args} (expr (Name (str{id}{val=path})))))))))))))))
(root (Return (expr{value} (Name (str{id}{val=commands})))))
(root (FunctionDef (str{name}{val=call_command}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=name})))) (str{vararg}{val=args}) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=app_name})))) (expr{value} (Subscript (expr{value} (Call (expr{func} (Name (str{id}{val=get_commands}))))) (slice{slice} (Index (expr{value} (Name (str{id}{val=name})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=KeyError}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=name}))))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=app_name}))) (expr (Name (str{id}{val=BaseCommand})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=command})))) (expr{value} (Name (str{id}{val=app_name})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=command})))) (expr{value} (Call (expr{func} (Name (str{id}{val=load_command_class}))) (expr*{args} (expr (Name (str{id}{val=app_name}))) (expr (Name (str{id}{val=name}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=parser})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=command}))) (str{attr}{val=create_parser}))) (expr*{args} (expr (Str (str{s}{val=}))) (expr (Name (str{id}{val=name}))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=command}))) (str{attr}{val=use_argparse}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=defaults})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=parse_args}))) (keyword*{keywords} (keyword (str{arg}{val=args}) (expr{value} (Name (str{id}{val=args})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=defaults})))) (expr{value} (Call (expr{func} (Name (str{id}{val=dict}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=defaults}))) (str{attr}{val=_get_kwargs})))))) (expr{kwargs} (Name (str{id}{val=options})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=defaults}))) (expr (Name (str{id}{val=_}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=parse_args}))) (keyword*{keywords} (keyword (str{arg}{val=args}) (expr{value} (List (epsilon)))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=defaults})))) (expr{value} (Call (expr{func} (Name (str{id}{val=dict}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=defaults}))) (str{attr}{val=__dict__})))) (expr{kwargs} (Name (str{id}{val=options})))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=command}))) (str{attr}{val=execute}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=defaults})))))))
(root (ClassDef (str{name}{val=ManagementUtility}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=argv})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=argv})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=argv}))) (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=argv}))) (slice{slice} (Slice (epsilon))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=prog_name})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=basename}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=argv}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=settings_exception})))) (expr{value} (Name (str{id}{val=None})))))
(root (FunctionDef (str{name}{val=main_help_text}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=commands_only})))) (expr*{defaults} (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=commands_only}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=usage})))) (expr{value} (Call (expr{func} (Name (str{id}{val=sorted}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=get_commands}))))) (str{attr}{val=keys}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=usage})))) (expr{value} (List (expr*{elts} (expr (Str (str{s}{val=}))) (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=prog_name}))))) (expr (Str (str{s}{val=}))) (expr (Str (str{s}{val=Available subcommands:}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=commands_dict})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=collections}))) (str{attr}{val=defaultdict}))) (expr*{args} (expr (Lambda (arguments{args} (arguments (epsilon))) (expr{body} (List (epsilon))))))))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=app})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=iteritems}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=get_commands})))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=app}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=app})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=app})))) (expr{value} (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=app}))) (str{attr}{val=rpartition}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=-1})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=commands_dict}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=app}))))))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=name}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=style})))) (expr{value} (Call (expr{func} (Name (str{id}{val=color_style})))))))
(root (For (expr{target} (Name (str{id}{val=app}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=sorted}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=commands_dict}))) (str{attr}{val=keys})))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=usage}))) (str{attr}{val=append}))) (expr*{args} (expr (Str (str{s}{val=}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=usage}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=style}))) (str{attr}{val=NOTICE}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=app})))))))))))))
(root (For (expr{target} (Name (str{id}{val=name}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=sorted}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=commands_dict}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=app})))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=usage}))) (str{attr}{val=append}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=name}))))))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=settings_exception}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=usage}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=style}))) (str{attr}{val=NOTICE}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=Note that only Django core commands are listed as settings are not properly configured (error: %s).}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=settings_exception})))))))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=\n}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=usage}))))))))
(root (FunctionDef (str{name}{val=fetch_command}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=subcommand})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=commands})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_commands})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=app_name})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=commands}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=subcommand})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=KeyError}))) (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=INSTALLED_APPS})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=stderr}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=subcommand}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=prog_name})))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=exit}))) (expr*{args} (expr (Num (int{n}{val=1}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=app_name}))) (expr (Name (str{id}{val=BaseCommand})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=klass})))) (expr{value} (Name (str{id}{val=app_name})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=klass})))) (expr{value} (Call (expr{func} (Name (str{id}{val=load_command_class}))) (expr*{args} (expr (Name (str{id}{val=app_name}))) (expr (Name (str{id}{val=subcommand}))))))))
(root (Return (expr{value} (Name (str{id}{val=klass})))))
(root (FunctionDef (str{name}{val=autocomplete}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=environ})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (epsilon)))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cwords})))) (expr{value} (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=environ}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (str{attr}{val=split}))))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=1})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cword})))) (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=environ}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=curr})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=cwords}))) (slice{slice} (Index (expr{value} (BinOp (expr{left} (Name (str{id}{val=cword}))) (operator{op} (Sub)) (expr{right} (Num (int{n}{val=1})))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=IndexError}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=curr})))) (expr{value} (Str (str{s}{val=})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=subcommands})))) (expr{value} (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=get_commands})))))))) (operator{op} (Add)) (expr{right} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=options})))) (expr{value} (List (expr*{elts} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None})))))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=cword}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (stmt*{body} (stmt (Pass)))))
(root (Print (expr*{values} (expr (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val= }))) (str{attr}{val=join}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=sorted}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=filter}))) (expr*{args} (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=x})))))) (expr{body} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=x}))) (str{attr}{val=startswith}))) (expr*{args} (expr (Name (str{id}{val=curr})))))))) (expr (Name (str{id}{val=subcommands}))))))))))))) (bool{nl}{val=True})))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=cwords}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=subcommands})))))) (expr (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=cwords}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_}))))))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=subcommand_cls})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fetch_command}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=cwords}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=cwords}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=django.core.servers.fastcgi}) (alias*{names} (alias (str{name}{val=FASTCGI_OPTIONS}))) (int{level}{val=0})))
(root (AugAssign (expr{target} (Name (str{id}{val=options}))) (operator{op} (Add)) (expr{value} (ListComp (expr{elt} (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Num (int{n}{val=1})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=k}))) (expr{iter} (Name (str{id}{val=FASTCGI_OPTIONS})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=cwords}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=_STR:3_}))) (expr (Str (str{s}{val=_STR:4_}))) (expr (Str (str{s}{val=sqlindexes}))) (expr (Str (str{s}{val=sqlsequencereset}))) (expr (Str (str{s}{val=test}))))))))) (stmt*{body} (stmt (Pass))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=app_configs})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=apps}))) (str{attr}{val=get_app_configs})))))))
(root (AugAssign (expr{target} (Name (str{id}{val=options}))) (operator{op} (Add)) (expr{value} (ListComp (expr{elt} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=app_config}))) (str{attr}{val=label}))) (expr (Num (int{n}{val=0})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=app_config}))) (expr{iter} (Name (str{id}{val=app_configs})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ImportError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=parser})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=subcommand_cls}))) (str{attr}{val=create_parser}))) (expr*{args} (expr (Str (str{s}{val=}))) (expr (Subscript (expr{value} (Name (str{id}{val=cwords}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=subcommand_cls}))) (str{attr}{val=use_argparse}))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=options}))) (operator{op} (Add)) (expr{value} (ListComp (expr{elt} (Tuple (expr*{elts} (expr (Subscript (expr{value} (Call (expr{func} (Name (str{id}{val=sorted}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=s_opt}))) (str{attr}{val=option_strings})))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=s_opt}))) (str{attr}{val=nargs}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Num (int{n}{val=0}))))))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=s_opt}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=_actions}))) (expr*{ifs} (expr (Attribute (expr{value} (Name (str{id}{val=s_opt}))) (str{attr}{val=option_strings}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=options}))) (operator{op} (Add)) (expr{value} (ListComp (expr{elt} (Tuple (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=s_opt}))) (str{attr}{val=get_opt_string}))))) (expr (Attribute (expr{value} (Name (str{id}{val=s_opt}))) (str{attr}{val=nargs})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=s_opt}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=option_list})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=prev_opts})))) (expr{value} (ListComp (expr{elt} (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=x}))) (str{attr}{val=split}))) (expr*{args} (expr (Str (str{s}{val==})))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=x}))) (expr{iter} (Subscript (expr{value} (Name (str{id}{val=cwords}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=1}))) (expr{upper} (BinOp (expr{left} (Name (str{id}{val=cword}))) (operator{op} (Sub)) (expr{right} (Num (int{n}{val=1})))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=options})))) (expr{value} (ListComp (expr{elt} (Name (str{id}{val=opt}))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=opt}))) (expr{iter} (Name (str{id}{val=options}))) (expr*{ifs} (expr (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=opt}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=prev_opts})))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=options})))) (expr{value} (Call (expr{func} (Name (str{id}{val=sorted}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Name (str{id}{val=v})))))) (comprehension*{generators} (comprehension (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Name (str{id}{val=v})))))) (expr{iter} (Name (str{id}{val=options}))) (expr*{ifs} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=k}))) (str{attr}{val=startswith}))) (expr*{args} (expr (Name (str{id}{val=curr}))))))))))))))))
(root (For (expr{target} (Name (str{id}{val=option}))) (expr{iter} (Name (str{id}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=opt_label})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=option}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))
(root (If (expr{test} (Subscript (expr{value} (Name (str{id}{val=option}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=opt_label}))) (operator{op} (Add)) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Print (expr*{values} (expr (Name (str{id}{val=opt_label})))) (bool{nl}{val=True})))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=exit}))) (expr*{args} (expr (Num (int{n}{val=1}))))))))
(root (FunctionDef (str{name}{val=execute}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=subcommand})))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=argv}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=IndexError}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=subcommand})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=parser})))) (expr{value} (Call (expr{func} (Name (str{id}{val=CommandParser}))) (expr*{args} (expr (Name (str{id}{val=None})))) (keyword*{keywords} (keyword (str{arg}{val=usage}) (expr{value} (Str (str{s}{val=_STR:0_})))) (keyword (str{arg}{val=add_help}) (expr{value} (Name (str{id}{val=False})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=nargs}) (expr{value} (Str (str{s}{val=_STR:1_})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=options}))) (expr (Name (str{id}{val=args}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=parse_known_args}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=argv}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=2}))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=handle_default_options}))) (expr*{args} (expr (Name (str{id}{val=options}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=CommandError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=no_settings_commands})))) (expr{value} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=_STR:3_}))) (expr (Str (str{s}{val=_STR:4_}))) (expr (Str (str{s}{val=_STR:5_}))) (expr (Str (str{s}{val=_STR:6_}))) (expr (Str (str{s}{val=startapp}))) (expr (Str (str{s}{val=startproject}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=INSTALLED_APPS})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ImproperlyConfigured}))) (expr{name} (Name (str{id}{val=exc}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=settings_exception})))) (expr{value} (Name (str{id}{val=exc})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=subcommand}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=no_settings_commands})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=configure})))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=configured}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=django}))) (str{attr}{val=setup})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=autocomplete})))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=subcommand}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=args})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=main_help_text}))) (keyword*{keywords} (keyword (str{arg}{val=commands_only}) (expr{value} (Name (str{id}{val=True}))))))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=\n}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=args})))))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (stmt*{body} (stmt (Pass))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=main_help_text}))))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=\n}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fetch_command}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=args}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))) (str{attr}{val=print_help}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=prog_name}))) (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=args}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=subcommand}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (expr (Compare (expr{left} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=argv}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=1}))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (List (expr*{elts} (expr (Str (str{s}{val=_STR:1_})))))))))))) (stmt*{body} (stmt (Pass))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=django}))) (str{attr}{val=get_version}))))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=\n}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=argv}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=1}))))))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Tuple (expr*{elts} (expr (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_})))))) (expr (List (expr*{elts} (expr (Str (str{s}{val=-h})))))))))))) (stmt*{body} (stmt (Pass))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=main_help_text}))))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=\n}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fetch_command}))) (expr*{args} (expr (Name (str{id}{val=subcommand})))))) (str{attr}{val=run_from_argv}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=argv}))))))))
(root (FunctionDef (str{name}{val=execute_from_command_line}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=argv})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=utility})))) (expr{value} (Call (expr{func} (Name (str{id}{val=ManagementUtility}))) (expr*{args} (expr (Name (str{id}{val=argv}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=utility}))) (str{attr}{val=execute})))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=os})))))
(root (Import (alias*{names} (alias (str{name}{val=sys})))))
(root (Import (alias*{names} (alias (str{name}{val=warnings})))))
(root (ImportFrom (str{module}{val=argparse}) (alias*{names} (alias (str{name}{val=ArgumentParser}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=optparse}) (alias*{names} (alias (str{name}{val=OptionParser}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=django})))))
(root (ImportFrom (str{module}{val=django.core}) (alias*{names} (alias (str{name}{val=checks}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.exceptions}) (alias*{names} (alias (str{name}{val=ImproperlyConfigured}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management.color}) (alias*{names} (alias (str{name}{val=color_style})) (alias (str{name}{val=no_style}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.deprecation}) (alias*{names} (alias (str{name}{val=RemovedInDjango19Warning})) (alias (str{name}{val=RemovedInDjango20Warning}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=force_str}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=CommandError}) (expr*{bases} (expr (Name (str{id}{val=Exception})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (ClassDef (str{name}{val=CommandParser}) (expr*{bases} (expr (Name (str{id}{val=ArgumentParser})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=cmd})))) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=cmd})))) (expr{value} (Name (str{id}{val=cmd})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=CommandParser}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (FunctionDef (str{name}{val=parse_args}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=args}))) (expr (Name (str{id}{val=namespace})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=cmd}))) (expr (Str (str{s}{val=_STR:0_})))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=args}))) (expr (Call (expr{func} (Name (str{id}{val=any}))) (expr*{args} (expr (ListComp (expr{elt} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=arg}))) (str{attr}{val=startswith}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_})))))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=arg}))) (expr{iter} (Name (str{id}{val=args})))))))))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=cmd}))) (str{attr}{val=missing_args_message}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=CommandParser}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=parse_args}))) (expr*{args} (expr (Name (str{id}{val=args}))) (expr (Name (str{id}{val=namespace}))))))))
(root (FunctionDef (str{name}{val=error}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=message})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=cmd}))) (str{attr}{val=_called_from_command_line}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=CommandParser}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=error}))) (expr*{args} (expr (Name (str{id}{val=message}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=message}))))))))))
(root (FunctionDef (str{name}{val=handle_default_options}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=options})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=settings}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=environ}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=settings})))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=pythonpath}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=path}))) (str{attr}{val=insert}))) (expr*{args} (expr (Num (int{n}{val=0}))) (expr (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=pythonpath}))))))))
(root (ClassDef (str{name}{val=OutputWrapper}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=out}))) (expr (Name (str{id}{val=style_func}))) (expr (Name (str{id}{val=ending})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Str (str{s}{val=\n})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_out})))) (expr{value} (Name (str{id}{val=out})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style_func})))) (expr{value} (Name (str{id}{val=None})))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=out}))) (expr (Str (str{s}{val=_STR:0_})))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=out}))) (str{attr}{val=isatty})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style_func})))) (expr{value} (Name (str{id}{val=style_func})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=ending})))) (expr{value} (Name (str{id}{val=ending})))))
(root (FunctionDef (str{name}{val=__getattr__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_out}))) (expr (Name (str{id}{val=name}))))))))
(root (FunctionDef (str{name}{val=write}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=msg}))) (expr (Name (str{id}{val=style_func}))) (expr (Name (str{id}{val=ending})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ending})))) (expr{value} (IfExp (expr{test} (Compare (expr{left} (Name (str{id}{val=ending}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr{body} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=ending}))) (expr{orelse} (Name (str{id}{val=ending})))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=ending}))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=msg}))) (str{attr}{val=endswith}))) (expr*{args} (expr (Name (str{id}{val=ending}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=msg}))) (operator{op} (Add)) (expr{value} (Name (str{id}{val=ending})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=style_func})))) (expr{value} (Subscript (expr{value} (ListComp (expr{elt} (Name (str{id}{val=f}))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=f}))) (expr{iter} (Tuple (expr*{elts} (expr (Name (str{id}{val=style_func}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style_func}))) (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=x})))))) (expr{body} (Name (str{id}{val=x})))))))) (expr*{ifs} (expr (Compare (expr{left} (Name (str{id}{val=f}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None}))))))))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_out}))) (str{attr}{val=write}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=force_str}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=style_func}))) (expr*{args} (expr (Name (str{id}{val=msg}))))))))))))))
(root (ClassDef (str{name}{val=BaseCommand}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=option_list})))) (expr{value} (Tuple (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=help})))) (expr{value} (Str (str{s}{val=})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=args})))) (expr{value} (Str (str{s}{val=})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_called_from_command_line})))) (expr{value} (Name (str{id}{val=False})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=can_import_settings})))) (expr{value} (Name (str{id}{val=True})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=output_transaction})))) (expr{value} (Name (str{id}{val=False})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=leave_locale_alone})))) (expr{value} (Name (str{id}{val=False})))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style})))) (expr{value} (Call (expr{func} (Name (str{id}{val=color_style})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=has_old_option})))) (expr{value} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=has_new_option})))) (expr{value} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Name (str{id}{val=has_old_option}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=warnings}))) (str{attr}{val=warn}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_in favor of "requires_system_checks".}))) (expr (Name (str{id}{val=RemovedInDjango19Warning}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=has_old_option}))) (expr (Name (str{id}{val=has_new_option})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ImproperlyConfigured}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_and "requires_system_checks", which is illegal. Use only "requires_system_checks".}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__class__}))) (str{attr}{val=__name__}))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=requires_system_checks})))) (expr{value} (IfExp (expr{test} (Name (str{id}{val=has_new_option}))) (expr{body} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=requires_system_checks}))) (expr{orelse} (IfExp (expr{test} (Name (str{id}{val=has_old_option}))) (expr{body} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=requires_model_validation}))) (expr{orelse} (Name (str{id}{val=True})))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=use_argparse}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=bool}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=option_list}))))))))))
(root (FunctionDef (str{name}{val=get_version}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=django}))) (str{attr}{val=get_version})))))))
(root (FunctionDef (str{name}{val=usage}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=subcommand})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=usage})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=subcommand}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=args}))))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=help}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=%s\n\n%s}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=usage}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=help}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=usage})))))
(root (FunctionDef (str{name}{val=create_parser}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=prog_name}))) (expr (Name (str{id}{val=subcommand})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=use_argparse}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=warnings}))) (str{attr}{val=warn}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_is deprecated, use ArgumentParser instead}))) (expr (Name (str{id}{val=RemovedInDjango20Warning}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=parser})))) (expr{value} (Call (expr{func} (Name (str{id}{val=OptionParser}))) (keyword*{keywords} (keyword (str{arg}{val=prog}) (expr{value} (Name (str{id}{val=prog_name})))) (keyword (str{arg}{val=usage}) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=usage}))) (expr*{args} (expr (Name (str{id}{val=subcommand}))))))) (keyword (str{arg}{val=version}) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get_version})))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_option}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:2_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=verbosity})))) (keyword (str{arg}{val=default}) (expr{value} (Str (str{s}{val=1})))) (keyword (str{arg}{val=type}) (expr{value} (Str (str{s}{val=choice})))) (keyword (str{arg}{val=choices}) (expr{value} (List (expr*{elts} (expr (Str (str{s}{val=0}))) (expr (Str (str{s}{val=1}))) (expr (Str (str{s}{val=2}))) (expr (Str (str{s}{val=3}))))))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_option}))) (expr*{args} (expr (Str (str{s}{val=_STR:7_})))) (keyword*{keywords} (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=_STR:8_})))))))))
(root (Expr (expr{value} (Tuple (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_option}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=_STR:1_}))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_option}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:1_})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Raise on exception})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_option}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:2_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=no_color})))) (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=False})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Don't colorize the command output.})))))))))
(root (For (expr{target} (Name (str{id}{val=opt}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=option_list}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_option}))) (expr*{args} (expr (Name (str{id}{val=opt}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=parser})))) (expr{value} (Call (expr{func} (Name (str{id}{val=CommandParser}))) (expr*{args} (expr (Name (str{id}{val=self})))) (keyword*{keywords} (keyword (str{arg}{val=prog}) (expr{value} (BinOp (expr{left} (Str (str{s}{val=%s %s}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=basename}))) (expr*{args} (expr (Name (str{id}{val=prog_name})))))) (expr (Name (str{id}{val=subcommand}))))))))) (keyword (str{arg}{val=description}) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=help}))) (expr (Name (str{id}{val=None}))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:1_})))) (keyword (str{arg}{val=version}) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get_version})))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:2_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=verbosity})))) (keyword (str{arg}{val=default}) (expr{value} (Str (str{s}{val=1})))) (keyword (str{arg}{val=type}) (expr{value} (Name (str{id}{val=int})))) (keyword (str{arg}{val=choices}) (expr{value} (List (expr*{elts} (expr (Num (int{n}{val=0}))) (expr (Num (int{n}{val=1}))) (expr (Num (int{n}{val=2}))) (expr (Num (int{n}{val=3}))))))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:2_})))) (keyword*{keywords} (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=The Python path to a settings module, e.g. "myproject.settings.main". If this isn't provided, the DJANGO_SETTINGS_MODULE environment variable will be used.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=A directory to add to the Python path, e.g. "/home/djangoprojects/myproject".})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:1_})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Raise on exception})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:2_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=_STR:3_})))) (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=False})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Don't colorize the command output.})))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=args}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=nargs}) (expr{value} (Str (str{s}{val=_STR:1_})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=add_arguments}))) (expr*{args} (expr (Name (str{id}{val=parser}))))))))
(root (Return (expr{value} (Name (str{id}{val=parser})))))
(root (FunctionDef (str{name}{val=add_arguments}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=parser})))))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (FunctionDef (str{name}{val=print_help}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=prog_name}))) (expr (Name (str{id}{val=subcommand})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=parser})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=create_parser}))) (expr*{args} (expr (Name (str{id}{val=prog_name}))) (expr (Name (str{id}{val=subcommand}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=print_help})))))))
(root (FunctionDef (str{name}{val=run_from_argv}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=argv})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_called_from_command_line})))) (expr{value} (Name (str{id}{val=True})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=parser})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=create_parser}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=argv}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (expr (Subscript (expr{value} (Name (str{id}{val=argv}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=use_argparse}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=options})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=parse_args}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=argv}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=2}))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cmd_options})))) (expr{value} (Call (expr{func} (Name (str{id}{val=vars}))) (expr*{args} (expr (Name (str{id}{val=options}))))))))
(root (If (expr{test} (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=options})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=args})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=args})))))
(root (Delete (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=cmd_options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=args})))) (expr{value} (Tuple (epsilon)))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=options}))) (expr (Name (str{id}{val=args}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=parse_args}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=argv}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=2}))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cmd_options})))) (expr{value} (Call (expr{func} (Name (str{id}{val=vars}))) (expr*{args} (expr (Name (str{id}{val=options}))))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=handle_default_options}))) (expr*{args} (expr (Name (str{id}{val=options}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=execute}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=cmd_options})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=Exception}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=traceback}))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=e}))) (expr (Name (str{id}{val=CommandError}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (epsilon)))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=stderr})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Call (expr{func} (Name (str{id}{val=OutputWrapper}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=stderr}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style}))) (str{attr}{val=ERROR})))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=stderr}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=__class__}))) (str{attr}{val=__name__}))) (expr (Name (str{id}{val=e})))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=exit}))) (expr*{args} (expr (Num (int{n}{val=1}))))))))
(root (FunctionDef (str{name}{val=execute}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout})))) (expr{value} (Call (expr{func} (Name (str{id}{val=OutputWrapper}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=stdout})))))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style})))) (expr{value} (Call (expr{func} (Name (str{id}{val=no_style})))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stderr})))) (expr{value} (Call (expr{func} (Name (str{id}{val=OutputWrapper}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=stderr})))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stderr})))) (expr{value} (Call (expr{func} (Name (str{id}{val=OutputWrapper}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=stderr})))))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style}))) (str{attr}{val=ERROR}))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=can_import_settings}))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=saved_locale})))) (expr{value} (Name (str{id}{val=None})))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=leave_locale_alone}))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=can_import_settings}))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_(%s) and 'can_import_settings' (%s) command options.}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=leave_locale_alone}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=can_import_settings})))))))))))))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=translation}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=saved_locale})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=translation}))) (str{attr}{val=get_language})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=translation}))) (str{attr}{val=activate}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=requires_system_checks}))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=check})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=output})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=handle}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=options})))))))
(root (If (expr{test} (Name (str{id}{val=output}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=output_transaction}))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=django.db}) (alias*{names} (alias (str{name}{val=connections})) (alias (str{name}{val=DEFAULT_DB_ALIAS}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=connection})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=connections}))) (slice{slice} (Index (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=DEFAULT_DB_ALIAS}))))))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=ops}))) (str{attr}{val=start_transaction_sql}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style}))) (str{attr}{val=SQL_KEYWORD}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=ops}))) (str{attr}{val=start_transaction_sql})))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (Name (str{id}{val=output}))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=output_transaction}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=\n}))) (operator{op} (Add)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style}))) (str{attr}{val=SQL_KEYWORD}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=ops}))) (str{attr}{val=end_transaction_sql})))))))))))))))
(root (TryFinally (stmt*{body} (stmt (Pass))) (stmt*{finalbody} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=saved_locale}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=translation}))) (str{attr}{val=activate}))) (expr*{args} (expr (Name (str{id}{val=saved_locale}))))))))
(root (FunctionDef (str{name}{val=validate}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=app_config}))) (expr (Name (str{id}{val=display_num_errors})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=app_config}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=app_configs})))) (expr{value} (Name (str{id}{val=None})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=app_configs})))) (expr{value} (List (expr*{elts} (expr (Name (str{id}{val=app_config}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=check}))) (keyword*{keywords} (keyword (str{arg}{val=app_configs}) (expr{value} (Name (str{id}{val=app_configs})))) (keyword (str{arg}{val=display_num_errors}) (expr{value} (Name (str{id}{val=display_num_errors})))))))))
(root (FunctionDef (str{name}{val=check}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=app_configs}))) (expr (Name (str{id}{val=tags}))) (expr (Name (str{id}{val=display_num_errors})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=all_issues})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=checks}))) (str{attr}{val=run_checks}))) (keyword*{keywords} (keyword (str{arg}{val=app_configs}) (expr{value} (Name (str{id}{val=app_configs})))) (keyword (str{arg}{val=tags}) (expr{value} (Name (str{id}{val=tags})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=msg})))) (expr{value} (Str (str{s}{val=})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=visible_issue_count})))) (expr{value} (Num (int{n}{val=0})))))
(root (If (expr{test} (Name (str{id}{val=all_issues}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=debugs})))) (expr{value} (ListComp (expr{elt} (Name (str{id}{val=e}))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=e}))) (expr{iter} (Name (str{id}{val=all_issues}))) (expr*{ifs} (expr (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=level}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=checks}))) (str{attr}{val=INFO})))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=is_silenced})))))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=infos})))) (expr{value} (ListComp (expr{elt} (Name (str{id}{val=e}))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=e}))) (expr{iter} (Name (str{id}{val=all_issues}))) (expr*{ifs} (expr (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=checks}))) (str{attr}{val=INFO}))) (cmpop*{ops} (cmpop (LtE)) (cmpop (Lt))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=level}))) (expr (Attribute (expr{value} (Name (str{id}{val=checks}))) (str{attr}{val=WARNING})))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=is_silenced})))))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=warnings})))) (expr{value} (ListComp (expr{elt} (Name (str{id}{val=e}))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=e}))) (expr{iter} (Name (str{id}{val=all_issues}))) (expr*{ifs} (expr (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=checks}))) (str{attr}{val=WARNING}))) (cmpop*{ops} (cmpop (LtE)) (cmpop (Lt))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=level}))) (expr (Attribute (expr{value} (Name (str{id}{val=checks}))) (str{attr}{val=ERROR})))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=is_silenced})))))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=errors})))) (expr{value} (ListComp (expr{elt} (Name (str{id}{val=e}))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=e}))) (expr{iter} (Name (str{id}{val=all_issues}))) (expr*{ifs} (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=checks}))) (str{attr}{val=ERROR}))) (cmpop*{ops} (cmpop (LtE)) (cmpop (Lt))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=level}))) (expr (Attribute (expr{value} (Name (str{id}{val=checks}))) (str{attr}{val=CRITICAL})))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=criticals})))) (expr{value} (ListComp (expr{elt} (Name (str{id}{val=e}))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=e}))) (expr{iter} (Name (str{id}{val=all_issues}))) (expr*{ifs} (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=checks}))) (str{attr}{val=CRITICAL}))) (cmpop*{ops} (cmpop (LtE))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=level})))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=sorted_issues})))) (expr{value} (List (expr*{elts} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=criticals}))) (expr (Str (str{s}{val=_STR:0_})))))) (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=errors}))) (expr (Str (str{s}{val=_STR:1_})))))) (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=warnings}))) (expr (Str (str{s}{val=_STR:2_})))))) (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=infos}))) (expr (Str (str{s}{val=INFOS})))))) (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=debugs}))) (expr (Str (str{s}{val=DEBUGS})))))))))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=issues}))) (expr (Name (str{id}{val=group_name})))))) (expr{iter} (Name (str{id}{val=sorted_issues}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=issues}))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=visible_issue_count}))) (operator{op} (Add)) (expr{value} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=issues}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=formatted})))) (expr{value} (GeneratorExp (expr{elt} (IfExp (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=is_serious}))))) (expr{body} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=color_style}))))) (str{attr}{val=ERROR}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=force_str}))) (expr*{args} (expr (Name (str{id}{val=e}))))))))) (expr{orelse} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=color_style}))))) (str{attr}{val=WARNING}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=force_str}))) (expr*{args} (expr (Name (str{id}{val=e}))))))))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=e}))) (expr{iter} (Name (str{id}{val=issues})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=formatted})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=\n}))) (str{attr}{val=join}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=sorted}))) (expr*{args} (expr (Name (str{id}{val=formatted})))))))))))
(root (AugAssign (expr{target} (Name (str{id}{val=msg}))) (operator{op} (Add)) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=group_name}))) (expr (Name (str{id}{val=formatted}))))))))))
(root (If (expr{test} (Name (str{id}{val=msg}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=msg})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=msg})))))))
(root (If (expr{test} (Name (str{id}{val=display_num_errors}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=msg}))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=msg}))) (operator{op} (Add)) (expr{value} (Str (str{s}{val=\n})))))
(root (AugAssign (expr{target} (Name (str{id}{val=msg}))) (operator{op} (Add)) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (IfExp (expr{test} (Compare (expr{left} (Name (str{id}{val=visible_issue_count}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (expr{body} (Str (str{s}{val=_STR:1_}))) (expr{orelse} (IfExp (expr{test} (Compare (expr{left} (Name (str{id}{val=visible_issue_count}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (expr{body} (Str (str{s}{val=1 issue}))) (expr{orelse} (BinOp (expr{left} (Str (str{s}{val=%s issues}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=visible_issue_count}))))))))) (expr (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=all_issues})))))) (operator{op} (Sub)) (expr{right} (Name (str{id}{val=visible_issue_count}))))))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=any}))) (expr*{args} (expr (GeneratorExp (expr{elt} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=is_serious}))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=is_silenced})))))))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=e}))) (expr{iter} (Name (str{id}{val=all_issues})))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (Name (str{id}{val=msg}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=msg}))) (expr (Name (str{id}{val=visible_issue_count})))))) (stmt*{body} (stmt (Pass))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stderr}))) (str{attr}{val=write}))) (expr*{args} (expr (Name (str{id}{val=msg}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Name (str{id}{val=msg}))) (stmt*{body} (stmt (Pass))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (Name (str{id}{val=msg}))))))))
(root (FunctionDef (str{name}{val=handle}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=NotImplementedError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (ClassDef (str{name}{val=AppCommand}) (expr*{bases} (expr (Name (str{id}{val=BaseCommand})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=missing_args_message})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (FunctionDef (str{name}{val=add_arguments}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=parser})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=metavar}) (expr{value} (Str (str{s}{val=_STR:1_})))) (keyword (str{arg}{val=nargs}) (expr{value} (Str (str{s}{val=_STR:2_})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=One or more application label.})))))))))
(root (FunctionDef (str{name}{val=handle}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=app_labels}) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=django.apps}) (alias*{names} (alias (str{name}{val=apps}))) (int{level}{val=0})))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=app_configs})))) (expr{value} (ListComp (expr{elt} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=apps}))) (str{attr}{val=get_app_config}))) (expr*{args} (expr (Name (str{id}{val=app_label})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=app_label}))) (expr{iter} (Name (str{id}{val=app_labels})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=LookupError}))) (expr (Name (str{id}{val=ImportError})))))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=e}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=output})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=app_config}))) (expr{iter} (Name (str{id}{val=app_configs}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=app_output})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=handle_app_config}))) (expr*{args} (expr (Name (str{id}{val=app_config})))) (expr{kwargs} (Name (str{id}{val=options})))))))
(root (If (expr{test} (Name (str{id}{val=app_output}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=output}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=app_output}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=\n}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=output}))))))))
(root (FunctionDef (str{name}{val=handle_app_config}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=app_config})))) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=handle_app})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=handle_app})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=AttributeError}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=NotImplementedError}))) (expr*{args} (expr (Str (str{s}{val=Subclasses of AppCommand must providea handle_app_config() method.}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=warnings}))) (str{attr}{val=warn}))) (expr*{args} (expr (Str (str{s}{val=AppCommand.handle_app() is superseded by AppCommand.handle_app_config().}))) (expr (Name (str{id}{val=RemovedInDjango19Warning})))) (keyword*{keywords} (keyword (str{arg}{val=stacklevel}) (expr{value} (Num (int{n}{val=2})))))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=app_config}))) (str{attr}{val=models_module}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=AppCommand cannot handle app '%s' in legacy mode because it doesn't have a models module.}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=app_config}))) (str{attr}{val=label}))))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=handle_app}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=app_config}))) (str{attr}{val=models_module})))) (expr{kwargs} (Name (str{id}{val=options})))))))
(root (ClassDef (str{name}{val=LabelCommand}) (expr*{bases} (expr (Name (str{id}{val=BaseCommand})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=label})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=missing_args_message})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=label})))))))
(root (FunctionDef (str{name}{val=add_arguments}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=parser})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=metavar}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=label})))) (keyword (str{arg}{val=nargs}) (expr{value} (Str (str{s}{val=_STR:1_})))))))))
(root (FunctionDef (str{name}{val=handle}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=labels}) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=output})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=label}))) (expr{iter} (Name (str{id}{val=labels}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=label_output})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=handle_label}))) (expr*{args} (expr (Name (str{id}{val=label})))) (expr{kwargs} (Name (str{id}{val=options})))))))
(root (If (expr{test} (Name (str{id}{val=label_output}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=output}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=label_output}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=\n}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=output}))))))))
(root (FunctionDef (str{name}{val=handle_label}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=label})))) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=NotImplementedError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (ClassDef (str{name}{val=NoArgsCommand}) (expr*{bases} (expr (Name (str{id}{val=BaseCommand})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=args})))) (expr{value} (Str (str{s}{val=})))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=warnings}))) (str{attr}{val=warn}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_Use BaseCommand instead, which takes no arguments by default.}))) (expr (Name (str{id}{val=RemovedInDjango20Warning}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=NoArgsCommand}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__})))))))
(root (FunctionDef (str{name}{val=handle}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=args}))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=handle_noargs}))) (expr{kwargs} (Name (str{id}{val=options})))))))
(root (FunctionDef (str{name}{val=handle_noargs}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=NotImplementedError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Import (alias*{names} (alias (str{name}{val=os})))))
(root (Import (alias*{names} (alias (str{name}{val=sys})))))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=termcolors}))) (int{level}{val=0})))
(root (FunctionDef (str{name}{val=supports_color}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=plat})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=platform})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=supported_platform})))) (expr{value} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=plat}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (expr (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=plat}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:1_})))))) (expr (Compare (expr{left} (Str (str{s}{val=ANSICON}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=environ}))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=is_a_tty})))) (expr{value} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=stdout}))) (expr (Str (str{s}{val=_STR:1_})))))) (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=stdout}))) (str{attr}{val=isatty}))))))))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=supported_platform}))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=is_a_tty})))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (Return (expr{value} (Name (str{id}{val=True})))))
(root (FunctionDef (str{name}{val=color_style}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=supports_color}))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=style})))) (expr{value} (Call (expr{func} (Name (str{id}{val=no_style})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=DJANGO_COLORS})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=environ}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=color_settings})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=termcolors}))) (str{attr}{val=parse_color_setting}))) (expr*{args} (expr (Name (str{id}{val=DJANGO_COLORS}))))))))
(root (If (expr{test} (Name (str{id}{val=color_settings}))) (stmt*{body} (stmt (Pass)))))
(root (ClassDef (str{name}{val=dummy}) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=style})))) (expr{value} (Call (expr{func} (Name (str{id}{val=dummy})))))))
(root (For (expr{target} (Name (str{id}{val=role}))) (expr{iter} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=termcolors}))) (str{attr}{val=PALETTES}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Name (str{id}{val=termcolors}))) (str{attr}{val=NOCOLOR_PALETTE}))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=format})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=color_settings}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=role}))) (expr (Dict (epsilon))))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=setattr}))) (expr*{args} (expr (Name (str{id}{val=style}))) (expr (Name (str{id}{val=role}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=termcolors}))) (str{attr}{val=make_style}))) (expr{kwargs} (Name (str{id}{val=format}))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=style}))) (str{attr}{val=ERROR_OUTPUT})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=style}))) (str{attr}{val=ERROR})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=style})))) (expr{value} (Call (expr{func} (Name (str{id}{val=no_style})))))))
(root (Return (expr{value} (Name (str{id}{val=style})))))
(root (FunctionDef (str{name}{val=no_style}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (ClassDef (str{name}{val=dummy}) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__getattr__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=attr})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=x})))))) (expr{body} (Name (str{id}{val=x})))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=dummy})))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.apps}) (alias*{names} (alias (str{name}{val=apps}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core}) (alias*{names} (alias (str{name}{val=checks}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.checks.registry}) (alias*{names} (alias (str{name}{val=registry}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management.base}) (alias*{names} (alias (str{name}{val=BaseCommand})) (alias (str{name}{val=CommandError}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=Command}) (expr*{bases} (expr (Name (str{id}{val=BaseCommand})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=help})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=requires_system_checks})))) (expr{value} (Name (str{id}{val=False})))))
(root (FunctionDef (str{name}{val=add_arguments}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=parser})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=metavar}) (expr{value} (Str (str{s}{val=_STR:1_})))) (keyword (str{arg}{val=nargs}) (expr{value} (Str (str{s}{val=_STR:2_})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:2_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=tags})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Run only checks labeled with given tag.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:2_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:3_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=list_tags})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=List available tags.})))))))))
(root (FunctionDef (str{name}{val=handle}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=app_labels}) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=\n}))) (str{attr}{val=join}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=sorted}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=registry}))) (str{attr}{val=tags_available}))))))))))))))))
(root (Return (epsilon)))
(root (If (expr{test} (Name (str{id}{val=app_labels}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=app_configs})))) (expr{value} (ListComp (expr{elt} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=apps}))) (str{attr}{val=get_app_config}))) (expr*{args} (expr (Name (str{id}{val=app_label})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=app_label}))) (expr{iter} (Name (str{id}{val=app_labels})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=app_configs})))) (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=tags})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=tags}))) (expr (Call (expr{func} (Name (str{id}{val=any}))) (expr*{args} (expr (GeneratorExp (expr{elt} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=checks}))) (str{attr}{val=tag_exists}))) (expr*{args} (expr (Name (str{id}{val=tag})))))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=tag}))) (expr{iter} (Name (str{id}{val=tags}))))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=invalid_tag})))) (expr{value} (Call (expr{func} (Name (str{id}{val=next}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Name (str{id}{val=tag}))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=tag}))) (expr{iter} (Name (str{id}{val=tags}))) (expr*{ifs} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=checks}))) (str{attr}{val=tag_exists}))) (expr*{args} (expr (Name (str{id}{val=tag}))))))))))))))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=invalid_tag}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=check}))) (keyword*{keywords} (keyword (str{arg}{val=app_configs}) (expr{value} (Name (str{id}{val=app_configs})))) (keyword (str{arg}{val=tags}) (expr{value} (Name (str{id}{val=tags})))) (keyword (str{arg}{val=display_num_errors}) (expr{value} (Name (str{id}{val=True})))))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=codecs})))))
(root (Import (alias*{names} (alias (str{name}{val=glob})))))
(root (Import (alias*{names} (alias (str{name}{val=os})))))
(root (ImportFrom (str{module}{val=django.core.management.base}) (alias*{names} (alias (str{name}{val=BaseCommand})) (alias (str{name}{val=CommandError}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management.utils}) (alias*{names} (alias (str{name}{val=find_command})) (alias (str{name}{val=popen_wrapper}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils._os}) (alias*{names} (alias (str{name}{val=npath})) (alias (str{name}{val=upath}))) (int{level}{val=0})))
(root (FunctionDef (str{name}{val=has_bom}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=fn})))))) (stmt*{body} (stmt (Pass)))))
(root (With (expr{context_expr} (Call (expr{func} (Name (str{id}{val=open}))) (expr*{args} (expr (Name (str{id}{val=fn}))) (expr (Str (str{s}{val=rb})))))) (expr{optional_vars} (Name (str{id}{val=f}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=sample})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=read}))) (expr*{args} (expr (Num (int{n}{val=4}))))))))
(root (Return (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=sample}))) (slice{slice} (Slice (expr{upper} (Num (int{n}{val=3}))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=﻿})))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sample}))) (str{attr}{val=startswith}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=codecs}))) (str{attr}{val=BOM_UTF16_LE})))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sample}))) (str{attr}{val=startswith}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=codecs}))) (str{attr}{val=BOM_UTF16_BE})))))))))))
(root (FunctionDef (str{name}{val=is_writable}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=path})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (With (expr{context_expr} (Call (expr{func} (Name (str{id}{val=open}))) (expr*{args} (expr (Name (str{id}{val=path}))) (expr (Str (str{s}{val=a})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=utime}))) (expr*{args} (expr (Name (str{id}{val=path}))) (expr (Name (str{id}{val=None}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=IOError}))) (expr (Name (str{id}{val=OSError})))))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (Return (expr{value} (Name (str{id}{val=True})))))
(root (ClassDef (str{name}{val=Command}) (expr*{bases} (expr (Name (str{id}{val=BaseCommand})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=help})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=requires_system_checks})))) (expr{value} (Name (str{id}{val=False})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=leave_locale_alone})))) (expr{value} (Name (str{id}{val=True})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=program})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=program_options})))) (expr{value} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=add_arguments}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=parser})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_})))) (keyword*{keywords} (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=_STR:2_})))) (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:3_})))) (keyword (str{arg}{val=default}) (expr{value} (List (epsilon)))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Locale(s) to process (e.g. de_AT). Default is to process all. Can be used multiple times.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_})))) (keyword*{keywords} (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=_STR:3_})))) (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:4_})))) (keyword (str{arg}{val=default}) (expr{value} (List (epsilon)))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Locales to exclude. Default is none. Can be used multiple times.})))))))))
(root (FunctionDef (str{name}{val=handle}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=locale})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=exclude})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity})))) (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=verbosity})))))))))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=find_command}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=program})))))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=Can't find %s. Make sure you have GNU gettext tools 0.15 or newer installed.}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=program}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=basedirs})))) (expr{value} (List (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Str (str{s}{val=conf}))) (expr (Str (str{s}{val=_STR:1_})))))) (expr (Str (str{s}{val=_STR:1_}))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=environ}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=basedirs}))) (str{attr}{val=extend}))) (expr*{args} (expr (ListComp (expr{elt} (Call (expr{func} (Name (str{id}{val=upath}))) (expr*{args} (expr (Name (str{id}{val=path})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=path}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=LOCALE_PATHS}))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=basedirs})))) (expr{value} (Call (expr{func} (Name (str{id}{val=set}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=map}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=abspath}))) (expr (Call (expr{func} (Name (str{id}{val=filter}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=isdir}))) (expr (Name (str{id}{val=basedirs}))))))))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=basedirs}))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (Str (str{s}{val=This script should be run from the Django Git checkout or your project or app tree, or with the settings module specified.}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=all_locales})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=basedir}))) (expr{iter} (Name (str{id}{val=basedirs}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=locale_dirs})))) (expr{value} (Call (expr{func} (Name (str{id}{val=filter}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=isdir}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=glob}))) (str{attr}{val=glob}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=%s/*}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=basedir})))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=all_locales}))) (str{attr}{val=extend}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=map}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=basename}))) (expr (Name (str{id}{val=locale_dirs})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=locales})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=locale}))) (expr (Name (str{id}{val=all_locales}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=locales})))) (expr{value} (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=set}))) (expr*{args} (expr (Name (str{id}{val=locales})))))) (operator{op} (Sub)) (expr{right} (Call (expr{func} (Name (str{id}{val=set}))) (expr*{args} (expr (Name (str{id}{val=exclude}))))))))))
(root (For (expr{target} (Name (str{id}{val=basedir}))) (expr{iter} (Name (str{id}{val=basedirs}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=locales}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=dirs})))) (expr{value} (ListComp (expr{elt} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=basedir}))) (expr (Name (str{id}{val=l}))) (expr (Str (str{s}{val=_STR:0_})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=l}))) (expr{iter} (Name (str{id}{val=locales})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=dirs})))) (expr{value} (List (expr*{elts} (expr (Name (str{id}{val=basedir}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=locations})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=ldir}))) (expr{iter} (Name (str{id}{val=dirs}))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=dirpath}))) (expr (Name (str{id}{val=dirnames}))) (expr (Name (str{id}{val=filenames})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=walk}))) (expr*{args} (expr (Name (str{id}{val=ldir})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=locations}))) (str{attr}{val=extend}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Tuple (expr*{elts} (expr (Name (str{id}{val=dirpath}))) (expr (Name (str{id}{val=f})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=f}))) (expr{iter} (Name (str{id}{val=filenames}))) (expr*{ifs} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=endswith}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))))))))))
(root (If (expr{test} (Name (str{id}{val=locations}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=compile_messages}))) (expr*{args} (expr (Name (str{id}{val=locations}))))))))
(root (FunctionDef (str{name}{val=compile_messages}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=locations})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=i}))) (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=dirpath}))) (expr (Name (str{id}{val=f}))))))))) (expr{iter} (Call (expr{func} (Name (str{id}{val=enumerate}))) (expr*{args} (expr (Name (str{id}{val=locations})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=f}))) (expr (Name (str{id}{val=dirpath})))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=po_path})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=dirpath}))) (expr (Name (str{id}{val=f}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=has_bom}))) (expr*{args} (expr (Name (str{id}{val=po_path})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=The %s file has a BOM (Byte Order Mark). Django only supports .po files encoded in UTF-8 and without any BOM.}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=po_path}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=base_path})))) (expr{value} (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=splitext}))) (expr*{args} (expr (Name (str{id}{val=po_path})))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=i}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=is_writable}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=npath}))) (expr*{args} (expr (BinOp (expr{left} (Name (str{id}{val=base_path}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=.mo})))))))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stderr}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=The po files under %s are in a seemingly not writable location. mo files will not be updated/created.}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=dirpath}))))))))))
(root (Return (epsilon)))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=args})))) (expr{value} (BinOp (expr{left} (BinOp (expr{left} (List (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=program})))))) (operator{op} (Add)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=program_options}))))) (operator{op} (Add)) (expr{right} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Call (expr{func} (Name (str{id}{val=npath}))) (expr*{args} (expr (BinOp (expr{left} (Name (str{id}{val=base_path}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=.mo})))))))) (expr (Call (expr{func} (Name (str{id}{val=npath}))) (expr*{args} (expr (BinOp (expr{left} (Name (str{id}{val=base_path}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=.po})))))))))))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=output}))) (expr (Name (str{id}{val=errors}))) (expr (Name (str{id}{val=status}))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=popen_wrapper}))) (expr*{args} (expr (Name (str{id}{val=args}))))))))
(root (If (expr{test} (Name (str{id}{val=status}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=errors}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=msg})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=program}))) (expr (Name (str{id}{val=errors}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=msg})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=program})))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (Name (str{id}{val=msg}))))))))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.cache}) (alias*{names} (alias (str{name}{val=caches}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.cache.backends.db}) (alias*{names} (alias (str{name}{val=BaseDatabaseCache}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management.base}) (alias*{names} (alias (str{name}{val=BaseCommand})) (alias (str{name}{val=CommandError}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.db}) (alias*{names} (alias (str{name}{val=connections})) (alias (str{name}{val=router})) (alias (str{name}{val=transaction})) (alias (str{name}{val=models})) (alias (str{name}{val=DEFAULT_DB_ALIAS}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.db.utils}) (alias*{names} (alias (str{name}{val=DatabaseError}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=force_text}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=Command}) (expr*{bases} (expr (Name (str{id}{val=BaseCommand})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=help})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=requires_system_checks})))) (expr{value} (Name (str{id}{val=False})))))
(root (FunctionDef (str{name}{val=add_arguments}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=parser})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=metavar}) (expr{value} (Str (str{s}{val=_STR:1_})))) (keyword (str{arg}{val=nargs}) (expr{value} (Str (str{s}{val=_STR:2_})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Optional table names. Otherwise, settings.CACHES is used to find cache tables.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:2_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=_STR:3_})))) (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=DEFAULT_DB_ALIAS})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Nominates a database onto which the cache tables will be installed. Defaults to the "default" database.})))))))))
(root (FunctionDef (str{name}{val=handle}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=tablenames}) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=db})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity})))) (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=tablenames})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=tablename}))) (expr{iter} (Name (str{id}{val=tablenames}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=create_table}))) (expr*{args} (expr (Name (str{id}{val=db}))) (expr (Name (str{id}{val=tablename}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=cache_alias}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=CACHES}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cache})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=caches}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=cache_alias})))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=cache}))) (expr (Name (str{id}{val=BaseDatabaseCache})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=create_table}))) (expr*{args} (expr (Name (str{id}{val=db}))) (expr (Attribute (expr{value} (Name (str{id}{val=cache}))) (str{attr}{val=_table}))))))))
(root (FunctionDef (str{name}{val=create_table}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=database}))) (expr (Name (str{id}{val=tablename})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cache})))) (expr{value} (Call (expr{func} (Name (str{id}{val=BaseDatabaseCache}))) (expr*{args} (expr (Name (str{id}{val=tablename}))) (expr (Dict (epsilon))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=router}))) (str{attr}{val=allow_migrate}))) (expr*{args} (expr (Name (str{id}{val=database}))) (expr (Attribute (expr{value} (Name (str{id}{val=cache}))) (str{attr}{val=cache_model_class})))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (epsilon)))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=connection})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=connections}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=database})))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=tablename}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=introspection}))) (str{attr}{val=table_names})))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=tablename}))))))))))
(root (Return (epsilon)))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=fields})))) (expr{value} (Tuple (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=models}))) (str{attr}{val=CharField}))) (keyword*{keywords} (keyword (str{arg}{val=name}) (expr{value} (Str (str{s}{val=cache_key})))) (keyword (str{arg}{val=max_length}) (expr{value} (Num (int{n}{val=255})))) (keyword (str{arg}{val=unique}) (expr{value} (Name (str{id}{val=True})))) (keyword (str{arg}{val=primary_key}) (expr{value} (Name (str{id}{val=True}))))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=models}))) (str{attr}{val=TextField}))) (keyword*{keywords} (keyword (str{arg}{val=name}) (expr{value} (Str (str{s}{val=value}))))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=models}))) (str{attr}{val=DateTimeField}))) (keyword*{keywords} (keyword (str{arg}{val=name}) (expr{value} (Str (str{s}{val=expires})))) (keyword (str{arg}{val=db_index}) (expr{value} (Name (str{id}{val=True}))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=table_output})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=index_output})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=qn})))) (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=ops}))) (str{attr}{val=quote_name})))))
(root (For (expr{target} (Name (str{id}{val=f}))) (expr{iter} (Name (str{id}{val=fields}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=field_output})))) (expr{value} (List (expr*{elts} (expr (Call (expr{func} (Name (str{id}{val=qn}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=name})))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=db_type}))) (keyword*{keywords} (keyword (str{arg}{val=connection}) (expr{value} (Name (str{id}{val=connection}))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=field_output}))) (str{attr}{val=append}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=%sNULL}))) (operator{op} (Mod)) (expr{right} (IfExp (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=null}))))) (expr{body} (Str (str{s}{val=NOT }))) (expr{orelse} (Str (str{s}{val=}))))))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=primary_key}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=field_output}))) (str{attr}{val=append}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=unique}))) (stmt*{body} (stmt (Pass))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=field_output}))) (str{attr}{val=append}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=db_index}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=unique})))) (expr{value} (IfExp (expr{test} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=unique}))) (expr{body} (Str (str{s}{val=_STR:0_}))) (expr{orelse} (Str (str{s}{val=})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=index_output}))) (str{attr}{val=append}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=unique}))) (expr (Call (expr{func} (Name (str{id}{val=qn}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=%s_%s}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=tablename}))) (expr (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=name}))))))))))) (expr (Call (expr{func} (Name (str{id}{val=qn}))) (expr*{args} (expr (Name (str{id}{val=tablename})))))) (expr (Call (expr{func} (Name (str{id}{val=qn}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=name}))))))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=table_output}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val= }))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=field_output})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=full_statement})))) (expr{value} (List (expr*{elts} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Name (str{id}{val=qn}))) (expr*{args} (expr (Name (str{id}{val=tablename})))))))))))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=i}))) (expr (Name (str{id}{val=line})))))) (expr{iter} (Call (expr{func} (Name (str{id}{val=enumerate}))) (expr*{args} (expr (Name (str{id}{val=table_output})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=full_statement}))) (str{attr}{val=append}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=line}))) (expr (IfExp (expr{test} (Compare (expr{left} (Name (str{id}{val=i}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=table_output})))))) (operator{op} (Sub)) (expr{right} (Num (int{n}{val=1})))))))) (expr{body} (Str (str{s}{val=_STR:1_}))) (expr{orelse} (Str (str{s}{val=})))))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=full_statement}))) (str{attr}{val=append}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (With (expr{context_expr} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=transaction}))) (str{attr}{val=atomic}))) (keyword*{keywords} (keyword (str{arg}{val=using}) (expr{value} (Name (str{id}{val=database})))) (keyword (str{arg}{val=savepoint}) (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=features}))) (str{attr}{val=can_rollback_ddl}))))))) (stmt*{body} (stmt (Pass)))))
(root (With (expr{context_expr} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=cursor}))))) (expr{optional_vars} (Name (str{id}{val=curs}))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=curs}))) (str{attr}{val=execute}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=\n}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=full_statement})))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=DatabaseError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=tablename}))) (expr (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=e}))))))))))))))))
(root (For (expr{target} (Name (str{id}{val=statement}))) (expr{iter} (Name (str{id}{val=index_output}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=curs}))) (str{attr}{val=execute}))) (expr*{args} (expr (Name (str{id}{val=statement}))))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=tablename}))))))))))
(root (ImportFrom (str{module}{val=django.core.management.base}) (alias*{names} (alias (str{name}{val=BaseCommand})) (alias (str{name}{val=CommandError}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.db}) (alias*{names} (alias (str{name}{val=connections})) (alias (str{name}{val=DEFAULT_DB_ALIAS}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=Command}) (expr*{bases} (expr (Name (str{id}{val=BaseCommand})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=help})))) (expr{value} (Str (str{s}{val=Runs the command-line client for specified database, or the default database if none is provided.})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=requires_system_checks})))) (expr{value} (Name (str{id}{val=False})))))
(root (FunctionDef (str{name}{val=add_arguments}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=parser})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:1_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=_STR:2_})))) (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=DEFAULT_DB_ALIAS})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Nominates a database onto which to open a shell. Defaults to the "default" database.})))))))))
(root (FunctionDef (str{name}{val=handle}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=connection})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=connections}))) (slice{slice} (Index (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=client}))) (str{attr}{val=runshell})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=OSError}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=client}))) (str{attr}{val=executable_name}))))))))))
(root (ImportFrom (str{module}{val=django.core.management.base}) (alias*{names} (alias (str{name}{val=BaseCommand}))) (int{level}{val=0})))
(root (FunctionDef (str{name}{val=module_to_dict}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=module}))) (expr (Name (str{id}{val=omittable})))) (expr*{defaults} (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=k})))))) (expr{body} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=k}))) (str{attr}{val=startswith}))) (expr*{args} (expr (Str (str{s}{val=_}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=dict}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Call (expr{func} (Name (str{id}{val=repr}))) (expr*{args} (expr (Name (str{id}{val=v}))))))))) (comprehension*{generators} (comprehension (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Name (str{id}{val=v})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=module}))) (str{attr}{val=__dict__}))) (str{attr}{val=items}))))) (expr*{ifs} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=omittable}))) (expr*{args} (expr (Name (str{id}{val=k}))))))))))))))))))
(root (ClassDef (str{name}{val=Command}) (expr*{bases} (expr (Name (str{id}{val=BaseCommand})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=requires_system_checks})))) (expr{value} (Name (str{id}{val=False})))))
(root (FunctionDef (str{name}{val=add_arguments}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=parser})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:1_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=_STR:2_})))) (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=False})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Display all settings, regardless of their value. Default values are prefixed by "###".})))))))))
(root (FunctionDef (str{name}{val=handle}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings})) (alias (str{name}{val=global_settings}))) (int{level}{val=0})))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=_setup})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=user_settings})))) (expr{value} (Call (expr{func} (Name (str{id}{val=module_to_dict}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=_wrapped}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=default_settings})))) (expr{value} (Call (expr{func} (Name (str{id}{val=module_to_dict}))) (expr*{args} (expr (Name (str{id}{val=global_settings}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=output})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=key}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=sorted}))) (expr*{args} (expr (Name (str{id}{val=user_settings})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=key}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=default_settings})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=output}))) (str{attr}{val=append}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=key}))) (expr (Subscript (expr{value} (Name (str{id}{val=user_settings}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key})))))))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=user_settings}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key}))))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Subscript (expr{value} (Name (str{id}{val=default_settings}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key})))))))))) (stmt*{body} (stmt (Pass))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=output}))) (str{attr}{val=append}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=key}))) (expr (Subscript (expr{value} (Name (str{id}{val=user_settings}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key})))))))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (stmt*{body} (stmt (Pass))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=output}))) (str{attr}{val=append}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=key}))) (expr (Subscript (expr{value} (Name (str{id}{val=user_settings}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key})))))))))))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=\n}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=output}))))))))
(root (Import (alias*{names} (alias (str{name}{val=warnings})))))
(root (ImportFrom (str{module}{val=collections}) (alias*{names} (alias (str{name}{val=OrderedDict}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.apps}) (alias*{names} (alias (str{name}{val=apps}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management.base}) (alias*{names} (alias (str{name}{val=BaseCommand})) (alias (str{name}{val=CommandError}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core}) (alias*{names} (alias (str{name}{val=serializers}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.db}) (alias*{names} (alias (str{name}{val=router})) (alias (str{name}{val=DEFAULT_DB_ALIAS}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.deprecation}) (alias*{names} (alias (str{name}{val=RemovedInDjango19Warning}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=Command}) (expr*{bases} (expr (Name (str{id}{val=BaseCommand})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=help})))) (expr{value} (Str (str{s}{val=_STR:0_format (using each model's default manager unless --all is specified).})))))
(root (FunctionDef (str{name}{val=add_arguments}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=parser})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=metavar}) (expr{value} (Str (str{s}{val=_STR:1_})))) (keyword (str{arg}{val=nargs}) (expr{value} (Str (str{s}{val=*})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Restricts dumped data to the specified app_label or app_label.ModelName.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:2_})))) (keyword*{keywords} (keyword (str{arg}{val=default}) (expr{value} (Str (str{s}{val=_STR:3_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=format})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Specifies the output serialization format for fixtures.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:2_})))) (keyword*{keywords} (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=None})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=_STR:3_})))) (keyword (str{arg}{val=type}) (expr{value} (Name (str{id}{val=int})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Specifies the indent level to use when pretty-printing output.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:2_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=_STR:3_})))) (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=DEFAULT_DB_ALIAS})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Nominates a specific database to dump fixtures from. Defaults to the "default" database.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_})))) (keyword*{keywords} (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=_STR:3_})))) (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:4_})))) (keyword (str{arg}{val=default}) (expr{value} (List (epsilon)))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=An app_label or app_label.ModelName to exclude (use multiple --exclude to exclude multiple apps/models).})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:3_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=_STR:4_})))) (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=False})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Use natural keys if they are available (deprecated: use --natural-foreign instead).})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:2_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=use_natural_foreign_keys})))) (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=False})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Use natural foreign keys if they are available.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:2_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:3_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=use_natural_primary_keys})))) (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=False})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Use natural primary keys if they are available.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=_STR:3_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:4_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=use_base_manager})))) (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=False})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Use Django's base manager to dump all models stored in the database, including those that would otherwise be filtered or modified by a custom manager.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:2_})))) (keyword*{keywords} (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=_STR:3_})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Only dump objects with given primary keys. Accepts a comma separated list of keys. This option will only work when you specify one model.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=_STR:3_})))) (keyword*{keywords} (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=None})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=_STR:4_})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Specifies file to which the output is written.})))))))))
(root (FunctionDef (str{name}{val=handle}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=app_labels}) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=format})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=indent})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=using})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=excludes})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=output})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=show_traceback})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=use_natural_keys})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Name (str{id}{val=use_natural_keys}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=warnings}))) (str{attr}{val=warn}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=RemovedInDjango19Warning}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=use_natural_foreign_keys})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=use_natural_foreign_keys})))))) (expr (Name (str{id}{val=use_natural_keys}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=use_natural_primary_keys})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=use_base_manager})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=pks})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Name (str{id}{val=pks}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=primary_keys})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=pks}))) (str{attr}{val=split}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=primary_keys})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=excluded_apps})))) (expr{value} (Call (expr{func} (Name (str{id}{val=set})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=excluded_models})))) (expr{value} (Call (expr{func} (Name (str{id}{val=set})))))))
(root (For (expr{target} (Name (str{id}{val=exclude}))) (expr{iter} (Name (str{id}{val=excludes}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=exclude})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=model})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=apps}))) (str{attr}{val=get_model}))) (expr*{args} (expr (Name (str{id}{val=exclude}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=LookupError}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=exclude}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=excluded_models}))) (str{attr}{val=add}))) (expr*{args} (expr (Name (str{id}{val=model}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=app_config})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=apps}))) (str{attr}{val=get_app_config}))) (expr*{args} (expr (Name (str{id}{val=exclude}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=LookupError}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=exclude}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=excluded_apps}))) (str{attr}{val=add}))) (expr*{args} (expr (Name (str{id}{val=app_config}))))))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=app_labels})))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=primary_keys}))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=app_list})))) (expr{value} (Call (expr{func} (Name (str{id}{val=OrderedDict}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Tuple (expr*{elts} (expr (Name (str{id}{val=app_config}))) (expr (Name (str{id}{val=None})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=app_config}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=apps}))) (str{attr}{val=get_app_configs}))))) (expr*{ifs} (expr (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=app_config}))) (str{attr}{val=models_module}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Compare (expr{left} (Name (str{id}{val=app_config}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=excluded_apps})))))))))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=app_labels})))))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (expr (Name (str{id}{val=primary_keys})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=app_list})))) (expr{value} (Call (expr{func} (Name (str{id}{val=OrderedDict})))))))
(root (For (expr{target} (Name (str{id}{val=label}))) (expr{iter} (Name (str{id}{val=app_labels}))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=app_label}))) (expr (Name (str{id}{val=model_label}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=label}))) (str{attr}{val=split}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=app_config})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=apps}))) (str{attr}{val=get_app_config}))) (expr*{args} (expr (Name (str{id}{val=app_label}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=LookupError}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=Unknown application: %s}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=app_label}))))))))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=app_config}))) (str{attr}{val=models_module}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Compare (expr{left} (Name (str{id}{val=app_config}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=excluded_apps}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=model})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=app_config}))) (str{attr}{val=get_model}))) (expr*{args} (expr (Name (str{id}{val=model_label}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=LookupError}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=Unknown model: %s.%s}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=app_label}))) (expr (Name (str{id}{val=model_label})))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=app_list_value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=app_list}))) (str{attr}{val=setdefault}))) (expr*{args} (expr (Name (str{id}{val=app_config}))) (expr (List (epsilon))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=app_list_value}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=model}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=app_list_value})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=app_list_value}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=model}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ValueError}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Name (str{id}{val=primary_keys}))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=app_label})))) (expr{value} (Name (str{id}{val=label})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=app_config})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=apps}))) (str{attr}{val=get_app_config}))) (expr*{args} (expr (Name (str{id}{val=app_label}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=LookupError}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=Unknown application: %s}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=app_label}))))))))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=app_config}))) (str{attr}{val=models_module}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Compare (expr{left} (Name (str{id}{val=app_config}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=excluded_apps}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=app_list}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=app_config})))))))) (expr{value} (Name (str{id}{val=None})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=format}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=serializers}))) (str{attr}{val=get_public_serializer_formats})))))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=serializers}))) (str{attr}{val=get_serializer}))) (expr*{args} (expr (Name (str{id}{val=format}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Attribute (expr{value} (Name (str{id}{val=serializers}))) (str{attr}{val=SerializerDoesNotExist}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=Unknown serialization format: %s}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=format}))))))))))
(root (FunctionDef (str{name}{val=get_objects}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=model}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=sort_dependencies}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=app_list}))) (str{attr}{val=items})))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=model}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=excluded_models})))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=model}))) (str{attr}{val=_meta}))) (str{attr}{val=proxy}))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=router}))) (str{attr}{val=allow_migrate}))) (expr*{args} (expr (Name (str{id}{val=using}))) (expr (Name (str{id}{val=model}))))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=use_base_manager}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=objects})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=model}))) (str{attr}{val=_base_manager})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=objects})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=model}))) (str{attr}{val=_default_manager})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=queryset})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=objects}))) (str{attr}{val=using}))) (expr*{args} (expr (Name (str{id}{val=using})))))) (str{attr}{val=order_by}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=model}))) (str{attr}{val=_meta}))) (str{attr}{val=pk}))) (str{attr}{val=name}))))))))
(root (If (expr{test} (Name (str{id}{val=primary_keys}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=queryset})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=queryset}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=pk__in}) (expr{value} (Name (str{id}{val=primary_keys})))))))))
(root (For (expr{target} (Name (str{id}{val=obj}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=queryset}))) (str{attr}{val=iterator}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Yield (expr{value} (Name (str{id}{val=obj})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=ending})))) (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=stream})))) (expr{value} (IfExp (expr{test} (Name (str{id}{val=output}))) (expr{body} (Call (expr{func} (Name (str{id}{val=open}))) (expr*{args} (expr (Name (str{id}{val=output}))) (expr (Str (str{s}{val=w})))))) (expr{orelse} (Name (str{id}{val=None})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=serializers}))) (str{attr}{val=serialize}))) (expr*{args} (expr (Name (str{id}{val=format}))) (expr (Call (expr{func} (Name (str{id}{val=get_objects})))))) (keyword*{keywords} (keyword (str{arg}{val=indent}) (expr{value} (Name (str{id}{val=indent})))) (keyword (str{arg}{val=use_natural_foreign_keys}) (expr{value} (Name (str{id}{val=use_natural_foreign_keys})))) (keyword (str{arg}{val=use_natural_primary_keys}) (expr{value} (Name (str{id}{val=use_natural_primary_keys})))) (keyword (str{arg}{val=stream}) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=stream}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))))))))))))
(root (TryFinally (stmt*{body} (stmt (Pass))) (stmt*{finalbody} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=stream}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=stream}))) (str{attr}{val=close})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=Exception}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Name (str{id}{val=show_traceback}))) (stmt*{body} (stmt (Pass)))))
(root (Raise (epsilon)))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=e}))))))))))
(root (FunctionDef (str{name}{val=sort_dependencies}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=app_list})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=model_dependencies})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=models})))) (expr{value} (Call (expr{func} (Name (str{id}{val=set})))))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=app_config}))) (expr (Name (str{id}{val=model_list})))))) (expr{iter} (Name (str{id}{val=app_list}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=model_list}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=model_list})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=app_config}))) (str{attr}{val=get_models})))))))
(root (For (expr{target} (Name (str{id}{val=model}))) (expr{iter} (Name (str{id}{val=model_list}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=models}))) (str{attr}{val=add}))) (expr*{args} (expr (Name (str{id}{val=model}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=model}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=deps})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=model}))) (str{attr}{val=natural_key}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (List (epsilon))))))))
(root (If (expr{test} (Name (str{id}{val=deps}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=deps})))) (expr{value} (ListComp (expr{elt} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=apps}))) (str{attr}{val=get_model}))) (expr*{args} (expr (Name (str{id}{val=dep})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=dep}))) (expr{iter} (Name (str{id}{val=deps})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=deps})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=field}))) (expr{iter} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=model}))) (str{attr}{val=_meta}))) (str{attr}{val=fields}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=rel_model})))) (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (str{attr}{val=to})))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=rel_model}))) (expr (Str (str{s}{val=_STR:0_})))))) (expr (Compare (expr{left} (Name (str{id}{val=rel_model}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Name (str{id}{val=model}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=deps}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=rel_model}))))))))
(root (For (expr{target} (Name (str{id}{val=field}))) (expr{iter} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=model}))) (str{attr}{val=_meta}))) (str{attr}{val=many_to_many}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (str{attr}{val=through}))) (str{attr}{val=_meta}))) (str{attr}{val=auto_created}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=rel_model})))) (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (str{attr}{val=to})))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=rel_model}))) (expr (Str (str{s}{val=_STR:0_})))))) (expr (Compare (expr{left} (Name (str{id}{val=rel_model}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Name (str{id}{val=model}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=deps}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=rel_model}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=model_dependencies}))) (str{attr}{val=append}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=model}))) (expr (Name (str{id}{val=deps})))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=model_dependencies}))) (str{attr}{val=reverse})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=model_list})))) (expr{value} (List (epsilon)))))
(root (While (expr{test} (Name (str{id}{val=model_dependencies}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=skipped})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=changed})))) (expr{value} (Name (str{id}{val=False})))))
(root (While (expr{test} (Name (str{id}{val=model_dependencies}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=model}))) (expr (Name (str{id}{val=deps}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=model_dependencies}))) (str{attr}{val=pop})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=found})))) (expr{value} (Name (str{id}{val=True})))))
(root (For (expr{target} (Name (str{id}{val=candidate}))) (expr{iter} (GeneratorExp (expr{elt} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=d}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=models})))))) (expr (Compare (expr{left} (Name (str{id}{val=d}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=model_list}))))))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=d}))) (expr{iter} (Name (str{id}{val=deps}))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=candidate}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=found})))) (expr{value} (Name (str{id}{val=False})))))
(root (If (expr{test} (Name (str{id}{val=found}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=model_list}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=model}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=changed})))) (expr{value} (Name (str{id}{val=True})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=skipped}))) (str{attr}{val=append}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=model}))) (expr (Name (str{id}{val=deps})))))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=changed}))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=, }))) (str{attr}{val=join}))) (expr*{args} (expr (GeneratorExp (expr{elt} (BinOp (expr{left} (Str (str{s}{val=%s.%s}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=model}))) (str{attr}{val=_meta}))) (str{attr}{val=app_label}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=model}))) (str{attr}{val=_meta}))) (str{attr}{val=object_name})))))))) (comprehension*{generators} (comprehension (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=model}))) (expr (Name (str{id}{val=deps})))))) (expr{iter} (Call (expr{func} (Name (str{id}{val=sorted}))) (expr*{args} (expr (Name (str{id}{val=skipped})))) (keyword*{keywords} (keyword (str{arg}{val=key}) (expr{value} (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=obj})))))) (expr{body} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=obj}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (str{attr}{val=__name__})))))))))))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=model_dependencies})))) (expr{value} (Name (str{id}{val=skipped})))))
(root (Return (expr{value} (Name (str{id}{val=model_list})))))
(root (Import (alias*{names} (alias (str{name}{val=sys})))))
(root (ImportFrom (str{module}{val=importlib}) (alias*{names} (alias (str{name}{val=import_module}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.apps}) (alias*{names} (alias (str{name}{val=apps}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.db}) (alias*{names} (alias (str{name}{val=connections})) (alias (str{name}{val=router})) (alias (str{name}{val=transaction})) (alias (str{name}{val=DEFAULT_DB_ALIAS}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management}) (alias*{names} (alias (str{name}{val=call_command}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management.base}) (alias*{names} (alias (str{name}{val=BaseCommand})) (alias (str{name}{val=CommandError}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management.color}) (alias*{names} (alias (str{name}{val=no_style}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management.sql}) (alias*{names} (alias (str{name}{val=sql_flush})) (alias (str{name}{val=emit_post_migrate_signal}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.six.moves}) (alias*{names} (alias (str{name}{val=input}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=Command}) (expr*{bases} (expr (Name (str{id}{val=BaseCommand})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=help})))) (expr{value} (Str (str{s}{val=_STR:0_migrations. Unmigrated apps will also have their initial_data fixture reloaded. Does not achieve a "fresh install" state.})))))
(root (FunctionDef (str{name}{val=add_arguments}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=parser})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:1_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=interactive})))) (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=True})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Tells Django to NOT prompt the user for input of any kind.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:2_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:3_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=_STR:4_})))) (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=DEFAULT_DB_ALIAS})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Nominates a database to flush. Defaults to the "default" database.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:2_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=load_initial_data})))) (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=True})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Tells Django not to load any initial data after database synchronization.})))))))))
(root (FunctionDef (str{name}{val=handle}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=database})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=connection})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=connections}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=database})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=verbosity})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=interactive})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=reset_sequences})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=True}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=allow_cascade})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=False}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=inhibit_post_migrate})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=False}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style})))) (expr{value} (Call (expr{func} (Name (str{id}{val=no_style})))))))
(root (For (expr{target} (Name (str{id}{val=app_config}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=apps}))) (str{attr}{val=get_app_configs}))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=import_module}))) (expr*{args} (expr (Str (str{s}{val=.management}))) (expr (Attribute (expr{value} (Name (str{id}{val=app_config}))) (str{attr}{val=name}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ImportError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=sql_list})))) (expr{value} (Call (expr{func} (Name (str{id}{val=sql_flush}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style}))) (expr (Name (str{id}{val=connection})))) (keyword*{keywords} (keyword (str{arg}{val=only_django}) (expr{value} (Name (str{id}{val=True})))) (keyword (str{arg}{val=reset_sequences}) (expr{value} (Name (str{id}{val=reset_sequences})))) (keyword (str{arg}{val=allow_cascade}) (expr{value} (Name (str{id}{val=allow_cascade})))))))))
(root (If (expr{test} (Name (str{id}{val=interactive}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=confirm})))) (expr{value} (Call (expr{func} (Name (str{id}{val=input}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=You have requested a flush of the database. This will IRREVERSIBLY DESTROY all data currently in the %r database, and return each table to an empty state. Are you sure you want to do this?     Type 'yes' to continue, or 'no' to cancel: }))) (operator{op} (Mod)) (expr{right} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=settings_dict}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=NAME}))))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=confirm})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=confirm}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (With (expr{context_expr} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=transaction}))) (str{attr}{val=atomic}))) (keyword*{keywords} (keyword (str{arg}{val=using}) (expr{value} (Name (str{id}{val=database})))) (keyword (str{arg}{val=savepoint}) (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=features}))) (str{attr}{val=can_rollback_ddl}))))))) (stmt*{body} (stmt (Pass)))))
(root (With (expr{context_expr} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=cursor}))))) (expr{optional_vars} (Name (str{id}{val=cursor}))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=sql}))) (expr{iter} (Name (str{id}{val=sql_list}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=cursor}))) (str{attr}{val=execute}))) (expr*{args} (expr (Name (str{id}{val=sql}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=Exception}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=new_msg})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_  * The database isn't running or isn't configured correctly.\n  * At least one of the expected database tables doesn't exist.\n  * The SQL was invalid.\nHint: Look at the output of 'django-admin.py sqlflush'. That's the SQL this command wasn't able to run.\nThe full error: %s}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=settings_dict}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=NAME}))))))) (expr (Name (str{id}{val=e}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=reraise}))) (expr*{args} (expr (Name (str{id}{val=CommandError}))) (expr (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (Name (str{id}{val=new_msg})))))) (expr (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=exc_info}))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=2}))))))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=inhibit_post_migrate}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=emit_post_migrate}))) (expr*{args} (expr (Name (str{id}{val=verbosity}))) (expr (Name (str{id}{val=interactive}))) (expr (Name (str{id}{val=database}))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=call_command}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_})))) (expr{kwargs} (Name (str{id}{val=options})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=staticmethod}))))))
(root (FunctionDef (str{name}{val=emit_post_migrate}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=verbosity}))) (expr (Name (str{id}{val=interactive}))) (expr (Name (str{id}{val=database})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=all_models})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=app_config}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=apps}))) (str{attr}{val=get_app_configs}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=all_models}))) (str{attr}{val=extend}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=router}))) (str{attr}{val=get_migratable_models}))) (expr*{args} (expr (Name (str{id}{val=app_config}))) (expr (Name (str{id}{val=database})))) (keyword*{keywords} (keyword (str{arg}{val=include_auto_created}) (expr{value} (Name (str{id}{val=True}))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=emit_post_migrate_signal}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=set}))) (expr*{args} (expr (Name (str{id}{val=all_models})))))) (expr (Name (str{id}{val=verbosity}))) (expr (Name (str{id}{val=interactive}))) (expr (Name (str{id}{val=database}))))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=collections}) (alias*{names} (alias (str{name}{val=OrderedDict}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=keyword})))))
(root (Import (alias*{names} (alias (str{name}{val=re})))))
(root (ImportFrom (str{module}{val=django.core.management.base}) (alias*{names} (alias (str{name}{val=BaseCommand})) (alias (str{name}{val=CommandError}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.db}) (alias*{names} (alias (str{name}{val=connections})) (alias (str{name}{val=DEFAULT_DB_ALIAS}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=Command}) (expr*{bases} (expr (Name (str{id}{val=BaseCommand})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=help})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=requires_system_checks})))) (expr{value} (Name (str{id}{val=False})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=db_module})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (FunctionDef (str{name}{val=add_arguments}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=parser})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:1_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=_STR:2_})))) (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=DEFAULT_DB_ALIAS})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Nominates a database to introspect. Defaults to using the "default" database.})))))))))
(root (FunctionDef (str{name}{val=handle}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (For (expr{target} (Name (str{id}{val=line}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=handle_inspection}))) (expr*{args} (expr (Name (str{id}{val=options})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=%s\n}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=line}))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=NotImplementedError}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=handle_inspection}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=options})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=connection})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=connections}))) (slice{slice} (Index (expr{value} (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=table_name_filter})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=table2model})))) (expr{value} (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=table_name})))))) (expr{body} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=sub}))) (expr*{args} (expr (Str (str{s}{val=[^a-zA-Z0-9]}))) (expr (Str (str{s}{val=}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=table_name}))) (str{attr}{val=title}))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=strip_prefix})))) (expr{value} (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=s})))))) (expr{body} (IfExp (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=s}))) (str{attr}{val=startswith}))) (expr*{args} (expr (Str (str{s}{val=u'})))))) (expr{body} (Subscript (expr{value} (Name (str{id}{val=s}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=1}))))))) (expr{orelse} (Name (str{id}{val=s})))))))))
(root (With (expr{context_expr} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=cursor}))))) (expr{optional_vars} (Name (str{id}{val=cursor}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Yield (expr{value} (Str (str{s}{val=_STR:0_})))))))
(root (Expr (expr{value} (Yield (expr{value} (Str (str{s}{val=_STR:0_})))))))
(root (Expr (expr{value} (Yield (expr{value} (Str (str{s}{val=_STR:0_})))))))
(root (Expr (expr{value} (Yield (expr{value} (Str (str{s}{val=_STR:0_})))))))
(root (Expr (expr{value} (Yield (expr{value} (Str (str{s}{val=_STR:0_})))))))
(root (Expr (expr{value} (Yield (expr{value} (Str (str{s}{val=_STR:0_})))))))
(root (Expr (expr{value} (Yield (expr{value} (Str (str{s}{val=_STR:0_})))))))
(root (Expr (expr{value} (Yield (expr{value} (Str (str{s}{val=_STR:0_})))))))
(root (Expr (expr{value} (Yield (expr{value} (Str (str{s}{val=_STR:0_})))))))
(root (Expr (expr{value} (Yield (expr{value} (Str (str{s}{val=_STR:0_})))))))
(root (Expr (expr{value} (Yield (expr{value} (Str (str{s}{val=})))))))
(root (Expr (expr{value} (Yield (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=db_module})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=known_models})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=table_name}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=introspection}))) (str{attr}{val=table_names}))) (expr*{args} (expr (Name (str{id}{val=cursor})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=table_name_filter}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Call (expr{func} (Name (str{id}{val=callable}))) (expr*{args} (expr (Name (str{id}{val=table_name_filter}))))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=table_name_filter}))) (expr*{args} (expr (Name (str{id}{val=table_name})))))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (Expr (expr{value} (Yield (expr{value} (Str (str{s}{val=})))))))
(root (Expr (expr{value} (Yield (expr{value} (Str (str{s}{val=})))))))
(root (Expr (expr{value} (Yield (expr{value} (BinOp (expr{left} (Str (str{s}{val=class %s(models.Model):}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Name (str{id}{val=table2model}))) (expr*{args} (expr (Name (str{id}{val=table_name}))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=known_models}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=table2model}))) (expr*{args} (expr (Name (str{id}{val=table_name})))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=relations})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=introspection}))) (str{attr}{val=get_relations}))) (expr*{args} (expr (Name (str{id}{val=cursor}))) (expr (Name (str{id}{val=table_name}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=NotImplementedError}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=relations})))) (expr{value} (Dict (epsilon)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=indexes})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=introspection}))) (str{attr}{val=get_indexes}))) (expr*{args} (expr (Name (str{id}{val=cursor}))) (expr (Name (str{id}{val=table_name}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=NotImplementedError}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=indexes})))) (expr{value} (Dict (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=used_column_names})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=i}))) (expr (Name (str{id}{val=row})))))) (expr{iter} (Call (expr{func} (Name (str{id}{val=enumerate}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=introspection}))) (str{attr}{val=get_table_description}))) (expr*{args} (expr (Name (str{id}{val=cursor}))) (expr (Name (str{id}{val=table_name}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=comment_notes})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=extra_params})))) (expr{value} (Call (expr{func} (Name (str{id}{val=OrderedDict})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=column_name})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=row}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=is_relation})))) (expr{value} (Compare (expr{left} (Name (str{id}{val=i}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=relations}))))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=att_name}))) (expr (Name (str{id}{val=params}))) (expr (Name (str{id}{val=notes}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=normalize_col_name}))) (expr*{args} (expr (Name (str{id}{val=column_name}))) (expr (Name (str{id}{val=used_column_names}))) (expr (Name (str{id}{val=is_relation}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=extra_params}))) (str{attr}{val=update}))) (expr*{args} (expr (Name (str{id}{val=params}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=comment_notes}))) (str{attr}{val=extend}))) (expr*{args} (expr (Name (str{id}{val=notes}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=used_column_names}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=att_name}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=column_name}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=indexes})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Subscript (expr{value} (Subscript (expr{value} (Name (str{id}{val=indexes}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=column_name}))))))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=extra_params}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Name (str{id}{val=True})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Subscript (expr{value} (Subscript (expr{value} (Name (str{id}{val=indexes}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=column_name}))))))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=extra_params}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Name (str{id}{val=True})))))
(root (If (expr{test} (Name (str{id}{val=is_relation}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=rel_to})))) (expr{value} (IfExp (expr{test} (Compare (expr{left} (Subscript (expr{value} (Subscript (expr{value} (Name (str{id}{val=relations}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=i}))))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=table_name})))))) (expr{body} (Str (str{s}{val=self}))) (expr{orelse} (Call (expr{func} (Name (str{id}{val=table2model}))) (expr*{args} (expr (Subscript (expr{value} (Subscript (expr{value} (Name (str{id}{val=relations}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=i}))))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=rel_to}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=known_models})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=field_type})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=ForeignKey(%s}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=rel_to})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=field_type})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=ForeignKey('%s'}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=rel_to})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=field_type}))) (expr (Name (str{id}{val=field_params}))) (expr (Name (str{id}{val=field_notes}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get_field_type}))) (expr*{args} (expr (Name (str{id}{val=connection}))) (expr (Name (str{id}{val=table_name}))) (expr (Name (str{id}{val=row}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=extra_params}))) (str{attr}{val=update}))) (expr*{args} (expr (Name (str{id}{val=field_params}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=comment_notes}))) (str{attr}{val=extend}))) (expr*{args} (expr (Name (str{id}{val=field_notes}))))))))
(root (AugAssign (expr{target} (Name (str{id}{val=field_type}))) (operator{op} (Add)) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=att_name}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (expr (Compare (expr{left} (Name (str{id}{val=extra_params}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:1_})))) (expr*{values} (expr (Name (str{id}{val=True})))))))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=field_type}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=field_type}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=features}))) (str{attr}{val=can_introspect_autofield})))))))) (stmt*{body} (stmt (Pass))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=comment_notes}))) (str{attr}{val=append}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Subscript (expr{value} (Name (str{id}{val=row}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=6}))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=field_type}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=field_type})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=extra_params}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Name (str{id}{val=True})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=field_type}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=extra_params}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Name (str{id}{val=True})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=field_desc})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=att_name}))) (expr (IfExp (expr{test} (Compare (expr{left} (Str (str{s}{val=_STR:1_}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=field_type})))))) (expr{body} (Str (str{s}{val=}))) (expr{orelse} (Str (str{s}{val=models.}))))) (expr (Name (str{id}{val=field_type}))))))))))
(root (If (expr{test} (Name (str{id}{val=extra_params}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=field_desc}))) (str{attr}{val=endswith}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=field_desc}))) (operator{op} (Add)) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (AugAssign (expr{target} (Name (str{id}{val=field_desc}))) (operator{op} (Add)) (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=, }))) (str{attr}{val=join}))) (expr*{args} (expr (ListComp (expr{elt} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Call (expr{func} (Name (str{id}{val=strip_prefix}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=repr}))) (expr*{args} (expr (Name (str{id}{val=v})))))))))))))) (comprehension*{generators} (comprehension (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Name (str{id}{val=v})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=extra_params}))) (str{attr}{val=items}))))))))))))))
(root (AugAssign (expr{target} (Name (str{id}{val=field_desc}))) (operator{op} (Add)) (expr{value} (Str (str{s}{val=_STR:1_})))))
(root (If (expr{test} (Name (str{id}{val=comment_notes}))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=field_desc}))) (operator{op} (Add)) (expr{value} (BinOp (expr{left} (Str (str{s}{val=  # }))) (operator{op} (Add)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val= }))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=comment_notes}))))))))))
(root (Expr (expr{value} (Yield (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=field_desc})))))))))
(root (For (expr{target} (Name (str{id}{val=meta_line}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get_meta}))) (expr*{args} (expr (Name (str{id}{val=table_name})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Yield (expr{value} (Name (str{id}{val=meta_line})))))))
(root (FunctionDef (str{name}{val=normalize_col_name}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=col_name}))) (expr (Name (str{id}{val=used_column_names}))) (expr (Name (str{id}{val=is_relation})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=field_params})))) (expr{value} (Dict (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=field_notes})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=new_name})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=col_name}))) (str{attr}{val=lower})))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=new_name}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Name (str{id}{val=col_name})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=field_notes}))) (str{attr}{val=append}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Name (str{id}{val=is_relation}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=new_name}))) (str{attr}{val=endswith}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=new_name})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=new_name}))) (slice{slice} (Slice (expr{upper} (Num (int{n}{val=-3})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=field_params}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Name (str{id}{val=col_name})))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=new_name}))) (expr (Name (str{id}{val=num_repl}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=subn}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Name (str{id}{val=new_name}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=num_repl}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=field_notes}))) (str{attr}{val=append}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=new_name}))) (str{attr}{val=find}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (While (expr{test} (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=new_name}))) (str{attr}{val=find}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=new_name})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=new_name}))) (str{attr}{val=replace}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))))))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=col_name}))) (str{attr}{val=lower}))))) (str{attr}{val=find}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=field_notes}))) (str{attr}{val=append}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=new_name}))) (str{attr}{val=startswith}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=new_name})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=field%s}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=new_name})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=field_notes}))) (str{attr}{val=append}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=new_name}))) (str{attr}{val=endswith}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=new_name})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=%sfield}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=new_name})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=field_notes}))) (str{attr}{val=append}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=keyword}))) (str{attr}{val=iskeyword}))) (expr*{args} (expr (Name (str{id}{val=new_name})))))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=new_name}))) (operator{op} (Add)) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=field_notes}))) (str{attr}{val=append}))) (expr*{args} (expr (Str (str{s}{val=Field renamed because it was a Python reserved word.}))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=new_name}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (str{attr}{val=isdigit}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=new_name})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=number_%s}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=new_name})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=field_notes}))) (str{attr}{val=append}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=new_name}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=used_column_names})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=num})))) (expr{value} (Num (int{n}{val=0})))))
(root (While (expr{test} (Compare (expr{left} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=new_name}))) (expr (Name (str{id}{val=num})))))))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=used_column_names})))))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=num}))) (operator{op} (Add)) (expr{value} (Num (int{n}{val=1})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=new_name})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=new_name}))) (expr (Name (str{id}{val=num}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=field_notes}))) (str{attr}{val=append}))) (expr*{args} (expr (Str (str{s}{val=Field renamed because of name conflict.}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=col_name}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Name (str{id}{val=new_name})))))) (expr (Name (str{id}{val=field_notes})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=field_params}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Name (str{id}{val=col_name})))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=new_name}))) (expr (Name (str{id}{val=field_params}))) (expr (Name (str{id}{val=field_notes}))))))))
(root (FunctionDef (str{name}{val=get_field_type}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=connection}))) (expr (Name (str{id}{val=table_name}))) (expr (Name (str{id}{val=row})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=field_params})))) (expr{value} (Call (expr{func} (Name (str{id}{val=OrderedDict})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=field_notes})))) (expr{value} (List (epsilon)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=field_type})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=introspection}))) (str{attr}{val=get_field_type}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=row}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))) (expr (Name (str{id}{val=row}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=KeyError}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=field_type})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=field_notes}))) (str{attr}{val=append}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=type}))) (expr*{args} (expr (Name (str{id}{val=field_type})))))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=tuple})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=field_type}))) (expr (Name (str{id}{val=new_params}))))))) (expr{value} (Name (str{id}{val=field_type})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=field_params}))) (str{attr}{val=update}))) (expr*{args} (expr (Name (str{id}{val=new_params}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=field_type}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=CharField})))))) (expr (Subscript (expr{value} (Name (str{id}{val=row}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=3})))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=field_params}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=max_length})))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=row}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=3}))))))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=field_type}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=row}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=4}))))))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=row}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=5}))))))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=field_notes}))) (str{attr}{val=append}))) (expr*{args} (expr (Str (str{s}{val=max_digits and decimal_places have been guessed, as this database handles decimal fields as float}))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=field_params}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (IfExp (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=row}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=4}))))))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr{body} (Subscript (expr{value} (Name (str{id}{val=row}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=4}))))))) (expr{orelse} (Num (int{n}{val=10})))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=field_params}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:1_})))))))) (expr{value} (IfExp (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=row}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=5}))))))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr{body} (Subscript (expr{value} (Name (str{id}{val=row}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=5}))))))) (expr{orelse} (Num (int{n}{val=5})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=field_params}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=row}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=4})))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=field_params}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=row}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=5})))))))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=field_type}))) (expr (Name (str{id}{val=field_params}))) (expr (Name (str{id}{val=field_notes}))))))))
(root (FunctionDef (str{name}{val=get_meta}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=table_name})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (List (expr*{elts} (expr (Str (str{s}{val=}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (BinOp (expr{left} (Str (str{s}{val=        db_table = '%s'}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=table_name}))))))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=glob})))))
(root (Import (alias*{names} (alias (str{name}{val=gzip})))))
(root (Import (alias*{names} (alias (str{name}{val=os})))))
(root (Import (alias*{names} (alias (str{name}{val=warnings})))))
(root (Import (alias*{names} (alias (str{name}{val=zipfile})))))
(root (ImportFrom (str{module}{val=django.apps}) (alias*{names} (alias (str{name}{val=apps}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core}) (alias*{names} (alias (str{name}{val=serializers}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management.base}) (alias*{names} (alias (str{name}{val=BaseCommand})) (alias (str{name}{val=CommandError}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management.color}) (alias*{names} (alias (str{name}{val=no_style}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.db}) (alias*{names} (alias (str{name}{val=connections})) (alias (str{name}{val=router})) (alias (str{name}{val=transaction})) (alias (str{name}{val=DEFAULT_DB_ALIAS})) (alias (str{name}{val=IntegrityError})) (alias (str{name}{val=DatabaseError}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=lru_cache}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=force_text}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.functional}) (alias*{names} (alias (str{name}{val=cached_property}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils._os}) (alias*{names} (alias (str{name}{val=upath}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=itertools}) (alias*{names} (alias (str{name}{val=product}))) (int{level}{val=0})))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Import (alias*{names} (alias (str{name}{val=bz2})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=has_bz2})))) (expr{value} (Name (str{id}{val=True})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ImportError}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=has_bz2})))) (expr{value} (Name (str{id}{val=False})))))
(root (ClassDef (str{name}{val=Command}) (expr*{bases} (expr (Name (str{id}{val=BaseCommand})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=help})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=missing_args_message})))) (expr{value} (Str (str{s}{val=_STR:0_path of at least one fixture in the command line.})))))
(root (FunctionDef (str{name}{val=add_arguments}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=parser})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=metavar}) (expr{value} (Str (str{s}{val=_STR:1_})))) (keyword (str{arg}{val=nargs}) (expr{value} (Str (str{s}{val=_STR:2_})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Fixture labels.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:2_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=_STR:3_})))) (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=DEFAULT_DB_ALIAS})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Nominates a specific database to load fixtures into. Defaults to the "default" database.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:2_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=_STR:3_})))) (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=None})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Only look for fixtures in the specified app.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:3_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=ignore})))) (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=False})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Ignores entries in the serialized data for fields that do not currently exist on the model.})))))))))
(root (FunctionDef (str{name}{val=handle}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=fixture_labels}) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=ignore})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=using})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=app_label})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=hide_empty})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=False}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (With (expr{context_expr} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=transaction}))) (str{attr}{val=atomic}))) (keyword*{keywords} (keyword (str{arg}{val=using}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=using}))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=loaddata}))) (expr*{args} (expr (Name (str{id}{val=fixture_labels}))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=transaction}))) (str{attr}{val=get_autocommit}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=using})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=connections}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=using}))))))) (str{attr}{val=close})))))))
(root (FunctionDef (str{name}{val=loaddata}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=fixture_labels})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=connection})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=connections}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=using})))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fixture_count})))) (expr{value} (Num (int{n}{val=0})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=loaded_object_count})))) (expr{value} (Num (int{n}{val=0})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fixture_object_count})))) (expr{value} (Num (int{n}{val=0})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=models})))) (expr{value} (Call (expr{func} (Name (str{id}{val=set})))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=serialization_formats})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=serializers}))) (str{attr}{val=get_public_serializer_formats})))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=compression_formats})))) (expr{value} (Dict (expr*{keys} (expr (Name (str{id}{val=None}))) (expr (Str (str{s}{val=gz}))) (expr (Str (str{s}{val=zip})))) (expr*{values} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=open}))) (expr (Str (str{s}{val=_STR:0_})))))) (expr (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=gzip}))) (str{attr}{val=GzipFile}))) (expr (Str (str{s}{val=_STR:0_})))))) (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=SingleZipReader}))) (expr (Str (str{s}{val=r})))))))))))
(root (If (expr{test} (Name (str{id}{val=has_bz2}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=compression_formats}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:1_})))))))) (expr{value} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=bz2}))) (str{attr}{val=BZ2File}))) (expr (Str (str{s}{val=_STR:0_}))))))))
(root (With (expr{context_expr} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=constraint_checks_disabled}))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=fixture_label}))) (expr{iter} (Name (str{id}{val=fixture_labels}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=load_label}))) (expr*{args} (expr (Name (str{id}{val=fixture_label}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=table_names})))) (expr{value} (ListComp (expr{elt} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=model}))) (str{attr}{val=_meta}))) (str{attr}{val=db_table}))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=model}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=models})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=check_constraints}))) (keyword*{keywords} (keyword (str{arg}{val=table_names}) (expr{value} (Name (str{id}{val=table_names})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=Exception}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=args})))) (expr{value} (Tuple (expr*{elts} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=e}))))))))))
(root (Raise (epsilon)))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=loaded_object_count}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=sequence_sql})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=ops}))) (str{attr}{val=sequence_reset_sql}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=no_style}))))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=models}))))))))
(root (If (expr{test} (Name (str{id}{val=sequence_sql}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Num (int{n}{val=2})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (With (expr{context_expr} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=cursor}))))) (expr{optional_vars} (Name (str{id}{val=cursor}))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=line}))) (expr{iter} (Name (str{id}{val=sequence_sql}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=cursor}))) (str{attr}{val=execute}))) (expr*{args} (expr (Name (str{id}{val=line}))))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fixture_count}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=hide_empty})))))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fixture_object_count}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=loaded_object_count})))))) (stmt*{body} (stmt (Pass))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=loaded_object_count}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fixture_count})))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=loaded_object_count}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fixture_object_count}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fixture_count})))))))))))))
(root (FunctionDef (str{name}{val=load_label}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=fixture_label})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=fixture_file}))) (expr (Name (str{id}{val=fixture_dir}))) (expr (Name (str{id}{val=fixture_name})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=find_fixtures}))) (expr*{args} (expr (Name (str{id}{val=fixture_label})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=_}))) (expr (Name (str{id}{val=ser_fmt}))) (expr (Name (str{id}{val=cmp_fmt}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=parse_name}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=basename}))) (expr*{args} (expr (Name (str{id}{val=fixture_file})))))))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=open_method}))) (expr (Name (str{id}{val=mode}))))))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=compression_formats}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=cmp_fmt})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=fixture})))) (expr{value} (Call (expr{func} (Name (str{id}{val=open_method}))) (expr*{args} (expr (Name (str{id}{val=fixture_file}))) (expr (Name (str{id}{val=mode}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (AugAssign (expr{target} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fixture_count}))) (operator{op} (Add)) (expr{value} (Num (int{n}{val=1})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=objects_in_fixture})))) (expr{value} (Num (int{n}{val=0})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=loaded_objects_in_fixture})))) (expr{value} (Num (int{n}{val=0})))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Num (int{n}{val=2})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=ser_fmt}))) (expr (Name (str{id}{val=fixture_name}))) (expr (Call (expr{func} (Name (str{id}{val=humanize}))) (expr*{args} (expr (Name (str{id}{val=fixture_dir}))))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=objects})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=serializers}))) (str{attr}{val=deserialize}))) (expr*{args} (expr (Name (str{id}{val=ser_fmt}))) (expr (Name (str{id}{val=fixture})))) (keyword*{keywords} (keyword (str{arg}{val=using}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=using})))) (keyword (str{arg}{val=ignorenonexistent}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=ignore})))))))))
(root (For (expr{target} (Name (str{id}{val=obj}))) (expr{iter} (Name (str{id}{val=objects}))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=objects_in_fixture}))) (operator{op} (Add)) (expr{value} (Num (int{n}{val=1})))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=router}))) (str{attr}{val=allow_migrate}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=using}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=obj}))) (str{attr}{val=object}))) (str{attr}{val=__class__})))))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=loaded_objects_in_fixture}))) (operator{op} (Add)) (expr{value} (Num (int{n}{val=1})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=models}))) (str{attr}{val=add}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=obj}))) (str{attr}{val=object}))) (str{attr}{val=__class__}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=obj}))) (str{attr}{val=save}))) (keyword*{keywords} (keyword (str{arg}{val=using}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=using})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=DatabaseError}))) (expr (Name (str{id}{val=IntegrityError})))))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=args})))) (expr{value} (Tuple (expr*{elts} (expr (BinOp (expr{left} (Str (str{s}{val=Could not load %(app_label)s.%(object_name)s(pk=%(pk)s): %(error_msg)s}))) (operator{op} (Mod)) (expr{right} (Dict (expr*{keys} (expr (Str (str{s}{val=app_label}))) (expr (Str (str{s}{val=object_name}))) (expr (Str (str{s}{val=pk}))) (expr (Str (str{s}{val=error_msg})))) (expr*{values} (expr (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=obj}))) (str{attr}{val=object}))) (str{attr}{val=_meta}))) (str{attr}{val=app_label}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=obj}))) (str{attr}{val=object}))) (str{attr}{val=_meta}))) (str{attr}{val=object_name}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=obj}))) (str{attr}{val=object}))) (str{attr}{val=pk}))) (expr (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=e}))))))))))))))))
(root (Raise (epsilon)))
(root (AugAssign (expr{target} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=loaded_object_count}))) (operator{op} (Add)) (expr{value} (Name (str{id}{val=loaded_objects_in_fixture})))))
(root (AugAssign (expr{target} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fixture_object_count}))) (operator{op} (Add)) (expr{value} (Name (str{id}{val=objects_in_fixture})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=Exception}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=e}))) (expr (Name (str{id}{val=CommandError})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=args})))) (expr{value} (Tuple (expr*{elts} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=fixture_file}))) (expr (Name (str{id}{val=e})))))))))))))
(root (Raise (epsilon)))
(root (TryFinally (stmt*{body} (stmt (Pass))) (stmt*{finalbody} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=fixture}))) (str{attr}{val=close})))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=objects_in_fixture}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=warnings}))) (str{attr}{val=warn}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=No fixture data found for '%s'. (File format may be invalid.)}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=fixture_name}))))) (expr (Name (str{id}{val=RuntimeWarning}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=lru_cache}))) (str{attr}{val=lru_cache}))) (keyword*{keywords} (keyword (str{arg}{val=maxsize}) (expr{value} (Name (str{id}{val=None}))))))))))
(root (FunctionDef (str{name}{val=find_fixtures}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=fixture_label})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=fixture_name}))) (expr (Name (str{id}{val=ser_fmt}))) (expr (Name (str{id}{val=cmp_fmt}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=parse_name}))) (expr*{args} (expr (Name (str{id}{val=fixture_label}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=databases})))) (expr{value} (List (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=using}))) (expr (Name (str{id}{val=None}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cmp_fmts})))) (expr{value} (IfExp (expr{test} (Compare (expr{left} (Name (str{id}{val=cmp_fmt}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr{body} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=compression_formats}))) (str{attr}{val=keys})))))))) (expr{orelse} (List (expr*{elts} (expr (Name (str{id}{val=cmp_fmt}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ser_fmts})))) (expr{value} (IfExp (expr{test} (Compare (expr{left} (Name (str{id}{val=ser_fmt}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr{body} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=serializers}))) (str{attr}{val=get_public_serializer_formats}))))) (expr{orelse} (List (expr*{elts} (expr (Name (str{id}{val=ser_fmt}))))))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Num (int{n}{val=2})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=fixture_name}))))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=isabs}))) (expr*{args} (expr (Name (str{id}{val=fixture_name})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=fixture_dirs})))) (expr{value} (List (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=dirname}))) (expr*{args} (expr (Name (str{id}{val=fixture_name})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=fixture_name})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=basename}))) (expr*{args} (expr (Name (str{id}{val=fixture_name}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=fixture_dirs})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fixture_dirs})))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=sep}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=fixture_name})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=fixture_dirs})))) (expr{value} (ListComp (expr{elt} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=dir_}))) (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=dirname}))) (expr*{args} (expr (Name (str{id}{val=fixture_name}))))))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=dir_}))) (expr{iter} (Name (str{id}{val=fixture_dirs})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=fixture_name})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=basename}))) (expr*{args} (expr (Name (str{id}{val=fixture_name}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=suffixes})))) (expr{value} (GeneratorExp (expr{elt} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=_STR:0_}))) (str{attr}{val=join}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Name (str{id}{val=ext}))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=ext}))) (expr{iter} (Name (str{id}{val=combo}))) (expr*{ifs} (expr (Name (str{id}{val=ext}))))))))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=combo}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=product}))) (expr*{args} (expr (Name (str{id}{val=databases}))) (expr (Name (str{id}{val=ser_fmts}))) (expr (Name (str{id}{val=cmp_fmts}))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=targets})))) (expr{value} (Call (expr{func} (Name (str{id}{val=set}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=_STR:0_}))) (str{attr}{val=join}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=fixture_name}))) (expr (Name (str{id}{val=suffix}))))))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=suffix}))) (expr{iter} (Name (str{id}{val=suffixes}))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=fixture_files})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=fixture_dir}))) (expr{iter} (Name (str{id}{val=fixture_dirs}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Num (int{n}{val=2})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Name (str{id}{val=humanize}))) (expr*{args} (expr (Name (str{id}{val=fixture_dir})))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=fixture_files_in_dir})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=candidate}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=glob}))) (str{attr}{val=iglob}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=fixture_dir}))) (expr (BinOp (expr{left} (Name (str{id}{val=fixture_name}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=_STR:0_}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=basename}))) (expr*{args} (expr (Name (str{id}{val=candidate})))))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=targets})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=fixture_files_in_dir}))) (str{attr}{val=append}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=candidate}))) (expr (Name (str{id}{val=fixture_dir}))) (expr (Name (str{id}{val=fixture_name})))))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Num (int{n}{val=2})))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=fixture_files_in_dir})))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=fixture_name}))) (expr (Call (expr{func} (Name (str{id}{val=humanize}))) (expr*{args} (expr (Name (str{id}{val=fixture_dir}))))))))))))))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=fixture_files_in_dir})))))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=fixture_name}))) (expr (Call (expr{func} (Name (str{id}{val=humanize}))) (expr*{args} (expr (Name (str{id}{val=fixture_dir}))))))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=fixture_files}))) (str{attr}{val=extend}))) (expr*{args} (expr (Name (str{id}{val=fixture_files_in_dir}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=fixture_name}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=fixture_files})))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=warnings}))) (str{attr}{val=warn}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=fixture_name}))))))))))
(root (Return (expr{value} (Name (str{id}{val=fixture_files})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=cached_property}))))))
(root (FunctionDef (str{name}{val=fixture_dirs}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=dirs})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=app_config}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=apps}))) (str{attr}{val=get_app_configs}))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=app_label}))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=app_config}))) (str{attr}{val=label}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=app_label}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=app_dir})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=app_config}))) (str{attr}{val=path}))) (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=isdir}))) (expr*{args} (expr (Name (str{id}{val=app_dir})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=dirs}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=app_dir}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=dirs}))) (str{attr}{val=extend}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=FIXTURE_DIRS})))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=dirs}))) (str{attr}{val=append}))) (expr*{args} (expr (Str (str{s}{val=}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=dirs})))) (expr{value} (ListComp (expr{elt} (Call (expr{func} (Name (str{id}{val=upath}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=abspath}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=realpath}))) (expr*{args} (expr (Name (str{id}{val=d})))))))))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=d}))) (expr{iter} (Name (str{id}{val=dirs})))))))))
(root (Return (expr{value} (Name (str{id}{val=dirs})))))
(root (FunctionDef (str{name}{val=parse_name}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=fixture_name})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=parts})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=fixture_name}))) (str{attr}{val=rsplit}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Num (int{n}{val=2}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=parts})))))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (expr (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=parts}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=-1}))))))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=compression_formats}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cmp_fmt})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=parts}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=-1})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=parts})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=parts}))) (slice{slice} (Slice (expr{upper} (Num (int{n}{val=-1})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cmp_fmt})))) (expr{value} (Name (str{id}{val=None})))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=parts})))))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=parts}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=-1}))))))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=serialization_formats})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ser_fmt})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=parts}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=-1})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=parts})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=parts}))) (slice{slice} (Slice (expr{upper} (Num (int{n}{val=-1})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=Problem installing fixture '%s': %s is not a known serialization format.}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=}))) (str{attr}{val=join}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=parts}))) (slice{slice} (Slice (expr{upper} (Num (int{n}{val=-1})))))))))) (expr (Subscript (expr{value} (Name (str{id}{val=parts}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=-1})))))))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ser_fmt})))) (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=name})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=_STR:0_}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=parts}))))))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=ser_fmt}))) (expr (Name (str{id}{val=cmp_fmt}))))))))
(root (ClassDef (str{name}{val=SingleZipReader}) (expr*{bases} (expr (Attribute (expr{value} (Name (str{id}{val=zipfile}))) (str{attr}{val=ZipFile})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=zipfile}))) (str{attr}{val=ZipFile}))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=self})))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=namelist})))))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=read}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=zipfile}))) (str{attr}{val=ZipFile}))) (str{attr}{val=read}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=namelist}))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))))))))
(root (FunctionDef (str{name}{val=humanize}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=dirname})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (IfExp (expr{test} (Name (str{id}{val=dirname}))) (expr{body} (BinOp (expr{left} (Str (str{s}{val='%s'}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=dirname}))))) (expr{orelse} (Str (str{s}{val=_STR:0_})))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=fnmatch})))))
(root (Import (alias*{names} (alias (str{name}{val=glob})))))
(root (Import (alias*{names} (alias (str{name}{val=io})))))
(root (Import (alias*{names} (alias (str{name}{val=os})))))
(root (Import (alias*{names} (alias (str{name}{val=re})))))
(root (Import (alias*{names} (alias (str{name}{val=sys})))))
(root (ImportFrom (str{module}{val=itertools}) (alias*{names} (alias (str{name}{val=dropwhile}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=django})))))
(root (ImportFrom (str{module}{val=django.core.management.base}) (alias*{names} (alias (str{name}{val=CommandError})) (alias (str{name}{val=BaseCommand}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management.utils}) (alias*{names} (alias (str{name}{val=handle_extensions})) (alias (str{name}{val=find_command})) (alias (str{name}{val=popen_wrapper}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=force_str}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.functional}) (alias*{names} (alias (str{name}{val=total_ordering}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.text}) (alias*{names} (alias (str{name}{val=get_text_list}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.jslex}) (alias*{names} (alias (str{name}{val=prepare_js_for_gettext}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=plural_forms_re})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=MULTILINE}))) (operator{op} (BitOr)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=DOTALL}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=STATUS_OK})))) (expr{value} (Num (int{n}{val=0})))))
(root (FunctionDef (str{name}{val=check_programs}) (arguments{args} (arguments (str{vararg}{val=programs}))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=program}))) (expr{iter} (Name (str{id}{val=programs}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=find_command}))) (expr*{args} (expr (Name (str{id}{val=program})))))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=Can't find %s. Make sure you have GNU gettext tools 0.15 or newer installed.}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=program}))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=total_ordering}))))))
(root (ClassDef (str{name}{val=TranslatableFile}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=dirpath}))) (expr (Name (str{id}{val=file_name}))) (expr (Name (str{id}{val=locale_dir})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file})))) (expr{value} (Name (str{id}{val=file_name})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=dirpath})))) (expr{value} (Name (str{id}{val=dirpath})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=locale_dir})))) (expr{value} (Name (str{id}{val=locale_dir})))))
(root (FunctionDef (str{name}{val=__repr__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=sep}))) (str{attr}{val=join}))) (expr*{args} (expr (List (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=dirpath}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file})))))))))))))
(root (FunctionDef (str{name}{val=__eq__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=other})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=path}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=other}))) (str{attr}{val=path}))))))))
(root (FunctionDef (str{name}{val=__lt__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=other})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=path}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=other}))) (str{attr}{val=path}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=path}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=dirpath}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))))))))
(root (FunctionDef (str{name}{val=process}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=command}))) (expr (Name (str{id}{val=domain})))))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.translation}) (alias*{names} (alias (str{name}{val=templatize}))) (int{level}{val=0})))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=command}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=command}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=dirpath})))))))))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=_}))) (expr (Name (str{id}{val=file_ext}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=splitext}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=domain}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (expr (Compare (expr{left} (Name (str{id}{val=file_ext}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=command}))) (str{attr}{val=extensions}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=is_templatized})))) (expr{value} (Name (str{id}{val=True})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=orig_file})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=dirpath}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))))))))
(root (With (expr{context_expr} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=io}))) (str{attr}{val=open}))) (expr*{args} (expr (Name (str{id}{val=orig_file})))) (keyword*{keywords} (keyword (str{arg}{val=encoding}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=FILE_CHARSET}))))))) (expr{optional_vars} (Name (str{id}{val=fp}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=src_data})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=fp}))) (str{attr}{val=read})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=src_data})))) (expr{value} (Call (expr{func} (Name (str{id}{val=prepare_js_for_gettext}))) (expr*{args} (expr (Name (str{id}{val=src_data}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=thefile})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=%s.c}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=work_file})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=dirpath}))) (expr (Name (str{id}{val=thefile}))))))))
(root (With (expr{context_expr} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=io}))) (str{attr}{val=open}))) (expr*{args} (expr (Name (str{id}{val=work_file}))) (expr (Str (str{s}{val=w})))) (keyword*{keywords} (keyword (str{arg}{val=encoding}) (expr{value} (Str (str{s}{val=_STR:1_}))))))) (expr{optional_vars} (Name (str{id}{val=fp}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=fp}))) (str{attr}{val=write}))) (expr*{args} (expr (Name (str{id}{val=src_data}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=args})))) (expr{value} (BinOp (expr{left} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Name (str{id}{val=domain}))) (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=--keyword=gettext_noop}))) (expr (Str (str{s}{val=--keyword=gettext_lazy}))) (expr (Str (str{s}{val=--keyword=ngettext_lazy:1,2}))) (expr (Str (str{s}{val=--keyword=pgettext:1c,2}))) (expr (Str (str{s}{val=--keyword=npgettext:1c,2,3}))) (expr (Str (str{s}{val=--output=-})))))) (operator{op} (Add)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=command}))) (str{attr}{val=xgettext_options})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=args}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=work_file}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=domain}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=django})))))) (expr (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=file_ext}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=.py})))))) (expr (Compare (expr{left} (Name (str{id}{val=file_ext}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=command}))) (str{attr}{val=extensions})))))))))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=thefile})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=orig_file})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=dirpath}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=is_templatized})))) (expr{value} (Compare (expr{left} (Name (str{id}{val=file_ext}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=command}))) (str{attr}{val=extensions}))))))))
(root (If (expr{test} (Name (str{id}{val=is_templatized}))) (stmt*{body} (stmt (Pass)))))
(root (With (expr{context_expr} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=io}))) (str{attr}{val=open}))) (expr*{args} (expr (Name (str{id}{val=orig_file}))) (expr (Str (str{s}{val=r})))) (keyword*{keywords} (keyword (str{arg}{val=encoding}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=FILE_CHARSET}))))))) (expr{optional_vars} (Name (str{id}{val=fp}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=src_data})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=fp}))) (str{attr}{val=read})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=thefile})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=%s.py}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=content})))) (expr{value} (Call (expr{func} (Name (str{id}{val=templatize}))) (expr*{args} (expr (Name (str{id}{val=src_data}))) (expr (Subscript (expr{value} (Name (str{id}{val=orig_file}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=2}))))))))))))
(root (With (expr{context_expr} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=io}))) (str{attr}{val=open}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=dirpath}))) (expr (Name (str{id}{val=thefile})))))) (expr (Str (str{s}{val=w})))) (keyword*{keywords} (keyword (str{arg}{val=encoding}) (expr{value} (Str (str{s}{val=utf-8}))))))) (expr{optional_vars} (Name (str{id}{val=fp}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=fp}))) (str{attr}{val=write}))) (expr*{args} (expr (Name (str{id}{val=content}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=work_file})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=dirpath}))) (expr (Name (str{id}{val=thefile}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=args})))) (expr{value} (BinOp (expr{left} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Name (str{id}{val=domain}))) (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=--keyword=gettext_noop}))) (expr (Str (str{s}{val=--keyword=gettext_lazy}))) (expr (Str (str{s}{val=--keyword=ngettext_lazy:1,2}))) (expr (Str (str{s}{val=--keyword=ugettext_noop}))) (expr (Str (str{s}{val=--keyword=ugettext_lazy}))) (expr (Str (str{s}{val=--keyword=ungettext_lazy:1,2}))) (expr (Str (str{s}{val=--keyword=pgettext:1c,2}))) (expr (Str (str{s}{val=--keyword=npgettext:1c,2,3}))) (expr (Str (str{s}{val=--keyword=pgettext_lazy:1c,2}))) (expr (Str (str{s}{val=--keyword=npgettext_lazy:1c,2,3}))) (expr (Str (str{s}{val=--output=-})))))) (operator{op} (Add)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=command}))) (str{attr}{val=xgettext_options})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=args}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=work_file}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (epsilon)))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=msgs}))) (expr (Name (str{id}{val=errors}))) (expr (Name (str{id}{val=status}))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=popen_wrapper}))) (expr*{args} (expr (Name (str{id}{val=args}))))))))
(root (If (expr{test} (Name (str{id}{val=errors}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=status}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Name (str{id}{val=STATUS_OK})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=is_templatized}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=unlink}))) (expr*{args} (expr (Name (str{id}{val=work_file}))))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=file}))) (expr (Name (str{id}{val=errors})))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=command}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=command}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (Name (str{id}{val=errors}))))))))
(root (If (expr{test} (Name (str{id}{val=msgs}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=PY2}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=msgs})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=msgs}))) (str{attr}{val=decode}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=potfile})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=locale_dir}))) (expr (BinOp (expr{left} (Str (str{s}{val=%s.pot}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Name (str{id}{val=domain})))))))))))))
(root (If (expr{test} (Name (str{id}{val=is_templatized}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=name}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=old})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=work_file})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=new})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=orig_file})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=old})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Add)) (expr{right} (Subscript (expr{value} (Name (str{id}{val=work_file}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=2})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=new})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Add)) (expr{right} (Subscript (expr{value} (Name (str{id}{val=orig_file}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=2})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=msgs})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=msgs}))) (str{attr}{val=replace}))) (expr*{args} (expr (Name (str{id}{val=old}))) (expr (Name (str{id}{val=new}))))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=write_pot_file}))) (expr*{args} (expr (Name (str{id}{val=potfile}))) (expr (Name (str{id}{val=msgs}))))))))
(root (If (expr{test} (Name (str{id}{val=is_templatized}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=unlink}))) (expr*{args} (expr (Name (str{id}{val=work_file}))))))))
(root (FunctionDef (str{name}{val=write_pot_file}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=potfile}))) (expr (Name (str{id}{val=msgs})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=exists}))) (expr*{args} (expr (Name (str{id}{val=potfile})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=msgs})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=\n}))) (str{attr}{val=join}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=dropwhile}))) (expr*{args} (expr (Name (str{id}{val=len}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=msgs}))) (str{attr}{val=split}))) (expr*{args} (expr (Str (str{s}{val=\n}))))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=msgs})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=msgs}))) (str{attr}{val=replace}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))))))))
(root (With (expr{context_expr} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=io}))) (str{attr}{val=open}))) (expr*{args} (expr (Name (str{id}{val=potfile}))) (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=encoding}) (expr{value} (Str (str{s}{val=_STR:1_}))))))) (expr{optional_vars} (Name (str{id}{val=fp}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=fp}))) (str{attr}{val=write}))) (expr*{args} (expr (Name (str{id}{val=msgs}))))))))
(root (ClassDef (str{name}{val=Command}) (expr*{bases} (expr (Name (str{id}{val=BaseCommand})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=help})))) (expr{value} (Str (str{s}{val=_STR:0_pulls out all strings marked for translation. It creates (or updates) a message file in the conf/locale (in the django tree) or locale (for projects and applications) directory.\n\nYou must run this command with one of either the --locale, --exclude or --all options.})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=requires_system_checks})))) (expr{value} (Name (str{id}{val=False})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=leave_locale_alone})))) (expr{value} (Name (str{id}{val=True})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=msgmerge_options})))) (expr{value} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=msguniq_options})))) (expr{value} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=msgattrib_options})))) (expr{value} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=xgettext_options})))) (expr{value} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))))))))
(root (FunctionDef (str{name}{val=add_arguments}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=parser})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_})))) (keyword*{keywords} (keyword (str{arg}{val=default}) (expr{value} (List (epsilon)))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=locale})))) (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=append})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Creates or updates the message files for the given locale(s) (e.g. pt_BR). Can be used multiple times.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:3_}))) (expr (Str (str{s}{val=_STR:4_})))) (keyword*{keywords} (keyword (str{arg}{val=default}) (expr{value} (List (epsilon)))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=exclude})))) (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:1_})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Locales to exclude. Default is none. Can be used multiple times.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:3_}))) (expr (Str (str{s}{val=_STR:4_})))) (keyword*{keywords} (keyword (str{arg}{val=default}) (expr{value} (Str (str{s}{val=_STR:5_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=domain})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=The domain of the message files (default: "django").})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=_STR:3_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:4_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=all})))) (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=False})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Updates the message files for all existing locales.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=_STR:3_})))) (keyword*{keywords} (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=_STR:4_})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=The file extension(s) to examine (default: "html,txt", or "js" if the domain is "djangojs"). Separate multiple extensions with commas, or use -e multiple times.})))) (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=append})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:3_}))) (expr (Str (str{s}{val=_STR:4_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:5_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=symlinks})))) (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=False})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Follows symlinks to directories when examining source code and templates for translation strings.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:3_}))) (expr (Str (str{s}{val=_STR:4_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:5_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=ignore_patterns})))) (keyword (str{arg}{val=default}) (expr{value} (List (epsilon)))) (keyword (str{arg}{val=metavar}) (expr{value} (Str (str{s}{val=PATTERN})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Ignore files or directories matching this glob-style pattern. Use multiple times to ignore more.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:3_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:4_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=use_default_ignore_patterns})))) (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=True})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Don't ignore the common glob-style patterns 'CVS', '.*', '*~' and '*.pyc'.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:2_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:3_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=_STR:4_})))) (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=False})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Don't break long message lines into several lines.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:2_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=no_location})))) (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=False})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Don't write '#: filename:line' lines.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:2_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:3_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=no_obsolete})))) (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=False})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Remove obsolete message strings.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:2_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:3_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=keep_pot})))) (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=False})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Keep .pot file after making messages. Useful when debugging.})))))))))
(root (FunctionDef (str{name}{val=handle}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=locale})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=exclude})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=domain})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=process_all})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=extensions})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=symlinks})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ignore_patterns})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=ignore_patterns}))) (operator{op} (Add)) (expr{value} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=_STR:3_}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=ignore_patterns})))) (expr{value} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=set}))) (expr*{args} (expr (Name (str{id}{val=ignore_patterns})))))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=msgmerge_options})))) (expr{value} (BinOp (expr{left} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=msgmerge_options}))) (slice{slice} (Slice (epsilon))))) (operator{op} (Add)) (expr{right} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=msguniq_options})))) (expr{value} (BinOp (expr{left} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=msguniq_options}))) (slice{slice} (Slice (epsilon))))) (operator{op} (Add)) (expr{right} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=msgattrib_options})))) (expr{value} (BinOp (expr{left} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=msgattrib_options}))) (slice{slice} (Slice (epsilon))))) (operator{op} (Add)) (expr{right} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=xgettext_options})))) (expr{value} (BinOp (expr{left} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=xgettext_options}))) (slice{slice} (Slice (epsilon))))) (operator{op} (Add)) (expr{right} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=msgmerge_options})))) (expr{value} (BinOp (expr{left} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=msgmerge_options}))) (slice{slice} (Slice (epsilon))))) (operator{op} (Add)) (expr{right} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=msguniq_options})))) (expr{value} (BinOp (expr{left} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=msguniq_options}))) (slice{slice} (Slice (epsilon))))) (operator{op} (Add)) (expr{right} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=msgattrib_options})))) (expr{value} (BinOp (expr{left} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=msgattrib_options}))) (slice{slice} (Slice (epsilon))))) (operator{op} (Add)) (expr{right} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=xgettext_options})))) (expr{value} (BinOp (expr{left} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=xgettext_options}))) (slice{slice} (Slice (epsilon))))) (operator{op} (Add)) (expr{right} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=no_obsolete})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=keep_pot})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=domain}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (Str (str{s}{val=currently makemessages only supports domains 'django' and 'djangojs'}))))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=domain}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=exts})))) (expr{value} (IfExp (expr{test} (Name (str{id}{val=extensions}))) (expr{body} (Name (str{id}{val=extensions}))) (expr{orelse} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=exts})))) (expr{value} (IfExp (expr{test} (Name (str{id}{val=extensions}))) (expr{body} (Name (str{id}{val=extensions}))) (expr{orelse} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=extensions})))) (expr{value} (Call (expr{func} (Name (str{id}{val=handle_extensions}))) (expr*{args} (expr (Name (str{id}{val=exts}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=locale}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=exclude}))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=process_all})))))))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=domain}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=basename}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=argv}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))) (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=argv}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1})))))))))))))))))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=configured}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=USE_I18N})))) (expr{value} (Name (str{id}{val=True})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=configure}))) (keyword*{keywords} (keyword (str{arg}{val=USE_I18N}) (expr{value} (Name (str{id}{val=True})))))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Name (str{id}{val=get_text_list}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=extensions})))))) (expr (Str (str{s}{val=and})))))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=invoked_for_django})))) (expr{value} (Name (str{id}{val=False})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=locale_paths})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=default_locale_path})))) (expr{value} (Name (str{id}{val=None})))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=isdir}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=locale_paths})))) (expr{value} (List (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=abspath}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))))))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=default_locale_path})))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=locale_paths}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=invoked_for_django})))) (expr{value} (Name (str{id}{val=True})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=locale_paths}))) (str{attr}{val=extend}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=LOCALE_PATHS})))))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=isdir}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=locale_paths}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=abspath}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=locale_paths}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=default_locale_path})))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=locale_paths}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=exists}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=default_locale_path})))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=makedirs}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=default_locale_path}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=locale_dirs})))) (expr{value} (Call (expr{func} (Name (str{id}{val=filter}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=isdir}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=glob}))) (str{attr}{val=glob}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=%s/*}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=default_locale_path})))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=all_locales})))) (expr{value} (Call (expr{func} (Name (str{id}{val=map}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=basename}))) (expr (Name (str{id}{val=locale_dirs}))))))))
(root (If (expr{test} (Name (str{id}{val=process_all}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=locales})))) (expr{value} (Name (str{id}{val=all_locales})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=locales})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=locale}))) (expr (Name (str{id}{val=all_locales}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=locales})))) (expr{value} (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=set}))) (expr*{args} (expr (Name (str{id}{val=locales})))))) (operator{op} (Sub)) (expr{right} (Call (expr{func} (Name (str{id}{val=set}))) (expr*{args} (expr (Name (str{id}{val=exclude}))))))))))
(root (If (expr{test} (Name (str{id}{val=locales}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=check_programs}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=check_programs}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=potfiles})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=build_potfiles})))))))
(root (For (expr{target} (Name (str{id}{val=locale}))) (expr{iter} (Name (str{id}{val=locales}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=locale}))))))))))
(root (For (expr{target} (Name (str{id}{val=potfile}))) (expr{iter} (Name (str{id}{val=potfiles}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=write_po_file}))) (expr*{args} (expr (Name (str{id}{val=potfile}))) (expr (Name (str{id}{val=locale}))))))))
(root (TryFinally (stmt*{body} (stmt (Pass))) (stmt*{finalbody} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=keep_pot}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=remove_potfiles})))))))
(root (FunctionDef (str{name}{val=build_potfiles}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=file_list})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=find_files}))) (expr*{args} (expr (Str (str{s}{val=.}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=remove_potfiles})))))))
(root (For (expr{target} (Name (str{id}{val=f}))) (expr{iter} (Name (str{id}{val=file_list}))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=process}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=domain}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=UnicodeDecodeError}))) (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=file}))) (expr (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=dirpath})))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=potfiles})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=path}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=locale_paths}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=potfile})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=path}))) (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=domain})))))))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=exists}))) (expr*{args} (expr (Name (str{id}{val=potfile})))))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=args})))) (expr{value} (BinOp (expr{left} (BinOp (expr{left} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_})))))) (operator{op} (Add)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=msguniq_options}))))) (operator{op} (Add)) (expr{right} (List (expr*{elts} (expr (Name (str{id}{val=potfile}))))))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=msgs}))) (expr (Name (str{id}{val=errors}))) (expr (Name (str{id}{val=status}))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=popen_wrapper}))) (expr*{args} (expr (Name (str{id}{val=args}))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=PY2}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=msgs})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=msgs}))) (str{attr}{val=decode}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Name (str{id}{val=errors}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=status}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Name (str{id}{val=STATUS_OK})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=errors}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (Name (str{id}{val=errors}))))))))
(root (With (expr{context_expr} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=io}))) (str{attr}{val=open}))) (expr*{args} (expr (Name (str{id}{val=potfile}))) (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=encoding}) (expr{value} (Str (str{s}{val=_STR:1_}))))))) (expr{optional_vars} (Name (str{id}{val=fp}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=fp}))) (str{attr}{val=write}))) (expr*{args} (expr (Name (str{id}{val=msgs}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=potfiles}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=potfile}))))))))
(root (Return (expr{value} (Name (str{id}{val=potfiles})))))
(root (FunctionDef (str{name}{val=remove_potfiles}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=path}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=locale_paths}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=pot_path})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=path}))) (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=domain})))))))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=exists}))) (expr*{args} (expr (Name (str{id}{val=pot_path})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=unlink}))) (expr*{args} (expr (Name (str{id}{val=pot_path}))))))))
(root (FunctionDef (str{name}{val=find_files}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=root})))))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=is_ignored}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=path}))) (expr (Name (str{id}{val=ignore_patterns})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=filename})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=basename}))) (expr*{args} (expr (Name (str{id}{val=path}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ignore})))) (expr{value} (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=pattern})))))) (expr{body} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=fnmatch}))) (str{attr}{val=fnmatchcase}))) (expr*{args} (expr (Name (str{id}{val=filename}))) (expr (Name (str{id}{val=pattern}))))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=any}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Call (expr{func} (Name (str{id}{val=ignore}))) (expr*{args} (expr (Name (str{id}{val=pattern})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=pattern}))) (expr{iter} (Name (str{id}{val=ignore_patterns}))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=dir_suffix})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=%s*}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=sep})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=norm_patterns})))) (expr{value} (ListComp (expr{elt} (IfExp (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=p}))) (str{attr}{val=endswith}))) (expr*{args} (expr (Name (str{id}{val=dir_suffix})))))) (expr{body} (Subscript (expr{value} (Name (str{id}{val=p}))) (slice{slice} (Slice (expr{upper} (UnaryOp (unaryop{op} (USub)) (expr{operand} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=dir_suffix})))))))))))) (expr{orelse} (Name (str{id}{val=p}))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=p}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=ignore_patterns})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=all_files})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=dirpath}))) (expr (Name (str{id}{val=dirnames}))) (expr (Name (str{id}{val=filenames})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=walk}))) (expr*{args} (expr (Name (str{id}{val=root})))) (keyword*{keywords} (keyword (str{arg}{val=topdown}) (expr{value} (Name (str{id}{val=True})))) (keyword (str{arg}{val=followlinks}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=symlinks}))))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=dirname}))) (expr{iter} (Subscript (expr{value} (Name (str{id}{val=dirnames}))) (slice{slice} (Slice (epsilon))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=is_ignored}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=normpath}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=dirpath}))) (expr (Name (str{id}{val=dirname}))))))))) (expr (Name (str{id}{val=norm_patterns})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=dirnames}))) (str{attr}{val=remove}))) (expr*{args} (expr (Name (str{id}{val=dirname}))))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=dirname}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Name (str{id}{val=dirname}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=dirnames}))) (str{attr}{val=remove}))) (expr*{args} (expr (Name (str{id}{val=dirname}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=locale_paths}))) (str{attr}{val=insert}))) (expr*{args} (expr (Num (int{n}{val=0}))) (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=abspath}))) (expr*{args} (expr (Name (str{id}{val=dirpath})))))) (expr (Name (str{id}{val=dirname})))))))))))
(root (For (expr{target} (Name (str{id}{val=filename}))) (expr{iter} (Name (str{id}{val=filenames}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=file_path})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=normpath}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=dirpath}))) (expr (Name (str{id}{val=filename})))))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=is_ignored}))) (expr*{args} (expr (Name (str{id}{val=file_path}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=ignore_patterns})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=filename}))) (expr (Name (str{id}{val=dirpath})))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=locale_dir})))) (expr{value} (Name (str{id}{val=None})))))
(root (For (expr{target} (Name (str{id}{val=path}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=locale_paths}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=abspath}))) (expr*{args} (expr (Name (str{id}{val=dirpath})))))) (str{attr}{val=startswith}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=dirname}))) (expr*{args} (expr (Name (str{id}{val=path}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=locale_dir})))) (expr{value} (Name (str{id}{val=path})))))
(root (Break))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=locale_dir}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=locale_dir})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=default_locale_path})))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=locale_dir}))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=file_path}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=all_files}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=TranslatableFile}))) (expr*{args} (expr (Name (str{id}{val=dirpath}))) (expr (Name (str{id}{val=filename}))) (expr (Name (str{id}{val=locale_dir})))))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=sorted}))) (expr*{args} (expr (Name (str{id}{val=all_files}))))))))
(root (FunctionDef (str{name}{val=write_po_file}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=potfile}))) (expr (Name (str{id}{val=locale})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=basedir})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=dirname}))) (expr*{args} (expr (Name (str{id}{val=potfile})))))) (expr (Name (str{id}{val=locale}))) (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=isdir}))) (expr*{args} (expr (Name (str{id}{val=basedir})))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=makedirs}))) (expr*{args} (expr (Name (str{id}{val=basedir}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=pofile})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=basedir}))) (expr (BinOp (expr{left} (Str (str{s}{val=%s.po}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=domain})))))))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=exists}))) (expr*{args} (expr (Name (str{id}{val=pofile})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=args})))) (expr{value} (BinOp (expr{left} (BinOp (expr{left} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_})))))) (operator{op} (Add)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=msgmerge_options}))))) (operator{op} (Add)) (expr{right} (List (expr*{elts} (expr (Name (str{id}{val=pofile}))) (expr (Name (str{id}{val=potfile}))))))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=msgs}))) (expr (Name (str{id}{val=errors}))) (expr (Name (str{id}{val=status}))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=popen_wrapper}))) (expr*{args} (expr (Name (str{id}{val=args}))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=PY2}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=msgs})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=msgs}))) (str{attr}{val=decode}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Name (str{id}{val=errors}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=status}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Name (str{id}{val=STATUS_OK})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=errors}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (Name (str{id}{val=errors}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (With (expr{context_expr} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=io}))) (str{attr}{val=open}))) (expr*{args} (expr (Name (str{id}{val=potfile}))) (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=encoding}) (expr{value} (Str (str{s}{val=_STR:1_}))))))) (expr{optional_vars} (Name (str{id}{val=fp}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=msgs})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=fp}))) (str{attr}{val=read})))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=invoked_for_django}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=msgs})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=copy_plural_forms}))) (expr*{args} (expr (Name (str{id}{val=msgs}))) (expr (Name (str{id}{val=locale}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=msgs})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=msgs}))) (str{attr}{val=replace}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=domain}))))) (expr (Str (str{s}{val=}))))))))
(root (With (expr{context_expr} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=io}))) (str{attr}{val=open}))) (expr*{args} (expr (Name (str{id}{val=pofile}))) (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=encoding}) (expr{value} (Str (str{s}{val=_STR:1_}))))))) (expr{optional_vars} (Name (str{id}{val=fp}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=fp}))) (str{attr}{val=write}))) (expr*{args} (expr (Name (str{id}{val=msgs}))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=no_obsolete}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=args})))) (expr{value} (BinOp (expr{left} (BinOp (expr{left} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_})))))) (operator{op} (Add)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=msgattrib_options}))))) (operator{op} (Add)) (expr{right} (List (expr*{elts} (expr (Str (str{s}{val=_STR:1_}))) (expr (Name (str{id}{val=pofile}))) (expr (Name (str{id}{val=pofile}))))))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=msgs}))) (expr (Name (str{id}{val=errors}))) (expr (Name (str{id}{val=status}))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=popen_wrapper}))) (expr*{args} (expr (Name (str{id}{val=args}))))))))
(root (If (expr{test} (Name (str{id}{val=errors}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=status}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Name (str{id}{val=STATUS_OK})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=errors}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (Name (str{id}{val=errors}))))))))
(root (FunctionDef (str{name}{val=copy_plural_forms}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=msgs}))) (expr (Name (str{id}{val=locale})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=django_dir})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=normpath}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=dirname}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=django}))) (str{attr}{val=__file__}))))))))))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=domain}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=domains})))) (expr{value} (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=domains})))) (expr{value} (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (For (expr{target} (Name (str{id}{val=domain}))) (expr{iter} (Name (str{id}{val=domains}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=django_po})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=django_dir}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Name (str{id}{val=locale}))) (expr (Str (str{s}{val=_STR:2_}))) (expr (BinOp (expr{left} (Str (str{s}{val=%s.po}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=domain}))))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=exists}))) (expr*{args} (expr (Name (str{id}{val=django_po})))))) (stmt*{body} (stmt (Pass)))))
(root (With (expr{context_expr} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=io}))) (str{attr}{val=open}))) (expr*{args} (expr (Name (str{id}{val=django_po}))) (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=encoding}) (expr{value} (Str (str{s}{val=_STR:1_}))))))) (expr{optional_vars} (Name (str{id}{val=fp}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=m})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=plural_forms_re}))) (str{attr}{val=search}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=fp}))) (str{attr}{val=read}))))))))))
(root (If (expr{test} (Name (str{id}{val=m}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=plural_form_line})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_str}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=m}))) (str{attr}{val=group}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=plural_form_line}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=lines})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=found})))) (expr{value} (Name (str{id}{val=False})))))
(root (For (expr{target} (Name (str{id}{val=line}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=msgs}))) (str{attr}{val=split}))) (expr*{args} (expr (Str (str{s}{val=\n})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=found}))))) (expr (BoolOp (boolop{op} (Or)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=line}))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=plural_forms_re}))) (str{attr}{val=search}))) (expr*{args} (expr (Name (str{id}{val=line})))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=line})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=%s\n}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=plural_form_line})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=found})))) (expr{value} (Name (str{id}{val=True})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=lines}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=line}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=msgs})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=\n}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=lines}))))))))
(root (Break))
(root (Return (expr{value} (Name (str{id}{val=msgs})))))
(root (Import (alias*{names} (alias (str{name}{val=sys})))))
(root (Import (alias*{names} (alias (str{name}{val=os})))))
(root (Import (alias*{names} (alias (str{name}{val=operator})))))
(root (ImportFrom (str{module}{val=django.apps}) (alias*{names} (alias (str{name}{val=apps}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management.base}) (alias*{names} (alias (str{name}{val=BaseCommand})) (alias (str{name}{val=CommandError}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.db.migrations}) (alias*{names} (alias (str{name}{val=Migration}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.db.migrations.loader}) (alias*{names} (alias (str{name}{val=MigrationLoader}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.db.migrations.autodetector}) (alias*{names} (alias (str{name}{val=MigrationAutodetector}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.db.migrations.questioner}) (alias*{names} (alias (str{name}{val=MigrationQuestioner})) (alias (str{name}{val=InteractiveMigrationQuestioner}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.db.migrations.state}) (alias*{names} (alias (str{name}{val=ProjectState}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.db.migrations.writer}) (alias*{names} (alias (str{name}{val=MigrationWriter}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.six.moves}) (alias*{names} (alias (str{name}{val=reduce}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=Command}) (expr*{bases} (expr (Name (str{id}{val=BaseCommand})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=help})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (FunctionDef (str{name}{val=add_arguments}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=parser})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=metavar}) (expr{value} (Str (str{s}{val=_STR:1_})))) (keyword (str{arg}{val=nargs}) (expr{value} (Str (str{s}{val=_STR:2_})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Specify the app label(s) to create migrations for.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:2_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=_STR:3_})))) (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=False})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Just show what migrations would be made; don't actually write them.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:2_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=_STR:3_})))) (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=False})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Enable fixing of migration conflicts.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:2_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=_STR:3_})))) (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=False})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Create an empty migration.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:2_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=interactive})))) (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=True})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Tells Django to NOT prompt the user for input of any kind.})))))))))
(root (FunctionDef (str{name}{val=handle}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=app_labels}) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=interactive})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=dry_run})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=False}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=merge})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=False}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=empty})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=False}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=app_labels})))) (expr{value} (Call (expr{func} (Name (str{id}{val=set}))) (expr*{args} (expr (Name (str{id}{val=app_labels}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=bad_app_labels})))) (expr{value} (Call (expr{func} (Name (str{id}{val=set})))))))
(root (For (expr{target} (Name (str{id}{val=app_label}))) (expr{iter} (Name (str{id}{val=app_labels}))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=apps}))) (str{attr}{val=get_app_config}))) (expr*{args} (expr (Name (str{id}{val=app_label}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=LookupError}))) (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=bad_app_labels}))) (str{attr}{val=add}))) (expr*{args} (expr (Name (str{id}{val=app_label}))))))))
(root (If (expr{test} (Name (str{id}{val=bad_app_labels}))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=app_label}))) (expr{iter} (Name (str{id}{val=bad_app_labels}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stderr}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=app_label}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=exit}))) (expr*{args} (expr (Num (int{n}{val=2}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=loader})))) (expr{value} (Call (expr{func} (Name (str{id}{val=MigrationLoader}))) (expr*{args} (expr (Name (str{id}{val=None})))) (keyword*{keywords} (keyword (str{arg}{val=ignore_no_migrations}) (expr{value} (Name (str{id}{val=True})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=conflicts})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=loader}))) (str{attr}{val=detect_conflicts})))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=conflicts}))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=merge})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=name_str})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=; }))) (str{attr}{val=join}))) (expr*{args} (expr (GeneratorExp (expr{elt} (BinOp (expr{left} (Str (str{s}{val=%s in %s}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=, }))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=names})))))) (expr (Name (str{id}{val=app})))))))) (comprehension*{generators} (comprehension (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=app}))) (expr (Name (str{id}{val=names})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=conflicts}))) (str{attr}{val=items}))))))))))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=Conflicting migrations detected (%s).\nTo fix them run 'python manage.py makemigrations --merge'}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=name_str}))))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=merge}))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=conflicts})))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Return (epsilon)))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=merge}))) (expr (Name (str{id}{val=conflicts})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=handle_merge}))) (expr*{args} (expr (Name (str{id}{val=loader}))) (expr (Name (str{id}{val=conflicts}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=autodetector})))) (expr{value} (Call (expr{func} (Name (str{id}{val=MigrationAutodetector}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=loader}))) (str{attr}{val=project_state}))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=ProjectState}))) (str{attr}{val=from_apps}))) (expr*{args} (expr (Name (str{id}{val=apps})))))) (expr (Call (expr{func} (Name (str{id}{val=InteractiveMigrationQuestioner}))) (keyword*{keywords} (keyword (str{arg}{val=specified_apps}) (expr{value} (Name (str{id}{val=app_labels})))) (keyword (str{arg}{val=dry_run}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=dry_run}))))))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=empty}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=app_labels}))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=changes})))) (expr{value} (Call (expr{func} (Name (str{id}{val=dict}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Tuple (expr*{elts} (expr (Name (str{id}{val=app}))) (expr (List (expr*{elts} (expr (Call (expr{func} (Name (str{id}{val=Migration}))) (expr*{args} (expr (Str (str{s}{val=custom}))) (expr (Name (str{id}{val=app})))))))))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=app}))) (expr{iter} (Name (str{id}{val=app_labels}))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=changes})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=autodetector}))) (str{attr}{val=arrange_for_graph}))) (expr*{args} (expr (Name (str{id}{val=changes}))) (expr (Attribute (expr{value} (Name (str{id}{val=loader}))) (str{attr}{val=graph}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=write_migration_files}))) (expr*{args} (expr (Name (str{id}{val=changes}))))))))
(root (Return (epsilon)))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=changes})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=autodetector}))) (str{attr}{val=changes}))) (keyword*{keywords} (keyword (str{arg}{val=graph}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=loader}))) (str{attr}{val=graph})))) (keyword (str{arg}{val=trim_to_apps}) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=app_labels}))) (expr (Name (str{id}{val=None}))))))) (keyword (str{arg}{val=convert_apps}) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=app_labels}))) (expr (Name (str{id}{val=None}))))))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=changes}))))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Num (int{n}{val=1}))))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=app_labels})))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=app_labels}))) (str{attr}{val=pop}))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=app_labels})))))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (stmt*{body} (stmt (Pass))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=_STR:1_}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=app_labels})))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Return (epsilon)))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=write_migration_files}))) (expr*{args} (expr (Name (str{id}{val=changes}))))))))
(root (FunctionDef (str{name}{val=write_migration_files}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=changes})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=directory_created})))) (expr{value} (Dict (epsilon)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=app_label}))) (expr (Name (str{id}{val=app_migrations})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=changes}))) (str{attr}{val=items}))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style}))) (str{attr}{val=MIGRATE_HEADING}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=app_label})))))))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=\n}))))))))))
(root (For (expr{target} (Name (str{id}{val=migration}))) (expr{iter} (Name (str{id}{val=app_migrations}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=writer})))) (expr{value} (Call (expr{func} (Name (str{id}{val=MigrationWriter}))) (expr*{args} (expr (Name (str{id}{val=migration}))))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style}))) (str{attr}{val=MIGRATE_LABEL}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=writer}))) (str{attr}{val=filename}))))))))))))))))
(root (For (expr{target} (Name (str{id}{val=operation}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=migration}))) (str{attr}{val=operations}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=operation}))) (str{attr}{val=describe}))))))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=dry_run}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=migrations_directory})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=dirname}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=writer}))) (str{attr}{val=path}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=directory_created}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=app_label}))) (expr (Name (str{id}{val=False})))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=isdir}))) (expr*{args} (expr (Name (str{id}{val=migrations_directory})))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=mkdir}))) (expr*{args} (expr (Name (str{id}{val=migrations_directory}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=init_path})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=migrations_directory}))) (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=isfile}))) (expr*{args} (expr (Name (str{id}{val=init_path})))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=open}))) (expr*{args} (expr (Name (str{id}{val=init_path}))) (expr (Str (str{s}{val=w})))))) (str{attr}{val=close})))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=directory_created}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=app_label})))))))) (expr{value} (Name (str{id}{val=True})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=migration_string})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=writer}))) (str{attr}{val=as_string})))))))
(root (With (expr{context_expr} (Call (expr{func} (Name (str{id}{val=open}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=writer}))) (str{attr}{val=path}))) (expr (Str (str{s}{val=wb})))))) (expr{optional_vars} (Name (str{id}{val=fh}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=fh}))) (str{attr}{val=write}))) (expr*{args} (expr (Name (str{id}{val=migration_string}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=3})))))) (stmt*{body} (stmt (Pass))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style}))) (str{attr}{val=MIGRATE_HEADING}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=writer}))) (str{attr}{val=filename})))))))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=\n}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=%s\n}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=writer}))) (str{attr}{val=as_string}))))))))))))
(root (FunctionDef (str{name}{val=handle_merge}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=loader}))) (expr (Name (str{id}{val=conflicts})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=interactive}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=questioner})))) (expr{value} (Call (expr{func} (Name (str{id}{val=InteractiveMigrationQuestioner})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=questioner})))) (expr{value} (Call (expr{func} (Name (str{id}{val=MigrationQuestioner}))) (keyword*{keywords} (keyword (str{arg}{val=defaults}) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=ask_merge})))) (expr*{values} (expr (Name (str{id}{val=True}))))))))))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=app_label}))) (expr (Name (str{id}{val=migration_names})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=conflicts}))) (str{attr}{val=items}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=merge_migrations})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=migration_name}))) (expr{iter} (Name (str{id}{val=migration_names}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=migration})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=loader}))) (str{attr}{val=get_migration}))) (expr*{args} (expr (Name (str{id}{val=app_label}))) (expr (Name (str{id}{val=migration_name}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=migration}))) (str{attr}{val=ancestry})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=loader}))) (str{attr}{val=graph}))) (str{attr}{val=forwards_plan}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=app_label}))) (expr (Name (str{id}{val=migration_name})))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=merge_migrations}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=migration}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=common_ancestor})))) (expr{value} (Name (str{id}{val=None})))))
(root (For (expr{target} (Name (str{id}{val=level}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=zip}))) (expr{starargs} (ListComp (expr{elt} (Attribute (expr{value} (Name (str{id}{val=m}))) (str{attr}{val=ancestry}))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=m}))) (expr{iter} (Name (str{id}{val=merge_migrations}))))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=reduce}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=operator}))) (str{attr}{val=eq}))) (expr (Name (str{id}{val=level})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=common_ancestor})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=level}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Break))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=common_ancestor}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=migration_names}))))))))))
(root (For (expr{target} (Name (str{id}{val=migration}))) (expr{iter} (Name (str{id}{val=merge_migrations}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=migration}))) (str{attr}{val=branch})))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=migration}))) (str{attr}{val=ancestry}))) (slice{slice} (Slice (expr{lower} (BinOp (expr{left} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=migration}))) (str{attr}{val=ancestry}))) (str{attr}{val=index}))) (expr*{args} (expr (Name (str{id}{val=common_ancestor})))))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=1})))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=migration}))) (str{attr}{val=merged_operations})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=node_app}))) (expr (Name (str{id}{val=node_name})))))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=migration}))) (str{attr}{val=branch}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=migration}))) (str{attr}{val=merged_operations}))) (str{attr}{val=extend}))) (expr*{args} (expr (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=loader}))) (str{attr}{val=get_migration}))) (expr*{args} (expr (Name (str{id}{val=node_app}))) (expr (Name (str{id}{val=node_name})))))) (str{attr}{val=operations}))))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style}))) (str{attr}{val=MIGRATE_HEADING}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=app_label})))))))))))))
(root (For (expr{target} (Name (str{id}{val=migration}))) (expr{iter} (Name (str{id}{val=merge_migrations}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style}))) (str{attr}{val=MIGRATE_LABEL}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=migration}))) (str{attr}{val=name})))))))))))))
(root (For (expr{target} (Name (str{id}{val=operation}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=migration}))) (str{attr}{val=merged_operations}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=operation}))) (str{attr}{val=describe}))))))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=questioner}))) (str{attr}{val=ask_merge}))) (expr*{args} (expr (Name (str{id}{val=app_label})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=numbers})))) (expr{value} (ListComp (expr{elt} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=MigrationAutodetector}))) (str{attr}{val=parse_number}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=migration}))) (str{attr}{val=name})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=migration}))) (expr{iter} (Name (str{id}{val=merge_migrations})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=biggest_number})))) (expr{value} (Call (expr{func} (Name (str{id}{val=max}))) (expr*{args} (expr (ListComp (expr{elt} (Name (str{id}{val=x}))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=x}))) (expr{iter} (Name (str{id}{val=numbers}))) (expr*{ifs} (expr (Compare (expr{left} (Name (str{id}{val=x}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None}))))))))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ValueError}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=biggest_number})))) (expr{value} (Num (int{n}{val=1})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=subclass})))) (expr{value} (Call (expr{func} (Name (str{id}{val=type}))) (expr*{args} (expr (Str (str{s}{val=Migration}))) (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=Migration})))))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=dependencies})))) (expr*{values} (expr (ListComp (expr{elt} (Tuple (expr*{elts} (expr (Name (str{id}{val=app_label}))) (expr (Attribute (expr{value} (Name (str{id}{val=migration}))) (str{attr}{val=name})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=migration}))) (expr{iter} (Name (str{id}{val=merge_migrations})))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=new_migration})))) (expr{value} (Call (expr{func} (Name (str{id}{val=subclass}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (BinOp (expr{left} (Name (str{id}{val=biggest_number}))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=1}))))))) (expr (Name (str{id}{val=app_label}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=writer})))) (expr{value} (Call (expr{func} (Name (str{id}{val=MigrationWriter}))) (expr*{args} (expr (Name (str{id}{val=new_migration}))))))))
(root (With (expr{context_expr} (Call (expr{func} (Name (str{id}{val=open}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=writer}))) (str{attr}{val=path}))) (expr (Str (str{s}{val=wb})))))) (expr{optional_vars} (Name (str{id}{val=fh}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=fh}))) (str{attr}{val=write}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=writer}))) (str{attr}{val=as_string}))))))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=writer}))) (str{attr}{val=path}))))))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=collections}) (alias*{names} (alias (str{name}{val=OrderedDict}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=importlib}) (alias*{names} (alias (str{name}{val=import_module}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=itertools})))))
(root (Import (alias*{names} (alias (str{name}{val=traceback})))))
(root (ImportFrom (str{module}{val=django.apps}) (alias*{names} (alias (str{name}{val=apps}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management}) (alias*{names} (alias (str{name}{val=call_command}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management.base}) (alias*{names} (alias (str{name}{val=BaseCommand})) (alias (str{name}{val=CommandError}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management.color}) (alias*{names} (alias (str{name}{val=no_style}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management.sql}) (alias*{names} (alias (str{name}{val=custom_sql_for_model})) (alias (str{name}{val=emit_post_migrate_signal})) (alias (str{name}{val=emit_pre_migrate_signal}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.db}) (alias*{names} (alias (str{name}{val=connections})) (alias (str{name}{val=router})) (alias (str{name}{val=transaction})) (alias (str{name}{val=DEFAULT_DB_ALIAS}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.db.migrations.executor}) (alias*{names} (alias (str{name}{val=MigrationExecutor}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.db.migrations.loader}) (alias*{names} (alias (str{name}{val=MigrationLoader})) (alias (str{name}{val=AmbiguityError}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.db.migrations.state}) (alias*{names} (alias (str{name}{val=ProjectState}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.db.migrations.autodetector}) (alias*{names} (alias (str{name}{val=MigrationAutodetector}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.module_loading}) (alias*{names} (alias (str{name}{val=module_has_submodule}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=Command}) (expr*{bases} (expr (Name (str{id}{val=BaseCommand})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=help})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (FunctionDef (str{name}{val=add_arguments}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=parser})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=nargs}) (expr{value} (Str (str{s}{val=_STR:1_})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=App label of an application to synchronize the state.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_})))) (keyword*{keywords} (keyword (str{arg}{val=nargs}) (expr{value} (Str (str{s}{val=_STR:2_})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Database state will be brought to the state after that migration.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:2_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=_STR:3_})))) (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=True})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Tells Django to NOT prompt the user for input of any kind.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:2_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=load_initial_data})))) (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=True})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Tells Django not to load any initial data after database synchronization.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:2_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:3_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=_STR:4_})))) (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=DEFAULT_DB_ALIAS})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Nominates a database to synchronize. Defaults to the "default" database.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:2_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=_STR:3_})))) (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=False})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Mark migrations as run without actually running them})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:3_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=_STR:4_})))) (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=False})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Show a list of all known migrations and which are applied})))))))))
(root (FunctionDef (str{name}{val=handle}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=interactive})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=show_traceback})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=load_initial_data})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=test_database})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=False}))))))))
(root (For (expr{target} (Name (str{id}{val=app_config}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=apps}))) (str{attr}{val=get_app_configs}))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=module_has_submodule}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=app_config}))) (str{attr}{val=module}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=import_module}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Attribute (expr{value} (Name (str{id}{val=app_config}))) (str{attr}{val=name}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=db})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=connection})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=connections}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=db})))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=list}))) (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=show_migration_list}))) (expr*{args} (expr (Name (str{id}{val=connection}))) (expr (IfExp (expr{test} (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (expr{body} (List (expr*{elts} (expr (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))))) (expr{orelse} (Name (str{id}{val=None}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=executor})))) (expr{value} (Call (expr{func} (Name (str{id}{val=MigrationExecutor}))) (expr*{args} (expr (Name (str{id}{val=connection}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=migration_progress_callback}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=conflicts})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=executor}))) (str{attr}{val=loader}))) (str{attr}{val=detect_conflicts})))))))
(root (If (expr{test} (Name (str{id}{val=conflicts}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=name_str})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=; }))) (str{attr}{val=join}))) (expr*{args} (expr (GeneratorExp (expr{elt} (BinOp (expr{left} (Str (str{s}{val=%s in %s}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=, }))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=names})))))) (expr (Name (str{id}{val=app})))))))) (comprehension*{generators} (comprehension (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=app}))) (expr (Name (str{id}{val=names})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=conflicts}))) (str{attr}{val=items}))))))))))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:2_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=name_str}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=run_syncdb})))) (expr{value} (Name (str{id}{val=False})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=target_app_labels_only})))) (expr{value} (Name (str{id}{val=True})))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (expr (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:1_})))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=app_label}))) (expr (Name (str{id}{val=migration_name}))))))) (expr{value} (Tuple (expr*{elts} (expr (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (expr (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:1_}))))))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=app_label}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=executor}))) (str{attr}{val=loader}))) (str{attr}{val=migrated_apps})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=app_label}))))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=migration_name}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=zero})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=targets})))) (expr{value} (List (expr*{elts} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=app_label}))) (expr (Name (str{id}{val=None})))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=migration})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=executor}))) (str{attr}{val=loader}))) (str{attr}{val=get_migration_by_prefix}))) (expr*{args} (expr (Name (str{id}{val=app_label}))) (expr (Name (str{id}{val=migration_name}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=AmbiguityError}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=migration_name}))) (expr (Name (str{id}{val=app_label})))))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=KeyError}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=migration_name}))) (expr (Name (str{id}{val=app_label})))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=targets})))) (expr{value} (List (expr*{elts} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=app_label}))) (expr (Attribute (expr{value} (Name (str{id}{val=migration}))) (str{attr}{val=name})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=target_app_labels_only})))) (expr{value} (Name (str{id}{val=False})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=app_label})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=app_label}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=executor}))) (str{attr}{val=loader}))) (str{attr}{val=migrated_apps})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=app_label}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=targets})))) (expr{value} (ListComp (expr{elt} (Name (str{id}{val=key}))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=key}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=executor}))) (str{attr}{val=loader}))) (str{attr}{val=graph}))) (str{attr}{val=leaf_nodes}))))) (expr*{ifs} (expr (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=key}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=app_label})))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=targets})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=executor}))) (str{attr}{val=loader}))) (str{attr}{val=graph}))) (str{attr}{val=leaf_nodes})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=run_syncdb})))) (expr{value} (Name (str{id}{val=True})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=plan})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=executor}))) (str{attr}{val=migration_plan}))) (expr*{args} (expr (Name (str{id}{val=targets}))))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style}))) (str{attr}{val=MIGRATE_HEADING}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=run_syncdb}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=executor}))) (str{attr}{val=loader}))) (str{attr}{val=unmigrated_apps})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style}))) (str{attr}{val=MIGRATE_LABEL}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_})))))) (operator{op} (Add)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=, }))) (str{attr}{val=join}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=executor}))) (str{attr}{val=loader}))) (str{attr}{val=unmigrated_apps})))))))))))))
(root (If (expr{test} (Name (str{id}{val=target_app_labels_only}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style}))) (str{attr}{val=MIGRATE_LABEL}))) (expr*{args} (expr (Str (str{s}{val=  Apply all migrations: })))))) (operator{op} (Add)) (expr{right} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=, }))) (str{attr}{val=join}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=set}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Name (str{id}{val=a}))) (comprehension*{generators} (comprehension (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=a}))) (expr (Name (str{id}{val=n})))))) (expr{iter} (Name (str{id}{val=targets}))))))))))))) (expr (Str (str{s}{val=(none)})))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Subscript (expr{value} (Name (str{id}{val=targets}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style}))) (str{attr}{val=MIGRATE_LABEL}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (operator{op} (Add)) (expr{right} (BinOp (expr{left} (Str (str{s}{val=%s}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Subscript (expr{value} (Subscript (expr{value} (Name (str{id}{val=targets}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style}))) (str{attr}{val=MIGRATE_LABEL}))) (expr*{args} (expr (Str (str{s}{val=  Target specific migration: })))))) (operator{op} (Add)) (expr{right} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Subscript (expr{value} (Subscript (expr{value} (Name (str{id}{val=targets}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))) (expr (Subscript (expr{value} (Subscript (expr{value} (Name (str{id}{val=targets}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))))))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=run_syncdb}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=executor}))) (str{attr}{val=loader}))) (str{attr}{val=unmigrated_apps})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style}))) (str{attr}{val=MIGRATE_HEADING}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=created_models})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=sync_apps}))) (expr*{args} (expr (Name (str{id}{val=connection}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=executor}))) (str{attr}{val=loader}))) (str{attr}{val=unmigrated_apps}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=created_models})))) (expr{value} (List (epsilon)))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=test_flush}))) (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=call_command}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=verbosity}) (expr{value} (Call (expr{func} (Name (str{id}{val=max}))) (expr*{args} (expr (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (operator{op} (Sub)) (expr{right} (Num (int{n}{val=1}))))) (expr (Num (int{n}{val=0}))))))) (keyword (str{arg}{val=interactive}) (expr{value} (Name (str{id}{val=False})))) (keyword (str{arg}{val=database}) (expr{value} (Name (str{id}{val=db})))) (keyword (str{arg}{val=reset_sequences}) (expr{value} (Name (str{id}{val=False})))) (keyword (str{arg}{val=inhibit_post_migrate}) (expr{value} (Name (str{id}{val=True})))))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style}))) (str{attr}{val=MIGRATE_HEADING}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=plan}))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=autodetector})))) (expr{value} (Call (expr{func} (Name (str{id}{val=MigrationAutodetector}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=executor}))) (str{attr}{val=loader}))) (str{attr}{val=project_state}))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=ProjectState}))) (str{attr}{val=from_apps}))) (expr*{args} (expr (Name (str{id}{val=apps})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=changes})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=autodetector}))) (str{attr}{val=changes}))) (keyword*{keywords} (keyword (str{arg}{val=graph}) (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=executor}))) (str{attr}{val=loader}))) (str{attr}{val=graph})))))))))
(root (If (expr{test} (Name (str{id}{val=changes}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style}))) (str{attr}{val=NOTICE}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style}))) (str{attr}{val=NOTICE}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=executor}))) (str{attr}{val=migrate}))) (expr*{args} (expr (Name (str{id}{val=targets}))) (expr (Name (str{id}{val=plan})))) (keyword*{keywords} (keyword (str{arg}{val=fake}) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=fake}))) (expr (Name (str{id}{val=False}))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=emit_post_migrate_signal}))) (expr*{args} (expr (Name (str{id}{val=created_models}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=interactive}))) (expr (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=alias}))))))))
(root (FunctionDef (str{name}{val=migration_progress_callback}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=action}))) (expr (Name (str{id}{val=migration}))) (expr (Name (str{id}{val=fake})))) (expr*{defaults} (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=action}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=migration})))))) (keyword*{keywords} (keyword (str{arg}{val=ending}) (expr{value} (Str (str{s}{val=})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=flush})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Name (str{id}{val=action}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=apply_success})))))) (stmt*{body} (stmt (Pass))))))))
(root (If (expr{test} (Name (str{id}{val=fake}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style}))) (str{attr}{val=MIGRATE_SUCCESS}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style}))) (str{attr}{val=MIGRATE_SUCCESS}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Name (str{id}{val=action}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=unapply_start})))))) (stmt*{body} (stmt (Pass))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=migration})))))) (keyword*{keywords} (keyword (str{arg}{val=ending}) (expr{value} (Str (str{s}{val=})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=flush})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Name (str{id}{val=action}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass))))))))
(root (If (expr{test} (Name (str{id}{val=fake}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style}))) (str{attr}{val=MIGRATE_SUCCESS}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style}))) (str{attr}{val=MIGRATE_SUCCESS}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (FunctionDef (str{name}{val=sync_apps}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=connection}))) (expr (Name (str{id}{val=app_labels})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cursor})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=cursor})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=tables})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=introspection}))) (str{attr}{val=table_names}))) (expr*{args} (expr (Name (str{id}{val=cursor}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=seen_models})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=introspection}))) (str{attr}{val=installed_models}))) (expr*{args} (expr (Name (str{id}{val=tables}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=created_models})))) (expr{value} (Call (expr{func} (Name (str{id}{val=set})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=pending_references})))) (expr{value} (Dict (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=all_models})))) (expr{value} (ListComp (expr{elt} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=app_config}))) (str{attr}{val=label}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=router}))) (str{attr}{val=get_migratable_models}))) (expr*{args} (expr (Name (str{id}{val=app_config}))) (expr (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=alias})))) (keyword*{keywords} (keyword (str{arg}{val=include_auto_created}) (expr{value} (Name (str{id}{val=True})))))))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=app_config}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=apps}))) (str{attr}{val=get_app_configs}))))) (expr*{ifs} (expr (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=app_config}))) (str{attr}{val=models_module}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=app_config}))) (str{attr}{val=label}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=app_labels}))))))))))))))))
(root (FunctionDef (str{name}{val=model_installed}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=model})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=opts})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=model}))) (str{attr}{val=_meta})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=converter})))) (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=introspection}))) (str{attr}{val=table_name_converter})))))
(root (Return (expr{value} (UnaryOp (unaryop{op} (Not)) (expr{operand} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=converter}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=opts}))) (str{attr}{val=db_table})))))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=tables})))))) (expr (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=opts}))) (str{attr}{val=auto_created}))) (expr (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=converter}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=opts}))) (str{attr}{val=auto_created}))) (str{attr}{val=_meta}))) (str{attr}{val=db_table})))))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=tables}))))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=manifest})))) (expr{value} (Call (expr{func} (Name (str{id}{val=OrderedDict}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Tuple (expr*{elts} (expr (Name (str{id}{val=app_name}))) (expr (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=filter}))) (expr*{args} (expr (Name (str{id}{val=model_installed}))) (expr (Name (str{id}{val=model_list})))))))))))) (comprehension*{generators} (comprehension (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=app_name}))) (expr (Name (str{id}{val=model_list})))))) (expr{iter} (Name (str{id}{val=all_models}))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=create_models})))) (expr{value} (Call (expr{func} (Name (str{id}{val=set}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=itertools}))) (str{attr}{val=chain}))) (expr{starargs} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=manifest}))) (str{attr}{val=values}))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=emit_pre_migrate_signal}))) (expr*{args} (expr (Name (str{id}{val=create_models}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=interactive}))) (expr (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=alias}))))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (With (expr{context_expr} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=transaction}))) (str{attr}{val=atomic}))) (keyword*{keywords} (keyword (str{arg}{val=using}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=alias})))) (keyword (str{arg}{val=savepoint}) (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=features}))) (str{attr}{val=can_rollback_ddl}))))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=app_name}))) (expr (Name (str{id}{val=model_list})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=manifest}))) (str{attr}{val=items}))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=model}))) (expr{iter} (Name (str{id}{val=model_list}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Num (int{n}{val=3})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=app_name}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=model}))) (str{attr}{val=_meta}))) (str{attr}{val=object_name})))))))))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=sql}))) (expr (Name (str{id}{val=references}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=creation}))) (str{attr}{val=sql_create_model}))) (expr*{args} (expr (Name (str{id}{val=model}))) (expr (Call (expr{func} (Name (str{id}{val=no_style}))))) (expr (Name (str{id}{val=seen_models}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=seen_models}))) (str{attr}{val=add}))) (expr*{args} (expr (Name (str{id}{val=model}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=created_models}))) (str{attr}{val=add}))) (expr*{args} (expr (Name (str{id}{val=model}))))))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=refto}))) (expr (Name (str{id}{val=refs})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=references}))) (str{attr}{val=items}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=pending_references}))) (str{attr}{val=setdefault}))) (expr*{args} (expr (Name (str{id}{val=refto}))) (expr (List (epsilon)))))) (str{attr}{val=extend}))) (expr*{args} (expr (Name (str{id}{val=refs}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=refto}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=seen_models})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sql}))) (str{attr}{val=extend}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=creation}))) (str{attr}{val=sql_for_pending_references}))) (expr*{args} (expr (Name (str{id}{val=refto}))) (expr (Call (expr{func} (Name (str{id}{val=no_style}))))) (expr (Name (str{id}{val=pending_references})))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sql}))) (str{attr}{val=extend}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=creation}))) (str{attr}{val=sql_for_pending_references}))) (expr*{args} (expr (Name (str{id}{val=model}))) (expr (Call (expr{func} (Name (str{id}{val=no_style}))))) (expr (Name (str{id}{val=pending_references})))))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (expr (Name (str{id}{val=sql})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=model}))) (str{attr}{val=_meta}))) (str{attr}{val=db_table}))))))))))
(root (For (expr{target} (Name (str{id}{val=statement}))) (expr{iter} (Name (str{id}{val=sql}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=cursor}))) (str{attr}{val=execute}))) (expr*{args} (expr (Name (str{id}{val=statement}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=tables}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=introspection}))) (str{attr}{val=table_name_converter}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=model}))) (str{attr}{val=_meta}))) (str{attr}{val=db_table})))))))))))
(root (TryFinally (stmt*{body} (stmt (Pass))) (stmt*{finalbody} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=cursor}))) (str{attr}{val=close})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cursor})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=cursor})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=app_name}))) (expr (Name (str{id}{val=model_list})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=manifest}))) (str{attr}{val=items}))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=model}))) (expr{iter} (Name (str{id}{val=model_list}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=model}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=created_models})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=custom_sql})))) (expr{value} (Call (expr{func} (Name (str{id}{val=custom_sql_for_model}))) (expr*{args} (expr (Name (str{id}{val=model}))) (expr (Call (expr{func} (Name (str{id}{val=no_style}))))) (expr (Name (str{id}{val=connection}))))))))
(root (If (expr{test} (Name (str{id}{val=custom_sql}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Num (int{n}{val=2})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=app_name}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=model}))) (str{attr}{val=_meta}))) (str{attr}{val=object_name})))))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (With (expr{context_expr} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=transaction}))) (str{attr}{val=atomic}))) (keyword*{keywords} (keyword (str{arg}{val=using}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=alias}))))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=sql}))) (expr{iter} (Name (str{id}{val=custom_sql}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=cursor}))) (str{attr}{val=execute}))) (expr*{args} (expr (Name (str{id}{val=sql}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=Exception}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stderr}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=app_name}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=model}))) (str{attr}{val=_meta}))) (str{attr}{val=object_name}))) (expr (Name (str{id}{val=e})))))))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=show_traceback}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=traceback}))) (str{attr}{val=print_exc})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Num (int{n}{val=3})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=app_name}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=model}))) (str{attr}{val=_meta}))) (str{attr}{val=object_name})))))))))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=app_name}))) (expr (Name (str{id}{val=model_list})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=manifest}))) (str{attr}{val=items}))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=model}))) (expr{iter} (Name (str{id}{val=model_list}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=model}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=created_models})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=index_sql})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=creation}))) (str{attr}{val=sql_indexes_for_model}))) (expr*{args} (expr (Name (str{id}{val=model}))) (expr (Call (expr{func} (Name (str{id}{val=no_style}))))))))))
(root (If (expr{test} (Name (str{id}{val=index_sql}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Num (int{n}{val=2})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=app_name}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=model}))) (str{attr}{val=_meta}))) (str{attr}{val=object_name})))))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (With (expr{context_expr} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=transaction}))) (str{attr}{val=atomic}))) (keyword*{keywords} (keyword (str{arg}{val=using}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=alias})))) (keyword (str{arg}{val=savepoint}) (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=features}))) (str{attr}{val=can_rollback_ddl}))))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=sql}))) (expr{iter} (Name (str{id}{val=index_sql}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=cursor}))) (str{attr}{val=execute}))) (expr*{args} (expr (Name (str{id}{val=sql}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=Exception}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stderr}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=app_name}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=model}))) (str{attr}{val=_meta}))) (str{attr}{val=object_name}))) (expr (Name (str{id}{val=e})))))))))))))
(root (TryFinally (stmt*{body} (stmt (Pass))) (stmt*{finalbody} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=cursor}))) (str{attr}{val=close})))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=load_initial_data}))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=app_label}))) (expr{iter} (Name (str{id}{val=app_labels}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=call_command}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_})))) (keyword*{keywords} (keyword (str{arg}{val=verbosity}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity})))) (keyword (str{arg}{val=database}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=alias})))) (keyword (str{arg}{val=skip_validation}) (expr{value} (Name (str{id}{val=True})))) (keyword (str{arg}{val=app_label}) (expr{value} (Name (str{id}{val=app_label})))) (keyword (str{arg}{val=hide_empty}) (expr{value} (Name (str{id}{val=True})))))))))
(root (Return (expr{value} (Name (str{id}{val=created_models})))))
(root (FunctionDef (str{name}{val=show_migration_list}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=connection}))) (expr (Name (str{id}{val=app_names})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=loader})))) (expr{value} (Call (expr{func} (Name (str{id}{val=MigrationLoader}))) (expr*{args} (expr (Name (str{id}{val=connection}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=graph})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=loader}))) (str{attr}{val=graph})))))
(root (If (expr{test} (Name (str{id}{val=app_names}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=invalid_apps})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=app_name}))) (expr{iter} (Name (str{id}{val=app_names}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=app_name}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=loader}))) (str{attr}{val=migrated_apps})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=invalid_apps}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=app_name}))))))))
(root (If (expr{test} (Name (str{id}{val=invalid_apps}))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=, }))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=invalid_apps})))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=app_names})))) (expr{value} (Call (expr{func} (Name (str{id}{val=sorted}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=loader}))) (str{attr}{val=migrated_apps}))))))))
(root (For (expr{target} (Name (str{id}{val=app_name}))) (expr{iter} (Name (str{id}{val=app_names}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (Name (str{id}{val=app_name}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style}))) (str{attr}{val=MIGRATE_LABEL}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=shown})))) (expr{value} (Call (expr{func} (Name (str{id}{val=set})))))))
(root (For (expr{target} (Name (str{id}{val=node}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=graph}))) (str{attr}{val=leaf_nodes}))) (expr*{args} (expr (Name (str{id}{val=app_name})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=plan_node}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=graph}))) (str{attr}{val=forwards_plan}))) (expr*{args} (expr (Name (str{id}{val=node})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=plan_node}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=shown})))))) (expr (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=plan_node}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=app_name}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=title})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=plan_node}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1})))))))))
(root (If (expr{test} (Attribute (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=graph}))) (str{attr}{val=nodes}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=plan_node}))))))) (str{attr}{val=replaces}))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=title}))) (operator{op} (Add)) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Attribute (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=graph}))) (str{attr}{val=nodes}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=plan_node}))))))) (str{attr}{val=replaces}))))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=plan_node}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=loader}))) (str{attr}{val=applied_migrations})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=title}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=title}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=shown}))) (str{attr}{val=add}))) (expr*{args} (expr (Name (str{id}{val=plan_node}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=shown}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style}))) (str{attr}{val=MIGRATE_FAILURE}))))))))
(root (Import (alias*{names} (alias (str{name}{val=argparse})))))
(root (Import (alias*{names} (alias (str{name}{val=warnings})))))
(root (ImportFrom (str{module}{val=django.core.management.base}) (alias*{names} (alias (str{name}{val=BaseCommand}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.deprecation}) (alias*{names} (alias (str{name}{val=RemovedInDjango19Warning}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=Command}) (expr*{bases} (expr (Name (str{id}{val=BaseCommand})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=help})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (FunctionDef (str{name}{val=add_arguments}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=parser})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=nargs}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=argparse}))) (str{attr}{val=REMAINDER})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=_STR:1_})))))))))
(root (FunctionDef (str{name}{val=handle}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=warnings}))) (str{attr}{val=warn}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=RemovedInDjango19Warning}))))))))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=translation}))) (int{level}{val=0})))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=translation}))) (str{attr}{val=activate}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=LANGUAGE_CODE}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=AttributeError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (ImportFrom (str{module}{val=django.core.servers.fastcgi}) (alias*{names} (alias (str{name}{val=runfastcgi}))) (int{level}{val=0})))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=runfastcgi}))) (expr*{args} (expr (Name (str{id}{val=args}))))))))
(root (FunctionDef (str{name}{val=usage}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=subcommand})))))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=django.core.servers.fastcgi}) (alias*{names} (alias (str{name}{val=FASTCGI_HELP}))) (int{level}{val=0})))
(root (Return (expr{value} (Name (str{id}{val=FASTCGI_HELP})))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=datetime}) (alias*{names} (alias (str{name}{val=datetime}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=errno})))))
(root (Import (alias*{names} (alias (str{name}{val=os})))))
(root (Import (alias*{names} (alias (str{name}{val=re})))))
(root (Import (alias*{names} (alias (str{name}{val=sys})))))
(root (Import (alias*{names} (alias (str{name}{val=socket})))))
(root (ImportFrom (str{module}{val=django.core.management.base}) (alias*{names} (alias (str{name}{val=BaseCommand})) (alias (str{name}{val=CommandError}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.servers.basehttp}) (alias*{names} (alias (str{name}{val=run})) (alias (str{name}{val=get_internal_wsgi_application}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.db}) (alias*{names} (alias (str{name}{val=connections})) (alias (str{name}{val=DEFAULT_DB_ALIAS}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.db.migrations.executor}) (alias*{names} (alias (str{name}{val=MigrationExecutor}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=autoreload}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.exceptions}) (alias*{names} (alias (str{name}{val=ImproperlyConfigured}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=naiveip_re})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_^(?: (?P<addr>     (?P<ipv4>\d{1,3}(?:\.\d{1,3}){3}) |         # IPv4 address     (?P<ipv6>\[[a-fA-F0-9:]+\]) |               # IPv6 address     (?P<fqdn>[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*) # FQDN ):)?(?P<port>\d+)$'_STR:0_'}))) (expr (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=X}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=DEFAULT_PORT})))) (expr{value} (Str (str{s}{val=_STR:2_})))))
(root (ClassDef (str{name}{val=Command}) (expr*{bases} (expr (Name (str{id}{val=BaseCommand})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=help})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=requires_system_checks})))) (expr{value} (Name (str{id}{val=False})))))
(root (FunctionDef (str{name}{val=add_arguments}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=parser})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=nargs}) (expr{value} (Str (str{s}{val=_STR:1_})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=_STR:2_})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:2_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=use_ipv6})))) (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=False})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Tells Django to use an IPv6 address.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:2_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:3_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=use_threading})))) (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=True})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Tells Django to NOT use threading.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:2_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:3_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=use_reloader})))) (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=True})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Tells Django to NOT use the auto-reloader.})))))))))
(root (FunctionDef (str{name}{val=get_handler}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=get_internal_wsgi_application})))))))
(root (FunctionDef (str{name}{val=handle}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=DEBUG}))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=ALLOWED_HOSTS})))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=use_ipv6})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=use_ipv6}))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=socket}))) (str{attr}{val=has_ipv6})))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_raw_ipv6})))) (expr{value} (Name (str{id}{val=False})))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=addr})))) (expr{value} (Str (str{s}{val=})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=port})))) (expr{value} (Name (str{id}{val=DEFAULT_PORT})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=m})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=match}))) (expr*{args} (expr (Name (str{id}{val=naiveip_re}))) (expr (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=m}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val="%s" is not a valid port number or address:port pair.}))) (operator{op} (Mod)) (expr{right} (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=addrport}))))))))))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=addr}))) (expr (Name (str{id}{val=_ipv4}))) (expr (Name (str{id}{val=_ipv6}))) (expr (Name (str{id}{val=_fqdn}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=port}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=m}))) (str{attr}{val=groups})))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=port}))) (str{attr}{val=isdigit}))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=port}))))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=addr}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=_ipv6}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=addr})))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=addr}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=1}))) (expr{upper} (Num (int{n}{val=-1})))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=use_ipv6})))) (expr{value} (Name (str{id}{val=True})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_raw_ipv6})))) (expr{value} (Name (str{id}{val=True})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=use_ipv6}))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=_fqdn})))))))) (stmt*{body} (stmt (Pass))))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=addr}))))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=addr}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=addr})))) (expr{value} (IfExp (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=use_ipv6}))) (expr{body} (Str (str{s}{val=_STR:0_}))) (expr{orelse} (Str (str{s}{val=_STR:1_})))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_raw_ipv6})))) (expr{value} (Call (expr{func} (Name (str{id}{val=bool}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=use_ipv6}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=run}))) (expr{kwargs} (Name (str{id}{val=options})))))))
(root (FunctionDef (str{name}{val=run}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=use_reloader})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Name (str{id}{val=use_reloader}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=autoreload}))) (str{attr}{val=main}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=inner_run}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=options}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=inner_run}))) (expr*{args} (expr (Name (str{id}{val=None})))) (expr{kwargs} (Name (str{id}{val=options})))))))
(root (FunctionDef (str{name}{val=inner_run}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=translation}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=threading})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=shutdown_message})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=quit_command})))) (expr{value} (IfExp (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=platform}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=win32})))))) (expr{body} (Str (str{s}{val=CTRL-BREAK}))) (expr{orelse} (Str (str{s}{val=CONTROL-C})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=validate}))) (keyword*{keywords} (keyword (str{arg}{val=display_num_errors}) (expr{value} (Name (str{id}{val=True})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=check_migrations})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ImproperlyConfigured}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=now})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=now}))))) (str{attr}{val=strftime}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=PY2}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=now})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=now}))) (str{attr}{val=decode}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=%(started_at)s\nDjango version %(version)s, using settings %(settings)r\nStarting development server at http://%(addr)s:%(port)s/\nQuit the server with %(quit_command)s.\n}))) (operator{op} (Mod)) (expr{right} (Dict (expr*{keys} (expr (Str (str{s}{val=started_at}))) (expr (Str (str{s}{val=version}))) (expr (Str (str{s}{val=settings}))) (expr (Str (str{s}{val=addr}))) (expr (Str (str{s}{val=port}))) (expr (Str (str{s}{val=quit_command})))) (expr*{values} (expr (Name (str{id}{val=now}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get_version}))))) (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=SETTINGS_MODULE}))) (expr (IfExp (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_raw_ipv6}))) (expr{body} (BinOp (expr{left} (Str (str{s}{val=[%s]}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=addr}))))) (expr{orelse} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=addr}))))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=port}))) (expr (Name (str{id}{val=quit_command})))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=translation}))) (str{attr}{val=activate}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=LANGUAGE_CODE}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=handler})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get_handler}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=options})))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=run}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=addr}))) (expr (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=port})))))) (expr (Name (str{id}{val=handler})))) (keyword*{keywords} (keyword (str{arg}{val=ipv6}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=use_ipv6})))) (keyword (str{arg}{val=threading}) (expr{value} (Name (str{id}{val=threading})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Attribute (expr{value} (Name (str{id}{val=socket}))) (str{attr}{val=error}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ERRORS})))) (expr{value} (Dict (expr*{keys} (expr (Attribute (expr{value} (Name (str{id}{val=errno}))) (str{attr}{val=EACCES}))) (expr (Attribute (expr{value} (Name (str{id}{val=errno}))) (str{attr}{val=EADDRINUSE}))) (expr (Attribute (expr{value} (Name (str{id}{val=errno}))) (str{attr}{val=EADDRNOTAVAIL})))) (expr*{values} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=That port is already in use.}))) (expr (Str (str{s}{val=That IP address can't be assigned-to.}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=error_text})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=ERRORS}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=errno})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=KeyError}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=error_text})))) (expr{value} (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Name (str{id}{val=e}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stderr}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=error_text}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=_exit}))) (expr*{args} (expr (Num (int{n}{val=1}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=KeyboardInterrupt}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Name (str{id}{val=shutdown_message}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (Name (str{id}{val=shutdown_message}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=exit}))) (expr*{args} (expr (Num (int{n}{val=0}))))))))
(root (FunctionDef (str{name}{val=check_migrations}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=executor})))) (expr{value} (Call (expr{func} (Name (str{id}{val=MigrationExecutor}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=connections}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=DEFAULT_DB_ALIAS}))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=plan})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=executor}))) (str{attr}{val=migration_plan}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=executor}))) (str{attr}{val=loader}))) (str{attr}{val=graph}))) (str{attr}{val=leaf_nodes}))))))))))
(root (If (expr{test} (Name (str{id}{val=plan}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style}))) (str{attr}{val=NOTICE}))) (expr*{args} (expr (Str (str{s}{val=\nYou have unapplied migrations; your app may not work properly until they are applied.})))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style}))) (str{attr}{val=NOTICE}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=BaseRunserverCommand})))) (expr{value} (Name (str{id}{val=Command})))))
(root (Import (alias*{names} (alias (str{name}{val=os})))))
(root (ImportFrom (str{module}{val=django.core.management.base}) (alias*{names} (alias (str{name}{val=BaseCommand}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=Command}) (expr*{bases} (expr (Name (str{id}{val=BaseCommand})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=help})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=requires_system_checks})))) (expr{value} (Name (str{id}{val=False})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=shells})))) (expr{value} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))))))))
(root (FunctionDef (str{name}{val=add_arguments}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=parser})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:1_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=_STR:2_})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Tells Django to use plain Python, not IPython or bpython.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:2_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=no_startup})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=When using plain Python, ignore the PYTHONSTARTUP environment variable and ~/.pythonrc.py script.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=_STR:3_})))) (keyword*{keywords} (keyword (str{arg}{val=choices}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=shells})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=interface})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Specify an interactive interpreter interface. Available options: "ipython" and "bpython"})))))))))
(root (FunctionDef (str{name}{val=_ipython_pre_011}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=IPython.Shell}) (alias*{names} (alias (str{name}{val=IPShell}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=shell})))) (expr{value} (Call (expr{func} (Name (str{id}{val=IPShell}))) (keyword*{keywords} (keyword (str{arg}{val=argv}) (expr{value} (List (epsilon)))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=shell}))) (str{attr}{val=mainloop})))))))
(root (FunctionDef (str{name}{val=_ipython_pre_100}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=IPython.frontend.terminal.ipapp}) (alias*{names} (alias (str{name}{val=TerminalIPythonApp}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=app})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=TerminalIPythonApp}))) (str{attr}{val=instance})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=app}))) (str{attr}{val=initialize}))) (keyword*{keywords} (keyword (str{arg}{val=argv}) (expr{value} (List (epsilon)))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=app}))) (str{attr}{val=start})))))))
(root (FunctionDef (str{name}{val=_ipython}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=IPython}) (alias*{names} (alias (str{name}{val=start_ipython}))) (int{level}{val=0})))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=start_ipython}))) (keyword*{keywords} (keyword (str{arg}{val=argv}) (expr{value} (List (epsilon)))))))))
(root (FunctionDef (str{name}{val=ipython}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=ip}))) (expr{iter} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_ipython}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_ipython_pre_100}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_ipython_pre_011})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=ip})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ImportError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (epsilon)))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ImportError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=bpython}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Import (alias*{names} (alias (str{name}{val=bpython})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=bpython}))) (str{attr}{val=embed})))))))
(root (FunctionDef (str{name}{val=run_shell}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=shell})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=available_shells})))) (expr{value} (IfExp (expr{test} (Name (str{id}{val=shell}))) (expr{body} (List (expr*{elts} (expr (Name (str{id}{val=shell})))))) (expr{orelse} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=shells})))))))
(root (For (expr{target} (Name (str{id}{val=shell}))) (expr{iter} (Name (str{id}{val=available_shells}))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Call (expr{func} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=shell}))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ImportError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (Raise (expr{type} (Name (str{id}{val=ImportError})))))
(root (FunctionDef (str{name}{val=handle}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Name (str{id}{val=ImportError})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=run_shell}))) (keyword*{keywords} (keyword (str{arg}{val=shell}) (expr{value} (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ImportError}))) (stmt*{body} (stmt (Pass)))))))
(root (Import (alias*{names} (alias (str{name}{val=code})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=imported_objects})))) (expr{value} (Dict (epsilon)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Import (alias*{names} (alias (str{name}{val=readline})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ImportError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Import (alias*{names} (alias (str{name}{val=rlcompleter})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=readline}))) (str{attr}{val=set_completer}))) (expr*{args} (expr (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=rlcompleter}))) (str{attr}{val=Completer}))) (expr*{args} (expr (Name (str{id}{val=imported_objects})))))) (str{attr}{val=complete}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=readline}))) (str{attr}{val=parse_and_bind}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=pythonrc}))) (expr{iter} (Tuple (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=environ}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (expr (Str (str{s}{val=~/.pythonrc.py})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=pythonrc}))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=pythonrc})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=expanduser}))) (expr*{args} (expr (Name (str{id}{val=pythonrc}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=isfile}))) (expr*{args} (expr (Name (str{id}{val=pythonrc})))))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (With (expr{context_expr} (Call (expr{func} (Name (str{id}{val=open}))) (expr*{args} (expr (Name (str{id}{val=pythonrc})))))) (expr{optional_vars} (Name (str{id}{val=handle}))) (stmt*{body} (stmt (Pass)))))
(root (Exec (expr{body} (Tuple (expr*{elts} (expr (Call (expr{func} (Name (str{id}{val=compile}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handle}))) (str{attr}{val=read}))))) (expr (Name (str{id}{val=pythonrc}))) (expr (Str (str{s}{val=_STR:0_})))))) (expr (Name (str{id}{val=imported_objects}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=NameError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=code}))) (str{attr}{val=interact}))) (keyword*{keywords} (keyword (str{arg}{val=local}) (expr{value} (Name (str{id}{val=imported_objects})))))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management.base}) (alias*{names} (alias (str{name}{val=AppCommand}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management.sql}) (alias*{names} (alias (str{name}{val=sql_create}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.db}) (alias*{names} (alias (str{name}{val=connections})) (alias (str{name}{val=DEFAULT_DB_ALIAS}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=Command}) (expr*{bases} (expr (Name (str{id}{val=AppCommand})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=help})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=output_transaction})))) (expr{value} (Name (str{id}{val=True})))))
(root (FunctionDef (str{name}{val=add_arguments}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=parser})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=Command}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=add_arguments}))) (expr*{args} (expr (Name (str{id}{val=parser}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=DEFAULT_DB_ALIAS})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Nominates a database to print the SQL for. Defaults to the "default" database.})))))))))
(root (FunctionDef (str{name}{val=handle_app_config}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=app_config})))) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=app_config}))) (str{attr}{val=models_module}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (epsilon)))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=connection})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=connections}))) (slice{slice} (Index (expr{value} (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=statements})))) (expr{value} (Call (expr{func} (Name (str{id}{val=sql_create}))) (expr*{args} (expr (Name (str{id}{val=app_config}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style}))) (expr (Name (str{id}{val=connection}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=\n}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=statements}))))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management.base}) (alias*{names} (alias (str{name}{val=AppCommand}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management.sql}) (alias*{names} (alias (str{name}{val=sql_all}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.db}) (alias*{names} (alias (str{name}{val=connections})) (alias (str{name}{val=DEFAULT_DB_ALIAS}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=Command}) (expr*{bases} (expr (Name (str{id}{val=AppCommand})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=help})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=output_transaction})))) (expr{value} (Name (str{id}{val=True})))))
(root (FunctionDef (str{name}{val=add_arguments}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=parser})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=Command}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=add_arguments}))) (expr*{args} (expr (Name (str{id}{val=parser}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=DEFAULT_DB_ALIAS})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Nominates a database to print the SQL for. Defaults to the "default" database.})))))))))
(root (FunctionDef (str{name}{val=handle_app_config}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=app_config})))) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=app_config}))) (str{attr}{val=models_module}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (epsilon)))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=connection})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=connections}))) (slice{slice} (Index (expr{value} (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=statements})))) (expr{value} (Call (expr{func} (Name (str{id}{val=sql_all}))) (expr*{args} (expr (Name (str{id}{val=app_config}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style}))) (expr (Name (str{id}{val=connection}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=\n}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=statements}))))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management.base}) (alias*{names} (alias (str{name}{val=AppCommand}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management.sql}) (alias*{names} (alias (str{name}{val=sql_delete}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.db}) (alias*{names} (alias (str{name}{val=connections})) (alias (str{name}{val=DEFAULT_DB_ALIAS}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=Command}) (expr*{bases} (expr (Name (str{id}{val=AppCommand})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=help})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=output_transaction})))) (expr{value} (Name (str{id}{val=True})))))
(root (FunctionDef (str{name}{val=add_arguments}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=parser})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=Command}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=add_arguments}))) (expr*{args} (expr (Name (str{id}{val=parser}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=DEFAULT_DB_ALIAS})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Nominates a database to print the SQL for. Defaults to the "default" database.})))))))))
(root (FunctionDef (str{name}{val=handle_app_config}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=app_config})))) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=app_config}))) (str{attr}{val=models_module}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (epsilon)))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=connection})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=connections}))) (slice{slice} (Index (expr{value} (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=statements})))) (expr{value} (Call (expr{func} (Name (str{id}{val=sql_delete}))) (expr*{args} (expr (Name (str{id}{val=app_config}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style}))) (expr (Name (str{id}{val=connection}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=\n}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=statements}))))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management.base}) (alias*{names} (alias (str{name}{val=AppCommand}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management.sql}) (alias*{names} (alias (str{name}{val=sql_custom}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.db}) (alias*{names} (alias (str{name}{val=connections})) (alias (str{name}{val=DEFAULT_DB_ALIAS}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=Command}) (expr*{bases} (expr (Name (str{id}{val=AppCommand})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=help})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=output_transaction})))) (expr{value} (Name (str{id}{val=True})))))
(root (FunctionDef (str{name}{val=add_arguments}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=parser})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=Command}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=add_arguments}))) (expr*{args} (expr (Name (str{id}{val=parser}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=DEFAULT_DB_ALIAS})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Nominates a database to print the SQL for. Defaults to the "default" database.})))))))))
(root (FunctionDef (str{name}{val=handle_app_config}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=app_config})))) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=app_config}))) (str{attr}{val=models_module}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (epsilon)))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=connection})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=connections}))) (slice{slice} (Index (expr{value} (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=statements})))) (expr{value} (Call (expr{func} (Name (str{id}{val=sql_custom}))) (expr*{args} (expr (Name (str{id}{val=app_config}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style}))) (expr (Name (str{id}{val=connection}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=\n}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=statements}))))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management.base}) (alias*{names} (alias (str{name}{val=AppCommand}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management.sql}) (alias*{names} (alias (str{name}{val=sql_destroy_indexes}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.db}) (alias*{names} (alias (str{name}{val=connections})) (alias (str{name}{val=DEFAULT_DB_ALIAS}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=Command}) (expr*{bases} (expr (Name (str{id}{val=AppCommand})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=help})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=output_transaction})))) (expr{value} (Name (str{id}{val=True})))))
(root (FunctionDef (str{name}{val=add_arguments}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=parser})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=Command}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=add_arguments}))) (expr*{args} (expr (Name (str{id}{val=parser}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=DEFAULT_DB_ALIAS})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Nominates a database to print the SQL for. Defaults to the "default" database.})))))))))
(root (FunctionDef (str{name}{val=handle_app_config}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=app_config})))) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=app_config}))) (str{attr}{val=models_module}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (epsilon)))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=connection})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=connections}))) (slice{slice} (Index (expr{value} (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=statements})))) (expr{value} (Call (expr{func} (Name (str{id}{val=sql_destroy_indexes}))) (expr*{args} (expr (Name (str{id}{val=app_config}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style}))) (expr (Name (str{id}{val=connection}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=\n}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=statements}))))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management.base}) (alias*{names} (alias (str{name}{val=BaseCommand}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management.sql}) (alias*{names} (alias (str{name}{val=sql_flush}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.db}) (alias*{names} (alias (str{name}{val=connections})) (alias (str{name}{val=DEFAULT_DB_ALIAS}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=Command}) (expr*{bases} (expr (Name (str{id}{val=BaseCommand})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=help})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=output_transaction})))) (expr{value} (Name (str{id}{val=True})))))
(root (FunctionDef (str{name}{val=add_arguments}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=parser})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=Command}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=add_arguments}))) (expr*{args} (expr (Name (str{id}{val=parser}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=DEFAULT_DB_ALIAS})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Nominates a database to print the SQL for. Defaults to the "default" database.})))))))))
(root (FunctionDef (str{name}{val=handle}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=\n}))) (str{attr}{val=join}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=sql_flush}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style}))) (expr (Subscript (expr{value} (Name (str{id}{val=connections}))) (slice{slice} (Index (expr{value} (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))))))) (keyword*{keywords} (keyword (str{arg}{val=only_django}) (expr{value} (Name (str{id}{val=True}))))))))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management.base}) (alias*{names} (alias (str{name}{val=AppCommand}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management.sql}) (alias*{names} (alias (str{name}{val=sql_indexes}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.db}) (alias*{names} (alias (str{name}{val=connections})) (alias (str{name}{val=DEFAULT_DB_ALIAS}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=Command}) (expr*{bases} (expr (Name (str{id}{val=AppCommand})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=help})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=output_transaction})))) (expr{value} (Name (str{id}{val=True})))))
(root (FunctionDef (str{name}{val=add_arguments}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=parser})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=Command}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=add_arguments}))) (expr*{args} (expr (Name (str{id}{val=parser}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=DEFAULT_DB_ALIAS})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Nominates a database to print the SQL for. Defaults to the "default" database.})))))))))
(root (FunctionDef (str{name}{val=handle_app_config}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=app_config})))) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=app_config}))) (str{attr}{val=models_module}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (epsilon)))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=connection})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=connections}))) (slice{slice} (Index (expr{value} (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=statements})))) (expr{value} (Call (expr{func} (Name (str{id}{val=sql_indexes}))) (expr*{args} (expr (Name (str{id}{val=app_config}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style}))) (expr (Name (str{id}{val=connection}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=\n}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=statements}))))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management.base}) (alias*{names} (alias (str{name}{val=BaseCommand})) (alias (str{name}{val=CommandError}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.db}) (alias*{names} (alias (str{name}{val=connections})) (alias (str{name}{val=DEFAULT_DB_ALIAS}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.db.migrations.executor}) (alias*{names} (alias (str{name}{val=MigrationExecutor}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.db.migrations.loader}) (alias*{names} (alias (str{name}{val=AmbiguityError}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=Command}) (expr*{bases} (expr (Name (str{id}{val=BaseCommand})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=help})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (FunctionDef (str{name}{val=add_arguments}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=parser})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=_STR:1_})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=_STR:1_})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=DEFAULT_DB_ALIAS})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Nominates a database to create SQL for. Defaults to the "default" database.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:1_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=_STR:2_})))) (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=False})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Creates SQL to unapply the migration, rather than to apply it})))))))))
(root (FunctionDef (str{name}{val=handle}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=connection})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=connections}))) (slice{slice} (Index (expr{value} (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=executor})))) (expr{value} (Call (expr{func} (Name (str{id}{val=MigrationExecutor}))) (expr*{args} (expr (Name (str{id}{val=connection}))))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=app_label}))) (expr (Name (str{id}{val=migration_name}))))))) (expr{value} (Tuple (expr*{elts} (expr (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (expr (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:1_}))))))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=app_label}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=executor}))) (str{attr}{val=loader}))) (str{attr}{val=migrated_apps})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=app_label}))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=migration})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=executor}))) (str{attr}{val=loader}))) (str{attr}{val=get_migration_by_prefix}))) (expr*{args} (expr (Name (str{id}{val=app_label}))) (expr (Name (str{id}{val=migration_name}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=AmbiguityError}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=migration_name}))) (expr (Name (str{id}{val=app_label})))))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=KeyError}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=migration_name}))) (expr (Name (str{id}{val=app_label})))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=targets})))) (expr{value} (List (expr*{elts} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=app_label}))) (expr (Attribute (expr{value} (Name (str{id}{val=migration}))) (str{attr}{val=name})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=plan})))) (expr{value} (List (expr*{elts} (expr (Tuple (expr*{elts} (expr (Subscript (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=executor}))) (str{attr}{val=loader}))) (str{attr}{val=graph}))) (str{attr}{val=nodes}))) (slice{slice} (Index (expr{value} (Subscript (expr{value} (Name (str{id}{val=targets}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))))))) (expr (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=sql_statements})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=executor}))) (str{attr}{val=collect_sql}))) (expr*{args} (expr (Name (str{id}{val=plan}))))))))
(root (For (expr{target} (Name (str{id}{val=statement}))) (expr{iter} (Name (str{id}{val=sql_statements}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (Name (str{id}{val=statement}))))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management.base}) (alias*{names} (alias (str{name}{val=AppCommand}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management.sql}) (alias*{names} (alias (str{name}{val=check_for_migrations}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.db}) (alias*{names} (alias (str{name}{val=connections})) (alias (str{name}{val=DEFAULT_DB_ALIAS}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=Command}) (expr*{bases} (expr (Name (str{id}{val=AppCommand})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=help})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=output_transaction})))) (expr{value} (Name (str{id}{val=True})))))
(root (FunctionDef (str{name}{val=add_arguments}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=parser})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=Command}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=add_arguments}))) (expr*{args} (expr (Name (str{id}{val=parser}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=DEFAULT_DB_ALIAS})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Nominates a database to print the SQL for. Defaults to the "default" database.})))))))))
(root (FunctionDef (str{name}{val=handle_app_config}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=app_config})))) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=app_config}))) (str{attr}{val=models_module}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (epsilon)))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=connection})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=connections}))) (slice{slice} (Index (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=check_for_migrations}))) (expr*{args} (expr (Name (str{id}{val=app_config}))) (expr (Name (str{id}{val=connection}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=models})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=app_config}))) (str{attr}{val=get_models}))) (keyword*{keywords} (keyword (str{arg}{val=include_auto_created}) (expr{value} (Name (str{id}{val=True})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=statements})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=ops}))) (str{attr}{val=sequence_reset_sql}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style}))) (expr (Name (str{id}{val=models}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=\n}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=statements}))))))))
(root (ImportFrom (str{module}{val=django.core.management.base}) (alias*{names} (alias (str{name}{val=BaseCommand})) (alias (str{name}{val=CommandError}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.db}) (alias*{names} (alias (str{name}{val=connections})) (alias (str{name}{val=DEFAULT_DB_ALIAS})) (alias (str{name}{val=migrations}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.db.migrations.loader}) (alias*{names} (alias (str{name}{val=AmbiguityError}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.db.migrations.executor}) (alias*{names} (alias (str{name}{val=MigrationExecutor}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.db.migrations.writer}) (alias*{names} (alias (str{name}{val=MigrationWriter}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.db.migrations.optimizer}) (alias*{names} (alias (str{name}{val=MigrationOptimizer}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=Command}) (expr*{bases} (expr (Name (str{id}{val=BaseCommand})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=help})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (FunctionDef (str{name}{val=add_arguments}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=parser})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=App label of the application to squash migrations for.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_})))) (keyword*{keywords} (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Migrations will be squashed until and including this migration.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:2_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=no_optimize})))) (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=False})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Do not try to optimize the squashed operations.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:2_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:3_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=interactive})))) (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=True})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Tells Django to NOT prompt the user for input of any kind.})))))))))
(root (FunctionDef (str{name}{val=handle}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=interactive})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=app_label}))) (expr (Name (str{id}{val=migration_name}))))))) (expr{value} (Tuple (expr*{elts} (expr (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (expr (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:1_}))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=executor})))) (expr{value} (Call (expr{func} (Name (str{id}{val=MigrationExecutor}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=connections}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=DEFAULT_DB_ALIAS}))))))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=app_label}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=executor}))) (str{attr}{val=loader}))) (str{attr}{val=migrated_apps})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=app_label}))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=migration})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=executor}))) (str{attr}{val=loader}))) (str{attr}{val=get_migration_by_prefix}))) (expr*{args} (expr (Name (str{id}{val=app_label}))) (expr (Name (str{id}{val=migration_name}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=AmbiguityError}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=migration_name}))) (expr (Name (str{id}{val=app_label})))))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=KeyError}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=migration_name}))) (expr (Name (str{id}{val=app_label})))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=migrations_to_squash})))) (expr{value} (ListComp (expr{elt} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=executor}))) (str{attr}{val=loader}))) (str{attr}{val=get_migration}))) (expr*{args} (expr (Name (str{id}{val=al}))) (expr (Name (str{id}{val=mn})))))) (comprehension*{generators} (comprehension (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=al}))) (expr (Name (str{id}{val=mn})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=executor}))) (str{attr}{val=loader}))) (str{attr}{val=graph}))) (str{attr}{val=forwards_plan}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=migration}))) (str{attr}{val=app_label}))) (expr (Attribute (expr{value} (Name (str{id}{val=migration}))) (str{attr}{val=name}))))))))) (expr*{ifs} (expr (Compare (expr{left} (Name (str{id}{val=al}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=migration}))) (str{attr}{val=app_label})))))))))))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=interactive})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style}))) (str{attr}{val=MIGRATE_HEADING}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (For (expr{target} (Name (str{id}{val=migration}))) (expr{iter} (Name (str{id}{val=migrations_to_squash}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val= - %s}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=migration}))) (str{attr}{val=name}))))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=interactive}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=answer})))) (expr{value} (Name (str{id}{val=None})))))
(root (While (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=answer}))))) (expr (Compare (expr{left} (Name (str{id}{val=answer}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=answer})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=moves}))) (str{attr}{val=input}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=answer}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=answer})))) (expr{value} (Str (str{s}{val=n})))))
(root (Break))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=answer})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=answer}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (str{attr}{val=lower})))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=answer}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Str (str{s}{val=y})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (epsilon)))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=operations})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=smigration}))) (expr{iter} (Name (str{id}{val=migrations_to_squash}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=operations}))) (str{attr}{val=extend}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=smigration}))) (str{attr}{val=operations}))))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style}))) (str{attr}{val=MIGRATE_HEADING}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=optimizer})))) (expr{value} (Call (expr{func} (Name (str{id}{val=MigrationOptimizer})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=new_operations})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=optimizer}))) (str{attr}{val=optimize}))) (expr*{args} (expr (Name (str{id}{val=operations}))) (expr (Attribute (expr{value} (Name (str{id}{val=migration}))) (str{attr}{val=app_label}))))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=new_operations})))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=operations}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=operations})))))) (expr (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=new_operations}))))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=replaces})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=migration}))) (expr{iter} (Name (str{id}{val=migrations_to_squash}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=migration}))) (str{attr}{val=replaces}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=replaces}))) (str{attr}{val=extend}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=migration}))) (str{attr}{val=replaces}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=replaces}))) (str{attr}{val=append}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=migration}))) (str{attr}{val=app_label}))) (expr (Attribute (expr{value} (Name (str{id}{val=migration}))) (str{attr}{val=name})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=subclass})))) (expr{value} (Call (expr{func} (Name (str{id}{val=type}))) (expr*{args} (expr (Str (str{s}{val=Migration}))) (expr (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=migrations}))) (str{attr}{val=Migration})))))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=dependencies}))) (expr (Str (str{s}{val=operations}))) (expr (Str (str{s}{val=replaces})))) (expr*{values} (expr (List (epsilon))) (expr (Name (str{id}{val=new_operations}))) (expr (Name (str{id}{val=replaces})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=new_migration})))) (expr{value} (Call (expr{func} (Name (str{id}{val=subclass}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=migration}))) (str{attr}{val=name}))))) (expr (Name (str{id}{val=app_label}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=writer})))) (expr{value} (Call (expr{func} (Name (str{id}{val=MigrationWriter}))) (expr*{args} (expr (Name (str{id}{val=new_migration}))))))))
(root (With (expr{context_expr} (Call (expr{func} (Name (str{id}{val=open}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=writer}))) (str{attr}{val=path}))) (expr (Str (str{s}{val=wb})))))) (expr{optional_vars} (Name (str{id}{val=fh}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=fh}))) (str{attr}{val=write}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=writer}))) (str{attr}{val=as_string}))))))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style}))) (str{attr}{val=MIGRATE_HEADING}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=writer}))) (str{attr}{val=path})))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (ImportFrom (str{module}{val=importlib}) (alias*{names} (alias (str{name}{val=import_module}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management.base}) (alias*{names} (alias (str{name}{val=CommandError}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management.templates}) (alias*{names} (alias (str{name}{val=TemplateCommand}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=Command}) (expr*{bases} (expr (Name (str{id}{val=TemplateCommand})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=help})))) (expr{value} (Str (str{s}{val=Creates a Django app directory structure for the given app name in the current directory or optionally in the given directory.})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=missing_args_message})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (FunctionDef (str{name}{val=handle}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=app_name}))) (expr (Name (str{id}{val=target}))))))) (expr{value} (Tuple (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_})))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=validate_name}))) (expr*{args} (expr (Name (str{id}{val=app_name}))) (expr (Str (str{s}{val=app}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=import_module}))) (expr*{args} (expr (Name (str{id}{val=app_name}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ImportError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=%r conflicts with the name of an existing Python module and cannot be used as an app name. Please try another name.}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=app_name}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=Command}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=handle}))) (expr*{args} (expr (Str (str{s}{val=_STR:2_}))) (expr (Name (str{id}{val=app_name}))) (expr (Name (str{id}{val=target})))) (expr{kwargs} (Name (str{id}{val=options})))))))
(root (ImportFrom (str{module}{val=importlib}) (alias*{names} (alias (str{name}{val=import_module}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management.base}) (alias*{names} (alias (str{name}{val=CommandError}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management.templates}) (alias*{names} (alias (str{name}{val=TemplateCommand}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.crypto}) (alias*{names} (alias (str{name}{val=get_random_string}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=Command}) (expr*{bases} (expr (Name (str{id}{val=TemplateCommand})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=help})))) (expr{value} (Str (str{s}{val=_STR:0_project name in the current directory or optionally in the given directory.})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=missing_args_message})))) (expr{value} (Str (str{s}{val=_STR:1_})))))
(root (FunctionDef (str{name}{val=handle}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=project_name}))) (expr (Name (str{id}{val=target}))))))) (expr{value} (Tuple (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=directory})))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=validate_name}))) (expr*{args} (expr (Name (str{id}{val=project_name}))) (expr (Str (str{s}{val=_STR:0_}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=import_module}))) (expr*{args} (expr (Name (str{id}{val=project_name}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ImportError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=%r conflicts with the name of an existing Python module and cannot be used as a project name. Please try another name.}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=project_name}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=chars})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_random_string}))) (expr*{args} (expr (Num (int{n}{val=50}))) (expr (Name (str{id}{val=chars}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=Command}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=handle}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=project_name}))) (expr (Name (str{id}{val=target})))) (expr{kwargs} (Name (str{id}{val=options})))))))
(root (Import (alias*{names} (alias (str{name}{val=warnings})))))
(root (ImportFrom (str{module}{val=django.apps}) (alias*{names} (alias (str{name}{val=apps}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.contrib.auth}) (alias*{names} (alias (str{name}{val=get_user_model}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.db}) (alias*{names} (alias (str{name}{val=DEFAULT_DB_ALIAS}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management}) (alias*{names} (alias (str{name}{val=call_command}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management.base}) (alias*{names} (alias (str{name}{val=BaseCommand}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.deprecation}) (alias*{names} (alias (str{name}{val=RemovedInDjango19Warning}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.six.moves}) (alias*{names} (alias (str{name}{val=input}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=Command}) (expr*{bases} (expr (Name (str{id}{val=BaseCommand})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=help})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (FunctionDef (str{name}{val=add_arguments}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=parser})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:1_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=interactive})))) (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=True})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Tells Django to NOT prompt the user for input of any kind.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:2_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:3_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=load_initial_data})))) (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=True})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Tells Django not to load any initial data after database synchronization.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:2_})))) (keyword*{keywords} (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=DEFAULT_DB_ALIAS})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Nominates a database to synchronize. Defaults to the "default" database.})))))))))
(root (FunctionDef (str{name}{val=handle}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=warnings}))) (str{attr}{val=warn}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=RemovedInDjango19Warning}))))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=call_command}))) (expr*{args} (expr (Str (str{s}{val=migrate})))) (expr{kwargs} (Name (str{id}{val=options})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=apps}))) (str{attr}{val=get_model}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=LookupError}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (epsilon)))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=UserModel})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_user_model})))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=UserModel}))) (str{attr}{val=_default_manager}))) (str{attr}{val=exists}))))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=msg})))) (expr{value} (Str (str{s}{val=\nYou have installed Django's auth system, and don't have any superusers defined.\nWould you like to create one now? (yes/no): })))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=confirm})))) (expr{value} (Call (expr{func} (Name (str{id}{val=input}))) (expr*{args} (expr (Name (str{id}{val=msg}))))))))
(root (While (expr{test} (Num (int{n}{val=1}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=confirm}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=confirm})))) (expr{value} (Call (expr{func} (Name (str{id}{val=input}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Continue))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=confirm}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=call_command}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=interactive}) (expr{value} (Name (str{id}{val=True})))) (keyword (str{arg}{val=database}) (expr{value} (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=database})))))))))))))
(root (Break))
(root (Import (alias*{names} (alias (str{name}{val=logging})))))
(root (Import (alias*{names} (alias (str{name}{val=sys})))))
(root (Import (alias*{names} (alias (str{name}{val=os})))))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management.base}) (alias*{names} (alias (str{name}{val=BaseCommand}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.test.utils}) (alias*{names} (alias (str{name}{val=get_runner}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=Command}) (expr*{bases} (expr (Name (str{id}{val=BaseCommand})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=help})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=requires_system_checks})))) (expr{value} (Name (str{id}{val=False})))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=test_runner})))) (expr{value} (Name (str{id}{val=None})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=Command}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__})))))))
(root (FunctionDef (str{name}{val=run_from_argv}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=argv})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=option})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (For (expr{target} (Name (str{id}{val=arg}))) (expr{iter} (Subscript (expr{value} (Name (str{id}{val=argv}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=2}))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=arg}))) (str{attr}{val=startswith}))) (expr*{args} (expr (Name (str{id}{val=option})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=test_runner})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=arg}))) (slice{slice} (Slice (expr{lower} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=option}))))))))))))
(root (Break))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=Command}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=run_from_argv}))) (expr*{args} (expr (Name (str{id}{val=argv}))))))))
(root (FunctionDef (str{name}{val=add_arguments}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=parser})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=metavar}) (expr{value} (Str (str{s}{val=_STR:1_})))) (keyword (str{arg}{val=nargs}) (expr{value} (Str (str{s}{val=_STR:2_})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Module paths to test; can be modulename, modulename.TestCase or modulename.TestCase.test_method})))))))))
(root (Expr (expr{value} (Tuple (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:2_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=_STR:3_})))) (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=True})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Tells Django to NOT prompt the user for input of any kind.}))))))))))))
(root (Expr (expr{value} (Tuple (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:2_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=_STR:3_})))) (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=False})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Tells Django to stop running the test suite after first failed test.}))))))))))))
(root (Expr (expr{value} (Tuple (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:2_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=_STR:3_})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Tells Django to use specified test runner class instead of the one specified by the TEST_RUNNER setting.}))))))))))))
(root (Expr (expr{value} (Tuple (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:2_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=_STR:3_})))) (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=None})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Overrides the default address where the live server (used with LiveServerTestCase) is expected to run from. The default value is localhost:8081.}))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=test_runner_class})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_runner}))) (expr*{args} (expr (Name (str{id}{val=settings}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=test_runner}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=test_runner_class}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=RuntimeError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_test management command has changed in Django 1.8. Please create an add_arguments class method to achieve this.}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=test_runner_class}))) (expr (Str (str{s}{val=_STR:1_})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=test_runner_class}))) (str{attr}{val=add_arguments}))) (expr*{args} (expr (Name (str{id}{val=parser}))))))))
(root (FunctionDef (str{name}{val=execute}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=logger})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=logging}))) (str{attr}{val=getLogger}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=handler})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=logging}))) (str{attr}{val=StreamHandler})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=logger}))) (str{attr}{val=addHandler}))) (expr*{args} (expr (Name (str{id}{val=handler}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=Command}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=execute}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=options})))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=logger}))) (str{attr}{val=removeHandler}))) (expr*{args} (expr (Name (str{id}{val=handler}))))))))
(root (FunctionDef (str{name}{val=handle}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=test_labels}) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.test.utils}) (alias*{names} (alias (str{name}{val=get_runner}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=TestRunner})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_runner}))) (expr*{args} (expr (Name (str{id}{val=settings}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=environ}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:1_})))))))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (Delete (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=test_runner})))) (expr{value} (Call (expr{func} (Name (str{id}{val=TestRunner}))) (expr{kwargs} (Name (str{id}{val=options})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=failures})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=test_runner}))) (str{attr}{val=run_tests}))) (expr*{args} (expr (Name (str{id}{val=test_labels}))))))))
(root (If (expr{test} (Name (str{id}{val=failures}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=exit}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=bool}))) (expr*{args} (expr (Name (str{id}{val=failures})))))))))))
(root (ImportFrom (str{module}{val=django.core.management}) (alias*{names} (alias (str{name}{val=call_command}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management.base}) (alias*{names} (alias (str{name}{val=BaseCommand}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.db}) (alias*{names} (alias (str{name}{val=connection}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=Command}) (expr*{bases} (expr (Name (str{id}{val=BaseCommand})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=help})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=args})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=requires_system_checks})))) (expr{value} (Name (str{id}{val=False})))))
(root (FunctionDef (str{name}{val=add_arguments}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=parser})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=metavar}) (expr{value} (Str (str{s}{val=_STR:1_})))) (keyword (str{arg}{val=nargs}) (expr{value} (Str (str{s}{val=_STR:2_})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=_STR:3_})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:1_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=_STR:2_})))) (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=True})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Tells Django to NOT prompt the user for input of any kind.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_})))) (keyword*{keywords} (keyword (str{arg}{val=default}) (expr{value} (Str (str{s}{val=})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=_STR:2_})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_})))) (keyword*{keywords} (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:2_})))) (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=_STR:3_})))) (keyword (str{arg}{val=default}) (expr{value} (Name (str{id}{val=False})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Tells Django to use an IPv6 address.})))))))))
(root (FunctionDef (str{name}{val=handle}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=fixture_labels}) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=verbosity})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=interactive})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=db_name})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=creation}))) (str{attr}{val=create_test_db}))) (keyword*{keywords} (keyword (str{arg}{val=verbosity}) (expr{value} (Name (str{id}{val=verbosity})))) (keyword (str{arg}{val=autoclobber}) (expr{value} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=interactive})))))) (keyword (str{arg}{val=serialize}) (expr{value} (Name (str{id}{val=False})))))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=call_command}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (expr{starargs} (Name (str{id}{val=fixture_labels}))) (expr{kwargs} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:1_})))) (expr*{values} (expr (Name (str{id}{val=verbosity}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=shutdown_message})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:1_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=db_name})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=use_threading})))) (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=features}))) (str{attr}{val=test_db_allows_multiple_connections})))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=call_command}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=addrport}) (expr{value} (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:1_})))))))) (keyword (str{arg}{val=shutdown_message}) (expr{value} (Name (str{id}{val=shutdown_message})))) (keyword (str{arg}{val=use_reloader}) (expr{value} (Name (str{id}{val=False})))) (keyword (str{arg}{val=use_ipv6}) (expr{value} (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=use_ipv6})))))))) (keyword (str{arg}{val=use_threading}) (expr{value} (Name (str{id}{val=use_threading})))))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=warnings})))))
(root (ImportFrom (str{module}{val=django.core.management.commands.check}) (alias*{names} (alias (str{name}{val=Command}) (str{asname}{val=CheckCommand}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.deprecation}) (alias*{names} (alias (str{name}{val=RemovedInDjango19Warning}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=Command}) (expr*{bases} (expr (Name (str{id}{val=CheckCommand})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=help})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Add)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=CheckCommand}))) (str{attr}{val=help})))))))
(root (FunctionDef (str{name}{val=handle}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=warnings}))) (str{attr}{val=warn}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=RemovedInDjango19Warning}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=Command}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=handle}))) (expr{kwargs} (Name (str{id}{val=options})))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=codecs})))))
(root (Import (alias*{names} (alias (str{name}{val=os})))))
(root (Import (alias*{names} (alias (str{name}{val=re})))))
(root (Import (alias*{names} (alias (str{name}{val=warnings})))))
(root (ImportFrom (str{module}{val=django.apps}) (alias*{names} (alias (str{name}{val=apps}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management.base}) (alias*{names} (alias (str{name}{val=CommandError}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.db}) (alias*{names} (alias (str{name}{val=models})) (alias (str{name}{val=router}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.deprecation}) (alias*{names} (alias (str{name}{val=RemovedInDjango19Warning}))) (int{level}{val=0})))
(root (FunctionDef (str{name}{val=check_for_migrations}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=app_config}))) (expr (Name (str{id}{val=connection})))))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=django.db.migrations.loader}) (alias*{names} (alias (str{name}{val=MigrationLoader}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=loader})))) (expr{value} (Call (expr{func} (Name (str{id}{val=MigrationLoader}))) (expr*{args} (expr (Name (str{id}{val=connection}))))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=app_config}))) (str{attr}{val=label}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=loader}))) (str{attr}{val=migrated_apps})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=app_config}))) (str{attr}{val=label}))))))))))
(root (FunctionDef (str{name}{val=sql_create}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=app_config}))) (expr (Name (str{id}{val=style}))) (expr (Name (str{id}{val=connection})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=check_for_migrations}))) (expr*{args} (expr (Name (str{id}{val=app_config}))) (expr (Name (str{id}{val=connection}))))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=settings_dict}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:1_})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=because you haven't properly specified the ENGINE setting for the database.\n}))))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=see: https://docs.djangoproject.com/en/dev/ref/settings/#databases}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=app_models})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=app_config}))) (str{attr}{val=get_models}))) (keyword*{keywords} (keyword (str{arg}{val=include_auto_created}) (expr{value} (Name (str{id}{val=True})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=final_output})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=tables})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=introspection}))) (str{attr}{val=table_names})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=known_models})))) (expr{value} (Call (expr{func} (Name (str{id}{val=set}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Name (str{id}{val=model}))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=model}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=introspection}))) (str{attr}{val=installed_models}))) (expr*{args} (expr (Name (str{id}{val=tables})))))) (expr*{ifs} (expr (Compare (expr{left} (Name (str{id}{val=model}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=app_models}))))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=pending_references})))) (expr{value} (Dict (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=model}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=router}))) (str{attr}{val=get_migratable_models}))) (expr*{args} (expr (Name (str{id}{val=app_config}))) (expr (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=alias})))) (keyword*{keywords} (keyword (str{arg}{val=include_auto_created}) (expr{value} (Name (str{id}{val=True}))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=output}))) (expr (Name (str{id}{val=references}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=creation}))) (str{attr}{val=sql_create_model}))) (expr*{args} (expr (Name (str{id}{val=model}))) (expr (Name (str{id}{val=style}))) (expr (Name (str{id}{val=known_models}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=final_output}))) (str{attr}{val=extend}))) (expr*{args} (expr (Name (str{id}{val=output}))))))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=refto}))) (expr (Name (str{id}{val=refs})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=references}))) (str{attr}{val=items}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=pending_references}))) (str{attr}{val=setdefault}))) (expr*{args} (expr (Name (str{id}{val=refto}))) (expr (List (epsilon)))))) (str{attr}{val=extend}))) (expr*{args} (expr (Name (str{id}{val=refs}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=refto}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=known_models})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=final_output}))) (str{attr}{val=extend}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=creation}))) (str{attr}{val=sql_for_pending_references}))) (expr*{args} (expr (Name (str{id}{val=refto}))) (expr (Name (str{id}{val=style}))) (expr (Name (str{id}{val=pending_references})))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=final_output}))) (str{attr}{val=extend}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=creation}))) (str{attr}{val=sql_for_pending_references}))) (expr*{args} (expr (Name (str{id}{val=model}))) (expr (Name (str{id}{val=style}))) (expr (Name (str{id}{val=pending_references})))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=known_models}))) (str{attr}{val=add}))) (expr*{args} (expr (Name (str{id}{val=model}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=not_installed_models})))) (expr{value} (Call (expr{func} (Name (str{id}{val=set}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=pending_references}))) (str{attr}{val=keys}))))))))))
(root (If (expr{test} (Name (str{id}{val=not_installed_models}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=alter_sql})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=model}))) (expr{iter} (Name (str{id}{val=not_installed_models}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=alter_sql}))) (str{attr}{val=extend}))) (expr*{args} (expr (ListComp (expr{elt} (BinOp (expr{left} (Str (str{s}{val=-- }))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=sql}))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=sql}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=creation}))) (str{attr}{val=sql_for_pending_references}))) (expr*{args} (expr (Name (str{id}{val=model}))) (expr (Name (str{id}{val=style}))) (expr (Name (str{id}{val=pending_references})))))))))))))))
(root (If (expr{test} (Name (str{id}{val=alter_sql}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=final_output}))) (str{attr}{val=append}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=final_output}))) (str{attr}{val=extend}))) (expr*{args} (expr (Name (str{id}{val=alter_sql}))))))))
(root (Return (expr{value} (Name (str{id}{val=final_output})))))
(root (FunctionDef (str{name}{val=sql_delete}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=app_config}))) (expr (Name (str{id}{val=style}))) (expr (Name (str{id}{val=connection}))) (expr (Name (str{id}{val=close_connection})))) (expr*{defaults} (expr (Name (str{id}{val=True})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=check_for_migrations}))) (expr*{args} (expr (Name (str{id}{val=app_config}))) (expr (Name (str{id}{val=connection}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cursor})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=cursor})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=Exception}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cursor})))) (expr{value} (Name (str{id}{val=None})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Name (str{id}{val=cursor}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=table_names})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=introspection}))) (str{attr}{val=table_names}))) (expr*{args} (expr (Name (str{id}{val=cursor}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=table_names})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=output})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=to_delete})))) (expr{value} (Call (expr{func} (Name (str{id}{val=set})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=references_to_delete})))) (expr{value} (Dict (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=app_models})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=router}))) (str{attr}{val=get_migratable_models}))) (expr*{args} (expr (Name (str{id}{val=app_config}))) (expr (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=alias})))) (keyword*{keywords} (keyword (str{arg}{val=include_auto_created}) (expr{value} (Name (str{id}{val=True})))))))))
(root (For (expr{target} (Name (str{id}{val=model}))) (expr{iter} (Name (str{id}{val=app_models}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=cursor}))) (expr (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=introspection}))) (str{attr}{val=table_name_converter}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=model}))) (str{attr}{val=_meta}))) (str{attr}{val=db_table})))))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=table_names}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=opts})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=model}))) (str{attr}{val=_meta})))))
(root (For (expr{target} (Name (str{id}{val=f}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=opts}))) (str{attr}{val=local_fields}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=rel}))) (expr (Compare (expr{left} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=rel}))) (str{attr}{val=to}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=to_delete}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=references_to_delete}))) (str{attr}{val=setdefault}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=rel}))) (str{attr}{val=to}))) (expr (List (epsilon)))))) (str{attr}{val=append}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=model}))) (expr (Name (str{id}{val=f})))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=to_delete}))) (str{attr}{val=add}))) (expr*{args} (expr (Name (str{id}{val=model}))))))))
(root (For (expr{target} (Name (str{id}{val=model}))) (expr{iter} (Name (str{id}{val=app_models}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=introspection}))) (str{attr}{val=table_name_converter}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=model}))) (str{attr}{val=_meta}))) (str{attr}{val=db_table})))))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=table_names})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=output}))) (str{attr}{val=extend}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=creation}))) (str{attr}{val=sql_destroy_model}))) (expr*{args} (expr (Name (str{id}{val=model}))) (expr (Name (str{id}{val=references_to_delete}))) (expr (Name (str{id}{val=style})))))))))))
(root (TryFinally (stmt*{body} (stmt (Pass))) (stmt*{finalbody} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=cursor}))) (expr (Name (str{id}{val=close_connection})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=cursor}))) (str{attr}{val=close})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=close})))))))
(root (Return (expr{value} (Subscript (expr{value} (Name (str{id}{val=output}))) (slice{slice} (Slice (expr{step} (Num (int{n}{val=-1})))))))))
(root (FunctionDef (str{name}{val=sql_flush}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=style}))) (expr (Name (str{id}{val=connection}))) (expr (Name (str{id}{val=only_django}))) (expr (Name (str{id}{val=reset_sequences}))) (expr (Name (str{id}{val=allow_cascade})))) (expr*{defaults} (expr (Name (str{id}{val=False}))) (expr (Name (str{id}{val=True}))) (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=only_django}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=tables})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=introspection}))) (str{attr}{val=django_table_names}))) (keyword*{keywords} (keyword (str{arg}{val=only_existing}) (expr{value} (Name (str{id}{val=True})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=tables})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=introspection}))) (str{attr}{val=table_names})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=seqs})))) (expr{value} (IfExp (expr{test} (Name (str{id}{val=reset_sequences}))) (expr{body} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=introspection}))) (str{attr}{val=sequence_list}))))) (expr{orelse} (Tuple (epsilon)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=statements})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=ops}))) (str{attr}{val=sql_flush}))) (expr*{args} (expr (Name (str{id}{val=style}))) (expr (Name (str{id}{val=tables}))) (expr (Name (str{id}{val=seqs}))) (expr (Name (str{id}{val=allow_cascade}))))))))
(root (Return (expr{value} (Name (str{id}{val=statements})))))
(root (FunctionDef (str{name}{val=sql_custom}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=app_config}))) (expr (Name (str{id}{val=style}))) (expr (Name (str{id}{val=connection})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=check_for_migrations}))) (expr*{args} (expr (Name (str{id}{val=app_config}))) (expr (Name (str{id}{val=connection}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=output})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=app_models})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=router}))) (str{attr}{val=get_migratable_models}))) (expr*{args} (expr (Name (str{id}{val=app_config}))) (expr (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=alias}))))))))
(root (For (expr{target} (Name (str{id}{val=model}))) (expr{iter} (Name (str{id}{val=app_models}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=output}))) (str{attr}{val=extend}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=custom_sql_for_model}))) (expr*{args} (expr (Name (str{id}{val=model}))) (expr (Name (str{id}{val=style}))) (expr (Name (str{id}{val=connection})))))))))))
(root (Return (expr{value} (Name (str{id}{val=output})))))
(root (FunctionDef (str{name}{val=sql_indexes}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=app_config}))) (expr (Name (str{id}{val=style}))) (expr (Name (str{id}{val=connection})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=check_for_migrations}))) (expr*{args} (expr (Name (str{id}{val=app_config}))) (expr (Name (str{id}{val=connection}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=output})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=model}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=router}))) (str{attr}{val=get_migratable_models}))) (expr*{args} (expr (Name (str{id}{val=app_config}))) (expr (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=alias})))) (keyword*{keywords} (keyword (str{arg}{val=include_auto_created}) (expr{value} (Name (str{id}{val=True}))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=output}))) (str{attr}{val=extend}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=creation}))) (str{attr}{val=sql_indexes_for_model}))) (expr*{args} (expr (Name (str{id}{val=model}))) (expr (Name (str{id}{val=style})))))))))))
(root (Return (expr{value} (Name (str{id}{val=output})))))
(root (FunctionDef (str{name}{val=sql_destroy_indexes}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=app_config}))) (expr (Name (str{id}{val=style}))) (expr (Name (str{id}{val=connection})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=check_for_migrations}))) (expr*{args} (expr (Name (str{id}{val=app_config}))) (expr (Name (str{id}{val=connection}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=output})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=model}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=router}))) (str{attr}{val=get_migratable_models}))) (expr*{args} (expr (Name (str{id}{val=app_config}))) (expr (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=alias})))) (keyword*{keywords} (keyword (str{arg}{val=include_auto_created}) (expr{value} (Name (str{id}{val=True}))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=output}))) (str{attr}{val=extend}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=creation}))) (str{attr}{val=sql_destroy_indexes_for_model}))) (expr*{args} (expr (Name (str{id}{val=model}))) (expr (Name (str{id}{val=style})))))))))))
(root (Return (expr{value} (Name (str{id}{val=output})))))
(root (FunctionDef (str{name}{val=sql_all}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=app_config}))) (expr (Name (str{id}{val=style}))) (expr (Name (str{id}{val=connection})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=check_for_migrations}))) (expr*{args} (expr (Name (str{id}{val=app_config}))) (expr (Name (str{id}{val=connection}))))))))
(root (Return (expr{value} (BinOp (expr{left} (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=sql_create}))) (expr*{args} (expr (Name (str{id}{val=app_config}))) (expr (Name (str{id}{val=style}))) (expr (Name (str{id}{val=connection})))))) (operator{op} (Add)) (expr{right} (Call (expr{func} (Name (str{id}{val=sql_custom}))) (expr*{args} (expr (Name (str{id}{val=app_config}))) (expr (Name (str{id}{val=style}))) (expr (Name (str{id}{val=connection})))))))) (operator{op} (Add)) (expr{right} (Call (expr{func} (Name (str{id}{val=sql_indexes}))) (expr*{args} (expr (Name (str{id}{val=app_config}))) (expr (Name (str{id}{val=style}))) (expr (Name (str{id}{val=connection}))))))))))
(root (FunctionDef (str{name}{val=_split_statements}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=content})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=comment_re})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=statements})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=statement})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=line}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=content}))) (str{attr}{val=split}))) (expr*{args} (expr (Str (str{s}{val=\n})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cleaned_line})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=comment_re}))) (str{attr}{val=sub}))) (expr*{args} (expr (Str (str{s}{val=\1}))) (expr (Name (str{id}{val=line})))))) (str{attr}{val=strip})))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=cleaned_line}))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=statement}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=cleaned_line}))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=cleaned_line}))) (str{attr}{val=endswith}))) (expr*{args} (expr (Str (str{s}{val=;})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=statements}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val= }))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=statement})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=statement})))) (expr{value} (List (epsilon)))))
(root (Return (expr{value} (Name (str{id}{val=statements})))))
(root (FunctionDef (str{name}{val=custom_sql_for_model}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=model}))) (expr (Name (str{id}{val=style}))) (expr (Name (str{id}{val=connection})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=opts})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=model}))) (str{attr}{val=_meta})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=app_dirs})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=app_dir})))) (expr{value} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=apps}))) (str{attr}{val=get_app_config}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=model}))) (str{attr}{val=_meta}))) (str{attr}{val=app_label})))))) (str{attr}{val=path})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=app_dirs}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=normpath}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=app_dir}))) (expr (Str (str{s}{val=_STR:0_}))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=old_app_dir})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=normpath}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=app_dir}))) (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=exists}))) (expr*{args} (expr (Name (str{id}{val=old_app_dir})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=warnings}))) (str{attr}{val=warn}))) (expr*{args} (expr (Str (str{s}{val=Custom SQL location '<app_label>/models/sql' is deprecated, use '<app_label>/sql' instead.}))) (expr (Name (str{id}{val=RemovedInDjango19Warning}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=app_dirs}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=old_app_dir}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=output})))) (expr{value} (List (epsilon)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=opts}))) (str{attr}{val=managed}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=post_sql_fields})))) (expr{value} (ListComp (expr{elt} (Name (str{id}{val=f}))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=f}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=opts}))) (str{attr}{val=local_fields}))) (expr*{ifs} (expr (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=f}))) (expr (Str (str{s}{val=_STR:0_})))))))))))))
(root (For (expr{target} (Name (str{id}{val=f}))) (expr{iter} (Name (str{id}{val=post_sql_fields}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=output}))) (str{attr}{val=extend}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=post_create_sql}))) (expr*{args} (expr (Name (str{id}{val=style}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=model}))) (str{attr}{val=_meta}))) (str{attr}{val=db_table})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=backend_name})))) (expr{value} (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=settings_dict}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:1_}))))))) (str{attr}{val=split}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=-1})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=sql_files})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=app_dir}))) (expr{iter} (Name (str{id}{val=app_dirs}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sql_files}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=app_dir}))) (expr (BinOp (expr{left} (Str (str{s}{val=%s.%s.sql}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=opts}))) (str{attr}{val=model_name}))) (expr (Name (str{id}{val=backend_name}))))))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sql_files}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=app_dir}))) (expr (BinOp (expr{left} (Str (str{s}{val=%s.sql}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=opts}))) (str{attr}{val=model_name})))))))))))))
(root (For (expr{target} (Name (str{id}{val=sql_file}))) (expr{iter} (Name (str{id}{val=sql_files}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=exists}))) (expr*{args} (expr (Name (str{id}{val=sql_file})))))) (stmt*{body} (stmt (Pass)))))
(root (With (expr{context_expr} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=codecs}))) (str{attr}{val=open}))) (expr*{args} (expr (Name (str{id}{val=sql_file}))) (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=encoding}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=FILE_CHARSET}))))))) (expr{optional_vars} (Name (str{id}{val=fp}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=output}))) (str{attr}{val=extend}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=connection}))) (str{attr}{val=ops}))) (str{attr}{val=prepare_sql_script}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=fp}))) (str{attr}{val=read})))))) (keyword*{keywords} (keyword (str{arg}{val=_allow_fallback}) (expr{value} (Name (str{id}{val=True}))))))))))))
(root (Return (expr{value} (Name (str{id}{val=output})))))
(root (FunctionDef (str{name}{val=emit_pre_migrate_signal}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=create_models}))) (expr (Name (str{id}{val=verbosity}))) (expr (Name (str{id}{val=interactive}))) (expr (Name (str{id}{val=db})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=app_config}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=apps}))) (str{attr}{val=get_app_configs}))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=app_config}))) (str{attr}{val=models_module}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=verbosity}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Num (int{n}{val=2})))))) (stmt*{body} (stmt (Pass)))))
(root (Print (expr*{values} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=app_config}))) (str{attr}{val=label})))))) (bool{nl}{val=True})))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=models}))) (str{attr}{val=signals}))) (str{attr}{val=pre_migrate}))) (str{attr}{val=send}))) (keyword*{keywords} (keyword (str{arg}{val=sender}) (expr{value} (Name (str{id}{val=app_config})))) (keyword (str{arg}{val=app_config}) (expr{value} (Name (str{id}{val=app_config})))) (keyword (str{arg}{val=verbosity}) (expr{value} (Name (str{id}{val=verbosity})))) (keyword (str{arg}{val=interactive}) (expr{value} (Name (str{id}{val=interactive})))) (keyword (str{arg}{val=using}) (expr{value} (Name (str{id}{val=db})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=models}))) (str{attr}{val=signals}))) (str{attr}{val=pre_syncdb}))) (str{attr}{val=send}))) (keyword*{keywords} (keyword (str{arg}{val=sender}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=app_config}))) (str{attr}{val=models_module})))) (keyword (str{arg}{val=app}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=app_config}))) (str{attr}{val=models_module})))) (keyword (str{arg}{val=create_models}) (expr{value} (Name (str{id}{val=create_models})))) (keyword (str{arg}{val=verbosity}) (expr{value} (Name (str{id}{val=verbosity})))) (keyword (str{arg}{val=interactive}) (expr{value} (Name (str{id}{val=interactive})))) (keyword (str{arg}{val=db}) (expr{value} (Name (str{id}{val=db})))))))))
(root (FunctionDef (str{name}{val=emit_post_migrate_signal}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=created_models}))) (expr (Name (str{id}{val=verbosity}))) (expr (Name (str{id}{val=interactive}))) (expr (Name (str{id}{val=db})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=app_config}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=apps}))) (str{attr}{val=get_app_configs}))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=app_config}))) (str{attr}{val=models_module}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=verbosity}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Num (int{n}{val=2})))))) (stmt*{body} (stmt (Pass)))))
(root (Print (expr*{values} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=app_config}))) (str{attr}{val=label})))))) (bool{nl}{val=True})))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=models}))) (str{attr}{val=signals}))) (str{attr}{val=post_migrate}))) (str{attr}{val=send}))) (keyword*{keywords} (keyword (str{arg}{val=sender}) (expr{value} (Name (str{id}{val=app_config})))) (keyword (str{arg}{val=app_config}) (expr{value} (Name (str{id}{val=app_config})))) (keyword (str{arg}{val=verbosity}) (expr{value} (Name (str{id}{val=verbosity})))) (keyword (str{arg}{val=interactive}) (expr{value} (Name (str{id}{val=interactive})))) (keyword (str{arg}{val=using}) (expr{value} (Name (str{id}{val=db})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=models}))) (str{attr}{val=signals}))) (str{attr}{val=post_syncdb}))) (str{attr}{val=send}))) (keyword*{keywords} (keyword (str{arg}{val=sender}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=app_config}))) (str{attr}{val=models_module})))) (keyword (str{arg}{val=app}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=app_config}))) (str{attr}{val=models_module})))) (keyword (str{arg}{val=created_models}) (expr{value} (Name (str{id}{val=created_models})))) (keyword (str{arg}{val=verbosity}) (expr{value} (Name (str{id}{val=verbosity})))) (keyword (str{arg}{val=interactive}) (expr{value} (Name (str{id}{val=interactive})))) (keyword (str{arg}{val=db}) (expr{value} (Name (str{id}{val=db})))))))))
(root (Import (alias*{names} (alias (str{name}{val=cgi})))))
(root (Import (alias*{names} (alias (str{name}{val=errno})))))
(root (Import (alias*{names} (alias (str{name}{val=mimetypes})))))
(root (Import (alias*{names} (alias (str{name}{val=os})))))
(root (Import (alias*{names} (alias (str{name}{val=posixpath})))))
(root (Import (alias*{names} (alias (str{name}{val=re})))))
(root (Import (alias*{names} (alias (str{name}{val=shutil})))))
(root (Import (alias*{names} (alias (str{name}{val=stat})))))
(root (Import (alias*{names} (alias (str{name}{val=sys})))))
(root (Import (alias*{names} (alias (str{name}{val=tempfile})))))
(root (ImportFrom (str{module}{val=os}) (alias*{names} (alias (str{name}{val=path}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=django})))))
(root (ImportFrom (str{module}{val=django.template}) (alias*{names} (alias (str{name}{val=Template})) (alias (str{name}{val=Context}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=archive}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.six.moves.urllib.request}) (alias*{names} (alias (str{name}{val=urlretrieve}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils._os}) (alias*{names} (alias (str{name}{val=rmtree_errorhandler}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management.base}) (alias*{names} (alias (str{name}{val=BaseCommand})) (alias (str{name}{val=CommandError}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management.utils}) (alias*{names} (alias (str{name}{val=handle_extensions}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_drive_re})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=I}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_url_drive_re})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=I}))))))))
(root (ClassDef (str{name}{val=TemplateCommand}) (expr*{bases} (expr (Name (str{id}{val=BaseCommand})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=requires_system_checks})))) (expr{value} (Name (str{id}{val=False})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=can_import_settings})))) (expr{value} (Name (str{id}{val=False})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=url_schemes})))) (expr{value} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=leave_locale_alone})))) (expr{value} (Name (str{id}{val=True})))))
(root (FunctionDef (str{name}{val=add_arguments}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=parser})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=_STR:1_})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=nargs}) (expr{value} (Str (str{s}{val=_STR:1_})))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=Optional destination directory})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=_STR:1_})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_})))) (keyword*{keywords} (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=_STR:2_})))) (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=append})))) (keyword (str{arg}{val=default}) (expr{value} (List (expr*{elts} (expr (Str (str{s}{val=py}))))))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=The file extension(s) to render (default: "py"). Separate multiple extensions with commas, or use -e multiple times.})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_argument}))) (expr*{args} (expr (Str (str{s}{val=_STR:3_}))) (expr (Str (str{s}{val=_STR:4_})))) (keyword*{keywords} (keyword (str{arg}{val=dest}) (expr{value} (Str (str{s}{val=_STR:5_})))) (keyword (str{arg}{val=action}) (expr{value} (Str (str{s}{val=_STR:0_})))) (keyword (str{arg}{val=default}) (expr{value} (List (epsilon)))) (keyword (str{arg}{val=help}) (expr{value} (Str (str{s}{val=The file name(s) to render. Separate multiple extensions with commas, or use -n multiple times.})))))))))
(root (FunctionDef (str{name}{val=handle}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=app_or_project}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=target})))) (str{kwarg}{val=options}) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=app_or_project})))) (expr{value} (Name (str{id}{val=app_or_project})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=paths_to_remove})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=validate_name}))) (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=app_or_project}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=target}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=top_dir})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=getcwd}))))) (expr (Name (str{id}{val=name}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=makedirs}))) (expr*{args} (expr (Name (str{id}{val=top_dir}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=OSError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=errno}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=errno}))) (str{attr}{val=EEXIST})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=message})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=top_dir})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=message})))) (expr{value} (Name (str{id}{val=e})))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (Name (str{id}{val=message}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=top_dir})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=abspath}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=path}))) (str{attr}{val=expanduser}))) (expr*{args} (expr (Name (str{id}{val=target})))))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=exists}))) (expr*{args} (expr (Name (str{id}{val=top_dir})))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=Destination directory '%s' does not exist, please create it first.}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=top_dir}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=extensions})))) (expr{value} (Call (expr{func} (Name (str{id}{val=tuple}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=handle_extensions}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (keyword*{keywords} (keyword (str{arg}{val=ignored}) (expr{value} (Tuple (epsilon))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=extra_files})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=file}))) (expr{iter} (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=extra_files}))) (str{attr}{val=extend}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=map}))) (expr*{args} (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=x})))))) (expr{body} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=x}))) (str{attr}{val=strip}))))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=file}))) (str{attr}{val=split}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Num (int{n}{val=2})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=Rendering %s template files with extensions: %s\n}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=app_or_project}))) (expr (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=, }))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=extensions}))))))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=Rendering %s template files with filenames: %s\n}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=app_or_project}))) (expr (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=_STR:0_}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=extra_files}))))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=base_name})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=%s_name}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=app_or_project})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=base_subdir})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=%s_template}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=app_or_project})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=base_directory})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=%s_directory}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=app_or_project})))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=django}))) (str{attr}{val=VERSION}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=-2}))))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=docs_version})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=docs_version})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=%d.%d}))) (operator{op} (Mod)) (expr{right} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=django}))) (str{attr}{val=VERSION}))) (slice{slice} (Slice (expr{upper} (Num (int{n}{val=2})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=context})))) (expr{value} (Call (expr{func} (Name (str{id}{val=Context}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=dict}))) (expr*{args} (expr (Name (str{id}{val=options})))) (expr{kwargs} (Dict (expr*{keys} (expr (Name (str{id}{val=base_name}))) (expr (Name (str{id}{val=base_directory}))) (expr (Str (str{s}{val=docs_version})))) (expr*{values} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=top_dir}))) (expr (Name (str{id}{val=docs_version}))))))))) (keyword*{keywords} (keyword (str{arg}{val=autoescape}) (expr{value} (Name (str{id}{val=False})))))))))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=configured}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=configure})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=template_dir})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=handle_template}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (expr (Name (str{id}{val=base_subdir}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=prefix_length})))) (expr{value} (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=template_dir})))))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=1})))))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=root}))) (expr (Name (str{id}{val=dirs}))) (expr (Name (str{id}{val=files})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=walk}))) (expr*{args} (expr (Name (str{id}{val=template_dir})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=path_rest})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=root}))) (slice{slice} (Slice (expr{lower} (Name (str{id}{val=prefix_length})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=relative_dir})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=path_rest}))) (str{attr}{val=replace}))) (expr*{args} (expr (Name (str{id}{val=base_name}))) (expr (Name (str{id}{val=name}))))))))
(root (If (expr{test} (Name (str{id}{val=relative_dir}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=target_dir})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=top_dir}))) (expr (Name (str{id}{val=relative_dir}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=path}))) (str{attr}{val=exists}))) (expr*{args} (expr (Name (str{id}{val=target_dir})))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=mkdir}))) (expr*{args} (expr (Name (str{id}{val=target_dir}))))))))
(root (For (expr{target} (Name (str{id}{val=dirname}))) (expr{iter} (Subscript (expr{value} (Name (str{id}{val=dirs}))) (slice{slice} (Slice (epsilon))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=dirname}))) (str{attr}{val=startswith}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (expr (Compare (expr{left} (Name (str{id}{val=dirname}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:1_}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=dirs}))) (str{attr}{val=remove}))) (expr*{args} (expr (Name (str{id}{val=dirname}))))))))
(root (For (expr{target} (Name (str{id}{val=filename}))) (expr{iter} (Name (str{id}{val=files}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=filename}))) (str{attr}{val=endswith}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=old_path})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=root}))) (expr (Name (str{id}{val=filename}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=new_path})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=top_dir}))) (expr (Name (str{id}{val=relative_dir}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=filename}))) (str{attr}{val=replace}))) (expr*{args} (expr (Name (str{id}{val=base_name}))) (expr (Name (str{id}{val=name})))))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=path}))) (str{attr}{val=exists}))) (expr*{args} (expr (Name (str{id}{val=new_path})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=%s already exists, overlaying a project or app into an existing directory won't replace conflicting files}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=new_path}))))))))))
(root (With (expr{context_expr} (Call (expr{func} (Name (str{id}{val=open}))) (expr*{args} (expr (Name (str{id}{val=old_path}))) (expr (Str (str{s}{val=rb})))))) (expr{optional_vars} (Name (str{id}{val=template_file}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=content})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=template_file}))) (str{attr}{val=read})))))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=filename}))) (str{attr}{val=endswith}))) (expr*{args} (expr (Name (str{id}{val=extensions})))))) (expr (Compare (expr{left} (Name (str{id}{val=filename}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=extra_files}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=content})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=content}))) (str{attr}{val=decode}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=template})))) (expr{value} (Call (expr{func} (Name (str{id}{val=Template}))) (expr*{args} (expr (Name (str{id}{val=content}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=content})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=template}))) (str{attr}{val=render}))) (expr*{args} (expr (Name (str{id}{val=context}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=content})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=content}))) (str{attr}{val=encode}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (With (expr{context_expr} (Call (expr{func} (Name (str{id}{val=open}))) (expr*{args} (expr (Name (str{id}{val=new_path}))) (expr (Str (str{s}{val=_STR:0_})))))) (expr{optional_vars} (Name (str{id}{val=new_file}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=new_file}))) (str{attr}{val=write}))) (expr*{args} (expr (Name (str{id}{val=content}))))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Num (int{n}{val=2})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=new_path}))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=shutil}))) (str{attr}{val=copymode}))) (expr*{args} (expr (Name (str{id}{val=old_path}))) (expr (Name (str{id}{val=new_path}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=make_writeable}))) (expr*{args} (expr (Name (str{id}{val=new_path}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=OSError}))) (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stderr}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=Notice: Couldn't set permission bits on %s. You're probably using an uncommon filesystem setup. No problem.}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=new_path}))))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style}))) (str{attr}{val=NOTICE}))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=paths_to_remove}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Num (int{n}{val=2})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (For (expr{target} (Name (str{id}{val=path_to_remove}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=paths_to_remove}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=path}))) (str{attr}{val=isfile}))) (expr*{args} (expr (Name (str{id}{val=path_to_remove})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=remove}))) (expr*{args} (expr (Name (str{id}{val=path_to_remove}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=shutil}))) (str{attr}{val=rmtree}))) (expr*{args} (expr (Name (str{id}{val=path_to_remove})))) (keyword*{keywords} (keyword (str{arg}{val=onerror}) (expr{value} (Name (str{id}{val=rmtree_errorhandler})))))))))
(root (FunctionDef (str{name}{val=handle_template}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=template}))) (expr (Name (str{id}{val=subdir})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=template}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=django}))) (str{attr}{val=__path__}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=subdir}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=template}))) (str{attr}{val=startswith}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=template})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=template}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=7})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=expanded_template})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=path}))) (str{attr}{val=expanduser}))) (expr*{args} (expr (Name (str{id}{val=template}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=expanded_template})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=path}))) (str{attr}{val=normpath}))) (expr*{args} (expr (Name (str{id}{val=expanded_template}))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=path}))) (str{attr}{val=isdir}))) (expr*{args} (expr (Name (str{id}{val=expanded_template})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=expanded_template})))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=is_url}))) (expr*{args} (expr (Name (str{id}{val=template})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=absolute_path})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=download}))) (expr*{args} (expr (Name (str{id}{val=template}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=absolute_path})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=path}))) (str{attr}{val=abspath}))) (expr*{args} (expr (Name (str{id}{val=expanded_template}))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=path}))) (str{attr}{val=exists}))) (expr*{args} (expr (Name (str{id}{val=absolute_path})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=extract}))) (expr*{args} (expr (Name (str{id}{val=absolute_path}))))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=app_or_project}))) (expr (Name (str{id}{val=template})))))))))))))
(root (FunctionDef (str{name}{val=validate_name}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=app_or_project})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=name}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (IfExp (expr{test} (Compare (expr{left} (Name (str{id}{val=app_or_project}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=app})))))) (expr{body} (Str (str{s}{val=an}))) (expr{orelse} (Str (str{s}{val=a}))))) (expr (Name (str{id}{val=app_or_project})))))))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=search}))) (expr*{args} (expr (Str (str{s}{val=_STR:2_}))) (expr (Name (str{id}{val=name})))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=search}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=name})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=message})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=message})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=app_or_project}))) (expr (Name (str{id}{val=message})))))))))))))
(root (FunctionDef (str{name}{val=download}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=url})))))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=cleanup_url}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=url})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=tmp})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=url}))) (str{attr}{val=rstrip}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=filename})))) (expr{value} (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=tmp}))) (str{attr}{val=split}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=-1})))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=url}))) (str{attr}{val=endswith}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=display_url})))) (expr{value} (BinOp (expr{left} (Name (str{id}{val=tmp}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=_STR:0_})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=display_url})))) (expr{value} (Name (str{id}{val=url})))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=filename}))) (expr (Name (str{id}{val=display_url}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=prefix})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=app_or_project})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=tempdir})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=tempfile}))) (str{attr}{val=mkdtemp}))) (keyword*{keywords} (keyword (str{arg}{val=prefix}) (expr{value} (Name (str{id}{val=prefix})))) (keyword (str{arg}{val=suffix}) (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=paths_to_remove}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=tempdir}))))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=filename}))) (expr (Name (str{id}{val=display_url}))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=cleanup_url}))) (expr*{args} (expr (Name (str{id}{val=url}))))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Num (int{n}{val=2})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=display_url}))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=the_path}))) (expr (Name (str{id}{val=info}))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=urlretrieve}))) (expr*{args} (expr (Name (str{id}{val=url}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=tempdir}))) (expr (Name (str{id}{val=filename})))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=IOError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=url}))) (expr (Name (str{id}{val=filename}))) (expr (Name (str{id}{val=e})))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=used_name})))) (expr{value} (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=the_path}))) (str{attr}{val=split}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=-1})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=content_disposition})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=info}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Name (str{id}{val=content_disposition}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=_}))) (expr (Name (str{id}{val=params}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=cgi}))) (str{attr}{val=parse_header}))) (expr*{args} (expr (Name (str{id}{val=content_disposition}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=guessed_filename})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=params}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (expr (Name (str{id}{val=used_name}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=guessed_filename})))) (expr{value} (Name (str{id}{val=used_name})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ext})))) (expr{value} (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=splitext}))) (expr*{args} (expr (Name (str{id}{val=guessed_filename})))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=content_type})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=info}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=ext}))))) (expr (Name (str{id}{val=content_type})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ext})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=mimetypes}))) (str{attr}{val=guess_extension}))) (expr*{args} (expr (Name (str{id}{val=content_type}))))))))
(root (If (expr{test} (Name (str{id}{val=ext}))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=guessed_filename}))) (operator{op} (Add)) (expr{value} (Name (str{id}{val=ext})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=used_name}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Name (str{id}{val=guessed_filename})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=guessed_path})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=tempdir}))) (expr (Name (str{id}{val=guessed_filename}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=shutil}))) (str{attr}{val=move}))) (expr*{args} (expr (Name (str{id}{val=the_path}))) (expr (Name (str{id}{val=guessed_path}))))))))
(root (Return (expr{value} (Name (str{id}{val=guessed_path})))))
(root (Return (expr{value} (Name (str{id}{val=the_path})))))
(root (FunctionDef (str{name}{val=splitext}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=the_path})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=base}))) (expr (Name (str{id}{val=ext}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=posixpath}))) (str{attr}{val=splitext}))) (expr*{args} (expr (Name (str{id}{val=the_path}))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=base}))) (str{attr}{val=lower}))))) (str{attr}{val=endswith}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ext})))) (expr{value} (BinOp (expr{left} (Subscript (expr{value} (Name (str{id}{val=base}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=-4}))))))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=ext})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=base})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=base}))) (slice{slice} (Slice (expr{upper} (Num (int{n}{val=-4})))))))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=base}))) (expr (Name (str{id}{val=ext}))))))))
(root (FunctionDef (str{name}{val=extract}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=filename})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=prefix})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=app_or_project})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=tempdir})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=tempfile}))) (str{attr}{val=mkdtemp}))) (keyword*{keywords} (keyword (str{arg}{val=prefix}) (expr{value} (Name (str{id}{val=prefix})))) (keyword (str{arg}{val=suffix}) (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=paths_to_remove}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=tempdir}))))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbosity}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Num (int{n}{val=2})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stdout}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=filename}))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=archive}))) (str{attr}{val=extract}))) (expr*{args} (expr (Name (str{id}{val=filename}))) (expr (Name (str{id}{val=tempdir}))))))))
(root (Return (expr{value} (Name (str{id}{val=tempdir})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=archive}))) (str{attr}{val=ArchiveException}))) (expr (Name (str{id}{val=IOError})))))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=CommandError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=filename}))) (expr (Name (str{id}{val=tempdir}))) (expr (Name (str{id}{val=e})))))))))))))
(root (FunctionDef (str{name}{val=is_url}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=template})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=template})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=scheme})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=template}))) (str{attr}{val=split}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Num (int{n}{val=1})))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (str{attr}{val=lower})))))))
(root (Return (expr{value} (Compare (expr{left} (Name (str{id}{val=scheme}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=url_schemes}))))))))
(root (FunctionDef (str{name}{val=make_writeable}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=filename})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=platform}))) (str{attr}{val=startswith}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (epsilon)))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=access}))) (expr*{args} (expr (Name (str{id}{val=filename}))) (expr (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=W_OK})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=st})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=stat}))) (expr*{args} (expr (Name (str{id}{val=filename}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=new_permissions})))) (expr{value} (BinOp (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=stat}))) (str{attr}{val=S_IMODE}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=st}))) (str{attr}{val=st_mode})))))) (operator{op} (BitOr)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=stat}))) (str{attr}{val=S_IWUSR})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=chmod}))) (expr*{args} (expr (Name (str{id}{val=filename}))) (expr (Name (str{id}{val=new_permissions}))))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=os})))))
(root (ImportFrom (str{module}{val=subprocess}) (alias*{names} (alias (str{name}{val=PIPE})) (alias (str{name}{val=Popen}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=sys})))))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=force_text})) (alias (str{name}{val=DEFAULT_LOCALE_ENCODING}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=base}) (alias*{names} (alias (str{name}{val=CommandError}))) (int{level}{val=1})))
(root (FunctionDef (str{name}{val=popen_wrapper}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=args}))) (expr (Name (str{id}{val=os_err_exc_type})))) (expr*{defaults} (expr (Name (str{id}{val=CommandError})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=p})))) (expr{value} (Call (expr{func} (Name (str{id}{val=Popen}))) (expr*{args} (expr (Name (str{id}{val=args})))) (keyword*{keywords} (keyword (str{arg}{val=shell}) (expr{value} (Name (str{id}{val=False})))) (keyword (str{arg}{val=stdout}) (expr{value} (Name (str{id}{val=PIPE})))) (keyword (str{arg}{val=stderr}) (expr{value} (Name (str{id}{val=PIPE})))) (keyword (str{arg}{val=close_fds}) (expr{value} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=name}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Str (str{s}{val=nt}))))))) (keyword (str{arg}{val=universal_newlines}) (expr{value} (Name (str{id}{val=True})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=OSError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=strerror})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=strerror}))) (expr (Name (str{id}{val=DEFAULT_LOCALE_ENCODING})))) (keyword*{keywords} (keyword (str{arg}{val=strings_only}) (expr{value} (Name (str{id}{val=True})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=reraise}))) (expr*{args} (expr (Name (str{id}{val=os_err_exc_type}))) (expr (Call (expr{func} (Name (str{id}{val=os_err_exc_type}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=Error executing %s: %s}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Subscript (expr{value} (Name (str{id}{val=args}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (expr (Name (str{id}{val=strerror}))))))))))) (expr (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=exc_info}))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=2}))))))))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=output}))) (expr (Name (str{id}{val=errors}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=p}))) (str{attr}{val=communicate})))))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=output}))) (expr (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=errors}))) (expr (Name (str{id}{val=DEFAULT_LOCALE_ENCODING})))) (keyword*{keywords} (keyword (str{arg}{val=strings_only}) (expr{value} (Name (str{id}{val=True}))))))) (expr (Attribute (expr{value} (Name (str{id}{val=p}))) (str{attr}{val=returncode}))))))))
(root (FunctionDef (str{name}{val=handle_extensions}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=extensions}))) (expr (Name (str{id}{val=ignored})))) (expr*{defaults} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_})))))) (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:1_}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ext_list})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=ext}))) (expr{iter} (Name (str{id}{val=extensions}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=ext_list}))) (str{attr}{val=extend}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=ext}))) (str{attr}{val=replace}))) (expr*{args} (expr (Str (str{s}{val= }))) (expr (Str (str{s}{val=})))))) (str{attr}{val=split}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=i}))) (expr (Name (str{id}{val=ext})))))) (expr{iter} (Call (expr{func} (Name (str{id}{val=enumerate}))) (expr*{args} (expr (Name (str{id}{val=ext_list})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=ext}))) (str{attr}{val=startswith}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=ext_list}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=i})))))))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=.%s}))) (operator{op} (Mod)) (expr{right} (Subscript (expr{value} (Name (str{id}{val=ext_list}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=i})))))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=set}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Name (str{id}{val=x}))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=x}))) (expr{iter} (Name (str{id}{val=ext_list}))) (expr*{ifs} (expr (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=x}))) (str{attr}{val=strip}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=ignored}))))))))))))))))
(root (FunctionDef (str{name}{val=find_command}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=cmd}))) (expr (Name (str{id}{val=path}))) (expr (Name (str{id}{val=pathext})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=path}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=path})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=environ}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=})))))) (str{attr}{val=split}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=pathsep}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=path}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=string_types})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=path})))) (expr{value} (List (expr*{elts} (expr (Name (str{id}{val=path}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=pathext}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=pathext})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=environ}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_})))))) (str{attr}{val=split}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=pathsep}))))))))
(root (For (expr{target} (Name (str{id}{val=ext}))) (expr{iter} (Name (str{id}{val=pathext}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=cmd}))) (str{attr}{val=endswith}))) (expr*{args} (expr (Name (str{id}{val=ext})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=pathext})))) (expr{value} (List (expr*{elts} (expr (Str (str{s}{val=}))))))))
(root (Break))
(root (For (expr{target} (Name (str{id}{val=p}))) (expr{iter} (Name (str{id}{val=path}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=f})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=p}))) (expr (Name (str{id}{val=cmd}))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=isfile}))) (expr*{args} (expr (Name (str{id}{val=f})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=f})))))
(root (For (expr{target} (Name (str{id}{val=ext}))) (expr{iter} (Name (str{id}{val=pathext}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=fext})))) (expr{value} (BinOp (expr{left} (Name (str{id}{val=f}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=ext})))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=isfile}))) (expr*{args} (expr (Name (str{id}{val=fext})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=fext})))))
(root (Return (expr{value} (Name (str{id}{val=None})))))
(root (Import (alias*{names} (alias (str{name}{val=collections})))))
(root (ImportFrom (str{module}{val=math}) (alias*{names} (alias (str{name}{val=ceil}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=InvalidPage}) (expr*{bases} (expr (Name (str{id}{val=Exception})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (ClassDef (str{name}{val=PageNotAnInteger}) (expr*{bases} (expr (Name (str{id}{val=InvalidPage})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (ClassDef (str{name}{val=EmptyPage}) (expr*{bases} (expr (Name (str{id}{val=InvalidPage})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (ClassDef (str{name}{val=Paginator}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=object_list}))) (expr (Name (str{id}{val=per_page}))) (expr (Name (str{id}{val=orphans}))) (expr (Name (str{id}{val=allow_empty_first_page})))) (expr*{defaults} (expr (Num (int{n}{val=0}))) (expr (Name (str{id}{val=True})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=object_list})))) (expr{value} (Name (str{id}{val=object_list})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=per_page})))) (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=per_page}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=orphans})))) (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=orphans}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=allow_empty_first_page})))) (expr{value} (Name (str{id}{val=allow_empty_first_page})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_num_pages}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_count})))) (expr{value} (Name (str{id}{val=None})))))
(root (FunctionDef (str{name}{val=validate_number}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=number})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=number})))) (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=number}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=TypeError}))) (expr (Name (str{id}{val=ValueError})))))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=PageNotAnInteger}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=number}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=EmptyPage}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=number}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=num_pages})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=number}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=allow_empty_first_page})))))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=EmptyPage}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Return (expr{value} (Name (str{id}{val=number})))))
(root (FunctionDef (str{name}{val=page}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=number})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=number})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=validate_number}))) (expr*{args} (expr (Name (str{id}{val=number}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=bottom})))) (expr{value} (BinOp (expr{left} (BinOp (expr{left} (Name (str{id}{val=number}))) (operator{op} (Sub)) (expr{right} (Num (int{n}{val=1}))))) (operator{op} (Mult)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=per_page})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=top})))) (expr{value} (BinOp (expr{left} (Name (str{id}{val=bottom}))) (operator{op} (Add)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=per_page})))))))
(root (If (expr{test} (Compare (expr{left} (BinOp (expr{left} (Name (str{id}{val=top}))) (operator{op} (Add)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=orphans}))))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=count})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=top})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=count})))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_get_page}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=object_list}))) (slice{slice} (Slice (expr{lower} (Name (str{id}{val=bottom}))) (expr{upper} (Name (str{id}{val=top}))))))) (expr (Name (str{id}{val=number}))) (expr (Name (str{id}{val=self}))))))))
(root (FunctionDef (str{name}{val=_get_page}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=Page}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (FunctionDef (str{name}{val=_get_count}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_count}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_count})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=object_list}))) (str{attr}{val=count})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=AttributeError}))) (expr (Name (str{id}{val=TypeError})))))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_count})))) (expr{value} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=object_list}))))))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_count})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=count})))) (expr{value} (Call (expr{func} (Name (str{id}{val=property}))) (expr*{args} (expr (Name (str{id}{val=_get_count}))))))))
(root (FunctionDef (str{name}{val=_get_num_pages}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_num_pages}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=count}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=allow_empty_first_page})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_num_pages})))) (expr{value} (Num (int{n}{val=0})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=hits})))) (expr{value} (Call (expr{func} (Name (str{id}{val=max}))) (expr*{args} (expr (Num (int{n}{val=1}))) (expr (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=count}))) (operator{op} (Sub)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=orphans}))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_num_pages})))) (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=ceil}))) (expr*{args} (expr (BinOp (expr{left} (Name (str{id}{val=hits}))) (operator{op} (Div)) (expr{right} (Call (expr{func} (Name (str{id}{val=float}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=per_page}))))))))))))))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_num_pages})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=num_pages})))) (expr{value} (Call (expr{func} (Name (str{id}{val=property}))) (expr*{args} (expr (Name (str{id}{val=_get_num_pages}))))))))
(root (FunctionDef (str{name}{val=_get_page_range}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=range}))) (expr*{args} (expr (Num (int{n}{val=1}))) (expr (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=num_pages}))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=1}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=page_range})))) (expr{value} (Call (expr{func} (Name (str{id}{val=property}))) (expr*{args} (expr (Name (str{id}{val=_get_page_range}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=QuerySetPaginator})))) (expr{value} (Name (str{id}{val=Paginator})))))
(root (ClassDef (str{name}{val=Page}) (expr*{bases} (expr (Attribute (expr{value} (Name (str{id}{val=collections}))) (str{attr}{val=Sequence})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=object_list}))) (expr (Name (str{id}{val=number}))) (expr (Name (str{id}{val=paginator})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=object_list})))) (expr{value} (Name (str{id}{val=object_list})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=number})))) (expr{value} (Name (str{id}{val=number})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=paginator})))) (expr{value} (Name (str{id}{val=paginator})))))
(root (FunctionDef (str{name}{val=__repr__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=number}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=paginator}))) (str{attr}{val=num_pages}))))))))))
(root (FunctionDef (str{name}{val=__len__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=object_list}))))))))
(root (FunctionDef (str{name}{val=__getitem__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=index})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=index}))) (expr (BinOp (expr{left} (Tuple (expr*{elts} (expr (Name (str{id}{val=slice})))))) (operator{op} (Add)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=integer_types})))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Name (str{id}{val=TypeError})))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=object_list}))) (expr (Name (str{id}{val=list})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=object_list})))) (expr{value} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=object_list}))))))))
(root (Return (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=object_list}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=index})))))))))
(root (FunctionDef (str{name}{val=has_next}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=number}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=paginator}))) (str{attr}{val=num_pages}))))))))
(root (FunctionDef (str{name}{val=has_previous}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=number}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=1}))))))))
(root (FunctionDef (str{name}{val=has_other_pages}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=has_previous}))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=has_next}))))))))))
(root (FunctionDef (str{name}{val=next_page_number}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=paginator}))) (str{attr}{val=validate_number}))) (expr*{args} (expr (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=number}))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=1}))))))))))
(root (FunctionDef (str{name}{val=previous_page_number}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=paginator}))) (str{attr}{val=validate_number}))) (expr*{args} (expr (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=number}))) (operator{op} (Sub)) (expr{right} (Num (int{n}{val=1}))))))))))
(root (FunctionDef (str{name}{val=start_index}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=paginator}))) (str{attr}{val=count}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Num (int{n}{val=0})))))
(root (Return (expr{value} (BinOp (expr{left} (BinOp (expr{left} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=paginator}))) (str{attr}{val=per_page}))) (operator{op} (Mult)) (expr{right} (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=number}))) (operator{op} (Sub)) (expr{right} (Num (int{n}{val=1}))))))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=1})))))))
(root (FunctionDef (str{name}{val=end_index}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=number}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=paginator}))) (str{attr}{val=num_pages})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=paginator}))) (str{attr}{val=count})))))
(root (Return (expr{value} (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=number}))) (operator{op} (Mult)) (expr{right} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=paginator}))) (str{attr}{val=per_page})))))))
(root (Import (alias*{names} (alias (str{name}{val=importlib})))))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.serializers.base}) (alias*{names} (alias (str{name}{val=SerializerDoesNotExist}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=BUILTIN_SERIALIZERS})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=python}))) (expr (Str (str{s}{val=json}))) (expr (Str (str{s}{val=yaml})))) (expr*{values} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=django.core.serializers.python}))) (expr (Str (str{s}{val=django.core.serializers.json}))) (expr (Str (str{s}{val=django.core.serializers.pyyaml}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_serializers})))) (expr{value} (Dict (epsilon)))))
(root (ClassDef (str{name}{val=BadSerializer}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=internal_use_only})))) (expr{value} (Name (str{id}{val=False})))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=exception})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=exception})))) (expr{value} (Name (str{id}{val=exception})))))
(root (FunctionDef (str{name}{val=__call__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=exception})))))
(root (FunctionDef (str{name}{val=register_serializer}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=format}))) (expr (Name (str{id}{val=serializer_module}))) (expr (Name (str{id}{val=serializers})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=serializers}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=_serializers})))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=_load_serializers})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=module})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=importlib}))) (str{attr}{val=import_module}))) (expr*{args} (expr (Name (str{id}{val=serializer_module}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ImportError}))) (expr{name} (Name (str{id}{val=exc}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=bad_serializer})))) (expr{value} (Call (expr{func} (Name (str{id}{val=BadSerializer}))) (expr*{args} (expr (Name (str{id}{val=exc}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=module})))) (expr{value} (Call (expr{func} (Name (str{id}{val=type}))) (expr*{args} (expr (Str (str{s}{val=BadSerializerModule}))) (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=object})))))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=Deserializer}))) (expr (Str (str{s}{val=Serializer})))) (expr*{values} (expr (Name (str{id}{val=bad_serializer}))) (expr (Name (str{id}{val=bad_serializer})))))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=serializers}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=_serializers}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=format})))))))) (expr{value} (Name (str{id}{val=module})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=serializers}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=format})))))))) (expr{value} (Name (str{id}{val=module})))))
(root (FunctionDef (str{name}{val=unregister_serializer}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=format})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=_serializers}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=_load_serializers})))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=format}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=_serializers})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=SerializerDoesNotExist}))) (expr*{args} (expr (Name (str{id}{val=format}))))))))
(root (Delete (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=_serializers}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=format}))))))))))
(root (FunctionDef (str{name}{val=get_serializer}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=format})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=_serializers}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=_load_serializers})))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=format}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=_serializers})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=SerializerDoesNotExist}))) (expr*{args} (expr (Name (str{id}{val=format}))))))))
(root (Return (expr{value} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=_serializers}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=format}))))))) (str{attr}{val=Serializer})))))
(root (FunctionDef (str{name}{val=get_serializer_formats}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=_serializers}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=_load_serializers})))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Name (str{id}{val=_serializers}))))))))
(root (FunctionDef (str{name}{val=get_public_serializer_formats}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=_serializers}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=_load_serializers})))))))
(root (Return (expr{value} (ListComp (expr{elt} (Name (str{id}{val=k}))) (comprehension*{generators} (comprehension (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Name (str{id}{val=v})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=iteritems}))) (expr*{args} (expr (Name (str{id}{val=_serializers})))))) (expr*{ifs} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=v}))) (str{attr}{val=Serializer}))) (str{attr}{val=internal_use_only}))))))))))))
(root (FunctionDef (str{name}{val=get_deserializer}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=format})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=_serializers}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=_load_serializers})))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=format}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=_serializers})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=SerializerDoesNotExist}))) (expr*{args} (expr (Name (str{id}{val=format}))))))))
(root (Return (expr{value} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=_serializers}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=format}))))))) (str{attr}{val=Deserializer})))))
(root (FunctionDef (str{name}{val=serialize}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=format}))) (expr (Name (str{id}{val=queryset})))) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=s})))) (expr{value} (Call (expr{func} (Call (expr{func} (Name (str{id}{val=get_serializer}))) (expr*{args} (expr (Name (str{id}{val=format}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=s}))) (str{attr}{val=serialize}))) (expr*{args} (expr (Name (str{id}{val=queryset})))) (expr{kwargs} (Name (str{id}{val=options})))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=s}))) (str{attr}{val=getvalue})))))))
(root (FunctionDef (str{name}{val=deserialize}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=format}))) (expr (Name (str{id}{val=stream_or_string})))) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=d})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_deserializer}))) (expr*{args} (expr (Name (str{id}{val=format}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=d}))) (expr*{args} (expr (Name (str{id}{val=stream_or_string})))) (expr{kwargs} (Name (str{id}{val=options})))))))
(root (FunctionDef (str{name}{val=_load_serializers}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (Global (str*{names} (str{val=_serializers}))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=serializers})))) (expr{value} (Dict (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=format}))) (expr{iter} (Name (str{id}{val=BUILTIN_SERIALIZERS}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=register_serializer}))) (expr*{args} (expr (Name (str{id}{val=format}))) (expr (Subscript (expr{value} (Name (str{id}{val=BUILTIN_SERIALIZERS}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=format}))))))) (expr (Name (str{id}{val=serializers}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=settings}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=format}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=SERIALIZATION_MODULES}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=register_serializer}))) (expr*{args} (expr (Name (str{id}{val=format}))) (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=SERIALIZATION_MODULES}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=format}))))))) (expr (Name (str{id}{val=serializers}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_serializers})))) (expr{value} (Name (str{id}{val=serializers})))))
(root (Import (alias*{names} (alias (str{name}{val=warnings})))))
(root (ImportFrom (str{module}{val=django.db}) (alias*{names} (alias (str{name}{val=models}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.deprecation}) (alias*{names} (alias (str{name}{val=RemovedInDjango19Warning}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=SerializerDoesNotExist}) (expr*{bases} (expr (Name (str{id}{val=KeyError})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (ClassDef (str{name}{val=SerializationError}) (expr*{bases} (expr (Name (str{id}{val=Exception})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (ClassDef (str{name}{val=DeserializationError}) (expr*{bases} (expr (Name (str{id}{val=Exception})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (ClassDef (str{name}{val=Serializer}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=internal_use_only})))) (expr{value} (Name (str{id}{val=False})))))
(root (FunctionDef (str{name}{val=serialize}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=queryset})))) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=options})))) (expr{value} (Name (str{id}{val=options})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stream})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=stream}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=StringIO}))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=selected_fields})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=fields}))) (expr (Name (str{id}{val=None}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=use_natural_keys})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=use_natural_keys}))) (expr (Name (str{id}{val=False}))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=use_natural_keys}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=warnings}))) (str{attr}{val=warn}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=RemovedInDjango19Warning}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=use_natural_foreign_keys})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=use_natural_foreign_keys}))) (expr (Name (str{id}{val=False})))))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=use_natural_keys}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=use_natural_primary_keys})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=False}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=start_serialization})))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=first})))) (expr{value} (Name (str{id}{val=True})))))
(root (For (expr{target} (Name (str{id}{val=obj}))) (expr{iter} (Name (str{id}{val=queryset}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=start_object}))) (expr*{args} (expr (Name (str{id}{val=obj}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=concrete_model})))) (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=obj}))) (str{attr}{val=_meta}))) (str{attr}{val=concrete_model})))))
(root (For (expr{target} (Name (str{id}{val=field}))) (expr{iter} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=concrete_model}))) (str{attr}{val=_meta}))) (str{attr}{val=local_fields}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=serialize}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=selected_fields}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=attname}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=selected_fields}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=handle_field}))) (expr*{args} (expr (Name (str{id}{val=obj}))) (expr (Name (str{id}{val=field}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=selected_fields}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Compare (expr{left} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=attname}))) (slice{slice} (Slice (expr{upper} (Num (int{n}{val=-3}))))))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=selected_fields}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=handle_fk_field}))) (expr*{args} (expr (Name (str{id}{val=obj}))) (expr (Name (str{id}{val=field}))))))))
(root (For (expr{target} (Name (str{id}{val=field}))) (expr{iter} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=concrete_model}))) (str{attr}{val=_meta}))) (str{attr}{val=many_to_many}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=serialize}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=selected_fields}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=attname}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=selected_fields}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=handle_m2m_field}))) (expr*{args} (expr (Name (str{id}{val=obj}))) (expr (Name (str{id}{val=field}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=end_object}))) (expr*{args} (expr (Name (str{id}{val=obj}))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=first}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=first})))) (expr{value} (Name (str{id}{val=False})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=end_serialization})))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=getvalue})))))))
(root (FunctionDef (str{name}{val=start_serialization}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=NotImplementedError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=end_serialization}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (FunctionDef (str{name}{val=start_object}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=obj})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=NotImplementedError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=end_object}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=obj})))))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (FunctionDef (str{name}{val=handle_field}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=obj}))) (expr (Name (str{id}{val=field})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=NotImplementedError}))) (expr*{args} (expr (Str (str{s}{val=subclasses of Serializer must provide an handle_field() method}))))))))
(root (FunctionDef (str{name}{val=handle_fk_field}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=obj}))) (expr (Name (str{id}{val=field})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=NotImplementedError}))) (expr*{args} (expr (Str (str{s}{val=subclasses of Serializer must provide an handle_fk_field() method}))))))))
(root (FunctionDef (str{name}{val=handle_m2m_field}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=obj}))) (expr (Name (str{id}{val=field})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=NotImplementedError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=getvalue}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=callable}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stream}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stream}))) (str{attr}{val=getvalue})))))))
(root (ClassDef (str{name}{val=Deserializer}) (expr*{bases} (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=Iterator})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=stream_or_string})))) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=options})))) (expr{value} (Name (str{id}{val=options})))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=stream_or_string}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=string_types})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stream})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=StringIO}))) (expr*{args} (expr (Name (str{id}{val=stream_or_string}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stream})))) (expr{value} (Name (str{id}{val=stream_or_string})))))
(root (FunctionDef (str{name}{val=__iter__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=self})))))
(root (FunctionDef (str{name}{val=__next__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=NotImplementedError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (ClassDef (str{name}{val=DeserializedObject}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=obj}))) (expr (Name (str{id}{val=m2m_data})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=object})))) (expr{value} (Name (str{id}{val=obj})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=m2m_data})))) (expr{value} (Name (str{id}{val=m2m_data})))))
(root (FunctionDef (str{name}{val=__repr__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=object}))) (str{attr}{val=_meta}))) (str{attr}{val=app_label}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=object}))) (str{attr}{val=_meta}))) (str{attr}{val=object_name}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=object}))) (str{attr}{val=pk}))))))))))
(root (FunctionDef (str{name}{val=save}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=save_m2m}))) (expr (Name (str{id}{val=using})))) (expr*{defaults} (expr (Name (str{id}{val=True}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=models}))) (str{attr}{val=Model}))) (str{attr}{val=save_base}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=object})))) (keyword*{keywords} (keyword (str{arg}{val=using}) (expr{value} (Name (str{id}{val=using})))) (keyword (str{arg}{val=raw}) (expr{value} (Name (str{id}{val=True})))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=m2m_data}))) (expr (Name (str{id}{val=save_m2m})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=accessor_name}))) (expr (Name (str{id}{val=object_list})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=m2m_data}))) (str{attr}{val=items}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=setattr}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=object}))) (expr (Name (str{id}{val=accessor_name}))) (expr (Name (str{id}{val=object_list}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=m2m_data})))) (expr{value} (Name (str{id}{val=None})))))
(root (FunctionDef (str{name}{val=build_instance}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=Model}))) (expr (Name (str{id}{val=data}))) (expr (Name (str{id}{val=db})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=obj})))) (expr{value} (Call (expr{func} (Name (str{id}{val=Model}))) (expr{kwargs} (Name (str{id}{val=data})))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=obj}))) (str{attr}{val=pk}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=Model}))) (expr (Str (str{s}{val=_STR:0_})))))) (expr (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=Model}))) (str{attr}{val=_default_manager}))) (expr (Str (str{s}{val=_STR:1_}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=natural_key})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=obj}))) (str{attr}{val=natural_key})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=obj}))) (str{attr}{val=pk})))) (expr{value} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=Model}))) (str{attr}{val=_default_manager}))) (str{attr}{val=db_manager}))) (expr*{args} (expr (Name (str{id}{val=db})))))) (str{attr}{val=get_by_natural_key}))) (expr{starargs} (Name (str{id}{val=natural_key}))))) (str{attr}{val=pk})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Attribute (expr{value} (Name (str{id}{val=Model}))) (str{attr}{val=DoesNotExist}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (Return (expr{value} (Name (str{id}{val=obj})))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=absolute_import}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=datetime})))))
(root (Import (alias*{names} (alias (str{name}{val=decimal})))))
(root (Import (alias*{names} (alias (str{name}{val=json})))))
(root (Import (alias*{names} (alias (str{name}{val=sys})))))
(root (ImportFrom (str{module}{val=django.core.serializers.base}) (alias*{names} (alias (str{name}{val=DeserializationError}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.serializers.python}) (alias*{names} (alias (str{name}{val=Serializer}) (str{asname}{val=PythonSerializer}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.serializers.python}) (alias*{names} (alias (str{name}{val=Deserializer}) (str{asname}{val=PythonDeserializer}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.timezone}) (alias*{names} (alias (str{name}{val=is_aware}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=Serializer}) (expr*{bases} (expr (Name (str{id}{val=PythonSerializer})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=internal_use_only})))) (expr{value} (Name (str{id}{val=False})))))
(root (FunctionDef (str{name}{val=start_serialization}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=json}))) (str{attr}{val=__version__}))) (str{attr}{val=split}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (List (expr*{elts} (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=_STR:3_}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=options}))) (str{attr}{val=update}))) (expr*{args} (expr (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:0_})))) (expr*{values} (expr (Name (str{id}{val=False})))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_current})))) (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=json_kwargs})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=options}))) (str{attr}{val=copy})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=json_kwargs}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=json_kwargs}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=json_kwargs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:2_})))))))) (expr{value} (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stream}))) (str{attr}{val=write}))) (expr*{args} (expr (Str (str{s}{val=[}))))))))
(root (FunctionDef (str{name}{val=end_serialization}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=indent})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stream}))) (str{attr}{val=write}))) (expr*{args} (expr (Str (str{s}{val=\n}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stream}))) (str{attr}{val=write}))) (expr*{args} (expr (Str (str{s}{val=]}))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=indent})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stream}))) (str{attr}{val=write}))) (expr*{args} (expr (Str (str{s}{val=\n}))))))))
(root (FunctionDef (str{name}{val=end_object}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=obj})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=indent})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=indent}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=first}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stream}))) (str{attr}{val=write}))) (expr*{args} (expr (Str (str{s}{val=,}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=indent}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stream}))) (str{attr}{val=write}))) (expr*{args} (expr (Str (str{s}{val= }))))))))
(root (If (expr{test} (Name (str{id}{val=indent}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stream}))) (str{attr}{val=write}))) (expr*{args} (expr (Str (str{s}{val=\n}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=json}))) (str{attr}{val=dump}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get_dump_object}))) (expr*{args} (expr (Name (str{id}{val=obj})))))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stream})))) (keyword*{keywords} (keyword (str{arg}{val=cls}) (expr{value} (Name (str{id}{val=DjangoJSONEncoder}))))) (expr{kwargs} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=json_kwargs})))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_current})))) (expr{value} (Name (str{id}{val=None})))))
(root (FunctionDef (str{name}{val=getvalue}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=PythonSerializer}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=getvalue})))))))
(root (FunctionDef (str{name}{val=Deserializer}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=stream_or_string})))) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=stream_or_string}))) (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=bytes}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=string_types}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=stream_or_string})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=stream_or_string}))) (str{attr}{val=read})))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=stream_or_string}))) (expr (Name (str{id}{val=bytes})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=stream_or_string})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=stream_or_string}))) (str{attr}{val=decode}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=objects})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=json}))) (str{attr}{val=loads}))) (expr*{args} (expr (Name (str{id}{val=stream_or_string}))))))))
(root (For (expr{target} (Name (str{id}{val=obj}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=PythonDeserializer}))) (expr*{args} (expr (Name (str{id}{val=objects})))) (expr{kwargs} (Name (str{id}{val=options}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Yield (expr{value} (Name (str{id}{val=obj})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=GeneratorExit}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (epsilon)))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=Exception}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=reraise}))) (expr*{args} (expr (Name (str{id}{val=DeserializationError}))) (expr (Call (expr{func} (Name (str{id}{val=DeserializationError}))) (expr*{args} (expr (Name (str{id}{val=e})))))) (expr (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=exc_info}))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=2}))))))))))))
(root (ClassDef (str{name}{val=DjangoJSONEncoder}) (expr*{bases} (expr (Attribute (expr{value} (Name (str{id}{val=json}))) (str{attr}{val=JSONEncoder})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=default}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=o})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=o}))) (expr (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=datetime})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=r})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=o}))) (str{attr}{val=isoformat})))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=o}))) (str{attr}{val=microsecond}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=r})))) (expr{value} (BinOp (expr{left} (Subscript (expr{value} (Name (str{id}{val=r}))) (slice{slice} (Slice (expr{upper} (Num (int{n}{val=23}))))))) (operator{op} (Add)) (expr{right} (Subscript (expr{value} (Name (str{id}{val=r}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=26})))))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=r}))) (str{attr}{val=endswith}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=r})))) (expr{value} (BinOp (expr{left} (Subscript (expr{value} (Name (str{id}{val=r}))) (slice{slice} (Slice (expr{upper} (Num (int{n}{val=-6}))))))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=_STR:0_})))))))
(root (Return (expr{value} (Name (str{id}{val=r})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=o}))) (expr (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=date})))))) (stmt*{body} (stmt (Pass))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=o}))) (str{attr}{val=isoformat})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=o}))) (expr (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=time})))))) (stmt*{body} (stmt (Pass))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=is_aware}))) (expr*{args} (expr (Name (str{id}{val=o})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=r})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=o}))) (str{attr}{val=isoformat})))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=o}))) (str{attr}{val=microsecond}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=r})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=r}))) (slice{slice} (Slice (expr{upper} (Num (int{n}{val=12})))))))))
(root (Return (expr{value} (Name (str{id}{val=r})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=o}))) (expr (Attribute (expr{value} (Name (str{id}{val=decimal}))) (str{attr}{val=Decimal})))))) (stmt*{body} (stmt (Pass))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Name (str{id}{val=o}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=DjangoJSONEncoder}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=default}))) (expr*{args} (expr (Name (str{id}{val=o}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=DateTimeAwareJSONEncoder})))) (expr{value} (Name (str{id}{val=DjangoJSONEncoder})))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.apps}) (alias*{names} (alias (str{name}{val=apps}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.serializers}) (alias*{names} (alias (str{name}{val=base}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.db}) (alias*{names} (alias (str{name}{val=models})) (alias (str{name}{val=DEFAULT_DB_ALIAS}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=smart_text})) (alias (str{name}{val=is_protected_type}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=Serializer}) (expr*{bases} (expr (Attribute (expr{value} (Name (str{id}{val=base}))) (str{attr}{val=Serializer})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=internal_use_only})))) (expr{value} (Name (str{id}{val=True})))))
(root (FunctionDef (str{name}{val=start_serialization}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_current})))) (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=objects})))) (expr{value} (List (epsilon)))))
(root (FunctionDef (str{name}{val=end_serialization}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (FunctionDef (str{name}{val=start_object}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=obj})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_current})))) (expr{value} (Dict (epsilon)))))
(root (FunctionDef (str{name}{val=end_object}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=obj})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=objects}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get_dump_object}))) (expr*{args} (expr (Name (str{id}{val=obj})))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_current})))) (expr{value} (Name (str{id}{val=None})))))
(root (FunctionDef (str{name}{val=get_dump_object}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=obj})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=data})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=model}))) (expr (Str (str{s}{val=fields})))) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=smart_text}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=obj}))) (str{attr}{val=_meta})))))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_current}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=use_natural_primary_keys}))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=obj}))) (expr (Str (str{s}{val=_STR:1_}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=data}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=pk})))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=smart_text}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=obj}))) (str{attr}{val=_get_pk_val})))))) (keyword*{keywords} (keyword (str{arg}{val=strings_only}) (expr{value} (Name (str{id}{val=True})))))))))
(root (Return (expr{value} (Name (str{id}{val=data})))))
(root (FunctionDef (str{name}{val=handle_field}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=obj}))) (expr (Name (str{id}{val=field})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=_get_val_from_obj}))) (expr*{args} (expr (Name (str{id}{val=obj}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=is_protected_type}))) (expr*{args} (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_current}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=name})))))))) (expr{value} (Name (str{id}{val=value})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_current}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=name})))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=value_to_string}))) (expr*{args} (expr (Name (str{id}{val=obj}))))))))
(root (FunctionDef (str{name}{val=handle_fk_field}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=obj}))) (expr (Name (str{id}{val=field})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=use_natural_foreign_keys}))) (expr (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (str{attr}{val=to}))) (expr (Str (str{s}{val=_STR:0_}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=related})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=obj}))) (expr (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=name}))))))))
(root (If (expr{test} (Name (str{id}{val=related}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=related}))) (str{attr}{val=natural_key})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Name (str{id}{val=None})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=obj}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=get_attname}))))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_current}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=name})))))))) (expr{value} (Name (str{id}{val=value})))))
(root (FunctionDef (str{name}{val=handle_m2m_field}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=obj}))) (expr (Name (str{id}{val=field})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (str{attr}{val=through}))) (str{attr}{val=_meta}))) (str{attr}{val=auto_created}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=use_natural_foreign_keys}))) (expr (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (str{attr}{val=to}))) (expr (Str (str{s}{val=_STR:0_}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=m2m_value})))) (expr{value} (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value})))))) (expr{body} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=natural_key})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=m2m_value})))) (expr{value} (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value})))))) (expr{body} (Call (expr{func} (Name (str{id}{val=smart_text}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=_get_pk_val})))))) (keyword*{keywords} (keyword (str{arg}{val=strings_only}) (expr{value} (Name (str{id}{val=True})))))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_current}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=name})))))))) (expr{value} (ListComp (expr{elt} (Call (expr{func} (Name (str{id}{val=m2m_value}))) (expr*{args} (expr (Name (str{id}{val=related})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=related}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=obj}))) (expr (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=name})))))) (str{attr}{val=iterator})))))))))))
(root (FunctionDef (str{name}{val=getvalue}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=objects})))))
(root (FunctionDef (str{name}{val=Deserializer}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=object_list})))) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=db})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=DEFAULT_DB_ALIAS}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ignore})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=False}))))))))
(root (For (expr{target} (Name (str{id}{val=d}))) (expr{iter} (Name (str{id}{val=object_list}))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=Model})))) (expr{value} (Call (expr{func} (Name (str{id}{val=_get_model}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=d}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=model}))))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Attribute (expr{value} (Name (str{id}{val=base}))) (str{attr}{val=DeserializationError}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Name (str{id}{val=ignore}))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Raise (epsilon)))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=data})))) (expr{value} (Dict (epsilon)))))
(root (If (expr{test} (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=d})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=data}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=Model}))) (str{attr}{val=_meta}))) (str{attr}{val=pk}))) (str{attr}{val=attname})))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=Model}))) (str{attr}{val=_meta}))) (str{attr}{val=pk}))) (str{attr}{val=to_python}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=d}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=pk}))) (expr (Name (str{id}{val=None})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=m2m_data})))) (expr{value} (Dict (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=model_fields})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=Model}))) (str{attr}{val=_meta}))) (str{attr}{val=get_all_field_names})))))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=field_name}))) (expr (Name (str{id}{val=field_value})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=iteritems}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=d}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=fields})))))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=ignore}))) (expr (Compare (expr{left} (Name (str{id}{val=field_name}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=model_fields}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=field_value}))) (expr (Name (str{id}{val=str})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=field_value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=smart_text}))) (expr*{args} (expr (Name (str{id}{val=field_value}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=encoding}))) (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=DEFAULT_CHARSET}))))))) (keyword*{keywords} (keyword (str{arg}{val=strings_only}) (expr{value} (Name (str{id}{val=True})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=field})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=Model}))) (str{attr}{val=_meta}))) (str{attr}{val=get_field}))) (expr*{args} (expr (Name (str{id}{val=field_name}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (expr (Attribute (expr{value} (Name (str{id}{val=models}))) (str{attr}{val=ManyToManyRel}))))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (str{attr}{val=to}))) (str{attr}{val=_default_manager}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=m2m_convert}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Str (str{s}{val=_STR:0_})))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (str{attr}{val=to}))) (str{attr}{val=_default_manager}))) (str{attr}{val=db_manager}))) (expr*{args} (expr (Name (str{id}{val=db})))))) (str{attr}{val=get_by_natural_key}))) (expr{starargs} (Name (str{id}{val=value}))))) (str{attr}{val=pk})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=smart_text}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (str{attr}{val=to}))) (str{attr}{val=_meta}))) (str{attr}{val=pk}))) (str{attr}{val=to_python}))) (expr*{args} (expr (Name (str{id}{val=value})))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=m2m_convert})))) (expr{value} (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=v})))))) (expr{body} (Call (expr{func} (Name (str{id}{val=smart_text}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (str{attr}{val=to}))) (str{attr}{val=_meta}))) (str{attr}{val=pk}))) (str{attr}{val=to_python}))) (expr*{args} (expr (Name (str{id}{val=v})))))))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=m2m_data}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=name})))))))) (expr{value} (ListComp (expr{elt} (Call (expr{func} (Name (str{id}{val=m2m_convert}))) (expr*{args} (expr (Name (str{id}{val=pk})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=pk}))) (expr{iter} (Name (str{id}{val=field_value})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (expr (Attribute (expr{value} (Name (str{id}{val=models}))) (str{attr}{val=ManyToOneRel}))))))))) (stmt*{body} (stmt (Pass))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=field_value}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (str{attr}{val=to}))) (str{attr}{val=_default_manager}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=field_value}))) (expr (Str (str{s}{val=_STR:0_})))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=field_value}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=obj})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (str{attr}{val=to}))) (str{attr}{val=_default_manager}))) (str{attr}{val=db_manager}))) (expr*{args} (expr (Name (str{id}{val=db})))))) (str{attr}{val=get_by_natural_key}))) (expr{starargs} (Name (str{id}{val=field_value})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=obj}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (str{attr}{val=field_name}))))))))
(root (If (expr{test} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (str{attr}{val=to}))) (str{attr}{val=_meta}))) (str{attr}{val=pk}))) (str{attr}{val=rel}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=pk})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (str{attr}{val=to}))) (str{attr}{val=_meta}))) (str{attr}{val=get_field}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (str{attr}{val=field_name})))))) (str{attr}{val=to_python}))) (expr*{args} (expr (Name (str{id}{val=field_value}))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=data}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=attname})))))))) (expr{value} (Name (str{id}{val=value})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=data}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=attname})))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (str{attr}{val=to}))) (str{attr}{val=_meta}))) (str{attr}{val=get_field}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (str{attr}{val=field_name})))))) (str{attr}{val=to_python}))) (expr*{args} (expr (Name (str{id}{val=field_value}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=data}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=attname})))))))) (expr{value} (Name (str{id}{val=None})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=data}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=name})))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=to_python}))) (expr*{args} (expr (Name (str{id}{val=field_value}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=obj})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=base}))) (str{attr}{val=build_instance}))) (expr*{args} (expr (Name (str{id}{val=Model}))) (expr (Name (str{id}{val=data}))) (expr (Name (str{id}{val=db}))))))))
(root (Expr (expr{value} (Yield (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=base}))) (str{attr}{val=DeserializedObject}))) (expr*{args} (expr (Name (str{id}{val=obj}))) (expr (Name (str{id}{val=m2m_data}))))))))))
(root (FunctionDef (str{name}{val=_get_model}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=model_identifier})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=apps}))) (str{attr}{val=get_model}))) (expr*{args} (expr (Name (str{id}{val=model_identifier}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=LookupError}))) (expr (Name (str{id}{val=TypeError})))))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=base}))) (str{attr}{val=DeserializationError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=model_identifier}))))))))))
(root (Import (alias*{names} (alias (str{name}{val=decimal})))))
(root (Import (alias*{names} (alias (str{name}{val=yaml})))))
(root (Import (alias*{names} (alias (str{name}{val=sys})))))
(root (ImportFrom (str{module}{val=io}) (alias*{names} (alias (str{name}{val=StringIO}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.db}) (alias*{names} (alias (str{name}{val=models}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.serializers.base}) (alias*{names} (alias (str{name}{val=DeserializationError}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.serializers.python}) (alias*{names} (alias (str{name}{val=Serializer}) (str{asname}{val=PythonSerializer}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.serializers.python}) (alias*{names} (alias (str{name}{val=Deserializer}) (str{asname}{val=PythonDeserializer}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (ImportFrom (str{module}{val=yaml}) (alias*{names} (alias (str{name}{val=CSafeLoader}) (str{asname}{val=SafeLoader}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=yaml}) (alias*{names} (alias (str{name}{val=CSafeDumper}) (str{asname}{val=SafeDumper}))) (int{level}{val=0})))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ImportError}))) (stmt*{body} (stmt (Pass)))))))
(root (ImportFrom (str{module}{val=yaml}) (alias*{names} (alias (str{name}{val=SafeLoader})) (alias (str{name}{val=SafeDumper}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=DjangoSafeDumper}) (expr*{bases} (expr (Name (str{id}{val=SafeDumper})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=represent_decimal}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=data})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=represent_scalar}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Name (str{id}{val=data})))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=DjangoSafeDumper}))) (str{attr}{val=add_representer}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=decimal}))) (str{attr}{val=Decimal}))) (expr (Attribute (expr{value} (Name (str{id}{val=DjangoSafeDumper}))) (str{attr}{val=represent_decimal}))))))))
(root (ClassDef (str{name}{val=Serializer}) (expr*{bases} (expr (Name (str{id}{val=PythonSerializer})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=internal_use_only})))) (expr{value} (Name (str{id}{val=False})))))
(root (FunctionDef (str{name}{val=handle_field}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=obj}))) (expr (Name (str{id}{val=field})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=field}))) (expr (Attribute (expr{value} (Name (str{id}{val=models}))) (str{attr}{val=TimeField})))))) (expr (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=obj}))) (expr (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=name})))))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_current}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=name})))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=obj}))) (expr (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=name})))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=Serializer}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=handle_field}))) (expr*{args} (expr (Name (str{id}{val=obj}))) (expr (Name (str{id}{val=field}))))))))
(root (FunctionDef (str{name}{val=end_serialization}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=yaml}))) (str{attr}{val=dump}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=objects}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stream})))) (keyword*{keywords} (keyword (str{arg}{val=Dumper}) (expr{value} (Name (str{id}{val=DjangoSafeDumper}))))) (expr{kwargs} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=options})))))))
(root (FunctionDef (str{name}{val=getvalue}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=PythonSerializer}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=getvalue})))))))
(root (FunctionDef (str{name}{val=Deserializer}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=stream_or_string})))) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=stream_or_string}))) (expr (Name (str{id}{val=bytes})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=stream_or_string})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=stream_or_string}))) (str{attr}{val=decode}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=stream_or_string}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=string_types})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=stream})))) (expr{value} (Call (expr{func} (Name (str{id}{val=StringIO}))) (expr*{args} (expr (Name (str{id}{val=stream_or_string}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=stream})))) (expr{value} (Name (str{id}{val=stream_or_string})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (For (expr{target} (Name (str{id}{val=obj}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=PythonDeserializer}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=yaml}))) (str{attr}{val=load}))) (expr*{args} (expr (Name (str{id}{val=stream})))) (keyword*{keywords} (keyword (str{arg}{val=Loader}) (expr{value} (Name (str{id}{val=SafeLoader})))))))) (expr{kwargs} (Name (str{id}{val=options}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Yield (expr{value} (Name (str{id}{val=obj})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=GeneratorExit}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (epsilon)))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=Exception}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=reraise}))) (expr*{args} (expr (Name (str{id}{val=DeserializationError}))) (expr (Call (expr{func} (Name (str{id}{val=DeserializationError}))) (expr*{args} (expr (Name (str{id}{val=e})))))) (expr (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=exc_info}))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=2}))))))))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.apps}) (alias*{names} (alias (str{name}{val=apps}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.serializers}) (alias*{names} (alias (str{name}{val=base}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.db}) (alias*{names} (alias (str{name}{val=models})) (alias (str{name}{val=DEFAULT_DB_ALIAS}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.xmlutils}) (alias*{names} (alias (str{name}{val=SimplerXMLGenerator}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=smart_text}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=xml.dom}) (alias*{names} (alias (str{name}{val=pulldom}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=xml.sax}) (alias*{names} (alias (str{name}{val=handler}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=xml.sax.expatreader}) (alias*{names} (alias (str{name}{val=ExpatParser}) (str{asname}{val=_ExpatParser}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=Serializer}) (expr*{bases} (expr (Attribute (expr{value} (Name (str{id}{val=base}))) (str{attr}{val=Serializer})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=indent}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=level})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=indent}))) (expr (Name (str{id}{val=None})))))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=xml}))) (str{attr}{val=ignorableWhitespace}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=\n}))) (operator{op} (Add)) (expr{right} (BinOp (expr{left} (BinOp (expr{left} (Str (str{s}{val= }))) (operator{op} (Mult)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None})))))))) (operator{op} (Mult)) (expr{right} (Name (str{id}{val=level}))))))))))))
(root (FunctionDef (str{name}{val=start_serialization}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=xml})))) (expr{value} (Call (expr{func} (Name (str{id}{val=SimplerXMLGenerator}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stream}))) (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=encoding}))) (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=DEFAULT_CHARSET})))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=xml}))) (str{attr}{val=startDocument})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=xml}))) (str{attr}{val=startElement}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:2_})))) (expr*{values} (expr (Str (str{s}{val=_STR:1_})))))))))))
(root (FunctionDef (str{name}{val=end_serialization}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=indent}))) (expr*{args} (expr (Num (int{n}{val=0}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=xml}))) (str{attr}{val=endElement}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=xml}))) (str{attr}{val=endDocument})))))))
(root (FunctionDef (str{name}{val=start_object}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=obj})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=obj}))) (expr (Str (str{s}{val=_meta})))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=base}))) (str{attr}{val=SerializationError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Name (str{id}{val=type}))) (expr*{args} (expr (Name (str{id}{val=obj})))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=indent}))) (expr*{args} (expr (Num (int{n}{val=1}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=attrs})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=model})))) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=smart_text}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=obj}))) (str{attr}{val=_meta})))))))))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=use_natural_primary_keys}))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=obj}))) (expr (Str (str{s}{val=_STR:0_}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=obj_pk})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=obj}))) (str{attr}{val=_get_pk_val})))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=obj_pk}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=attrs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=smart_text}))) (expr*{args} (expr (Name (str{id}{val=obj_pk}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=xml}))) (str{attr}{val=startElement}))) (expr*{args} (expr (Str (str{s}{val=object}))) (expr (Name (str{id}{val=attrs}))))))))
(root (FunctionDef (str{name}{val=end_object}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=obj})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=indent}))) (expr*{args} (expr (Num (int{n}{val=1}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=xml}))) (str{attr}{val=endElement}))) (expr*{args} (expr (Str (str{s}{val=object}))))))))
(root (FunctionDef (str{name}{val=handle_field}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=obj}))) (expr (Name (str{id}{val=field})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=indent}))) (expr*{args} (expr (Num (int{n}{val=2}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=xml}))) (str{attr}{val=startElement}))) (expr*{args} (expr (Str (str{s}{val=field}))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=name}))) (expr (Str (str{s}{val=type})))) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=name}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=get_internal_type})))))))))))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=obj}))) (expr (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=name})))))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=xml}))) (str{attr}{val=characters}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=value_to_string}))) (expr*{args} (expr (Name (str{id}{val=obj})))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=xml}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=None}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=xml}))) (str{attr}{val=endElement}))) (expr*{args} (expr (Str (str{s}{val=field}))))))))
(root (FunctionDef (str{name}{val=handle_fk_field}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=obj}))) (expr (Name (str{id}{val=field})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_start_relational_field}))) (expr*{args} (expr (Name (str{id}{val=field}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=related_att})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=obj}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=get_attname}))))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=related_att}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=use_natural_foreign_keys}))) (expr (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (str{attr}{val=to}))) (expr (Str (str{s}{val=_STR:0_}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=related})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=obj}))) (expr (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=name}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=related})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=related}))) (str{attr}{val=natural_key})))))))
(root (For (expr{target} (Name (str{id}{val=key_value}))) (expr{iter} (Name (str{id}{val=related}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=xml}))) (str{attr}{val=startElement}))) (expr*{args} (expr (Str (str{s}{val=natural}))) (expr (Dict (epsilon))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=xml}))) (str{attr}{val=characters}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=smart_text}))) (expr*{args} (expr (Name (str{id}{val=key_value})))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=xml}))) (str{attr}{val=endElement}))) (expr*{args} (expr (Str (str{s}{val=natural}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=xml}))) (str{attr}{val=characters}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=smart_text}))) (expr*{args} (expr (Name (str{id}{val=related_att})))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=xml}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=None}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=xml}))) (str{attr}{val=endElement}))) (expr*{args} (expr (Str (str{s}{val=field}))))))))
(root (FunctionDef (str{name}{val=handle_m2m_field}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=obj}))) (expr (Name (str{id}{val=field})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (str{attr}{val=through}))) (str{attr}{val=_meta}))) (str{attr}{val=auto_created}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_start_relational_field}))) (expr*{args} (expr (Name (str{id}{val=field}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=use_natural_foreign_keys}))) (expr (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (str{attr}{val=to}))) (expr (Str (str{s}{val=_STR:0_}))))))))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=handle_m2m}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=natural})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=natural_key})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=xml}))) (str{attr}{val=startElement}))) (expr*{args} (expr (Str (str{s}{val=object}))) (expr (Dict (epsilon))))))))
(root (For (expr{target} (Name (str{id}{val=key_value}))) (expr{iter} (Name (str{id}{val=natural}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=xml}))) (str{attr}{val=startElement}))) (expr*{args} (expr (Str (str{s}{val=natural}))) (expr (Dict (epsilon))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=xml}))) (str{attr}{val=characters}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=smart_text}))) (expr*{args} (expr (Name (str{id}{val=key_value})))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=xml}))) (str{attr}{val=endElement}))) (expr*{args} (expr (Str (str{s}{val=natural}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=xml}))) (str{attr}{val=endElement}))) (expr*{args} (expr (Str (str{s}{val=object}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=handle_m2m}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=xml}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=object})))) (keyword*{keywords} (keyword (str{arg}{val=attrs}) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=pk})))) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=smart_text}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=_get_pk_val})))))))))))))))))
(root (For (expr{target} (Name (str{id}{val=relobj}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=obj}))) (expr (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=name})))))) (str{attr}{val=iterator}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=handle_m2m}))) (expr*{args} (expr (Name (str{id}{val=relobj}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=xml}))) (str{attr}{val=endElement}))) (expr*{args} (expr (Str (str{s}{val=field}))))))))
(root (FunctionDef (str{name}{val=_start_relational_field}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=field})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=indent}))) (expr*{args} (expr (Num (int{n}{val=2}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=xml}))) (str{attr}{val=startElement}))) (expr*{args} (expr (Str (str{s}{val=field}))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=name}))) (expr (Str (str{s}{val=rel}))) (expr (Str (str{s}{val=to})))) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=name}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (str{attr}{val=__class__}))) (str{attr}{val=__name__}))) (expr (Call (expr{func} (Name (str{id}{val=smart_text}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (str{attr}{val=to}))) (str{attr}{val=_meta}))))))))))))))
(root (ClassDef (str{name}{val=Deserializer}) (expr*{bases} (expr (Attribute (expr{value} (Name (str{id}{val=base}))) (str{attr}{val=Deserializer})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=stream_or_string})))) (str{kwarg}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=Deserializer}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=stream_or_string})))) (expr{kwargs} (Name (str{id}{val=options})))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=event_stream})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=pulldom}))) (str{attr}{val=parse}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=stream}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_make_parser}))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=db})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=DEFAULT_DB_ALIAS}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=ignore})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=False}))))))))
(root (FunctionDef (str{name}{val=_make_parser}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=DefusedExpatParser})))))))
(root (FunctionDef (str{name}{val=__next__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=event}))) (expr (Name (str{id}{val=node})))))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=event_stream}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=event}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=node}))) (str{attr}{val=nodeName}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=object}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=event_stream}))) (str{attr}{val=expandNode}))) (expr*{args} (expr (Name (str{id}{val=node}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_handle_object}))) (expr*{args} (expr (Name (str{id}{val=node}))))))))
(root (Raise (expr{type} (Name (str{id}{val=StopIteration})))))
(root (FunctionDef (str{name}{val=_handle_object}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=node})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=Model})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_get_model_from_node}))) (expr*{args} (expr (Name (str{id}{val=node}))) (expr (Str (str{s}{val=model}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=data})))) (expr{value} (Dict (epsilon)))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=node}))) (str{attr}{val=hasAttribute}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=data}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=Model}))) (str{attr}{val=_meta}))) (str{attr}{val=pk}))) (str{attr}{val=attname})))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=Model}))) (str{attr}{val=_meta}))) (str{attr}{val=pk}))) (str{attr}{val=to_python}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=node}))) (str{attr}{val=getAttribute}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=m2m_data})))) (expr{value} (Dict (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=model_fields})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=Model}))) (str{attr}{val=_meta}))) (str{attr}{val=get_all_field_names})))))))
(root (For (expr{target} (Name (str{id}{val=field_node}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=node}))) (str{attr}{val=getElementsByTagName}))) (expr*{args} (expr (Str (str{s}{val=field})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=field_name})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=field_node}))) (str{attr}{val=getAttribute}))) (expr*{args} (expr (Str (str{s}{val=name}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=field_name}))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=base}))) (str{attr}{val=DeserializationError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=ignore}))) (expr (Compare (expr{left} (Name (str{id}{val=field_name}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=model_fields}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=field})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=Model}))) (str{attr}{val=_meta}))) (str{attr}{val=get_field}))) (expr*{args} (expr (Name (str{id}{val=field_name}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (expr (Attribute (expr{value} (Name (str{id}{val=models}))) (str{attr}{val=ManyToManyRel}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=m2m_data}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=name})))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_handle_m2m_field_node}))) (expr*{args} (expr (Name (str{id}{val=field_node}))) (expr (Name (str{id}{val=field}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (expr (Attribute (expr{value} (Name (str{id}{val=models}))) (str{attr}{val=ManyToOneRel}))))))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=data}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=attname})))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_handle_fk_field_node}))) (expr*{args} (expr (Name (str{id}{val=field_node}))) (expr (Name (str{id}{val=field}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=field_node}))) (str{attr}{val=getElementsByTagName}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Name (str{id}{val=None})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=to_python}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=getInnerText}))) (expr*{args} (expr (Name (str{id}{val=field_node})))))) (str{attr}{val=strip}))))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=data}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=name})))))))) (expr{value} (Name (str{id}{val=value})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=obj})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=base}))) (str{attr}{val=build_instance}))) (expr*{args} (expr (Name (str{id}{val=Model}))) (expr (Name (str{id}{val=data}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=db}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=base}))) (str{attr}{val=DeserializedObject}))) (expr*{args} (expr (Name (str{id}{val=obj}))) (expr (Name (str{id}{val=m2m_data}))))))))
(root (FunctionDef (str{name}{val=_handle_fk_field_node}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=node}))) (expr (Name (str{id}{val=field})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=node}))) (str{attr}{val=getElementsByTagName}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=None})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (str{attr}{val=to}))) (str{attr}{val=_default_manager}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=keys})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=node}))) (str{attr}{val=getElementsByTagName}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Name (str{id}{val=keys}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=field_value})))) (expr{value} (ListComp (expr{elt} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=getInnerText}))) (expr*{args} (expr (Name (str{id}{val=k})))))) (str{attr}{val=strip}))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=k}))) (expr{iter} (Name (str{id}{val=keys})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=obj})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (str{attr}{val=to}))) (str{attr}{val=_default_manager}))) (str{attr}{val=db_manager}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=db})))))) (str{attr}{val=get_by_natural_key}))) (expr{starargs} (Name (str{id}{val=field_value})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=obj_pk})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=obj}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (str{attr}{val=field_name}))))))))
(root (If (expr{test} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (str{attr}{val=to}))) (str{attr}{val=_meta}))) (str{attr}{val=pk}))) (str{attr}{val=rel}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=obj_pk})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=obj_pk}))) (str{attr}{val=pk})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=field_value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=getInnerText}))) (expr*{args} (expr (Name (str{id}{val=node})))))) (str{attr}{val=strip})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=obj_pk})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (str{attr}{val=to}))) (str{attr}{val=_meta}))) (str{attr}{val=get_field}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (str{attr}{val=field_name})))))) (str{attr}{val=to_python}))) (expr*{args} (expr (Name (str{id}{val=field_value}))))))))
(root (Return (expr{value} (Name (str{id}{val=obj_pk})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=field_value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=getInnerText}))) (expr*{args} (expr (Name (str{id}{val=node})))))) (str{attr}{val=strip})))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (str{attr}{val=to}))) (str{attr}{val=_meta}))) (str{attr}{val=get_field}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (str{attr}{val=field_name})))))) (str{attr}{val=to_python}))) (expr*{args} (expr (Name (str{id}{val=field_value}))))))))
(root (FunctionDef (str{name}{val=_handle_m2m_field_node}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=node}))) (expr (Name (str{id}{val=field})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (str{attr}{val=to}))) (str{attr}{val=_default_manager}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=m2m_convert}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=n})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=keys})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=n}))) (str{attr}{val=getElementsByTagName}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Name (str{id}{val=keys}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=field_value})))) (expr{value} (ListComp (expr{elt} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=getInnerText}))) (expr*{args} (expr (Name (str{id}{val=k})))))) (str{attr}{val=strip}))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=k}))) (expr{iter} (Name (str{id}{val=keys})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=obj_pk})))) (expr{value} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (str{attr}{val=to}))) (str{attr}{val=_default_manager}))) (str{attr}{val=db_manager}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=db})))))) (str{attr}{val=get_by_natural_key}))) (expr{starargs} (Name (str{id}{val=field_value}))))) (str{attr}{val=pk})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=obj_pk})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (str{attr}{val=to}))) (str{attr}{val=_meta}))) (str{attr}{val=pk}))) (str{attr}{val=to_python}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=n}))) (str{attr}{val=getAttribute}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (Return (expr{value} (Name (str{id}{val=obj_pk})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=m2m_convert})))) (expr{value} (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=n})))))) (expr{body} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (str{attr}{val=to}))) (str{attr}{val=_meta}))) (str{attr}{val=pk}))) (str{attr}{val=to_python}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=n}))) (str{attr}{val=getAttribute}))) (expr*{args} (expr (Str (str{s}{val=pk})))))))))))))
(root (Return (expr{value} (ListComp (expr{elt} (Call (expr{func} (Name (str{id}{val=m2m_convert}))) (expr*{args} (expr (Name (str{id}{val=c})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=c}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=node}))) (str{attr}{val=getElementsByTagName}))) (expr*{args} (expr (Str (str{s}{val=object}))))))))))))
(root (FunctionDef (str{name}{val=_get_model_from_node}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=node}))) (expr (Name (str{id}{val=attr})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=model_identifier})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=node}))) (str{attr}{val=getAttribute}))) (expr*{args} (expr (Name (str{id}{val=attr}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=model_identifier}))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=base}))) (str{attr}{val=DeserializationError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=node}))) (str{attr}{val=nodeName}))) (expr (Name (str{id}{val=attr})))))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=apps}))) (str{attr}{val=get_model}))) (expr*{args} (expr (Name (str{id}{val=model_identifier}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=LookupError}))) (expr (Name (str{id}{val=TypeError})))))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=base}))) (str{attr}{val=DeserializationError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=node}))) (str{attr}{val=nodeName}))) (expr (Name (str{id}{val=model_identifier})))))))))))))
(root (FunctionDef (str{name}{val=getInnerText}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=node})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=inner_text})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=child}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=node}))) (str{attr}{val=childNodes}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=child}))) (str{attr}{val=nodeType}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=child}))) (str{attr}{val=TEXT_NODE})))))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=child}))) (str{attr}{val=nodeType}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=child}))) (str{attr}{val=CDATA_SECTION_NODE}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=inner_text}))) (str{attr}{val=append}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=child}))) (str{attr}{val=data}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=child}))) (str{attr}{val=nodeType}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=child}))) (str{attr}{val=ELEMENT_NODE})))))) (stmt*{body} (stmt (Pass))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=inner_text}))) (str{attr}{val=extend}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=getInnerText}))) (expr*{args} (expr (Name (str{id}{val=child})))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Pass))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=inner_text}))))))))
(root (ClassDef (str{name}{val=DefusedExpatParser}) (expr*{bases} (expr (Name (str{id}{val=_ExpatParser})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=_ExpatParser}))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=self})))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=setFeature}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=feature_external_ges}))) (expr (Name (str{id}{val=False}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=setFeature}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=feature_external_pes}))) (expr (Name (str{id}{val=False}))))))))
(root (FunctionDef (str{name}{val=start_doctype_decl}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=sysid}))) (expr (Name (str{id}{val=pubid}))) (expr (Name (str{id}{val=has_internal_subset})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=DTDForbidden}))) (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=sysid}))) (expr (Name (str{id}{val=pubid}))))))))
(root (FunctionDef (str{name}{val=entity_decl}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=is_parameter_entity}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=base}))) (expr (Name (str{id}{val=sysid}))) (expr (Name (str{id}{val=pubid}))) (expr (Name (str{id}{val=notation_name})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=EntitiesForbidden}))) (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=base}))) (expr (Name (str{id}{val=sysid}))) (expr (Name (str{id}{val=pubid}))) (expr (Name (str{id}{val=notation_name}))))))))
(root (FunctionDef (str{name}{val=unparsed_entity_decl}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=base}))) (expr (Name (str{id}{val=sysid}))) (expr (Name (str{id}{val=pubid}))) (expr (Name (str{id}{val=notation_name})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=EntitiesForbidden}))) (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=base}))) (expr (Name (str{id}{val=sysid}))) (expr (Name (str{id}{val=pubid}))) (expr (Name (str{id}{val=notation_name}))))))))
(root (FunctionDef (str{name}{val=external_entity_ref_handler}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context}))) (expr (Name (str{id}{val=base}))) (expr (Name (str{id}{val=sysid}))) (expr (Name (str{id}{val=pubid})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ExternalReferenceForbidden}))) (expr*{args} (expr (Name (str{id}{val=context}))) (expr (Name (str{id}{val=base}))) (expr (Name (str{id}{val=sysid}))) (expr (Name (str{id}{val=pubid}))))))))
(root (FunctionDef (str{name}{val=reset}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=_ExpatParser}))) (str{attr}{val=reset}))) (expr*{args} (expr (Name (str{id}{val=self}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=parser})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_parser})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=StartDoctypeDeclHandler})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=start_doctype_decl})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=EntityDeclHandler})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=entity_decl})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=UnparsedEntityDeclHandler})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=unparsed_entity_decl})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=ExternalEntityRefHandler})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=external_entity_ref_handler})))))
(root (ClassDef (str{name}{val=DefusedXmlException}) (expr*{bases} (expr (Name (str{id}{val=ValueError})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__repr__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Name (str{id}{val=self}))))))))
(root (ClassDef (str{name}{val=DTDForbidden}) (expr*{bases} (expr (Name (str{id}{val=DefusedXmlException})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=sysid}))) (expr (Name (str{id}{val=pubid})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=DTDForbidden}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__})))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=name})))) (expr{value} (Name (str{id}{val=name})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=sysid})))) (expr{value} (Name (str{id}{val=sysid})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=pubid})))) (expr{value} (Name (str{id}{val=pubid})))))
(root (FunctionDef (str{name}{val=__str__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=tpl})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=tpl}))) (str{attr}{val=format}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=name}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=sysid}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=pubid}))))))))
(root (ClassDef (str{name}{val=EntitiesForbidden}) (expr*{bases} (expr (Name (str{id}{val=DefusedXmlException})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=base}))) (expr (Name (str{id}{val=sysid}))) (expr (Name (str{id}{val=pubid}))) (expr (Name (str{id}{val=notation_name})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=EntitiesForbidden}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__})))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=name})))) (expr{value} (Name (str{id}{val=name})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=value})))) (expr{value} (Name (str{id}{val=value})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=base})))) (expr{value} (Name (str{id}{val=base})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=sysid})))) (expr{value} (Name (str{id}{val=sysid})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=pubid})))) (expr{value} (Name (str{id}{val=pubid})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=notation_name})))) (expr{value} (Name (str{id}{val=notation_name})))))
(root (FunctionDef (str{name}{val=__str__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=tpl})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=tpl}))) (str{attr}{val=format}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=name}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=sysid}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=pubid}))))))))
(root (ClassDef (str{name}{val=ExternalReferenceForbidden}) (expr*{bases} (expr (Name (str{id}{val=DefusedXmlException})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context}))) (expr (Name (str{id}{val=base}))) (expr (Name (str{id}{val=sysid}))) (expr (Name (str{id}{val=pubid})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=ExternalReferenceForbidden}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__})))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=context})))) (expr{value} (Name (str{id}{val=context})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=base})))) (expr{value} (Name (str{id}{val=base})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=sysid})))) (expr{value} (Name (str{id}{val=sysid})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=pubid})))) (expr{value} (Name (str{id}{val=pubid})))))
(root (FunctionDef (str{name}{val=__str__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=tpl})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=tpl}))) (str{attr}{val=format}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=sysid}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=pubid}))))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=socket})))))
(root (Import (alias*{names} (alias (str{name}{val=sys})))))
(root (ImportFrom (str{module}{val=wsgiref}) (alias*{names} (alias (str{name}{val=simple_server}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=wsgiref.util}) (alias*{names} (alias (str{name}{val=FileWrapper}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.exceptions}) (alias*{names} (alias (str{name}{val=ImproperlyConfigured}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.management.color}) (alias*{names} (alias (str{name}{val=color_style}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.wsgi}) (alias*{names} (alias (str{name}{val=get_wsgi_application}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.module_loading}) (alias*{names} (alias (str{name}{val=import_string}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.six.moves}) (alias*{names} (alias (str{name}{val=socketserver}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__all__})))) (expr{value} (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))))))))
(root (FunctionDef (str{name}{val=get_internal_wsgi_application}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=app_path})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=settings}))) (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=app_path}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=get_wsgi_application})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=import_string}))) (expr*{args} (expr (Name (str{id}{val=app_path}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ImportError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=msg})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=WSGI application '_STR:1_' could not be loaded; Error importing module: '_STR:2_'}))) (operator{op} (Mod)) (expr{right} (Dict (expr*{keys} (expr (Str (str{s}{val=app_path}))) (expr (Str (str{s}{val=exception})))) (expr*{values} (expr (Name (str{id}{val=app_path}))) (expr (Name (str{id}{val=e}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=reraise}))) (expr*{args} (expr (Name (str{id}{val=ImproperlyConfigured}))) (expr (Call (expr{func} (Name (str{id}{val=ImproperlyConfigured}))) (expr*{args} (expr (Name (str{id}{val=msg})))))) (expr (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=exc_info}))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=2}))))))))))))
(root (ClassDef (str{name}{val=WSGIServer}) (expr*{bases} (expr (Attribute (expr{value} (Name (str{id}{val=simple_server}))) (str{attr}{val=WSGIServer}))) (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=request_queue_size})))) (expr{value} (Num (int{n}{val=10})))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=kwargs}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=address_family})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=socket}))) (str{attr}{val=AF_INET6})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=WSGIServer}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (FunctionDef (str{name}{val=server_bind}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=WSGIServer}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=server_bind})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=setup_environ})))))))
(root (ClassDef (str{name}{val=WSGIRequestHandler}) (expr*{bases} (expr (Attribute (expr{value} (Name (str{id}{val=simple_server}))) (str{attr}{val=WSGIRequestHandler}))) (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style})))) (expr{value} (Call (expr{func} (Name (str{id}{val=color_style})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=WSGIRequestHandler}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (FunctionDef (str{name}{val=address_string}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=client_address}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))
(root (FunctionDef (str{name}{val=log_message}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=format})))) (str{vararg}{val=args}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=msg})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=log_date_time_string}))))) (expr (BinOp (expr{left} (Name (str{id}{val=format}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=args}))))))))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Subscript (expr{value} (Name (str{id}{val=args}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=msg})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style}))) (str{attr}{val=HTTP_SUCCESS}))) (expr*{args} (expr (Name (str{id}{val=msg}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Subscript (expr{value} (Name (str{id}{val=args}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=msg})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style}))) (str{attr}{val=HTTP_INFO}))) (expr*{args} (expr (Name (str{id}{val=msg}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=args}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=msg})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style}))) (str{attr}{val=HTTP_NOT_MODIFIED}))) (expr*{args} (expr (Name (str{id}{val=msg}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Subscript (expr{value} (Name (str{id}{val=args}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=msg})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style}))) (str{attr}{val=HTTP_REDIRECT}))) (expr*{args} (expr (Name (str{id}{val=msg}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=args}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=msg})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style}))) (str{attr}{val=HTTP_NOT_FOUND}))) (expr*{args} (expr (Name (str{id}{val=msg}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Subscript (expr{value} (Name (str{id}{val=args}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=msg})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style}))) (str{attr}{val=HTTP_BAD_REQUEST}))) (expr*{args} (expr (Name (str{id}{val=msg}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=msg})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=style}))) (str{attr}{val=HTTP_SERVER_ERROR}))) (expr*{args} (expr (Name (str{id}{val=msg}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=stderr}))) (str{attr}{val=write}))) (expr*{args} (expr (Name (str{id}{val=msg}))))))))
(root (FunctionDef (str{name}{val=run}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=addr}))) (expr (Name (str{id}{val=port}))) (expr (Name (str{id}{val=wsgi_handler}))) (expr (Name (str{id}{val=ipv6}))) (expr (Name (str{id}{val=threading})))) (expr*{defaults} (expr (Name (str{id}{val=False}))) (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=server_address})))) (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=addr}))) (expr (Name (str{id}{val=port}))))))))
(root (If (expr{test} (Name (str{id}{val=threading}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=httpd_cls})))) (expr{value} (Call (expr{func} (Name (str{id}{val=type}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (expr (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=socketserver}))) (str{attr}{val=ThreadingMixIn}))) (expr (Name (str{id}{val=WSGIServer})))))) (expr (Dict (epsilon))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=httpd_cls})))) (expr{value} (Name (str{id}{val=WSGIServer})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=httpd})))) (expr{value} (Call (expr{func} (Name (str{id}{val=httpd_cls}))) (expr*{args} (expr (Name (str{id}{val=server_address}))) (expr (Name (str{id}{val=WSGIRequestHandler})))) (keyword*{keywords} (keyword (str{arg}{val=ipv6}) (expr{value} (Name (str{id}{val=ipv6})))))))))
(root (If (expr{test} (Name (str{id}{val=threading}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=httpd}))) (str{attr}{val=daemon_threads})))) (expr{value} (Name (str{id}{val=True})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=httpd}))) (str{attr}{val=set_app}))) (expr*{args} (expr (Name (str{id}{val=wsgi_handler}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=httpd}))) (str{attr}{val=serve_forever})))))))
(root (Import (alias*{names} (alias (str{name}{val=importlib})))))
(root (Import (alias*{names} (alias (str{name}{val=os})))))
(root (Import (alias*{names} (alias (str{name}{val=sys})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__version__})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__all__})))) (expr{value} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=FASTCGI_OPTIONS})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=_STR:3_}))) (expr (Str (str{s}{val=socket}))) (expr (Str (str{s}{val=method}))) (expr (Str (str{s}{val=daemonize}))) (expr (Str (str{s}{val=workdir}))) (expr (Str (str{s}{val=pidfile}))) (expr (Str (str{s}{val=maxspare}))) (expr (Str (str{s}{val=minspare}))) (expr (Str (str{s}{val=maxchildren}))) (expr (Str (str{s}{val=maxrequests}))) (expr (Str (str{s}{val=debug}))) (expr (Str (str{s}{val=outlog}))) (expr (Str (str{s}{val=errlog}))) (expr (Str (str{s}{val=umask})))) (expr*{values} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Str (str{s}{val=fork}))) (expr (Name (str{id}{val=None}))) (expr (Str (str{s}{val=/}))) (expr (Name (str{id}{val=None}))) (expr (Num (int{n}{val=5}))) (expr (Num (int{n}{val=2}))) (expr (Num (int{n}{val=50}))) (expr (Num (int{n}{val=0}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))))))))
(root (FunctionDef (str{name}{val=fastcgi_help}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=message})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Print (expr*{values} (expr (Name (str{id}{val=FASTCGI_HELP})))) (bool{nl}{val=True})))
(root (If (expr{test} (Name (str{id}{val=message}))) (stmt*{body} (stmt (Pass)))))
(root (Print (expr*{values} (expr (Name (str{id}{val=message})))) (bool{nl}{val=True})))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (FunctionDef (str{name}{val=runfastcgi}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=argset})))) (str{kwarg}{val=kwargs}) (expr*{defaults} (expr (List (epsilon)))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=options})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=FASTCGI_OPTIONS}))) (str{attr}{val=copy})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=update}))) (expr*{args} (expr (Name (str{id}{val=kwargs}))))))))
(root (For (expr{target} (Name (str{id}{val=x}))) (expr{iter} (Name (str{id}{val=argset}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Str (str{s}{val==}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=x})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Name (str{id}{val=v}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=x}))) (str{attr}{val=split}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Num (int{n}{val=1}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Name (str{id}{val=v}))))))) (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=x}))) (expr (Name (str{id}{val=True}))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=k}))) (str{attr}{val=lower})))))))))) (expr{value} (Name (str{id}{val=v})))))
(root (If (expr{test} (Compare (expr{left} (Str (str{s}{val=help}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=options})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=fastcgi_help})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Import (alias*{names} (alias (str{name}{val=flup})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ImportError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=stderr}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=e}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=stderr}))) (str{attr}{val=write}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=stderr}))) (str{attr}{val=write}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=stderr}))) (str{attr}{val=write}))) (expr*{args} (expr (Str (str{s}{val=  http://www.©saddi.com/software/flup/   If you've already\n}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=stderr}))) (str{attr}{val=write}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=flup_module})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:1_}))) (operator{op} (Add)) (expr{right} (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=prefork}))) (expr (Str (str{s}{val=_STR:2_}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=wsgi_opts})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=maxSpare}))) (expr (Str (str{s}{val=minSpare}))) (expr (Str (str{s}{val=maxChildren}))) (expr (Str (str{s}{val=maxRequests})))) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=maxspare})))))))))) (expr (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=minspare})))))))))) (expr (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=maxchildren})))))))))) (expr (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=maxrequests})))))))))))))))
(root (AugAssign (expr{target} (Name (str{id}{val=flup_module}))) (operator{op} (Add)) (expr{value} (Str (str{s}{val=_STR:7_})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))))))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=wsgi_opts})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=maxSpare}))) (expr (Str (str{s}{val=minSpare}))) (expr (Str (str{s}{val=maxThreads})))) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=maxspare})))))))))) (expr (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=minspare})))))))))) (expr (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=maxchildren})))))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=fastcgi_help}))) (expr*{args} (expr (Str (str{s}{val=ERROR: Implementation must be one of prefork or thread.}))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=wsgi_opts}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=module})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=importlib}))) (str{attr}{val=import_module}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=.%s}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=flup_module}))))) (expr (Str (str{s}{val=_STR:1_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=WSGIServer})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=module}))) (str{attr}{val=WSGIServer})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=Exception}))) (stmt*{body} (stmt (Pass)))))))
(root (Print (expr*{values} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=flup_module})))))) (bool{nl}{val=True})))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (ImportFrom (str{module}{val=django.core.servers.basehttp}) (alias*{names} (alias (str{name}{val=get_internal_wsgi_application}))) (int{level}{val=0})))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=host}))))))) (expr (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=port}))))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=socket})))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=wsgi_opts}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Tuple (expr*{elts} (expr (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=host}))))))) (expr (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=port})))))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=socket}))))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=host}))))))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=port})))))))))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=wsgi_opts}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:1_})))))))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=socket})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=socket}))))))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=host}))))))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=port})))))))))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=wsgi_opts}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Name (str{id}{val=None})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=fastcgi_help}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=daemonize}))))))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=daemonize})))) (expr{value} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=wsgi_opts}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=daemonize}))))))) (str{attr}{val=lower}))))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=_STR:3_}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=daemonize})))) (expr{value} (Name (str{id}{val=True})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=daemonize}))))))) (str{attr}{val=lower}))))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=_STR:3_}))))))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=daemonize})))) (expr{value} (Name (str{id}{val=False})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=fastcgi_help}))) (expr*{args} (expr (Str (str{s}{val=ERROR: Invalid option for daemonize parameter.}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=daemon_kwargs})))) (expr{value} (Dict (epsilon)))))
(root (If (expr{test} (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=daemon_kwargs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:1_})))))))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (If (expr{test} (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=daemon_kwargs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:1_})))))))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (If (expr{test} (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=daemon_kwargs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (expr (Num (int{n}{val=8}))))))))
(root (If (expr{test} (Name (str{id}{val=daemonize}))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=django.utils.daemonize}) (alias*{names} (alias (str{name}{val=become_daemon}))) (int{level}{val=0})))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=become_daemon}))) (keyword*{keywords} (keyword (str{arg}{val=our_home_dir}) (expr{value} (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=workdir}))))))))) (expr{kwargs} (Name (str{id}{val=daemon_kwargs})))))))
(root (If (expr{test} (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=pidfile}))))))) (stmt*{body} (stmt (Pass)))))
(root (With (expr{context_expr} (Call (expr{func} (Name (str{id}{val=open}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=pidfile}))))))) (expr (Str (str{s}{val=w})))))) (expr{optional_vars} (Name (str{id}{val=fp}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=fp}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=%d\n}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=getpid}))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=WSGIServer}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=get_internal_wsgi_application})))))) (expr{kwargs} (Name (str{id}{val=wsgi_opts}))))) (str{attr}{val=run})))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=__name__}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=runfastcgi}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=argv}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=1}))))))))))))
(root (ImportFrom (str{module}{val=django.dispatch}) (alias*{names} (alias (str{name}{val=Signal}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=request_started})))) (expr{value} (Call (expr{func} (Name (str{id}{val=Signal})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=request_finished})))) (expr{value} (Call (expr{func} (Name (str{id}{val=Signal})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=got_request_exception})))) (expr{value} (Call (expr{func} (Name (str{id}{val=Signal}))) (keyword*{keywords} (keyword (str{arg}{val=providing_args}) (expr{value} (List (expr*{elts} (expr (Str (str{s}{val=request}))))))))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=base64})))))
(root (Import (alias*{names} (alias (str{name}{val=json})))))
(root (Import (alias*{names} (alias (str{name}{val=time})))))
(root (Import (alias*{names} (alias (str{name}{val=zlib})))))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=baseconv}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.crypto}) (alias*{names} (alias (str{name}{val=constant_time_compare})) (alias (str{name}{val=salted_hmac}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=force_bytes})) (alias (str{name}{val=force_str})) (alias (str{name}{val=force_text}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.module_loading}) (alias*{names} (alias (str{name}{val=import_string}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=BadSignature}) (expr*{bases} (expr (Name (str{id}{val=Exception})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (ClassDef (str{name}{val=SignatureExpired}) (expr*{bases} (expr (Name (str{id}{val=BadSignature})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (FunctionDef (str{name}{val=b64_encode}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=s})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=base64}))) (str{attr}{val=urlsafe_b64encode}))) (expr*{args} (expr (Name (str{id}{val=s})))))) (str{attr}{val=strip}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=b64_decode}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=s})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=pad})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mult)) (expr{right} (BinOp (expr{left} (UnaryOp (unaryop{op} (USub)) (expr{operand} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=s})))))))) (operator{op} (Mod)) (expr{right} (Num (int{n}{val=4})))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=base64}))) (str{attr}{val=urlsafe_b64decode}))) (expr*{args} (expr (BinOp (expr{left} (Name (str{id}{val=s}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=pad}))))))))))
(root (FunctionDef (str{name}{val=base64_hmac}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=salt}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=key})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=b64_encode}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=salted_hmac}))) (expr*{args} (expr (Name (str{id}{val=salt}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=key})))))) (str{attr}{val=digest}))))))))))
(root (FunctionDef (str{name}{val=get_cookie_signer}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=salt})))) (expr*{defaults} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=Signer})))) (expr{value} (Call (expr{func} (Name (str{id}{val=import_string}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=SIGNING_BACKEND}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=key})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_bytes}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=SECRET_KEY}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=Signer}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=key})))))) (keyword*{keywords} (keyword (str{arg}{val=salt}) (expr{value} (Name (str{id}{val=salt})))))))))
(root (ClassDef (str{name}{val=JSONSerializer}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=dumps}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=obj})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=json}))) (str{attr}{val=dumps}))) (expr*{args} (expr (Name (str{id}{val=obj})))) (keyword*{keywords} (keyword (str{arg}{val=separators}) (expr{value} (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_})))))))))) (str{attr}{val=encode}))) (expr*{args} (expr (Str (str{s}{val=latin-1}))))))))
(root (FunctionDef (str{name}{val=loads}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=data})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=json}))) (str{attr}{val=loads}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=data}))) (str{attr}{val=decode}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (FunctionDef (str{name}{val=dumps}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=obj}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=salt}))) (expr (Name (str{id}{val=serializer}))) (expr (Name (str{id}{val=compress})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=JSONSerializer}))) (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=data})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=serializer}))))) (str{attr}{val=dumps}))) (expr*{args} (expr (Name (str{id}{val=obj}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=is_compressed})))) (expr{value} (Name (str{id}{val=False})))))
(root (If (expr{test} (Name (str{id}{val=compress}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=compressed})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=zlib}))) (str{attr}{val=compress}))) (expr*{args} (expr (Name (str{id}{val=data}))))))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=compressed})))))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=data})))))) (operator{op} (Sub)) (expr{right} (Num (int{n}{val=1})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=data})))) (expr{value} (Name (str{id}{val=compressed})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=is_compressed})))) (expr{value} (Name (str{id}{val=True})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=base64d})))) (expr{value} (Call (expr{func} (Name (str{id}{val=b64_encode}))) (expr*{args} (expr (Name (str{id}{val=data}))))))))
(root (If (expr{test} (Name (str{id}{val=is_compressed}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=base64d})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=base64d})))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=TimestampSigner}))) (expr*{args} (expr (Name (str{id}{val=key})))) (keyword*{keywords} (keyword (str{arg}{val=salt}) (expr{value} (Name (str{id}{val=salt}))))))) (str{attr}{val=sign}))) (expr*{args} (expr (Name (str{id}{val=base64d}))))))))
(root (FunctionDef (str{name}{val=loads}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=s}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=salt}))) (expr (Name (str{id}{val=serializer}))) (expr (Name (str{id}{val=max_age})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=JSONSerializer}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=base64d})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_bytes}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=TimestampSigner}))) (expr*{args} (expr (Name (str{id}{val=key})))) (keyword*{keywords} (keyword (str{arg}{val=salt}) (expr{value} (Name (str{id}{val=salt}))))))) (str{attr}{val=unsign}))) (expr*{args} (expr (Name (str{id}{val=s})))) (keyword*{keywords} (keyword (str{arg}{val=max_age}) (expr{value} (Name (str{id}{val=max_age}))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=decompress})))) (expr{value} (Name (str{id}{val=False})))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=base64d}))) (slice{slice} (Slice (expr{upper} (Num (int{n}{val=1}))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=base64d})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=base64d}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=1})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=decompress})))) (expr{value} (Name (str{id}{val=True})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=data})))) (expr{value} (Call (expr{func} (Name (str{id}{val=b64_decode}))) (expr*{args} (expr (Name (str{id}{val=base64d}))))))))
(root (If (expr{test} (Name (str{id}{val=decompress}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=data})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=zlib}))) (str{attr}{val=decompress}))) (expr*{args} (expr (Name (str{id}{val=data}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=serializer}))))) (str{attr}{val=loads}))) (expr*{args} (expr (Name (str{id}{val=data}))))))))
(root (ClassDef (str{name}{val=Signer}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=sep}))) (expr (Name (str{id}{val=salt})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=sep})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_str}))) (expr*{args} (expr (Name (str{id}{val=sep}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=key})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=key}))) (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=SECRET_KEY}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=salt})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_str}))) (expr*{args} (expr (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=salt}))) (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__class__}))) (str{attr}{val=__module__}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__class__}))) (str{attr}{val=__name__}))))))))))))))))
(root (FunctionDef (str{name}{val=signature}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=signature})))) (expr{value} (Call (expr{func} (Name (str{id}{val=base64_hmac}))) (expr*{args} (expr (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=salt}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=_STR:0_}))))) (expr (Name (str{id}{val=value}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=key}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=force_str}))) (expr*{args} (expr (Name (str{id}{val=signature}))))))))
(root (FunctionDef (str{name}{val=sign}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_str}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (Return (expr{value} (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Str (str{s}{val=%s%s%s})))))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=value}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=sep}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=signature}))) (expr*{args} (expr (Name (str{id}{val=value})))))))))))))
(root (FunctionDef (str{name}{val=unsign}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=signed_value})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=signed_value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_str}))) (expr*{args} (expr (Name (str{id}{val=signed_value}))))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=sep}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=signed_value})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=BadSignature}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=sep}))))))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=sig}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=signed_value}))) (str{attr}{val=rsplit}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=sep}))) (expr (Num (int{n}{val=1}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=constant_time_compare}))) (expr*{args} (expr (Name (str{id}{val=sig}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=signature}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=BadSignature}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=sig}))))))))))
(root (ClassDef (str{name}{val=TimestampSigner}) (expr*{bases} (expr (Name (str{id}{val=Signer})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=timestamp}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=baseconv}))) (str{attr}{val=base62}))) (str{attr}{val=encode}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=time}))) (str{attr}{val=time})))))))))))))
(root (FunctionDef (str{name}{val=sign}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_str}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Str (str{s}{val=%s%s%s})))))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=value}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=sep}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=timestamp}))))))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=TimestampSigner}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=sign}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (FunctionDef (str{name}{val=unsign}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=max_age})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=TimestampSigner}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=unsign}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=timestamp}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=result}))) (str{attr}{val=rsplit}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=sep}))) (expr (Num (int{n}{val=1}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=timestamp})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=baseconv}))) (str{attr}{val=base62}))) (str{attr}{val=decode}))) (expr*{args} (expr (Name (str{id}{val=timestamp}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=max_age}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=age})))) (expr{value} (BinOp (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=time}))) (str{attr}{val=time}))))) (operator{op} (Sub)) (expr{right} (Name (str{id}{val=timestamp})))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=age}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Name (str{id}{val=max_age})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=SignatureExpired}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=age}))) (expr (Name (str{id}{val=max_age})))))))))))))
(root (Return (expr{value} (Name (str{id}{val=value})))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=functools})))))
(root (ImportFrom (str{module}{val=importlib}) (alias*{names} (alias (str{name}{val=import_module}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=re})))))
(root (ImportFrom (str{module}{val=threading}) (alias*{names} (alias (str{name}{val=local}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=warnings})))))
(root (ImportFrom (str{module}{val=django.http}) (alias*{names} (alias (str{name}{val=Http404}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.exceptions}) (alias*{names} (alias (str{name}{val=ImproperlyConfigured})) (alias (str{name}{val=ViewDoesNotExist}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.datastructures}) (alias*{names} (alias (str{name}{val=MultiValueDict}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.deprecation}) (alias*{names} (alias (str{name}{val=RemovedInDjango20Warning}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=force_str})) (alias (str{name}{val=force_text})) (alias (str{name}{val=iri_to_uri}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.functional}) (alias*{names} (alias (str{name}{val=lazy}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.http}) (alias*{names} (alias (str{name}{val=urlquote}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.module_loading}) (alias*{names} (alias (str{name}{val=module_has_submodule}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.regex_helper}) (alias*{names} (alias (str{name}{val=normalize}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six})) (alias (str{name}{val=lru_cache}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.translation}) (alias*{names} (alias (str{name}{val=get_language}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_prefixes})))) (expr{value} (Call (expr{func} (Name (str{id}{val=local})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_urlconfs})))) (expr{value} (Call (expr{func} (Name (str{id}{val=local})))))))
(root (ClassDef (str{name}{val=ResolverMatch}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=func}))) (expr (Name (str{id}{val=args}))) (expr (Name (str{id}{val=kwargs}))) (expr (Name (str{id}{val=url_name}))) (expr (Name (str{id}{val=app_name}))) (expr (Name (str{id}{val=namespaces})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=func})))) (expr{value} (Name (str{id}{val=func})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=args})))) (expr{value} (Name (str{id}{val=args})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=kwargs})))) (expr{value} (Name (str{id}{val=kwargs})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=url_name})))) (expr{value} (Name (str{id}{val=url_name})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=app_name})))) (expr{value} (Name (str{id}{val=app_name})))))
(root (If (expr{test} (Name (str{id}{val=namespaces}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=namespaces})))) (expr{value} (ListComp (expr{elt} (Name (str{id}{val=x}))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=x}))) (expr{iter} (Name (str{id}{val=namespaces}))) (expr*{ifs} (expr (Name (str{id}{val=x}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=namespaces})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=namespace})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=_STR:0_}))) (str{attr}{val=join}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=namespaces}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=func}))) (expr (Str (str{s}{val=_STR:0_})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_func_path})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=_STR:0_}))) (str{attr}{val=join}))) (expr*{args} (expr (List (expr*{elts} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=func}))) (str{attr}{val=__class__}))) (str{attr}{val=__module__}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=func}))) (str{attr}{val=__class__}))) (str{attr}{val=__name__})))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_func_path})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=_STR:0_}))) (str{attr}{val=join}))) (expr*{args} (expr (List (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=func}))) (str{attr}{val=__module__}))) (expr (Attribute (expr{value} (Name (str{id}{val=func}))) (str{attr}{val=__name__})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=view_path})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=url_name}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_func_path}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=view_name})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=_STR:0_}))) (str{attr}{val=join}))) (expr*{args} (expr (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=namespaces}))) (operator{op} (Add)) (expr{right} (List (expr*{elts} (expr (Name (str{id}{val=view_path})))))))))))))
(root (FunctionDef (str{name}{val=__getitem__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=index})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Subscript (expr{value} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=func}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=args}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=kwargs})))))) (slice{slice} (Index (expr{value} (Name (str{id}{val=index})))))))))
(root (FunctionDef (str{name}{val=__repr__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_func_path}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=args}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=kwargs}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=url_name}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=app_name}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=namespaces}))))))))))
(root (ClassDef (str{name}{val=Resolver404}) (expr*{bases} (expr (Name (str{id}{val=Http404})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (ClassDef (str{name}{val=NoReverseMatch}) (expr*{bases} (expr (Name (str{id}{val=Exception})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=lru_cache}))) (str{attr}{val=lru_cache}))) (keyword*{keywords} (keyword (str{arg}{val=maxsize}) (expr{value} (Name (str{id}{val=None}))))))))))
(root (FunctionDef (str{name}{val=get_callable}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=lookup_view}))) (expr (Name (str{id}{val=can_fail})))) (expr*{defaults} (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=callable}))) (expr*{args} (expr (Name (str{id}{val=lookup_view})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=lookup_view})))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=mod_name}))) (expr (Name (str{id}{val=func_name}))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_mod_func}))) (expr*{args} (expr (Name (str{id}{val=lookup_view}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=func_name}))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=can_fail}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=lookup_view})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ImportError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=lookup_view}))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=mod})))) (expr{value} (Call (expr{func} (Name (str{id}{val=import_module}))) (expr*{args} (expr (Name (str{id}{val=mod_name}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ImportError}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Name (str{id}{val=can_fail}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=lookup_view})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=parentmod}))) (expr (Name (str{id}{val=submod}))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_mod_func}))) (expr*{args} (expr (Name (str{id}{val=mod_name}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=submod}))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=module_has_submodule}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=import_module}))) (expr*{args} (expr (Name (str{id}{val=parentmod})))))) (expr (Name (str{id}{val=submod}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ViewDoesNotExist}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=lookup_view}))) (expr (Name (str{id}{val=mod_name})))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Raise (epsilon)))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=view_func})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=mod}))) (expr (Name (str{id}{val=func_name}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=AttributeError}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Name (str{id}{val=can_fail}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=lookup_view})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ViewDoesNotExist}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=lookup_view}))) (expr (Name (str{id}{val=mod_name})))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=callable}))) (expr*{args} (expr (Name (str{id}{val=view_func})))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ViewDoesNotExist}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=mod_name}))) (expr (Name (str{id}{val=func_name})))))))))))))
(root (Return (expr{value} (Name (str{id}{val=view_func})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=lru_cache}))) (str{attr}{val=lru_cache}))) (keyword*{keywords} (keyword (str{arg}{val=maxsize}) (expr{value} (Name (str{id}{val=None}))))))))))
(root (FunctionDef (str{name}{val=get_resolver}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=urlconf})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=urlconf}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=urlconf})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=ROOT_URLCONF})))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=RegexURLResolver}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=urlconf}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=lru_cache}))) (str{attr}{val=lru_cache}))) (keyword*{keywords} (keyword (str{arg}{val=maxsize}) (expr{value} (Name (str{id}{val=None}))))))))))
(root (FunctionDef (str{name}{val=get_ns_resolver}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=ns_pattern}))) (expr (Name (str{id}{val=resolver})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ns_resolver})))) (expr{value} (Call (expr{func} (Name (str{id}{val=RegexURLResolver}))) (expr*{args} (expr (Name (str{id}{val=ns_pattern}))) (expr (Attribute (expr{value} (Name (str{id}{val=resolver}))) (str{attr}{val=url_patterns}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=RegexURLResolver}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (List (expr*{elts} (expr (Name (str{id}{val=ns_resolver})))))))))))
(root (FunctionDef (str{name}{val=get_mod_func}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=callback})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=dot})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=callback}))) (str{attr}{val=rindex}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ValueError}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=callback}))) (expr (Str (str{s}{val=}))))))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Subscript (expr{value} (Name (str{id}{val=callback}))) (slice{slice} (Slice (expr{upper} (Name (str{id}{val=dot}))))))) (expr (Subscript (expr{value} (Name (str{id}{val=callback}))) (slice{slice} (Slice (expr{lower} (BinOp (expr{left} (Name (str{id}{val=dot}))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=1}))))))))))))))
(root (ClassDef (str{name}{val=LocaleRegexProvider}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=regex})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_regex})))) (expr{value} (Name (str{id}{val=regex})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_regex_dict})))) (expr{value} (Dict (epsilon)))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=regex}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=language_code})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_language})))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=language_code}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_regex_dict})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_regex}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=string_types})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=regex})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_regex})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=regex})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_regex}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=compiled_regex})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Name (str{id}{val=regex}))) (expr (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=UNICODE}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=error}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ImproperlyConfigured}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=regex}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))) (expr*{args} (expr (Name (str{id}{val=e}))))))))))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_regex_dict}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=language_code})))))))) (expr{value} (Name (str{id}{val=compiled_regex})))))
(root (Return (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_regex_dict}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=language_code})))))))))
(root (ClassDef (str{name}{val=RegexURLPattern}) (expr*{bases} (expr (Name (str{id}{val=LocaleRegexProvider})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=regex}))) (expr (Name (str{id}{val=callback}))) (expr (Name (str{id}{val=default_args}))) (expr (Name (str{id}{val=name})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=LocaleRegexProvider}))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=regex}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=callable}))) (expr*{args} (expr (Name (str{id}{val=callback})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_callback})))) (expr{value} (Name (str{id}{val=callback})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_callback})))) (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_callback_str})))) (expr{value} (Name (str{id}{val=callback})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=default_args})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=default_args}))) (expr (Dict (epsilon))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=name})))) (expr{value} (Name (str{id}{val=name})))))
(root (FunctionDef (str{name}{val=__repr__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=force_str}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__class__}))) (str{attr}{val=__name__}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=name}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=regex}))) (str{attr}{val=pattern})))))))))))))
(root (FunctionDef (str{name}{val=add_prefix}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=prefix})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=prefix}))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Str (str{s}{val=_STR:0_}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (epsilon)))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_callback_str})))) (expr{value} (BinOp (expr{left} (BinOp (expr{left} (Name (str{id}{val=prefix}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=_STR:0_}))))) (operator{op} (Add)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_callback_str})))))))
(root (FunctionDef (str{name}{val=resolve}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=path})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=match})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=regex}))) (str{attr}{val=search}))) (expr*{args} (expr (Name (str{id}{val=path}))))))))
(root (If (expr{test} (Name (str{id}{val=match}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=kwargs})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=match}))) (str{attr}{val=groupdict})))))))
(root (If (expr{test} (Name (str{id}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=args})))) (expr{value} (Tuple (epsilon)))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=args})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=match}))) (str{attr}{val=groups})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=kwargs}))) (str{attr}{val=update}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=default_args}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=ResolverMatch}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=callback}))) (expr (Name (str{id}{val=args}))) (expr (Name (str{id}{val=kwargs}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=name}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=callback}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_callback}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_callback})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_callback})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_callable}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_callback_str}))))))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_callback})))))
(root (ClassDef (str{name}{val=RegexURLResolver}) (expr*{bases} (expr (Name (str{id}{val=LocaleRegexProvider})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=regex}))) (expr (Name (str{id}{val=urlconf_name}))) (expr (Name (str{id}{val=default_kwargs}))) (expr (Name (str{id}{val=app_name}))) (expr (Name (str{id}{val=namespace})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=LocaleRegexProvider}))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=regex}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=urlconf_name})))) (expr{value} (Name (str{id}{val=urlconf_name})))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=urlconf_name}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=string_types})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_urlconf_module})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=urlconf_name})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=callback})))) (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=default_kwargs})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=default_kwargs}))) (expr (Dict (epsilon))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=namespace})))) (expr{value} (Name (str{id}{val=namespace})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=app_name})))) (expr{value} (Name (str{id}{val=app_name})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_reverse_dict})))) (expr{value} (Dict (epsilon)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_namespace_dict})))) (expr{value} (Dict (epsilon)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_app_dict})))) (expr{value} (Dict (epsilon)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_callback_strs})))) (expr{value} (Call (expr{func} (Name (str{id}{val=set})))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_populated})))) (expr{value} (Name (str{id}{val=False})))))
(root (FunctionDef (str{name}{val=__repr__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=urlconf_name}))) (expr (Name (str{id}{val=list})))))) (expr (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=urlconf_name}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=urlconf_repr})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Attribute (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=urlconf_name}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (str{attr}{val=__class__}))) (str{attr}{val=__name__})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=urlconf_repr})))) (expr{value} (Call (expr{func} (Name (str{id}{val=repr}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=urlconf_name}))))))))
(root (Return (expr{value} (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__class__}))) (str{attr}{val=__name__}))) (expr (Name (str{id}{val=urlconf_repr}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=app_name}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=namespace}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=regex}))) (str{attr}{val=pattern}))))))))))
(root (FunctionDef (str{name}{val=_populate}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=lookups})))) (expr{value} (Call (expr{func} (Name (str{id}{val=MultiValueDict})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=namespaces})))) (expr{value} (Dict (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=apps})))) (expr{value} (Dict (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=language_code})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_language})))))))
(root (For (expr{target} (Name (str{id}{val=pattern}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=reversed}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=url_patterns})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=pattern}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_callback_strs}))) (str{attr}{val=add}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=pattern}))) (str{attr}{val=_callback_str}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=pattern}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=callback})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=pattern}))) (str{attr}{val=_callback})))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=callback}))) (expr (Attribute (expr{value} (Name (str{id}{val=functools}))) (str{attr}{val=partial})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=callback})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=callback}))) (str{attr}{val=func})))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=callback}))) (expr (Str (str{s}{val=_STR:0_})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=lookup_str})))) (expr{value} (BinOp (expr{left} (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=callback}))) (str{attr}{val=__module__}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=_STR:0_}))))) (operator{op} (Add)) (expr{right} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=callback}))) (str{attr}{val=__class__}))) (str{attr}{val=__name__})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=lookup_str})))) (expr{value} (BinOp (expr{left} (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=callback}))) (str{attr}{val=__module__}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=_STR:0_}))))) (operator{op} (Add)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=callback}))) (str{attr}{val=__name__})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_callback_strs}))) (str{attr}{val=add}))) (expr*{args} (expr (Name (str{id}{val=lookup_str}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=p_pattern})))) (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=pattern}))) (str{attr}{val=regex}))) (str{attr}{val=pattern})))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=p_pattern}))) (str{attr}{val=startswith}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=p_pattern})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=p_pattern}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=1})))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=pattern}))) (expr (Name (str{id}{val=RegexURLResolver})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=pattern}))) (str{attr}{val=namespace}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=namespaces}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Name (str{id}{val=pattern}))) (str{attr}{val=namespace})))))))) (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=p_pattern}))) (expr (Name (str{id}{val=pattern}))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=pattern}))) (str{attr}{val=app_name}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=apps}))) (str{attr}{val=setdefault}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=pattern}))) (str{attr}{val=app_name}))) (expr (List (epsilon)))))) (str{attr}{val=append}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=pattern}))) (str{attr}{val=namespace}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=parent_pat})))) (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=pattern}))) (str{attr}{val=regex}))) (str{attr}{val=pattern})))))
(root (For (expr{target} (Name (str{id}{val=name}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=pattern}))) (str{attr}{val=reverse_dict}))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=matches}))) (expr (Name (str{id}{val=pat}))) (expr (Name (str{id}{val=defaults})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=pattern}))) (str{attr}{val=reverse_dict}))) (str{attr}{val=getlist}))) (expr*{args} (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=new_matches})))) (expr{value} (Call (expr{func} (Name (str{id}{val=normalize}))) (expr*{args} (expr (BinOp (expr{left} (Name (str{id}{val=parent_pat}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=pat}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=lookups}))) (str{attr}{val=appendlist}))) (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=new_matches}))) (expr (BinOp (expr{left} (Name (str{id}{val=p_pattern}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=pat}))))) (expr (Call (expr{func} (Name (str{id}{val=dict}))) (expr*{args} (expr (Name (str{id}{val=defaults})))) (expr{kwargs} (Attribute (expr{value} (Name (str{id}{val=pattern}))) (str{attr}{val=default_kwargs})))))))))))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=namespace}))) (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=prefix}))) (expr (Name (str{id}{val=sub_pattern}))))))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=pattern}))) (str{attr}{val=namespace_dict}))) (str{attr}{val=items}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=namespaces}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=namespace})))))))) (expr{value} (Tuple (expr*{elts} (expr (BinOp (expr{left} (Name (str{id}{val=p_pattern}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=prefix}))))) (expr (Name (str{id}{val=sub_pattern}))))))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=app_name}))) (expr (Name (str{id}{val=namespace_list})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=pattern}))) (str{attr}{val=app_dict}))) (str{attr}{val=items}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=apps}))) (str{attr}{val=setdefault}))) (expr*{args} (expr (Name (str{id}{val=app_name}))) (expr (List (epsilon)))))) (str{attr}{val=extend}))) (expr*{args} (expr (Name (str{id}{val=namespace_list}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_callback_strs}))) (str{attr}{val=update}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=pattern}))) (str{attr}{val=_callback_strs}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=bits})))) (expr{value} (Call (expr{func} (Name (str{id}{val=normalize}))) (expr*{args} (expr (Name (str{id}{val=p_pattern}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=lookups}))) (str{attr}{val=appendlist}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=pattern}))) (str{attr}{val=callback}))) (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=bits}))) (expr (Name (str{id}{val=p_pattern}))) (expr (Attribute (expr{value} (Name (str{id}{val=pattern}))) (str{attr}{val=default_args})))))))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=pattern}))) (str{attr}{val=name}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=lookups}))) (str{attr}{val=appendlist}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=pattern}))) (str{attr}{val=name}))) (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=bits}))) (expr (Name (str{id}{val=p_pattern}))) (expr (Attribute (expr{value} (Name (str{id}{val=pattern}))) (str{attr}{val=default_args})))))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_reverse_dict}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=language_code})))))))) (expr{value} (Name (str{id}{val=lookups})))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_namespace_dict}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=language_code})))))))) (expr{value} (Name (str{id}{val=namespaces})))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_app_dict}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=language_code})))))))) (expr{value} (Name (str{id}{val=apps})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_populated})))) (expr{value} (Name (str{id}{val=True})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=reverse_dict}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=language_code})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_language})))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=language_code}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_reverse_dict})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_populate})))))))
(root (Return (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_reverse_dict}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=language_code})))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=namespace_dict}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=language_code})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_language})))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=language_code}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_namespace_dict})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_populate})))))))
(root (Return (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_namespace_dict}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=language_code})))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=app_dict}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=language_code})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_language})))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=language_code}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_app_dict})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_populate})))))))
(root (Return (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_app_dict}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=language_code})))))))))
(root (FunctionDef (str{name}{val=resolve}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=path})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=path})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=path}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=tried})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=match})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=regex}))) (str{attr}{val=search}))) (expr*{args} (expr (Name (str{id}{val=path}))))))))
(root (If (expr{test} (Name (str{id}{val=match}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=new_path})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=path}))) (slice{slice} (Slice (expr{lower} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=match}))) (str{attr}{val=end})))))))))))
(root (For (expr{target} (Name (str{id}{val=pattern}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=url_patterns}))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=sub_match})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=pattern}))) (str{attr}{val=resolve}))) (expr*{args} (expr (Name (str{id}{val=new_path}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=Resolver404}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=sub_tried})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=args}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=sub_tried}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=tried}))) (str{attr}{val=extend}))) (expr*{args} (expr (GeneratorExp (expr{elt} (BinOp (expr{left} (List (expr*{elts} (expr (Name (str{id}{val=pattern})))))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=t}))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=t}))) (expr{iter} (Name (str{id}{val=sub_tried}))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=tried}))) (str{attr}{val=append}))) (expr*{args} (expr (List (expr*{elts} (expr (Name (str{id}{val=pattern})))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=sub_match}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=sub_match_dict})))) (expr{value} (Call (expr{func} (Name (str{id}{val=dict}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=match}))) (str{attr}{val=groupdict})))))) (expr{kwargs} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=default_kwargs})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sub_match_dict}))) (str{attr}{val=update}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=sub_match}))) (str{attr}{val=kwargs}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=ResolverMatch}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=sub_match}))) (str{attr}{val=func}))) (expr (Attribute (expr{value} (Name (str{id}{val=sub_match}))) (str{attr}{val=args}))) (expr (Name (str{id}{val=sub_match_dict}))) (expr (Attribute (expr{value} (Name (str{id}{val=sub_match}))) (str{attr}{val=url_name}))) (expr (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=app_name}))) (expr (Attribute (expr{value} (Name (str{id}{val=sub_match}))) (str{attr}{val=app_name})))))) (expr (BinOp (expr{left} (List (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=namespace})))))) (operator{op} (Add)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=sub_match}))) (str{attr}{val=namespaces}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=tried}))) (str{attr}{val=append}))) (expr*{args} (expr (List (expr*{elts} (expr (Name (str{id}{val=pattern})))))))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=Resolver404}))) (expr*{args} (expr (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:0_})))) (expr*{values} (expr (Name (str{id}{val=tried}))) (expr (Name (str{id}{val=new_path})))))))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=Resolver404}))) (expr*{args} (expr (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:0_})))) (expr*{values} (expr (Name (str{id}{val=path})))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=urlconf_module}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_urlconf_module})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=AttributeError}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_urlconf_module})))) (expr{value} (Call (expr{func} (Name (str{id}{val=import_module}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=urlconf_name}))))))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_urlconf_module})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=url_patterns}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=patterns})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=urlconf_module}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=urlconf_module}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=iter}))) (expr*{args} (expr (Name (str{id}{val=patterns}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=TypeError}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=msg})))) (expr{value} (Str (str{s}{val=The included urlconf '_STR:1_' does not appear to have any patterns in it. If you see valid patterns in the file then the issue is probably caused by a circular import.})))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ImproperlyConfigured}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=msg}))) (str{attr}{val=format}))) (keyword*{keywords} (keyword (str{arg}{val=name}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=urlconf_name}))))))))))))
(root (Return (expr{value} (Name (str{id}{val=patterns})))))
(root (FunctionDef (str{name}{val=resolve_error_handler}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=view_type})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=callback})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=urlconf_module}))) (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=view_type}))))) (expr (Name (str{id}{val=None}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=callback}))))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=urls}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=callback})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=urls}))) (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=view_type}))))))))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Call (expr{func} (Name (str{id}{val=get_callable}))) (expr*{args} (expr (Name (str{id}{val=callback})))))) (expr (Dict (epsilon))))))))
(root (FunctionDef (str{name}{val=reverse}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=lookup_view})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_reverse_with_prefix}))) (expr*{args} (expr (Name (str{id}{val=lookup_view}))) (expr (Str (str{s}{val=})))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (FunctionDef (str{name}{val=_reverse_with_prefix}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=lookup_view}))) (expr (Name (str{id}{val=_prefix})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=args}))) (expr (Name (str{id}{val=kwargs})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=text_args})))) (expr{value} (ListComp (expr{elt} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=v})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=v}))) (expr{iter} (Name (str{id}{val=args})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=text_kwargs})))) (expr{value} (Call (expr{func} (Name (str{id}{val=dict}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=v}))))))))) (comprehension*{generators} (comprehension (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Name (str{id}{val=v})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=kwargs}))) (str{attr}{val=items}))))))))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_populated}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_populate})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=original_lookup})))) (expr{value} (Name (str{id}{val=lookup_view})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=lookup_view}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_callback_strs})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=lookup_view})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_callable}))) (expr*{args} (expr (Name (str{id}{val=lookup_view}))) (expr (Name (str{id}{val=True}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=ImportError}))) (expr (Name (str{id}{val=AttributeError})))))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=NoReverseMatch}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=lookup_view}))) (expr (Name (str{id}{val=e})))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=callable}))) (expr*{args} (expr (Name (str{id}{val=original_lookup})))))))) (expr (Call (expr{func} (Name (str{id}{val=callable}))) (expr*{args} (expr (Name (str{id}{val=lookup_view}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=warnings}))) (str{attr}{val=warn}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=original_lookup}))))) (expr (Name (str{id}{val=RemovedInDjango20Warning})))) (keyword*{keywords} (keyword (str{arg}{val=stacklevel}) (expr{value} (Num (int{n}{val=3})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=possibilities})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=reverse_dict}))) (str{attr}{val=getlist}))) (expr*{args} (expr (Name (str{id}{val=lookup_view}))))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=prefix_norm}))) (expr (Name (str{id}{val=prefix_args}))))))) (expr{value} (Subscript (expr{value} (Call (expr{func} (Name (str{id}{val=normalize}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=urlquote}))) (expr*{args} (expr (Name (str{id}{val=_prefix}))))))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=possibility}))) (expr (Name (str{id}{val=pattern}))) (expr (Name (str{id}{val=defaults})))))) (expr{iter} (Name (str{id}{val=possibilities}))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=result}))) (expr (Name (str{id}{val=params})))))) (expr{iter} (Name (str{id}{val=possibility}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=args}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=args})))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=params})))))) (operator{op} (Add)) (expr{right} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=prefix_args}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=candidate_subs})))) (expr{value} (Call (expr{func} (Name (str{id}{val=dict}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=zip}))) (expr*{args} (expr (BinOp (expr{left} (Name (str{id}{val=prefix_args}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=params}))))) (expr (Name (str{id}{val=text_args})))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=set}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=kwargs}))) (str{attr}{val=keys})))))))) (operator{op} (BitOr)) (expr{right} (Call (expr{func} (Name (str{id}{val=set}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=defaults}))) (str{attr}{val=keys})))))))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (BinOp (expr{left} (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=set}))) (expr*{args} (expr (Name (str{id}{val=params})))))) (operator{op} (BitOr)) (expr{right} (Call (expr{func} (Name (str{id}{val=set}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=defaults}))) (str{attr}{val=keys})))))))))) (operator{op} (BitOr)) (expr{right} (Call (expr{func} (Name (str{id}{val=set}))) (expr*{args} (expr (Name (str{id}{val=prefix_args}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=matches})))) (expr{value} (Name (str{id}{val=True})))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Name (str{id}{val=v})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=defaults}))) (str{attr}{val=items}))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=kwargs}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=k}))) (expr (Name (str{id}{val=v})))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Name (str{id}{val=v})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=matches})))) (expr{value} (Name (str{id}{val=False})))))
(root (Break))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=matches}))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=candidate_subs})))) (expr{value} (Name (str{id}{val=text_kwargs})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=candidate_pat})))) (expr{value} (BinOp (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=prefix_norm}))) (str{attr}{val=replace}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_})))))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=result})))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=search}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=prefix_norm}))) (expr (Name (str{id}{val=pattern})))))))) (expr (BinOp (expr{left} (Name (str{id}{val=candidate_pat}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=candidate_subs}))))) (expr (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=UNICODE})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=candidate_subs})))) (expr{value} (Call (expr{func} (Name (str{id}{val=dict}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Call (expr{func} (Name (str{id}{val=urlquote}))) (expr*{args} (expr (Name (str{id}{val=v}))))))))) (comprehension*{generators} (comprehension (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Name (str{id}{val=v})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=candidate_subs}))) (str{attr}{val=items}))))))))))))))
(root (Return (expr{value} (BinOp (expr{left} (Name (str{id}{val=candidate_pat}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=candidate_subs})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=m})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=lookup_view}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=n})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=lookup_view}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=m}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Compare (expr{left} (Name (str{id}{val=n}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=lookup_view_s})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=%s.%s}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=m}))) (expr (Name (str{id}{val=n}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=lookup_view_s})))) (expr{value} (Name (str{id}{val=lookup_view})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=patterns})))) (expr{value} (ListComp (expr{elt} (Name (str{id}{val=pattern}))) (comprehension*{generators} (comprehension (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=possibility}))) (expr (Name (str{id}{val=pattern}))) (expr (Name (str{id}{val=defaults})))))) (expr{iter} (Name (str{id}{val=possibilities})))))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=NoReverseMatch}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_arguments '%s' not found. %d pattern(s) tried: %s}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=lookup_view_s}))) (expr (Name (str{id}{val=args}))) (expr (Name (str{id}{val=kwargs}))) (expr (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=patterns})))))) (expr (Name (str{id}{val=patterns})))))))))))))
(root (ClassDef (str{name}{val=LocaleRegexURLResolver}) (expr*{bases} (expr (Name (str{id}{val=RegexURLResolver})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=urlconf_name}))) (expr (Name (str{id}{val=default_kwargs}))) (expr (Name (str{id}{val=app_name}))) (expr (Name (str{id}{val=namespace})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=LocaleRegexURLResolver}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=urlconf_name}))) (expr (Name (str{id}{val=default_kwargs}))) (expr (Name (str{id}{val=app_name}))) (expr (Name (str{id}{val=namespace}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=regex}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=language_code})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_language})))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=language_code}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_regex_dict})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=regex_compiled})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=language_code}))))) (expr (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=UNICODE}))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_regex_dict}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=language_code})))))))) (expr{value} (Name (str{id}{val=regex_compiled})))))
(root (Return (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_regex_dict}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=language_code})))))))))
(root (FunctionDef (str{name}{val=resolve}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=path}))) (expr (Name (str{id}{val=urlconf})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=urlconf}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=urlconf})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_urlconf})))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=get_resolver}))) (expr*{args} (expr (Name (str{id}{val=urlconf})))))) (str{attr}{val=resolve}))) (expr*{args} (expr (Name (str{id}{val=path}))))))))
(root (FunctionDef (str{name}{val=reverse}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=viewname}))) (expr (Name (str{id}{val=urlconf}))) (expr (Name (str{id}{val=args}))) (expr (Name (str{id}{val=kwargs}))) (expr (Name (str{id}{val=prefix}))) (expr (Name (str{id}{val=current_app})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=urlconf}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=urlconf})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_urlconf})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=resolver})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_resolver}))) (expr*{args} (expr (Name (str{id}{val=urlconf}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=args})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=args}))) (expr (List (epsilon))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=kwargs})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=kwargs}))) (expr (Dict (epsilon))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=prefix}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=prefix})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_script_prefix})))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=viewname}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=string_types})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=view})))) (expr{value} (Name (str{id}{val=viewname})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=parts})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=viewname}))) (str{attr}{val=split}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parts}))) (str{attr}{val=reverse})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=view})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=parts}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=path})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=parts}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=1})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=resolved_path})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ns_pattern})))) (expr{value} (Str (str{s}{val=})))))
(root (While (expr{test} (Name (str{id}{val=path}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ns})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=path}))) (str{attr}{val=pop})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=app_list})))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=resolver}))) (str{attr}{val=app_dict}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=ns})))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=current_app}))) (expr (Compare (expr{left} (Name (str{id}{val=current_app}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=app_list}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ns})))) (expr{value} (Name (str{id}{val=current_app})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Name (str{id}{val=ns}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=app_list})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ns})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=app_list}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=KeyError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=extra}))) (expr (Name (str{id}{val=resolver}))))))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=resolver}))) (str{attr}{val=namespace_dict}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=ns})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=resolved_path}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=ns}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ns_pattern})))) (expr{value} (BinOp (expr{left} (Name (str{id}{val=ns_pattern}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=extra})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=KeyError}))) (expr{name} (Name (str{id}{val=key}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Name (str{id}{val=resolved_path}))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=NoReverseMatch}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=key}))) (expr (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=:}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=resolved_path}))))))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=NoReverseMatch}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=key}))))))))))
(root (If (expr{test} (Name (str{id}{val=ns_pattern}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=resolver})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_ns_resolver}))) (expr*{args} (expr (Name (str{id}{val=ns_pattern}))) (expr (Name (str{id}{val=resolver}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=iri_to_uri}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=resolver}))) (str{attr}{val=_reverse_with_prefix}))) (expr*{args} (expr (Name (str{id}{val=view}))) (expr (Name (str{id}{val=prefix})))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=reverse_lazy})))) (expr{value} (Call (expr{func} (Name (str{id}{val=lazy}))) (expr*{args} (expr (Name (str{id}{val=reverse}))) (expr (Name (str{id}{val=str}))))))))
(root (FunctionDef (str{name}{val=clear_url_caches}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=get_callable}))) (str{attr}{val=cache_clear})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=get_resolver}))) (str{attr}{val=cache_clear})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=get_ns_resolver}))) (str{attr}{val=cache_clear})))))))
(root (FunctionDef (str{name}{val=set_script_prefix}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=prefix})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=prefix}))) (str{attr}{val=endswith}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=prefix}))) (operator{op} (Add)) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=_prefixes}))) (str{attr}{val=value})))) (expr{value} (Name (str{id}{val=prefix})))))
(root (FunctionDef (str{name}{val=get_script_prefix}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=_prefixes}))) (expr (Str (str{s}{val=value}))) (expr (Str (str{s}{val=_STR:1_}))))))))
(root (FunctionDef (str{name}{val=clear_script_prefix}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Delete (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=_prefixes}))) (str{attr}{val=value}))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=AttributeError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (FunctionDef (str{name}{val=set_urlconf}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=urlconf_name})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=urlconf_name}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=_urlconfs}))) (str{attr}{val=value})))) (expr{value} (Name (str{id}{val=urlconf_name})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=_urlconfs}))) (expr (Str (str{s}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Delete (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=_urlconfs}))) (str{attr}{val=value}))))))
(root (FunctionDef (str{name}{val=get_urlconf}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=default})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=_urlconfs}))) (expr (Str (str{s}{val=value}))) (expr (Name (str{id}{val=default}))))))))
(root (FunctionDef (str{name}{val=is_valid_path}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=path}))) (expr (Name (str{id}{val=urlconf})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=resolve}))) (expr*{args} (expr (Name (str{id}{val=path}))) (expr (Name (str{id}{val=urlconf}))))))))
(root (Return (expr{value} (Name (str{id}{val=True})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=Resolver404}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=re})))))
(root (ImportFrom (str{module}{val=django.core.exceptions}) (alias*{names} (alias (str{name}{val=ValidationError}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.deconstruct}) (alias*{names} (alias (str{name}{val=deconstructible}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.translation}) (alias*{names} (alias (str{name}{val=ugettext_lazy}) (str{asname}{val=_})) (alias (str{name}{val=ungettext_lazy}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=force_text}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.ipv6}) (alias*{names} (alias (str{name}{val=is_valid_ipv6_address}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.six.moves.urllib.parse}) (alias*{names} (alias (str{name}{val=urlsplit})) (alias (str{name}{val=urlunsplit}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=EMPTY_VALUES})))) (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=None}))) (expr (Str (str{s}{val=}))) (expr (List (epsilon))) (expr (Tuple (epsilon))) (expr (Dict (epsilon))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=deconstructible}))))))
(root (ClassDef (str{name}{val=RegexValidator}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=regex})))) (expr{value} (Str (str{s}{val=})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=message})))) (expr{value} (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=code})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=inverse_match})))) (expr{value} (Name (str{id}{val=False})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=flags})))) (expr{value} (Num (int{n}{val=0})))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=regex}))) (expr (Name (str{id}{val=message}))) (expr (Name (str{id}{val=code}))) (expr (Name (str{id}{val=inverse_match}))) (expr (Name (str{id}{val=flags})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=regex}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=regex})))) (expr{value} (Name (str{id}{val=regex})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=message}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=message})))) (expr{value} (Name (str{id}{val=message})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=code}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=code})))) (expr{value} (Name (str{id}{val=code})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=inverse_match}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=inverse_match})))) (expr{value} (Name (str{id}{val=inverse_match})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=flags}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=flags})))) (expr{value} (Name (str{id}{val=flags})))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=flags}))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=regex}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=string_types}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TypeError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=regex}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=string_types})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=regex})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=regex}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=flags}))))))))
(root (FunctionDef (str{name}{val=__call__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=inverse_match}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Call (expr{func} (Name (str{id}{val=bool}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=regex}))) (str{attr}{val=search}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=message})))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=code})))))))))
(root (FunctionDef (str{name}{val=__eq__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=other})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=other}))) (expr (Name (str{id}{val=RegexValidator})))))) (expr (Compare (expr{left} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=regex}))) (str{attr}{val=pattern}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=other}))) (str{attr}{val=regex}))) (str{attr}{val=pattern})))))) (expr (Compare (expr{left} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=regex}))) (str{attr}{val=flags}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=other}))) (str{attr}{val=regex}))) (str{attr}{val=flags})))))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=message}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=other}))) (str{attr}{val=message})))))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=code}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=other}))) (str{attr}{val=code})))))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=inverse_match}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=other}))) (str{attr}{val=inverse_match})))))))))))
(root (FunctionDef (str{name}{val=__ne__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=other})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Compare (expr{left} (Name (str{id}{val=self}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=other}))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=deconstructible}))))))
(root (ClassDef (str{name}{val=URLValidator}) (expr*{bases} (expr (Name (str{id}{val=RegexValidator})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=regex})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=^(?:[a-z0-9\.\-]*)://(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}(?<!-)\.?)|localhost|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|\[?[A-F0-9]*:[A-F0-9:]+\]?)(?::\d+)?(?:/?|[/?]\S+)$}))) (expr (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=IGNORECASE}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=message})))) (expr{value} (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=Enter a valid URL.}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=schemes})))) (expr{value} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=_STR:3_}))))))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=schemes})))) (str{kwarg}{val=kwargs}) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=URLValidator}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=schemes}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=schemes})))) (expr{value} (Name (str{id}{val=schemes})))))
(root (FunctionDef (str{name}{val=__call__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=scheme})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=split}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (str{attr}{val=lower})))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=scheme}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=schemes})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=message})))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=code})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=URLValidator}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__call__}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ValidationError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Name (str{id}{val=value}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=scheme}))) (expr (Name (str{id}{val=netloc}))) (expr (Name (str{id}{val=path}))) (expr (Name (str{id}{val=query}))) (expr (Name (str{id}{val=fragment}))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=urlsplit}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=netloc})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=netloc}))) (str{attr}{val=encode}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (str{attr}{val=decode}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=UnicodeError}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Name (str{id}{val=e})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=url})))) (expr{value} (Call (expr{func} (Name (str{id}{val=urlunsplit}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=scheme}))) (expr (Name (str{id}{val=netloc}))) (expr (Name (str{id}{val=path}))) (expr (Name (str{id}{val=query}))) (expr (Name (str{id}{val=fragment})))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=URLValidator}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__call__}))) (expr*{args} (expr (Name (str{id}{val=url}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Raise (epsilon)))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=url})))) (expr{value} (Name (str{id}{val=value})))))
(root (FunctionDef (str{name}{val=validate_integer}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=ValueError}))) (expr (Name (str{id}{val=TypeError})))))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Str (str{s}{val=invalid})))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=deconstructible}))))))
(root (ClassDef (str{name}{val=EmailValidator}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=message})))) (expr{value} (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=Enter a valid email address.}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=code})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=user_regex})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_|^"([\001-\010\013\014\016-\037!#-\[\]-\177]|\\[\001-\011\013\014\016-\177])*"$)}))) (expr (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=IGNORECASE}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=domain_regex})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=_STR:2_}))) (expr (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=IGNORECASE}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=literal_regex})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=IGNORECASE}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=domain_whitelist})))) (expr{value} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=message}))) (expr (Name (str{id}{val=code}))) (expr (Name (str{id}{val=whitelist})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=message}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=message})))) (expr{value} (Name (str{id}{val=message})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=code}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=code})))) (expr{value} (Name (str{id}{val=code})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=whitelist}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=domain_whitelist})))) (expr{value} (Name (str{id}{val=whitelist})))))
(root (FunctionDef (str{name}{val=__call__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=value}))))) (expr (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=value}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=message})))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=code})))))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=user_part}))) (expr (Name (str{id}{val=domain_part}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=rsplit}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Num (int{n}{val=1}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=user_regex}))) (str{attr}{val=match}))) (expr*{args} (expr (Name (str{id}{val=user_part})))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=message})))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=code})))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=domain_part}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=domain_whitelist})))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=validate_domain_part}))) (expr*{args} (expr (Name (str{id}{val=domain_part}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=domain_part})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=domain_part}))) (str{attr}{val=encode}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (str{attr}{val=decode}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_}))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=validate_domain_part}))) (expr*{args} (expr (Name (str{id}{val=domain_part})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (epsilon)))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=UnicodeError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=message})))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=code})))))))))
(root (FunctionDef (str{name}{val=validate_domain_part}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=domain_part})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=domain_regex}))) (str{attr}{val=match}))) (expr*{args} (expr (Name (str{id}{val=domain_part})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=True})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=literal_match})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=literal_regex}))) (str{attr}{val=match}))) (expr*{args} (expr (Name (str{id}{val=domain_part}))))))))
(root (If (expr{test} (Name (str{id}{val=literal_match}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ip_address})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=literal_match}))) (str{attr}{val=group}))) (expr*{args} (expr (Num (int{n}{val=1}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=validate_ipv46_address}))) (expr*{args} (expr (Name (str{id}{val=ip_address}))))))))
(root (Return (expr{value} (Name (str{id}{val=True})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ValidationError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (FunctionDef (str{name}{val=__eq__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=other})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=other}))) (expr (Name (str{id}{val=EmailValidator})))))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=domain_whitelist}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=other}))) (str{attr}{val=domain_whitelist})))))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=message}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=other}))) (str{attr}{val=message})))))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=code}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=other}))) (str{attr}{val=code})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=validate_email})))) (expr{value} (Call (expr{func} (Name (str{id}{val=EmailValidator})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=slug_re})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=validate_slug})))) (expr{value} (Call (expr{func} (Name (str{id}{val=RegexValidator}))) (expr*{args} (expr (Name (str{id}{val=slug_re}))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.})))))) (expr (Str (str{s}{val=invalid}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ipv4_re})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=_STR:2_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=validate_ipv4_address})))) (expr{value} (Call (expr{func} (Name (str{id}{val=RegexValidator}))) (expr*{args} (expr (Name (str{id}{val=ipv4_re}))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=Enter a valid IPv4 address.})))))) (expr (Str (str{s}{val=invalid}))))))))
(root (FunctionDef (str{name}{val=validate_ipv6_address}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=is_valid_ipv6_address}))) (expr*{args} (expr (Name (str{id}{val=value})))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Str (str{s}{val=_STR:1_})))))))))
(root (FunctionDef (str{name}{val=validate_ipv46_address}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=validate_ipv4_address}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ValidationError}))) (stmt*{body} (stmt (Pass)))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=validate_ipv6_address}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ValidationError}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Str (str{s}{val=_STR:1_})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ip_address_validator_map})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=ipv4}))) (expr (Str (str{s}{val=ipv6})))) (expr*{values} (expr (Tuple (expr*{elts} (expr (List (expr*{elts} (expr (Name (str{id}{val=validate_ipv46_address})))))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))) (expr (Tuple (expr*{elts} (expr (List (expr*{elts} (expr (Name (str{id}{val=validate_ipv4_address})))))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=Enter a valid IPv4 address.}))))))))) (expr (Tuple (expr*{elts} (expr (List (expr*{elts} (expr (Name (str{id}{val=validate_ipv6_address})))))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=Enter a valid IPv6 address.}))))))))))))))
(root (FunctionDef (str{name}{val=ip_address_validators}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=protocol}))) (expr (Name (str{id}{val=unpack_ipv4})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=protocol}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (expr (Name (str{id}{val=unpack_ipv4})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Subscript (expr{value} (Name (str{id}{val=ip_address_validator_map}))) (slice{slice} (Index (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=protocol}))) (str{attr}{val=lower})))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=KeyError}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=protocol}))) (expr (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Name (str{id}{val=ip_address_validator_map}))))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=comma_separated_int_list_re})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=validate_comma_separated_integer_list})))) (expr{value} (Call (expr{func} (Name (str{id}{val=RegexValidator}))) (expr*{args} (expr (Name (str{id}{val=comma_separated_int_list_re}))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=Enter only digits separated by commas.})))))) (expr (Str (str{s}{val=invalid}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=deconstructible}))))))
(root (ClassDef (str{name}{val=BaseValidator}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=compare})))) (expr{value} (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=a}))) (expr (Name (str{id}{val=b})))))) (expr{body} (Compare (expr{left} (Name (str{id}{val=a}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=b}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=clean})))) (expr{value} (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=x})))))) (expr{body} (Name (str{id}{val=x})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=message})))) (expr{value} (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=code})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=limit_value})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=limit_value})))) (expr{value} (Name (str{id}{val=limit_value})))))
(root (FunctionDef (str{name}{val=__call__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cleaned})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=clean}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=params})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_})))) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=limit_value}))) (expr (Name (str{id}{val=cleaned}))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=compare}))) (expr*{args} (expr (Name (str{id}{val=cleaned}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=limit_value})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=message})))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=code})))) (keyword (str{arg}{val=params}) (expr{value} (Name (str{id}{val=params})))))))))
(root (FunctionDef (str{name}{val=__eq__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=other})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=other}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__class__})))))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=limit_value}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=other}))) (str{attr}{val=limit_value})))))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=message}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=other}))) (str{attr}{val=message})))))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=code}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=other}))) (str{attr}{val=code})))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=deconstructible}))))))
(root (ClassDef (str{name}{val=MaxValueValidator}) (expr*{bases} (expr (Name (str{id}{val=BaseValidator})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=compare})))) (expr{value} (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=a}))) (expr (Name (str{id}{val=b})))))) (expr{body} (Compare (expr{left} (Name (str{id}{val=a}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Name (str{id}{val=b}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=message})))) (expr{value} (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=code})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=deconstructible}))))))
(root (ClassDef (str{name}{val=MinValueValidator}) (expr*{bases} (expr (Name (str{id}{val=BaseValidator})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=compare})))) (expr{value} (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=a}))) (expr (Name (str{id}{val=b})))))) (expr{body} (Compare (expr{left} (Name (str{id}{val=a}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Name (str{id}{val=b}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=message})))) (expr{value} (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=code})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=deconstructible}))))))
(root (ClassDef (str{name}{val=MinLengthValidator}) (expr*{bases} (expr (Name (str{id}{val=BaseValidator})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=compare})))) (expr{value} (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=a}))) (expr (Name (str{id}{val=b})))))) (expr{body} (Compare (expr{left} (Name (str{id}{val=a}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Name (str{id}{val=b}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=clean})))) (expr{value} (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=x})))))) (expr{body} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=x}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=message})))) (expr{value} (Call (expr{func} (Name (str{id}{val=ungettext_lazy}))) (expr*{args} (expr (Str (str{s}{val=Ensure this value has at least %(limit_value)d character (it has %(show_value)d).}))) (expr (Str (str{s}{val=Ensure this value has at least %(limit_value)d characters (it has %(show_value)d).}))) (expr (Str (str{s}{val=limit_value}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=code})))) (expr{value} (Str (str{s}{val=_STR:2_})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=deconstructible}))))))
(root (ClassDef (str{name}{val=MaxLengthValidator}) (expr*{bases} (expr (Name (str{id}{val=BaseValidator})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=compare})))) (expr{value} (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=a}))) (expr (Name (str{id}{val=b})))))) (expr{body} (Compare (expr{left} (Name (str{id}{val=a}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Name (str{id}{val=b}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=clean})))) (expr{value} (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=x})))))) (expr{body} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=x}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=message})))) (expr{value} (Call (expr{func} (Name (str{id}{val=ungettext_lazy}))) (expr*{args} (expr (Str (str{s}{val=Ensure this value has at most %(limit_value)d character (it has %(show_value)d).}))) (expr (Str (str{s}{val=Ensure this value has at most %(limit_value)d characters (it has %(show_value)d).}))) (expr (Str (str{s}{val=limit_value}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=code})))) (expr{value} (Str (str{s}{val=_STR:2_})))))
(root (Import (alias*{names} (alias (str{name}{val=django})))))
(root (ImportFrom (str{module}{val=django.core.handlers.wsgi}) (alias*{names} (alias (str{name}{val=WSGIHandler}))) (int{level}{val=0})))
(root (FunctionDef (str{name}{val=get_wsgi_application}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=django}))) (str{attr}{val=setup})))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=WSGIHandler})))))))
(root (ImportFrom (str{module}{val=django.core.exceptions}) (alias*{names} (alias (str{name}{val=ValidationError}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.forms.fields}) (alias*{names} (alias (str{name}{val=*}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.forms.forms}) (alias*{names} (alias (str{name}{val=*}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.forms.formsets}) (alias*{names} (alias (str{name}{val=*}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.forms.models}) (alias*{names} (alias (str{name}{val=*}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.forms.widgets}) (alias*{names} (alias (str{name}{val=*}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.forms.extras.widgets}) (alias*{names} (alias (str{name}{val=SelectDateWidget}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__all__})))) (expr{value} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=datetime})))))
(root (Import (alias*{names} (alias (str{name}{val=re})))))
(root (ImportFrom (str{module}{val=django.forms.widgets}) (alias*{names} (alias (str{name}{val=Widget})) (alias (str{name}{val=Select}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=datetime_safe}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.dates}) (alias*{names} (alias (str{name}{val=MONTHS}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=force_str}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.safestring}) (alias*{names} (alias (str{name}{val=mark_safe}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.formats}) (alias*{names} (alias (str{name}{val=get_format}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__all__})))) (expr{value} (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=RE_DATE})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=_parse_date_fmt}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=fmt})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_format}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=escaped})))) (expr{value} (Name (str{id}{val=False})))))
(root (For (expr{target} (Name (str{id}{val=char}))) (expr{iter} (Name (str{id}{val=fmt}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=escaped}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=escaped})))) (expr{value} (Name (str{id}{val=False})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Name (str{id}{val=char}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=\})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=escaped})))) (expr{value} (Name (str{id}{val=True})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Name (str{id}{val=char}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass))))))))
(root (Expr (expr{value} (Yield (expr{value} (Str (str{s}{val=_STR:0_})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Name (str{id}{val=char}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass))))))))
(root (Expr (expr{value} (Yield (expr{value} (Str (str{s}{val=_STR:0_})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Name (str{id}{val=char}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass))))))))
(root (Expr (expr{value} (Yield (expr{value} (Str (str{s}{val=_STR:0_})))))))
(root (ClassDef (str{name}{val=SelectDateWidget}) (expr*{bases} (expr (Name (str{id}{val=Widget})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=none_value})))) (expr{value} (Tuple (expr*{elts} (expr (Num (int{n}{val=0}))) (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=month_field})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=day_field})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=year_field})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=attrs}))) (expr (Name (str{id}{val=years}))) (expr (Name (str{id}{val=months}))) (expr (Name (str{id}{val=empty_label})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=attrs})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=attrs}))) (expr (Dict (epsilon))))))))
(root (If (expr{test} (Name (str{id}{val=years}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=years})))) (expr{value} (Name (str{id}{val=years})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=this_year})))) (expr{value} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=date}))) (str{attr}{val=today}))))) (str{attr}{val=year})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=years})))) (expr{value} (Call (expr{func} (Name (str{id}{val=range}))) (expr*{args} (expr (Name (str{id}{val=this_year}))) (expr (BinOp (expr{left} (Name (str{id}{val=this_year}))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=10}))))))))))
(root (If (expr{test} (Name (str{id}{val=months}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=months})))) (expr{value} (Name (str{id}{val=months})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=months})))) (expr{value} (Name (str{id}{val=MONTHS})))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=empty_label}))) (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=list}))) (expr (Name (str{id}{val=tuple}))))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=empty_label})))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=3})))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=year_none_value})))) (expr{value} (Tuple (expr*{elts} (expr (Num (int{n}{val=0}))) (expr (Subscript (expr{value} (Name (str{id}{val=empty_label}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=month_none_value})))) (expr{value} (Tuple (expr*{elts} (expr (Num (int{n}{val=0}))) (expr (Subscript (expr{value} (Name (str{id}{val=empty_label}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=day_none_value})))) (expr{value} (Tuple (expr*{elts} (expr (Num (int{n}{val=0}))) (expr (Subscript (expr{value} (Name (str{id}{val=empty_label}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=2}))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=empty_label}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=none_value})))) (expr{value} (Tuple (expr*{elts} (expr (Num (int{n}{val=0}))) (expr (Name (str{id}{val=empty_label}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=year_none_value})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=none_value})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=month_none_value})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=none_value})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=day_none_value})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=none_value})))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=attrs})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=year_val}))) (expr (Name (str{id}{val=month_val}))) (expr (Name (str{id}{val=day_val}))))))) (expr{value} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=year}))) (expr (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=month}))) (expr (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=day}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=AttributeError}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=year_val}))) (expr (Name (str{id}{val=month_val}))) (expr (Name (str{id}{val=day_val})))) (expr{value} (Name (str{id}{val=None})))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=string_types})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=USE_L10N}))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=input_format})))) (expr{value} (Subscript (expr{value} (Call (expr{func} (Name (str{id}{val=get_format}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=v})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=datetime}))) (str{attr}{val=strptime}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=force_str}))) (expr*{args} (expr (Name (str{id}{val=value})))))) (expr (Name (str{id}{val=input_format}))))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=year_val}))) (expr (Name (str{id}{val=month_val}))) (expr (Name (str{id}{val=day_val}))))))) (expr{value} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=v}))) (str{attr}{val=year}))) (expr (Attribute (expr{value} (Name (str{id}{val=v}))) (str{attr}{val=month}))) (expr (Attribute (expr{value} (Name (str{id}{val=v}))) (str{attr}{val=day}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ValueError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=match})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=RE_DATE}))) (str{attr}{val=match}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (If (expr{test} (Name (str{id}{val=match}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=year_val}))) (expr (Name (str{id}{val=month_val}))) (expr (Name (str{id}{val=day_val}))))))) (expr{value} (ListComp (expr{elt} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=v})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=v}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=match}))) (str{attr}{val=groups})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=html})))) (expr{value} (Dict (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=choices})))) (expr{value} (ListComp (expr{elt} (Tuple (expr*{elts} (expr (Name (str{id}{val=i}))) (expr (Name (str{id}{val=i})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=i}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=years})))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=html}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=year})))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=create_select}))) (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=year_field}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=year_val}))) (expr (Name (str{id}{val=choices}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=year_none_value}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=choices})))) (expr{value} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=iteritems}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=months})))))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=html}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=month})))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=create_select}))) (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=month_field}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=month_val}))) (expr (Name (str{id}{val=choices}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=month_none_value}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=choices})))) (expr{value} (ListComp (expr{elt} (Tuple (expr*{elts} (expr (Name (str{id}{val=i}))) (expr (Name (str{id}{val=i})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=i}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=range}))) (expr*{args} (expr (Num (int{n}{val=1}))) (expr (Num (int{n}{val=32}))))))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=html}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=day})))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=create_select}))) (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=day_field}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=day_val}))) (expr (Name (str{id}{val=choices}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=day_none_value}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=output})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=field}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=_parse_date_fmt}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=output}))) (str{attr}{val=append}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=html}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=field}))))))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=mark_safe}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=\n}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=output})))))))))))
(root (FunctionDef (str{name}{val=id_for_label}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=id_})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=first_select}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=_parse_date_fmt}))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=id_}))) (expr (Name (str{id}{val=first_select}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=%s_month}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=id_})))))))
(root (FunctionDef (str{name}{val=value_from_datadict}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=data}))) (expr (Name (str{id}{val=files}))) (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=y})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=data}))) (str{attr}{val=get}))) (expr*{args} (expr (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=year_field}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=name}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=m})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=data}))) (str{attr}{val=get}))) (expr*{args} (expr (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=month_field}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=name}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=d})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=data}))) (str{attr}{val=get}))) (expr*{args} (expr (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=day_field}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=name}))))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=y}))) (cmpop*{ops} (cmpop (Eq)) (cmpop (Eq)) (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=m}))) (expr (Name (str{id}{val=d}))) (expr (Str (str{s}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=None})))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=y}))) (expr (Name (str{id}{val=m}))) (expr (Name (str{id}{val=d})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=USE_L10N}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=input_format})))) (expr{value} (Subscript (expr{value} (Call (expr{func} (Name (str{id}{val=get_format}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=date_value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=date}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=y})))))) (expr (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=m})))))) (expr (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=d})))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ValueError}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=y}))) (expr (Name (str{id}{val=m}))) (expr (Name (str{id}{val=d}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=date_value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=datetime_safe}))) (str{attr}{val=new_date}))) (expr*{args} (expr (Name (str{id}{val=date_value}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=date_value}))) (str{attr}{val=strftime}))) (expr*{args} (expr (Name (str{id}{val=input_format}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=y}))) (expr (Name (str{id}{val=m}))) (expr (Name (str{id}{val=d}))))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=data}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=None}))))))))
(root (FunctionDef (str{name}{val=create_select}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=field}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=val}))) (expr (Name (str{id}{val=choices}))) (expr (Name (str{id}{val=none_value})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=attrs})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=id_})))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=attrs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=id_})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=name})))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=is_required}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=choices}))) (str{attr}{val=insert}))) (expr*{args} (expr (Num (int{n}{val=0}))) (expr (Name (str{id}{val=none_value}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=local_attrs})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=build_attrs}))) (keyword*{keywords} (keyword (str{arg}{val=id}) (expr{value} (BinOp (expr{left} (Name (str{id}{val=field}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=id_})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=s})))) (expr{value} (Call (expr{func} (Name (str{id}{val=Select}))) (keyword*{keywords} (keyword (str{arg}{val=choices}) (expr{value} (Name (str{id}{val=choices})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=select_html})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=s}))) (str{attr}{val=render}))) (expr*{args} (expr (BinOp (expr{left} (Name (str{id}{val=field}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=name}))))) (expr (Name (str{id}{val=val}))) (expr (Name (str{id}{val=local_attrs}))))))))
(root (Return (expr{value} (Name (str{id}{val=select_html})))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=copy})))))
(root (Import (alias*{names} (alias (str{name}{val=datetime})))))
(root (Import (alias*{names} (alias (str{name}{val=os})))))
(root (Import (alias*{names} (alias (str{name}{val=re})))))
(root (Import (alias*{names} (alias (str{name}{val=sys})))))
(root (Import (alias*{names} (alias (str{name}{val=warnings})))))
(root (ImportFrom (str{module}{val=decimal}) (alias*{names} (alias (str{name}{val=Decimal})) (alias (str{name}{val=DecimalException}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=io}) (alias*{names} (alias (str{name}{val=BytesIO}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core}) (alias*{names} (alias (str{name}{val=validators}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.exceptions}) (alias*{names} (alias (str{name}{val=ValidationError}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.forms.utils}) (alias*{names} (alias (str{name}{val=from_current_timezone})) (alias (str{name}{val=to_current_timezone}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.forms.widgets}) (alias*{names} (alias (str{name}{val=TextInput})) (alias (str{name}{val=NumberInput})) (alias (str{name}{val=EmailInput})) (alias (str{name}{val=URLInput})) (alias (str{name}{val=HiddenInput})) (alias (str{name}{val=MultipleHiddenInput})) (alias (str{name}{val=ClearableFileInput})) (alias (str{name}{val=CheckboxInput})) (alias (str{name}{val=Select})) (alias (str{name}{val=NullBooleanSelect})) (alias (str{name}{val=SelectMultiple})) (alias (str{name}{val=DateInput})) (alias (str{name}{val=DateTimeInput})) (alias (str{name}{val=TimeInput})) (alias (str{name}{val=SplitDateTimeWidget})) (alias (str{name}{val=SplitHiddenDateTimeWidget})) (alias (str{name}{val=FILE_INPUT_CONTRADICTION}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=formats}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=smart_text})) (alias (str{name}{val=force_str})) (alias (str{name}{val=force_text}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.ipv6}) (alias*{names} (alias (str{name}{val=clean_ipv6_address}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.deprecation}) (alias*{names} (alias (str{name}{val=RemovedInDjango19Warning}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.six.moves.urllib.parse}) (alias*{names} (alias (str{name}{val=urlsplit})) (alias (str{name}{val=urlunsplit}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.translation}) (alias*{names} (alias (str{name}{val=ugettext_lazy}) (str{asname}{val=_})) (alias (str{name}{val=ungettext_lazy}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.validators}) (alias*{names} (alias (str{name}{val=EMPTY_VALUES}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__all__})))) (expr{value} (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=_STR:3_}))) (expr (Str (str{s}{val=_STR:4_}))) (expr (Str (str{s}{val=_STR:5_}))) (expr (Str (str{s}{val=_STR:6_}))) (expr (Str (str{s}{val=EmailField}))) (expr (Str (str{s}{val=FileField}))) (expr (Str (str{s}{val=ImageField}))) (expr (Str (str{s}{val=URLField}))) (expr (Str (str{s}{val=BooleanField}))) (expr (Str (str{s}{val=NullBooleanField}))) (expr (Str (str{s}{val=ChoiceField}))) (expr (Str (str{s}{val=MultipleChoiceField}))) (expr (Str (str{s}{val=ComboField}))) (expr (Str (str{s}{val=MultiValueField}))) (expr (Str (str{s}{val=FloatField}))) (expr (Str (str{s}{val=DecimalField}))) (expr (Str (str{s}{val=SplitDateTimeField}))) (expr (Str (str{s}{val=IPAddressField}))) (expr (Str (str{s}{val=GenericIPAddressField}))) (expr (Str (str{s}{val=FilePathField}))) (expr (Str (str{s}{val=SlugField}))) (expr (Str (str{s}{val=TypedChoiceField}))) (expr (Str (str{s}{val=TypedMultipleChoiceField}))))))))
(root (ClassDef (str{name}{val=Field}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=widget})))) (expr{value} (Name (str{id}{val=TextInput})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=hidden_widget})))) (expr{value} (Name (str{id}{val=HiddenInput})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=default_validators})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=default_error_messages})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:1_})))) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=empty_values})))) (expr{value} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=validators}))) (str{attr}{val=EMPTY_VALUES}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=creation_counter})))) (expr{value} (Num (int{n}{val=0})))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=required}))) (expr (Name (str{id}{val=widget}))) (expr (Name (str{id}{val=label}))) (expr (Name (str{id}{val=initial}))) (expr (Name (str{id}{val=help_text}))) (expr (Name (str{id}{val=error_messages}))) (expr (Name (str{id}{val=show_hidden_initial}))) (expr (Name (str{id}{val=validators}))) (expr (Name (str{id}{val=localize}))) (expr (Name (str{id}{val=label_suffix})))) (expr*{defaults} (expr (Name (str{id}{val=True}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Str (str{s}{val=}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=False}))) (expr (List (epsilon))) (expr (Name (str{id}{val=False}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=required}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=label}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=initial}))))))) (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=required}))) (expr (Name (str{id}{val=label}))) (expr (Name (str{id}{val=initial}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=show_hidden_initial})))) (expr{value} (Name (str{id}{val=show_hidden_initial})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=help_text})))) (expr{value} (Name (str{id}{val=help_text})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=label_suffix})))) (expr{value} (Name (str{id}{val=label_suffix})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=widget})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=widget}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=widget}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=widget}))) (expr (Name (str{id}{val=type})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=widget})))) (expr{value} (Call (expr{func} (Name (str{id}{val=widget})))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=localize})))) (expr{value} (Name (str{id}{val=localize})))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=localize}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=widget}))) (str{attr}{val=is_localized})))) (expr{value} (Name (str{id}{val=True})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=widget}))) (str{attr}{val=is_required})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=required})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=extra_attrs})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=widget_attrs}))) (expr*{args} (expr (Name (str{id}{val=widget}))))))))
(root (If (expr{test} (Name (str{id}{val=extra_attrs}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=widget}))) (str{attr}{val=attrs}))) (str{attr}{val=update}))) (expr*{args} (expr (Name (str{id}{val=extra_attrs}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=widget})))) (expr{value} (Name (str{id}{val=widget})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=creation_counter})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=Field}))) (str{attr}{val=creation_counter})))))
(root (AugAssign (expr{target} (Attribute (expr{value} (Name (str{id}{val=Field}))) (str{attr}{val=creation_counter}))) (operator{op} (Add)) (expr{value} (Num (int{n}{val=1})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=messages})))) (expr{value} (Dict (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=c}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=reversed}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__class__}))) (str{attr}{val=__mro__})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=messages}))) (str{attr}{val=update}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=c}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Dict (epsilon)))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=messages}))) (str{attr}{val=update}))) (expr*{args} (expr (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=error_messages}))) (expr (Dict (epsilon)))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_messages})))) (expr{value} (Name (str{id}{val=messages})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=validators})))) (expr{value} (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=default_validators}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=validators})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=Field}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__})))))))
(root (FunctionDef (str{name}{val=prepare_value}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=value})))))
(root (FunctionDef (str{name}{val=to_python}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=value})))))
(root (FunctionDef (str{name}{val=validate}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=empty_values})))))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=required})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_messages}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (FunctionDef (str{name}{val=run_validators}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=empty_values})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (epsilon)))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=errors})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=v}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=validators}))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=v}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ValidationError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=e}))) (expr (Str (str{s}{val=_STR:0_})))))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=code}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_messages}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=message})))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_messages}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=code})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=errors}))) (str{attr}{val=extend}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=error_list}))))))))
(root (If (expr{test} (Name (str{id}{val=errors}))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Name (str{id}{val=errors}))))))))
(root (FunctionDef (str{name}{val=clean}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=to_python}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=validate}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=run_validators}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (Return (expr{value} (Name (str{id}{val=value})))))
(root (FunctionDef (str{name}{val=bound_data}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=data}))) (expr (Name (str{id}{val=initial})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=data})))))
(root (FunctionDef (str{name}{val=widget_attrs}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=widget})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Dict (epsilon)))))
(root (FunctionDef (str{name}{val=get_limit_choices_to}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=callable}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=limit_choices_to})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=limit_choices_to})))))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=limit_choices_to})))))
(root (FunctionDef (str{name}{val=_has_changed}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=initial}))) (expr (Name (str{id}{val=data})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=initial_value})))) (expr{value} (IfExp (expr{test} (Compare (expr{left} (Name (str{id}{val=initial}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr{body} (Name (str{id}{val=initial}))) (expr{orelse} (Str (str{s}{val=})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=data})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=to_python}))) (expr*{args} (expr (Name (str{id}{val=data}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=data})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_coerce}))) (expr*{args} (expr (Name (str{id}{val=data}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ValidationError}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Name (str{id}{val=True})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=data_value})))) (expr{value} (IfExp (expr{test} (Compare (expr{left} (Name (str{id}{val=data}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr{body} (Name (str{id}{val=data}))) (expr{orelse} (Str (str{s}{val=})))))))
(root (Return (expr{value} (Compare (expr{left} (Name (str{id}{val=initial_value}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Name (str{id}{val=data_value}))))))))
(root (FunctionDef (str{name}{val=__deepcopy__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=memo})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=copy}))) (str{attr}{val=copy}))) (expr*{args} (expr (Name (str{id}{val=self}))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=memo}))) (slice{slice} (Index (expr{value} (Call (expr{func} (Name (str{id}{val=id}))) (expr*{args} (expr (Name (str{id}{val=self}))))))))))) (expr{value} (Name (str{id}{val=result})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=result}))) (str{attr}{val=widget})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=copy}))) (str{attr}{val=deepcopy}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=widget}))) (expr (Name (str{id}{val=memo}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=result}))) (str{attr}{val=validators})))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=validators}))) (slice{slice} (Slice (epsilon)))))))
(root (Return (expr{value} (Name (str{id}{val=result})))))
(root (ClassDef (str{name}{val=CharField}) (expr*{bases} (expr (Name (str{id}{val=Field})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=max_length}))) (expr (Name (str{id}{val=min_length})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=max_length}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=min_length}))))))) (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=max_length}))) (expr (Name (str{id}{val=min_length}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=CharField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=min_length}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=validators}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=validators}))) (str{attr}{val=MinLengthValidator}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=min_length}))))))))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=max_length}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=validators}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=validators}))) (str{attr}{val=MaxLengthValidator}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=max_length}))))))))))))))
(root (FunctionDef (str{name}{val=to_python}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=empty_values})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=smart_text}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (FunctionDef (str{name}{val=widget_attrs}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=widget})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=attrs})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=CharField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=widget_attrs}))) (expr*{args} (expr (Name (str{id}{val=widget}))))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=max_length}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=attrs}))) (str{attr}{val=update}))) (expr*{args} (expr (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:0_})))) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=max_length}))))))))))))))
(root (Return (expr{value} (Name (str{id}{val=attrs})))))
(root (ClassDef (str{name}{val=IntegerField}) (expr*{bases} (expr (Name (str{id}{val=Field})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=widget})))) (expr{value} (Name (str{id}{val=NumberInput})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=default_error_messages})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=invalid})))) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=Enter a whole number.})))))))))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=max_value}))) (expr (Name (str{id}{val=min_value})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=max_value}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=min_value}))))))) (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=max_value}))) (expr (Name (str{id}{val=min_value}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=kwargs}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=widget}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=NumberInput}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=kwargs}))) (str{attr}{val=setdefault}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=IntegerField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=widget}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=IntegerField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=max_value}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=validators}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=validators}))) (str{attr}{val=MaxValueValidator}))) (expr*{args} (expr (Name (str{id}{val=max_value})))))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=min_value}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=validators}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=validators}))) (str{attr}{val=MinValueValidator}))) (expr*{args} (expr (Name (str{id}{val=min_value})))))))))))
(root (FunctionDef (str{name}{val=to_python}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=IntegerField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=to_python}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=empty_values})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=None})))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=localize}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=formats}))) (str{attr}{val=sanitize_separators}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Name (str{id}{val=value})))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=ValueError}))) (expr (Name (str{id}{val=TypeError})))))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_messages}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (Return (expr{value} (Name (str{id}{val=value})))))
(root (FunctionDef (str{name}{val=widget_attrs}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=widget})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=attrs})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=IntegerField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=widget_attrs}))) (expr*{args} (expr (Name (str{id}{val=widget}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=widget}))) (expr (Name (str{id}{val=NumberInput})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=min_value}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=attrs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=min_value})))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=max_value}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=attrs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=max_value})))))
(root (Return (expr{value} (Name (str{id}{val=attrs})))))
(root (ClassDef (str{name}{val=FloatField}) (expr*{bases} (expr (Name (str{id}{val=IntegerField})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=default_error_messages})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=invalid})))) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=Enter a number.})))))))))))
(root (FunctionDef (str{name}{val=to_python}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=IntegerField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=to_python}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=empty_values})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=None})))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=localize}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=formats}))) (str{attr}{val=sanitize_separators}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=float}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=ValueError}))) (expr (Name (str{id}{val=TypeError})))))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_messages}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (Return (expr{value} (Name (str{id}{val=value})))))
(root (FunctionDef (str{name}{val=validate}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=FloatField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=validate}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Name (str{id}{val=value})))))) (expr (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Tuple (expr*{elts} (expr (Call (expr{func} (Name (str{id}{val=Decimal}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (expr (Call (expr{func} (Name (str{id}{val=Decimal}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_}))))))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_messages}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (Return (expr{value} (Name (str{id}{val=value})))))
(root (FunctionDef (str{name}{val=widget_attrs}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=widget})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=attrs})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=FloatField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=widget_attrs}))) (expr*{args} (expr (Name (str{id}{val=widget}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=widget}))) (expr (Name (str{id}{val=NumberInput})))))) (expr (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=widget}))) (str{attr}{val=attrs}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=attrs}))) (str{attr}{val=setdefault}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))))))))
(root (Return (expr{value} (Name (str{id}{val=attrs})))))
(root (ClassDef (str{name}{val=DecimalField}) (expr*{bases} (expr (Name (str{id}{val=IntegerField})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=default_error_messages})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=invalid}))) (expr (Str (str{s}{val=max_digits}))) (expr (Str (str{s}{val=max_decimal_places}))) (expr (Str (str{s}{val=max_whole_digits})))) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=Enter a number.})))))) (expr (Call (expr{func} (Name (str{id}{val=ungettext_lazy}))) (expr*{args} (expr (Str (str{s}{val=Ensure that there are no more than %(max)s digit in total.}))) (expr (Str (str{s}{val=Ensure that there are no more than %(max)s digits in total.}))) (expr (Str (str{s}{val=max})))))) (expr (Call (expr{func} (Name (str{id}{val=ungettext_lazy}))) (expr*{args} (expr (Str (str{s}{val=Ensure that there are no more than %(max)s decimal place.}))) (expr (Str (str{s}{val=Ensure that there are no more than %(max)s decimal places.}))) (expr (Str (str{s}{val=max})))))) (expr (Call (expr{func} (Name (str{id}{val=ungettext_lazy}))) (expr*{args} (expr (Str (str{s}{val=Ensure that there are no more than %(max)s digit before the decimal point.}))) (expr (Str (str{s}{val=Ensure that there are no more than %(max)s digits before the decimal point.}))) (expr (Str (str{s}{val=max})))))))))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=max_value}))) (expr (Name (str{id}{val=min_value}))) (expr (Name (str{id}{val=max_digits}))) (expr (Name (str{id}{val=decimal_places})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=max_digits}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=decimal_places}))))))) (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=max_digits}))) (expr (Name (str{id}{val=decimal_places}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=DecimalField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=max_value}))) (expr (Name (str{id}{val=min_value})))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (FunctionDef (str{name}{val=to_python}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=empty_values})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=None})))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=localize}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=formats}))) (str{attr}{val=sanitize_separators}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=smart_text}))) (expr*{args} (expr (Name (str{id}{val=value})))))) (str{attr}{val=strip})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=Decimal}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=DecimalException}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_messages}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (Return (expr{value} (Name (str{id}{val=value})))))
(root (FunctionDef (str{name}{val=validate}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=DecimalField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=validate}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=empty_values})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (epsilon)))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Name (str{id}{val=value})))))) (expr (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Call (expr{func} (Name (str{id}{val=Decimal}))) (expr*{args} (expr (Str (str{s}{val=Inf}))))))))) (expr (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Call (expr{func} (Name (str{id}{val=Decimal}))) (expr*{args} (expr (Str (str{s}{val=-Inf})))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_messages}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:1_})))))))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Str (str{s}{val=_STR:1_})))))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=sign}))) (expr (Name (str{id}{val=digittuple}))) (expr (Name (str{id}{val=exponent}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=as_tuple})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=decimals})))) (expr{value} (Call (expr{func} (Name (str{id}{val=abs}))) (expr*{args} (expr (Name (str{id}{val=exponent}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=digits})))) (expr{value} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=digittuple}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=decimals}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Name (str{id}{val=digits})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=digits})))) (expr{value} (Name (str{id}{val=decimals})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=whole_digits})))) (expr{value} (BinOp (expr{left} (Name (str{id}{val=digits}))) (operator{op} (Sub)) (expr{right} (Name (str{id}{val=decimals})))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=max_digits}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Compare (expr{left} (Name (str{id}{val=digits}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=max_digits}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_messages}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Str (str{s}{val=_STR:0_})))) (keyword (str{arg}{val=params}) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=max})))) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=max_digits}))))))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=decimal_places}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Compare (expr{left} (Name (str{id}{val=decimals}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=decimal_places}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_messages}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Str (str{s}{val=_STR:0_})))) (keyword (str{arg}{val=params}) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=max})))) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=decimal_places}))))))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=max_digits}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=decimal_places}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Compare (expr{left} (Name (str{id}{val=whole_digits}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=max_digits}))) (operator{op} (Sub)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=decimal_places}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_messages}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Str (str{s}{val=_STR:0_})))) (keyword (str{arg}{val=params}) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=max})))) (expr*{values} (expr (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=max_digits}))) (operator{op} (Sub)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=decimal_places}))))))))))))))
(root (Return (expr{value} (Name (str{id}{val=value})))))
(root (FunctionDef (str{name}{val=widget_attrs}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=widget})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=attrs})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=DecimalField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=widget_attrs}))) (expr*{args} (expr (Name (str{id}{val=widget}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=widget}))) (expr (Name (str{id}{val=NumberInput})))))) (expr (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=widget}))) (str{attr}{val=attrs}))))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=decimal_places}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=step})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=Decimal}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (operator{op} (Div)) (expr{right} (BinOp (expr{left} (Num (int{n}{val=10}))) (operator{op} (Pow)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=decimal_places})))))))))) (str{attr}{val=lower})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=step})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=attrs}))) (str{attr}{val=setdefault}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=step}))))))))
(root (Return (expr{value} (Name (str{id}{val=attrs})))))
(root (ClassDef (str{name}{val=BaseTemporalField}) (expr*{bases} (expr (Name (str{id}{val=Field})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=input_formats})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=BaseTemporalField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=input_formats}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=input_formats})))) (expr{value} (Name (str{id}{val=input_formats})))))
(root (FunctionDef (str{name}{val=to_python}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=unicode_value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=value})))) (keyword*{keywords} (keyword (str{arg}{val=strings_only}) (expr{value} (Name (str{id}{val=True})))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=unicode_value}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=unicode_value}))) (str{attr}{val=strip})))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=format}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=input_formats}))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=strptime}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=format}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=ValueError}))) (expr (Name (str{id}{val=TypeError})))))) (stmt*{body} (stmt (Pass)))))))
(root (Continue))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_messages}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (FunctionDef (str{name}{val=strptime}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=format})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=NotImplementedError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (ClassDef (str{name}{val=DateField}) (expr*{bases} (expr (Name (str{id}{val=BaseTemporalField})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=widget})))) (expr{value} (Name (str{id}{val=DateInput})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=input_formats})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=formats}))) (str{attr}{val=get_format_lazy}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=default_error_messages})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:1_})))) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (FunctionDef (str{name}{val=to_python}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=empty_values})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=None})))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=datetime})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=date})))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=date})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=value})))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=DateField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=to_python}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (FunctionDef (str{name}{val=strptime}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=format})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=datetime}))) (str{attr}{val=strptime}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=force_str}))) (expr*{args} (expr (Name (str{id}{val=value})))))) (expr (Name (str{id}{val=format})))))) (str{attr}{val=date})))))))
(root (ClassDef (str{name}{val=TimeField}) (expr*{bases} (expr (Name (str{id}{val=BaseTemporalField})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=widget})))) (expr{value} (Name (str{id}{val=TimeInput})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=input_formats})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=formats}))) (str{attr}{val=get_format_lazy}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=default_error_messages})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:1_})))) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (FunctionDef (str{name}{val=to_python}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=empty_values})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=None})))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=time})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=value})))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=TimeField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=to_python}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (FunctionDef (str{name}{val=strptime}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=format})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=datetime}))) (str{attr}{val=strptime}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=force_str}))) (expr*{args} (expr (Name (str{id}{val=value})))))) (expr (Name (str{id}{val=format})))))) (str{attr}{val=time})))))))
(root (ClassDef (str{name}{val=DateTimeField}) (expr*{bases} (expr (Name (str{id}{val=BaseTemporalField})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=widget})))) (expr{value} (Name (str{id}{val=DateTimeInput})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=input_formats})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=formats}))) (str{attr}{val=get_format_lazy}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=default_error_messages})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:1_})))) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (FunctionDef (str{name}{val=prepare_value}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=datetime})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=to_current_timezone}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (Return (expr{value} (Name (str{id}{val=value})))))
(root (FunctionDef (str{name}{val=to_python}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=empty_values})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=None})))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=datetime})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=from_current_timezone}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=date})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=datetime}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=year}))) (expr (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=month}))) (expr (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=day}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=from_current_timezone}))) (expr*{args} (expr (Name (str{id}{val=result}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=list})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=warnings}))) (str{attr}{val=warn}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_Use SplitDateTimeField instead.}))) (expr (Name (str{id}{val=RemovedInDjango19Warning})))) (keyword*{keywords} (keyword (str{arg}{val=stacklevel}) (expr{value} (Num (int{n}{val=2})))))))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=value})))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Num (int{n}{val=2})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_messages}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=value}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=empty_values})))))) (expr (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=value}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=empty_values}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Name (str{id}{val=tuple}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=DateTimeField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=to_python}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=from_current_timezone}))) (expr*{args} (expr (Name (str{id}{val=result}))))))))
(root (FunctionDef (str{name}{val=strptime}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=format})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=datetime}))) (str{attr}{val=strptime}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=force_str}))) (expr*{args} (expr (Name (str{id}{val=value})))))) (expr (Name (str{id}{val=format}))))))))
(root (ClassDef (str{name}{val=RegexField}) (expr*{bases} (expr (Name (str{id}{val=CharField})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=regex}))) (expr (Name (str{id}{val=max_length}))) (expr (Name (str{id}{val=min_length}))) (expr (Name (str{id}{val=error_message})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=error_message}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=error_messages})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=kwargs}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (expr (Dict (epsilon))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=error_messages}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Name (str{id}{val=error_message})))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=kwargs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=error_messages})))))))) (expr{value} (Name (str{id}{val=error_messages})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=RegexField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=max_length}))) (expr (Name (str{id}{val=min_length})))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_set_regex}))) (expr*{args} (expr (Name (str{id}{val=regex}))))))))
(root (FunctionDef (str{name}{val=_get_regex}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_regex})))))
(root (FunctionDef (str{name}{val=_set_regex}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=regex})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=regex}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=string_types})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=regex})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Name (str{id}{val=regex}))) (expr (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=UNICODE}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_regex})))) (expr{value} (Name (str{id}{val=regex})))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Str (str{s}{val=_STR:0_})))))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_regex_validator}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=validators}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=validators}))) (str{attr}{val=remove}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_regex_validator}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_regex_validator})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=validators}))) (str{attr}{val=RegexValidator}))) (keyword*{keywords} (keyword (str{arg}{val=regex}) (expr{value} (Name (str{id}{val=regex})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=validators}))) (str{attr}{val=append}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_regex_validator}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=regex})))) (expr{value} (Call (expr{func} (Name (str{id}{val=property}))) (expr*{args} (expr (Name (str{id}{val=_get_regex}))) (expr (Name (str{id}{val=_set_regex}))))))))
(root (ClassDef (str{name}{val=EmailField}) (expr*{bases} (expr (Name (str{id}{val=CharField})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=widget})))) (expr{value} (Name (str{id}{val=EmailInput})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=default_validators})))) (expr{value} (List (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=validators}))) (str{attr}{val=validate_email}))))))))
(root (FunctionDef (str{name}{val=clean}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=to_python}))) (expr*{args} (expr (Name (str{id}{val=value})))))) (str{attr}{val=strip})))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=EmailField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=clean}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (ClassDef (str{name}{val=FileField}) (expr*{bases} (expr (Name (str{id}{val=Field})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=widget})))) (expr{value} (Name (str{id}{val=ClearableFileInput})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=default_error_messages})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=invalid}))) (expr (Str (str{s}{val=missing}))) (expr (Str (str{s}{val=empty}))) (expr (Str (str{s}{val=max_length}))) (expr (Str (str{s}{val=contradiction})))) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=No file was submitted. Check the encoding type on the form.})))))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=No file was submitted.})))))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=The submitted file is empty.})))))) (expr (Call (expr{func} (Name (str{id}{val=ungettext_lazy}))) (expr*{args} (expr (Str (str{s}{val=Ensure this filename has at most %(max)d character (it has %(length)d).}))) (expr (Str (str{s}{val=Ensure this filename has at most %(max)d characters (it has %(length)d).}))) (expr (Str (str{s}{val=max})))))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=Please either submit a file or check the clear checkbox, not both.})))))))))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=max_length})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=kwargs}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=allow_empty_file})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=kwargs}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=False}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=FileField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (FunctionDef (str{name}{val=to_python}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=data})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=data}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=empty_values})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=None})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=file_name})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=data}))) (str{attr}{val=name})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=file_size})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=data}))) (str{attr}{val=size})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=AttributeError}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_messages}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=max_length}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=file_name})))))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=max_length}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=params})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_})))) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=max_length}))) (expr (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=file_name})))))))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_messages}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Str (str{s}{val=_STR:0_})))) (keyword (str{arg}{val=params}) (expr{value} (Name (str{id}{val=params})))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=file_name}))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_messages}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=allow_empty_file}))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=file_size})))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_messages}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (Return (expr{value} (Name (str{id}{val=data})))))
(root (FunctionDef (str{name}{val=clean}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=data}))) (expr (Name (str{id}{val=initial})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=data}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=FILE_INPUT_CONTRADICTION})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_messages}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=data}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=required}))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=data})))) (expr{value} (Name (str{id}{val=None})))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=data}))))) (expr (Name (str{id}{val=initial})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=initial})))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=FileField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=clean}))) (expr*{args} (expr (Name (str{id}{val=data}))))))))
(root (FunctionDef (str{name}{val=bound_data}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=data}))) (expr (Name (str{id}{val=initial})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=data}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=FILE_INPUT_CONTRADICTION}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=initial})))))
(root (Return (expr{value} (Name (str{id}{val=data})))))
(root (FunctionDef (str{name}{val=_has_changed}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=initial}))) (expr (Name (str{id}{val=data})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=data}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (Return (expr{value} (Name (str{id}{val=True})))))
(root (ClassDef (str{name}{val=ImageField}) (expr*{bases} (expr (Name (str{id}{val=FileField})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=default_error_messages})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=invalid_image})))) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=Upload a valid image. The file you uploaded was either not an image or a corrupted image.})))))))))))
(root (FunctionDef (str{name}{val=to_python}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=data})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=f})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=ImageField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=to_python}))) (expr*{args} (expr (Name (str{id}{val=data}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=f}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=None})))))
(root (ImportFrom (str{module}{val=PIL}) (alias*{names} (alias (str{name}{val=Image}))) (int{level}{val=0})))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=data}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=file})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=data}))) (str{attr}{val=temporary_file_path})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=data}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=file})))) (expr{value} (Call (expr{func} (Name (str{id}{val=BytesIO}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=data}))) (str{attr}{val=read}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=file})))) (expr{value} (Call (expr{func} (Name (str{id}{val=BytesIO}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=data}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=Image}))) (str{attr}{val=open}))) (expr*{args} (expr (Name (str{id}{val=file})))))) (str{attr}{val=verify})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=Exception}))) (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=reraise}))) (expr*{args} (expr (Name (str{id}{val=ValidationError}))) (expr (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_messages}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=invalid_image})))))))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Str (str{s}{val=invalid_image}))))))) (expr (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=exc_info}))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=2}))))))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=f}))) (expr (Str (str{s}{val=_STR:1_})))))) (expr (Call (expr{func} (Name (str{id}{val=callable}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=seek}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=seek}))) (expr*{args} (expr (Num (int{n}{val=0}))))))))
(root (Return (expr{value} (Name (str{id}{val=f})))))
(root (ClassDef (str{name}{val=URLField}) (expr*{bases} (expr (Name (str{id}{val=CharField})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=widget})))) (expr{value} (Name (str{id}{val=URLInput})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=default_error_messages})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:1_})))) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=default_validators})))) (expr{value} (List (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=validators}))) (str{attr}{val=URLValidator}))))))))))
(root (FunctionDef (str{name}{val=to_python}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=split_url}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=url})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=urlsplit}))) (expr*{args} (expr (Name (str{id}{val=url})))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ValueError}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_messages}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=URLField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=to_python}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (If (expr{test} (Name (str{id}{val=value}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=url_fields})))) (expr{value} (Call (expr{func} (Name (str{id}{val=split_url}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Subscript (expr{value} (Name (str{id}{val=url_fields}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=url_fields}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Subscript (expr{value} (Name (str{id}{val=url_fields}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=url_fields}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1})))))))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=url_fields}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=2})))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=url_fields}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=2})))))))) (expr{value} (Str (str{s}{val=})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=url_fields})))) (expr{value} (Call (expr{func} (Name (str{id}{val=split_url}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=urlunsplit}))) (expr*{args} (expr (Name (str{id}{val=url_fields})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=urlunsplit}))) (expr*{args} (expr (Name (str{id}{val=url_fields}))))))))
(root (Return (expr{value} (Name (str{id}{val=value})))))
(root (FunctionDef (str{name}{val=clean}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=to_python}))) (expr*{args} (expr (Name (str{id}{val=value})))))) (str{attr}{val=strip})))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=URLField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=clean}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (ClassDef (str{name}{val=BooleanField}) (expr*{bases} (expr (Name (str{id}{val=Field})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=widget})))) (expr{value} (Name (str{id}{val=CheckboxInput})))))
(root (FunctionDef (str{name}{val=to_python}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=string_types})))))) (expr (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=lower}))))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_})))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Name (str{id}{val=False})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=bool}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=BooleanField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=to_python}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (FunctionDef (str{name}{val=validate}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=value}))))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=required})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_messages}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (FunctionDef (str{name}{val=_has_changed}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=initial}))) (expr (Name (str{id}{val=data})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=initial}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=initial})))) (expr{value} (Name (str{id}{val=False})))))
(root (Return (expr{value} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=bool}))) (expr*{args} (expr (Name (str{id}{val=initial})))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Call (expr{func} (Name (str{id}{val=bool}))) (expr*{args} (expr (Name (str{id}{val=data})))))))))))
(root (ClassDef (str{name}{val=NullBooleanField}) (expr*{bases} (expr (Name (str{id}{val=BooleanField})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=widget})))) (expr{value} (Name (str{id}{val=NullBooleanSelect})))))
(root (FunctionDef (str{name}{val=to_python}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=True}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=True})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=False}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))))))))) (stmt*{body} (stmt (Pass))))))))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=None})))))
(root (FunctionDef (str{name}{val=validate}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (FunctionDef (str{name}{val=_has_changed}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=initial}))) (expr (Name (str{id}{val=data})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=initial}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=initial})))) (expr{value} (Call (expr{func} (Name (str{id}{val=bool}))) (expr*{args} (expr (Name (str{id}{val=initial}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=data}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=data})))) (expr{value} (Call (expr{func} (Name (str{id}{val=bool}))) (expr*{args} (expr (Name (str{id}{val=data}))))))))
(root (Return (expr{value} (Compare (expr{left} (Name (str{id}{val=initial}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Name (str{id}{val=data}))))))))
(root (ClassDef (str{name}{val=ChoiceField}) (expr*{bases} (expr (Name (str{id}{val=Field})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=widget})))) (expr{value} (Name (str{id}{val=Select})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=default_error_messages})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=invalid_choice})))) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=Select a valid choice. %(value)s is not one of the available choices.})))))))))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=choices}))) (expr (Name (str{id}{val=required}))) (expr (Name (str{id}{val=widget}))) (expr (Name (str{id}{val=label}))) (expr (Name (str{id}{val=initial}))) (expr (Name (str{id}{val=help_text})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}) (expr*{defaults} (expr (Tuple (epsilon))) (expr (Name (str{id}{val=True}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Str (str{s}{val=})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=ChoiceField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (keyword*{keywords} (keyword (str{arg}{val=required}) (expr{value} (Name (str{id}{val=required})))) (keyword (str{arg}{val=widget}) (expr{value} (Name (str{id}{val=widget})))) (keyword (str{arg}{val=label}) (expr{value} (Name (str{id}{val=label})))) (keyword (str{arg}{val=initial}) (expr{value} (Name (str{id}{val=initial})))) (keyword (str{arg}{val=help_text}) (expr{value} (Name (str{id}{val=help_text}))))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=choices})))) (expr{value} (Name (str{id}{val=choices})))))
(root (FunctionDef (str{name}{val=__deepcopy__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=memo})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=ChoiceField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__deepcopy__}))) (expr*{args} (expr (Name (str{id}{val=memo}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=result}))) (str{attr}{val=_choices})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=copy}))) (str{attr}{val=deepcopy}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_choices}))) (expr (Name (str{id}{val=memo}))))))))
(root (Return (expr{value} (Name (str{id}{val=result})))))
(root (FunctionDef (str{name}{val=_get_choices}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_choices})))))
(root (FunctionDef (str{name}{val=_set_choices}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_choices}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=widget}))) (str{attr}{val=choices})))) (expr{value} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=choices})))) (expr{value} (Call (expr{func} (Name (str{id}{val=property}))) (expr*{args} (expr (Name (str{id}{val=_get_choices}))) (expr (Name (str{id}{val=_set_choices}))))))))
(root (FunctionDef (str{name}{val=to_python}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=empty_values})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=smart_text}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (FunctionDef (str{name}{val=validate}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=ChoiceField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=validate}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=value}))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=valid_value}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_messages}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Str (str{s}{val=_STR:0_})))) (keyword (str{arg}{val=params}) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=value})))) (expr*{values} (expr (Name (str{id}{val=value}))))))))))))
(root (FunctionDef (str{name}{val=valid_value}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=text_value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Name (str{id}{val=v})))))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=choices}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=v}))) (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=list}))) (expr (Name (str{id}{val=tuple}))))))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=k2}))) (expr (Name (str{id}{val=v2})))))) (expr{iter} (Name (str{id}{val=v}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=k2})))))) (expr (Compare (expr{left} (Name (str{id}{val=text_value}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=k2})))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=True})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=k})))))) (expr (Compare (expr{left} (Name (str{id}{val=text_value}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=k})))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=True})))))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (ClassDef (str{name}{val=TypedChoiceField}) (expr*{bases} (expr (Name (str{id}{val=ChoiceField})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=coerce})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=kwargs}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=val})))))) (expr{body} (Name (str{id}{val=val}))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=empty_value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=kwargs}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=TypedChoiceField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (FunctionDef (str{name}{val=_coerce}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=empty_value})))))) (expr (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=empty_values}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=empty_value})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=coerce}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=ValueError}))) (expr (Name (str{id}{val=TypeError}))) (expr (Name (str{id}{val=ValidationError})))))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_messages}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Str (str{s}{val=_STR:0_})))) (keyword (str{arg}{val=params}) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=value})))) (expr*{values} (expr (Name (str{id}{val=value}))))))))))))
(root (Return (expr{value} (Name (str{id}{val=value})))))
(root (FunctionDef (str{name}{val=clean}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=TypedChoiceField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=clean}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_coerce}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (ClassDef (str{name}{val=MultipleChoiceField}) (expr*{bases} (expr (Name (str{id}{val=ChoiceField})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=hidden_widget})))) (expr{value} (Name (str{id}{val=MultipleHiddenInput})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=widget})))) (expr{value} (Name (str{id}{val=SelectMultiple})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=default_error_messages})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=invalid_choice}))) (expr (Str (str{s}{val=invalid_list})))) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=Select a valid choice. %(value)s is not one of the available choices.})))))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=Enter a list of values.})))))))))))
(root (FunctionDef (str{name}{val=to_python}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=value}))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (List (epsilon)))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=list}))) (expr (Name (str{id}{val=tuple}))))))))))) (stmt*{body} (stmt (Pass))))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_messages}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (Return (expr{value} (ListComp (expr{elt} (Call (expr{func} (Name (str{id}{val=smart_text}))) (expr*{args} (expr (Name (str{id}{val=val})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=val}))) (expr{iter} (Name (str{id}{val=value})))))))))
(root (FunctionDef (str{name}{val=validate}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=required}))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=value})))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_messages}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (For (expr{target} (Name (str{id}{val=val}))) (expr{iter} (Name (str{id}{val=value}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=valid_value}))) (expr*{args} (expr (Name (str{id}{val=val})))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_messages}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Str (str{s}{val=_STR:0_})))) (keyword (str{arg}{val=params}) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=value})))) (expr*{values} (expr (Name (str{id}{val=val}))))))))))))
(root (FunctionDef (str{name}{val=_has_changed}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=initial}))) (expr (Name (str{id}{val=data})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=initial}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=initial})))) (expr{value} (List (epsilon)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=data}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=data})))) (expr{value} (List (epsilon)))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=initial})))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=data}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=True})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=initial_set})))) (expr{value} (Call (expr{func} (Name (str{id}{val=set}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=value})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=value}))) (expr{iter} (Name (str{id}{val=initial}))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=data_set})))) (expr{value} (Call (expr{func} (Name (str{id}{val=set}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=value})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=value}))) (expr{iter} (Name (str{id}{val=data}))))))))))))
(root (Return (expr{value} (Compare (expr{left} (Name (str{id}{val=data_set}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Name (str{id}{val=initial_set}))))))))
(root (ClassDef (str{name}{val=TypedMultipleChoiceField}) (expr*{bases} (expr (Name (str{id}{val=MultipleChoiceField})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=coerce})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=kwargs}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=val})))))) (expr{body} (Name (str{id}{val=val}))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=empty_value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=kwargs}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (List (epsilon))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=TypedMultipleChoiceField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (FunctionDef (str{name}{val=_coerce}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=empty_value})))))) (expr (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=empty_values}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=empty_value})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=new_value})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=choice}))) (expr{iter} (Name (str{id}{val=value}))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=new_value}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=coerce}))) (expr*{args} (expr (Name (str{id}{val=choice})))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=ValueError}))) (expr (Name (str{id}{val=TypeError}))) (expr (Name (str{id}{val=ValidationError})))))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_messages}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Str (str{s}{val=_STR:0_})))) (keyword (str{arg}{val=params}) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=value})))) (expr*{values} (expr (Name (str{id}{val=choice}))))))))))))
(root (Return (expr{value} (Name (str{id}{val=new_value})))))
(root (FunctionDef (str{name}{val=clean}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=TypedMultipleChoiceField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=clean}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_coerce}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (FunctionDef (str{name}{val=validate}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=empty_value})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=TypedMultipleChoiceField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=validate}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=required}))) (stmt*{body} (stmt (Pass))))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_messages}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (ClassDef (str{name}{val=ComboField}) (expr*{bases} (expr (Name (str{id}{val=Field})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=fields})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}) (expr*{defaults} (expr (Tuple (epsilon)))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=ComboField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (For (expr{target} (Name (str{id}{val=f}))) (expr{iter} (Name (str{id}{val=fields}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=required})))) (expr{value} (Name (str{id}{val=False})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fields})))) (expr{value} (Name (str{id}{val=fields})))))
(root (FunctionDef (str{name}{val=clean}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=ComboField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=clean}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (For (expr{target} (Name (str{id}{val=field}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fields}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=clean}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (Return (expr{value} (Name (str{id}{val=value})))))
(root (ClassDef (str{name}{val=MultiValueField}) (expr*{bases} (expr (Name (str{id}{val=Field})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=default_error_messages})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=invalid}))) (expr (Str (str{s}{val=incomplete})))) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=Enter a list of values.})))))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=Enter a complete value.})))))))))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=fields})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}) (expr*{defaults} (expr (Tuple (epsilon)))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=require_all_fields})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=kwargs}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=True}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=MultiValueField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (For (expr{target} (Name (str{id}{val=f}))) (expr{iter} (Name (str{id}{val=fields}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=error_messages}))) (str{attr}{val=setdefault}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_messages}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=require_all_fields}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=required})))) (expr{value} (Name (str{id}{val=False})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fields})))) (expr{value} (Name (str{id}{val=fields})))))
(root (FunctionDef (str{name}{val=__deepcopy__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=memo})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=MultiValueField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__deepcopy__}))) (expr*{args} (expr (Name (str{id}{val=memo}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=result}))) (str{attr}{val=fields})))) (expr{value} (Call (expr{func} (Name (str{id}{val=tuple}))) (expr*{args} (expr (ListComp (expr{elt} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=x}))) (str{attr}{val=__deepcopy__}))) (expr*{args} (expr (Name (str{id}{val=memo})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=x}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fields}))))))))))))
(root (Return (expr{value} (Name (str{id}{val=result})))))
(root (FunctionDef (str{name}{val=validate}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (FunctionDef (str{name}{val=clean}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=clean_data})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=errors})))) (expr{value} (List (epsilon)))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=value}))))) (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=list}))) (expr (Name (str{id}{val=tuple})))))))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=value}))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (ListComp (expr{elt} (Name (str{id}{val=v}))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=v}))) (expr{iter} (Name (str{id}{val=value}))) (expr*{ifs} (expr (Compare (expr{left} (Name (str{id}{val=v}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=empty_values})))))))))))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=required}))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_messages}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=compress}))) (expr*{args} (expr (List (epsilon))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_messages}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=i}))) (expr (Name (str{id}{val=field})))))) (expr{iter} (Call (expr{func} (Name (str{id}{val=enumerate}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fields})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=field_value})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=value}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=i})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=IndexError}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=field_value})))) (expr{value} (Name (str{id}{val=None})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=field_value}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=empty_values})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=require_all_fields}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=required}))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_messages}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=required}))) (stmt*{body} (stmt (Pass))))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=error_messages}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=errors})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=errors}))) (str{attr}{val=append}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=error_messages}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))))))))
(root (Continue))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=clean_data}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=clean}))) (expr*{args} (expr (Name (str{id}{val=field_value})))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ValidationError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=errors}))) (str{attr}{val=extend}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Name (str{id}{val=m}))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=m}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=error_list}))) (expr*{ifs} (expr (Compare (expr{left} (Name (str{id}{val=m}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=errors}))))))))))))))))
(root (If (expr{test} (Name (str{id}{val=errors}))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Name (str{id}{val=errors}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=out})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=compress}))) (expr*{args} (expr (Name (str{id}{val=clean_data}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=validate}))) (expr*{args} (expr (Name (str{id}{val=out}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=run_validators}))) (expr*{args} (expr (Name (str{id}{val=out}))))))))
(root (Return (expr{value} (Name (str{id}{val=out})))))
(root (FunctionDef (str{name}{val=compress}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=data_list})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=NotImplementedError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=_has_changed}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=initial}))) (expr (Name (str{id}{val=data})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=initial}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=initial})))) (expr{value} (ListComp (expr{elt} (Str (str{s}{val=}))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=x}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=range}))) (expr*{args} (expr (Num (int{n}{val=0}))) (expr (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=data})))))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=initial}))) (expr (Name (str{id}{val=list})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=initial})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=widget}))) (str{attr}{val=decompress}))) (expr*{args} (expr (Name (str{id}{val=initial}))))))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=field}))) (expr (Name (str{id}{val=initial}))) (expr (Name (str{id}{val=data})))))) (expr{iter} (Call (expr{func} (Name (str{id}{val=zip}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fields}))) (expr (Name (str{id}{val=initial}))) (expr (Name (str{id}{val=data})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=_has_changed}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=to_python}))) (expr*{args} (expr (Name (str{id}{val=initial})))))) (expr (Name (str{id}{val=data})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=True})))))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (ClassDef (str{name}{val=FilePathField}) (expr*{bases} (expr (Name (str{id}{val=ChoiceField})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=path}))) (expr (Name (str{id}{val=match}))) (expr (Name (str{id}{val=recursive}))) (expr (Name (str{id}{val=allow_files}))) (expr (Name (str{id}{val=allow_folders}))) (expr (Name (str{id}{val=required}))) (expr (Name (str{id}{val=widget}))) (expr (Name (str{id}{val=label}))) (expr (Name (str{id}{val=initial}))) (expr (Name (str{id}{val=help_text})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=False}))) (expr (Name (str{id}{val=True}))) (expr (Name (str{id}{val=False}))) (expr (Name (str{id}{val=True}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Str (str{s}{val=})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=path}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=match}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=recursive}))))))) (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=path}))) (expr (Name (str{id}{val=match}))) (expr (Name (str{id}{val=recursive}))))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=allow_files}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=allow_folders}))))))) (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=allow_files}))) (expr (Name (str{id}{val=allow_folders}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=FilePathField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (keyword*{keywords} (keyword (str{arg}{val=choices}) (expr{value} (Tuple (epsilon)))) (keyword (str{arg}{val=required}) (expr{value} (Name (str{id}{val=required})))) (keyword (str{arg}{val=widget}) (expr{value} (Name (str{id}{val=widget})))) (keyword (str{arg}{val=label}) (expr{value} (Name (str{id}{val=label})))) (keyword (str{arg}{val=initial}) (expr{value} (Name (str{id}{val=initial})))) (keyword (str{arg}{val=help_text}) (expr{value} (Name (str{id}{val=help_text}))))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=required}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=choices})))) (expr{value} (List (epsilon)))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=choices})))) (expr{value} (List (expr*{elts} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=}))) (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=match}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=match_re})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=match}))))))))
(root (If (expr{test} (Name (str{id}{val=recursive}))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=root}))) (expr (Name (str{id}{val=dirs}))) (expr (Name (str{id}{val=files})))))) (expr{iter} (Call (expr{func} (Name (str{id}{val=sorted}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=walk}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=path}))))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=allow_files}))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=f}))) (expr{iter} (Name (str{id}{val=files}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=match}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=match_re}))) (str{attr}{val=search}))) (expr*{args} (expr (Name (str{id}{val=f}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=f})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=root}))) (expr (Name (str{id}{val=f}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=choices}))) (str{attr}{val=append}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=f}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=replace}))) (expr*{args} (expr (Name (str{id}{val=path}))) (expr (Str (str{s}{val=}))) (expr (Num (int{n}{val=1}))))))))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=allow_folders}))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=f}))) (expr{iter} (Name (str{id}{val=dirs}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=f}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=match}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=match_re}))) (str{attr}{val=search}))) (expr*{args} (expr (Name (str{id}{val=f}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=f})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=root}))) (expr (Name (str{id}{val=f}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=choices}))) (str{attr}{val=append}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=f}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=replace}))) (expr*{args} (expr (Name (str{id}{val=path}))) (expr (Str (str{s}{val=}))) (expr (Num (int{n}{val=1}))))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (For (expr{target} (Name (str{id}{val=f}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=sorted}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=listdir}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=path}))))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=f}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=full_file})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=path}))) (expr (Name (str{id}{val=f}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (BoolOp (boolop{op} (Or)) (expr*{values} (expr (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=allow_files}))) (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=isfile}))) (expr*{args} (expr (Name (str{id}{val=full_file}))))))))) (expr (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=allow_folders}))) (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=isdir}))) (expr*{args} (expr (Name (str{id}{val=full_file})))))))))))) (expr (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=match}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=match_re}))) (str{attr}{val=search}))) (expr*{args} (expr (Name (str{id}{val=f})))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=choices}))) (str{attr}{val=append}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=full_file}))) (expr (Name (str{id}{val=f})))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=OSError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=widget}))) (str{attr}{val=choices})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=choices})))))
(root (ClassDef (str{name}{val=SplitDateTimeField}) (expr*{bases} (expr (Name (str{id}{val=MultiValueField})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=widget})))) (expr{value} (Name (str{id}{val=SplitDateTimeWidget})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=hidden_widget})))) (expr{value} (Name (str{id}{val=SplitHiddenDateTimeWidget})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=default_error_messages})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=invalid_date}))) (expr (Str (str{s}{val=invalid_time})))) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=Enter a valid time.})))))))))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=input_date_formats}))) (expr (Name (str{id}{val=input_time_formats})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=errors})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=default_error_messages}))) (str{attr}{val=copy})))))))
(root (If (expr{test} (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=kwargs})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=errors}))) (str{attr}{val=update}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=kwargs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=localize})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=kwargs}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=False}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=fields})))) (expr{value} (Tuple (expr*{elts} (expr (Call (expr{func} (Name (str{id}{val=DateField}))) (keyword*{keywords} (keyword (str{arg}{val=input_formats}) (expr{value} (Name (str{id}{val=input_date_formats})))) (keyword (str{arg}{val=error_messages}) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=invalid})))) (expr*{values} (expr (Subscript (expr{value} (Name (str{id}{val=errors}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=invalid_date}))))))))))) (keyword (str{arg}{val=localize}) (expr{value} (Name (str{id}{val=localize}))))))) (expr (Call (expr{func} (Name (str{id}{val=TimeField}))) (keyword*{keywords} (keyword (str{arg}{val=input_formats}) (expr{value} (Name (str{id}{val=input_time_formats})))) (keyword (str{arg}{val=error_messages}) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=invalid})))) (expr*{values} (expr (Subscript (expr{value} (Name (str{id}{val=errors}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=invalid_time}))))))))))) (keyword (str{arg}{val=localize}) (expr{value} (Name (str{id}{val=localize}))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=SplitDateTimeField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=fields})))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (FunctionDef (str{name}{val=compress}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=data_list})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=data_list}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=data_list}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=empty_values})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_messages}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=data_list}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=empty_values})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_messages}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=datetime}))) (str{attr}{val=combine}))) (expr{starargs} (Name (str{id}{val=data_list})))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=from_current_timezone}))) (expr*{args} (expr (Name (str{id}{val=result}))))))))
(root (Return (expr{value} (Name (str{id}{val=None})))))
(root (ClassDef (str{name}{val=IPAddressField}) (expr*{bases} (expr (Name (str{id}{val=CharField})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=default_validators})))) (expr{value} (List (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=validators}))) (str{attr}{val=validate_ipv4_address}))))))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=warnings}))) (str{attr}{val=warn}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=RemovedInDjango19Warning}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=IPAddressField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (FunctionDef (str{name}{val=to_python}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=empty_values})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=strip})))))))
(root (ClassDef (str{name}{val=GenericIPAddressField}) (expr*{bases} (expr (Name (str{id}{val=CharField})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=protocol}))) (expr (Name (str{id}{val=unpack_ipv4})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}) (expr*{defaults} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=unpack_ipv4})))) (expr{value} (Name (str{id}{val=unpack_ipv4})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=default_validators})))) (expr{value} (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=validators}))) (str{attr}{val=ip_address_validators}))) (expr*{args} (expr (Name (str{id}{val=protocol}))) (expr (Name (str{id}{val=unpack_ipv4})))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=GenericIPAddressField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (FunctionDef (str{name}{val=to_python}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=empty_values})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=strip})))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=value}))) (expr (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=value}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=clean_ipv6_address}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=unpack_ipv4}))))))))
(root (Return (expr{value} (Name (str{id}{val=value})))))
(root (ClassDef (str{name}{val=SlugField}) (expr*{bases} (expr (Name (str{id}{val=CharField})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=default_validators})))) (expr{value} (List (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=validators}))) (str{attr}{val=validate_slug}))))))))
(root (FunctionDef (str{name}{val=clean}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=to_python}))) (expr*{args} (expr (Name (str{id}{val=value})))))) (str{attr}{val=strip})))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=SlugField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=clean}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=collections}) (alias*{names} (alias (str{name}{val=OrderedDict}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=copy})))))
(root (Import (alias*{names} (alias (str{name}{val=datetime})))))
(root (Import (alias*{names} (alias (str{name}{val=warnings})))))
(root (ImportFrom (str{module}{val=django.core.exceptions}) (alias*{names} (alias (str{name}{val=ValidationError})) (alias (str{name}{val=NON_FIELD_ERRORS}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.forms.fields}) (alias*{names} (alias (str{name}{val=Field})) (alias (str{name}{val=FileField}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.forms.utils}) (alias*{names} (alias (str{name}{val=flatatt})) (alias (str{name}{val=ErrorDict})) (alias (str{name}{val=ErrorList}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.forms.widgets}) (alias*{names} (alias (str{name}{val=Media})) (alias (str{name}{val=MediaDefiningClass})) (alias (str{name}{val=TextInput})) (alias (str{name}{val=Textarea}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.deprecation}) (alias*{names} (alias (str{name}{val=RemovedInDjango19Warning}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=smart_text})) (alias (str{name}{val=force_text})) (alias (str{name}{val=python_2_unicode_compatible}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.html}) (alias*{names} (alias (str{name}{val=conditional_escape})) (alias (str{name}{val=format_html}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.safestring}) (alias*{names} (alias (str{name}{val=mark_safe}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.translation}) (alias*{names} (alias (str{name}{val=ugettext}) (str{asname}{val=_}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__all__})))) (expr{value} (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))))))))
(root (FunctionDef (str{name}{val=pretty_name}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=name}))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=name}))) (str{attr}{val=replace}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val= })))))) (str{attr}{val=capitalize})))))))
(root (FunctionDef (str{name}{val=get_declared_fields}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=bases}))) (expr (Name (str{id}{val=attrs}))) (expr (Name (str{id}{val=with_base_fields})))) (expr*{defaults} (expr (Name (str{id}{val=True})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=warnings}))) (str{attr}{val=warn}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=RemovedInDjango19Warning})))) (keyword*{keywords} (keyword (str{arg}{val=stacklevel}) (expr{value} (Num (int{n}{val=2})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=fields})))) (expr{value} (ListComp (expr{elt} (Tuple (expr*{elts} (expr (Name (str{id}{val=field_name}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=attrs}))) (str{attr}{val=pop}))) (expr*{args} (expr (Name (str{id}{val=field_name}))))))))) (comprehension*{generators} (comprehension (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=field_name}))) (expr (Name (str{id}{val=obj})))))) (expr{iter} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=iteritems}))) (expr*{args} (expr (Name (str{id}{val=attrs}))))))))) (expr*{ifs} (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=obj}))) (expr (Name (str{id}{val=Field})))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=fields}))) (str{attr}{val=sort}))) (keyword*{keywords} (keyword (str{arg}{val=key}) (expr{value} (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=x})))))) (expr{body} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=x}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))) (str{attr}{val=creation_counter})))))))))))
(root (If (expr{test} (Name (str{id}{val=with_base_fields}))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=base}))) (expr{iter} (Subscript (expr{value} (Name (str{id}{val=bases}))) (slice{slice} (Slice (expr{step} (Num (int{n}{val=-1}))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=base}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=fields})))) (expr{value} (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=iteritems}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=base}))) (str{attr}{val=base_fields}))))))))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=fields})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=base}))) (expr{iter} (Subscript (expr{value} (Name (str{id}{val=bases}))) (slice{slice} (Slice (expr{step} (Num (int{n}{val=-1}))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=base}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=fields})))) (expr{value} (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=iteritems}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=base}))) (str{attr}{val=declared_fields}))))))))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=fields})))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=OrderedDict}))) (expr*{args} (expr (Name (str{id}{val=fields}))))))))
(root (ClassDef (str{name}{val=DeclarativeFieldsMetaclass}) (expr*{bases} (expr (Name (str{id}{val=MediaDefiningClass})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__new__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=mcs}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=bases}))) (expr (Name (str{id}{val=attrs})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=current_fields})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value})))))) (expr{iter} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=attrs}))) (str{attr}{val=items})))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=Field})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=current_fields}))) (str{attr}{val=append}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value})))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=attrs}))) (str{attr}{val=pop}))) (expr*{args} (expr (Name (str{id}{val=key}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=current_fields}))) (str{attr}{val=sort}))) (keyword*{keywords} (keyword (str{arg}{val=key}) (expr{value} (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=x})))))) (expr{body} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=x}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))) (str{attr}{val=creation_counter})))))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=attrs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=OrderedDict}))) (expr*{args} (expr (Name (str{id}{val=current_fields}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=new_class})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=DeclarativeFieldsMetaclass}))) (expr (Name (str{id}{val=mcs})))))) (str{attr}{val=__new__}))) (expr*{args} (expr (Name (str{id}{val=mcs}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=bases}))) (expr (Name (str{id}{val=attrs}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=declared_fields})))) (expr{value} (Call (expr{func} (Name (str{id}{val=OrderedDict})))))))
(root (For (expr{target} (Name (str{id}{val=base}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=reversed}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=new_class}))) (str{attr}{val=__mro__})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=base}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=declared_fields}))) (str{attr}{val=update}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=base}))) (str{attr}{val=declared_fields}))))))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=attr}))) (expr (Name (str{id}{val=value})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=base}))) (str{attr}{val=__dict__}))) (str{attr}{val=items}))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Compare (expr{left} (Name (str{id}{val=attr}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=declared_fields}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=declared_fields}))) (str{attr}{val=pop}))) (expr*{args} (expr (Name (str{id}{val=attr}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=new_class}))) (str{attr}{val=base_fields})))) (expr{value} (Name (str{id}{val=declared_fields})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=new_class}))) (str{attr}{val=declared_fields})))) (expr{value} (Name (str{id}{val=declared_fields})))))
(root (Return (expr{value} (Name (str{id}{val=new_class})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=python_2_unicode_compatible}))))))
(root (ClassDef (str{name}{val=BaseForm}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=data}))) (expr (Name (str{id}{val=files}))) (expr (Name (str{id}{val=auto_id}))) (expr (Name (str{id}{val=prefix}))) (expr (Name (str{id}{val=initial}))) (expr (Name (str{id}{val=error_class}))) (expr (Name (str{id}{val=label_suffix}))) (expr (Name (str{id}{val=empty_permitted})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=ErrorList}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=is_bound})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=data}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Compare (expr{left} (Name (str{id}{val=files}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=data}))) (expr (Dict (epsilon))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=files})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=files}))) (expr (Dict (epsilon))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=auto_id})))) (expr{value} (Name (str{id}{val=auto_id})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=prefix})))) (expr{value} (Name (str{id}{val=prefix})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=initial})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=initial}))) (expr (Dict (epsilon))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_class})))) (expr{value} (Name (str{id}{val=error_class})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=label_suffix})))) (expr{value} (IfExp (expr{test} (Compare (expr{left} (Name (str{id}{val=label_suffix}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr{body} (Name (str{id}{val=label_suffix}))) (expr{orelse} (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=:}))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=empty_permitted})))) (expr{value} (Name (str{id}{val=empty_permitted})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_errors})))) (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_changed_data})))) (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fields})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=copy}))) (str{attr}{val=deepcopy}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=base_fields}))))))))
(root (FunctionDef (str{name}{val=__str__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=as_table})))))))
(root (FunctionDef (str{name}{val=__iter__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=name}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fields}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Yield (expr{value} (Subscript (expr{value} (Name (str{id}{val=self}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=name})))))))))))
(root (FunctionDef (str{name}{val=__getitem__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=field})))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fields}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=name})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=KeyError}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=KeyError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=name}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__class__}))) (str{attr}{val=__name__})))))))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=BoundField}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=field}))) (expr (Name (str{id}{val=name}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=errors}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_errors}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=full_clean})))))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_errors})))))
(root (FunctionDef (str{name}{val=is_valid}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=is_bound}))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=errors}))))))))))
(root (FunctionDef (str{name}{val=add_prefix}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=field_name})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (IfExp (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=prefix}))) (expr{body} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=prefix}))) (expr (Name (str{id}{val=field_name})))))))) (expr{orelse} (Name (str{id}{val=field_name})))))))
(root (FunctionDef (str{name}{val=add_initial_prefix}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=field_name})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=add_prefix}))) (expr*{args} (expr (Name (str{id}{val=field_name}))))))))))
(root (FunctionDef (str{name}{val=_html_output}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=normal_row}))) (expr (Name (str{id}{val=error_row}))) (expr (Name (str{id}{val=row_ender}))) (expr (Name (str{id}{val=help_text_html}))) (expr (Name (str{id}{val=errors_on_separate_row})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=top_errors})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=non_field_errors})))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=output}))) (expr (Name (str{id}{val=hidden_fields}))))))) (expr{value} (Tuple (expr*{elts} (expr (List (epsilon))) (expr (List (epsilon))))))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=field})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fields}))) (str{attr}{val=items}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=html_class_attr})))) (expr{value} (Str (str{s}{val=})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=bf})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=self}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=name})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=bf_errors})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_class}))) (expr*{args} (expr (ListComp (expr{elt} (Call (expr{func} (Name (str{id}{val=conditional_escape}))) (expr*{args} (expr (Name (str{id}{val=error})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=error}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=bf}))) (str{attr}{val=errors}))))))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=bf}))) (str{attr}{val=is_hidden}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=bf_errors}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=top_errors}))) (str{attr}{val=extend}))) (expr*{args} (expr (ListComp (expr{elt} (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (operator{op} (Mod)) (expr{right} (Dict (expr*{keys} (expr (Str (str{s}{val=name}))) (expr (Str (str{s}{val=error})))) (expr*{values} (expr (Name (str{id}{val=name}))) (expr (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=e}))))))))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=e}))) (expr{iter} (Name (str{id}{val=bf_errors}))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=hidden_fields}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))) (expr*{args} (expr (Name (str{id}{val=bf})))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=css_classes})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=bf}))) (str{attr}{val=css_classes})))))))
(root (If (expr{test} (Name (str{id}{val=css_classes}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=html_class_attr})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=css_classes})))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=errors_on_separate_row}))) (expr (Name (str{id}{val=bf_errors})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=output}))) (str{attr}{val=append}))) (expr*{args} (expr (BinOp (expr{left} (Name (str{id}{val=error_row}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=bf_errors})))))))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=bf}))) (str{attr}{val=label}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=label})))) (expr{value} (Call (expr{func} (Name (str{id}{val=conditional_escape}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=bf}))) (str{attr}{val=label})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=label})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=bf}))) (str{attr}{val=label_tag}))) (expr*{args} (expr (Name (str{id}{val=label})))))) (expr (Str (str{s}{val=}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=label})))) (expr{value} (Str (str{s}{val=})))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=help_text}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=help_text})))) (expr{value} (BinOp (expr{left} (Name (str{id}{val=help_text_html}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=help_text}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=help_text})))) (expr{value} (Str (str{s}{val=})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=output}))) (str{attr}{val=append}))) (expr*{args} (expr (BinOp (expr{left} (Name (str{id}{val=normal_row}))) (operator{op} (Mod)) (expr{right} (Dict (expr*{keys} (expr (Str (str{s}{val=errors}))) (expr (Str (str{s}{val=label}))) (expr (Str (str{s}{val=field}))) (expr (Str (str{s}{val=help_text}))) (expr (Str (str{s}{val=html_class_attr}))) (expr (Str (str{s}{val=field_name})))) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=bf_errors})))))) (expr (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=label})))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))) (expr*{args} (expr (Name (str{id}{val=bf})))))) (expr (Name (str{id}{val=help_text}))) (expr (Name (str{id}{val=html_class_attr}))) (expr (Attribute (expr{value} (Name (str{id}{val=bf}))) (str{attr}{val=html_name})))))))))))))
(root (If (expr{test} (Name (str{id}{val=top_errors}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=output}))) (str{attr}{val=insert}))) (expr*{args} (expr (Num (int{n}{val=0}))) (expr (BinOp (expr{left} (Name (str{id}{val=error_row}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=top_errors})))))))))))))
(root (If (expr{test} (Name (str{id}{val=hidden_fields}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=str_hidden})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=hidden_fields}))))))))
(root (If (expr{test} (Name (str{id}{val=output}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=last_row})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=output}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=-1})))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=last_row}))) (str{attr}{val=endswith}))) (expr*{args} (expr (Name (str{id}{val=row_ender})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=last_row})))) (expr{value} (BinOp (expr{left} (Name (str{id}{val=normal_row}))) (operator{op} (Mod)) (expr{right} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=field}))) (expr (Str (str{s}{val=help_text}))) (expr (Str (str{s}{val=html_class_attr})))) (expr*{values} (expr (Str (str{s}{val=}))) (expr (Str (str{s}{val=}))) (expr (Str (str{s}{val=}))) (expr (Str (str{s}{val=}))) (expr (Name (str{id}{val=html_class_attr}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=output}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=last_row}))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=output}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=-1})))))))) (expr{value} (BinOp (expr{left} (BinOp (expr{left} (Subscript (expr{value} (Name (str{id}{val=last_row}))) (slice{slice} (Slice (expr{upper} (UnaryOp (unaryop{op} (USub)) (expr{operand} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=row_ender})))))))))))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=str_hidden}))))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=row_ender})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=output}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=str_hidden}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=mark_safe}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=\n}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=output})))))))))))
(root (FunctionDef (str{name}{val=as_table}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_html_output}))) (keyword*{keywords} (keyword (str{arg}{val=normal_row}) (expr{value} (Str (str{s}{val=<tr%(html_class_attr)s><th>%(label)s</th><td>%(errors)s%(field)s%(help_text)s</td></tr>})))) (keyword (str{arg}{val=error_row}) (expr{value} (Str (str{s}{val=<tr><td colspan="2">%s</td></tr>})))) (keyword (str{arg}{val=row_ender}) (expr{value} (Str (str{s}{val=</td></tr>})))) (keyword (str{arg}{val=help_text_html}) (expr{value} (Str (str{s}{val=<br /><span class="helptext">%s</span>})))) (keyword (str{arg}{val=errors_on_separate_row}) (expr{value} (Name (str{id}{val=False})))))))))
(root (FunctionDef (str{name}{val=as_ul}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_html_output}))) (keyword*{keywords} (keyword (str{arg}{val=normal_row}) (expr{value} (Str (str{s}{val=<li%(html_class_attr)s>%(errors)s%(label)s %(field)s%(help_text)s</li>})))) (keyword (str{arg}{val=error_row}) (expr{value} (Str (str{s}{val=<li>%s</li>})))) (keyword (str{arg}{val=row_ender}) (expr{value} (Str (str{s}{val=</li>})))) (keyword (str{arg}{val=help_text_html}) (expr{value} (Str (str{s}{val= <span class="helptext">%s</span>})))) (keyword (str{arg}{val=errors_on_separate_row}) (expr{value} (Name (str{id}{val=False})))))))))
(root (FunctionDef (str{name}{val=as_p}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_html_output}))) (keyword*{keywords} (keyword (str{arg}{val=normal_row}) (expr{value} (Str (str{s}{val=<p%(html_class_attr)s>%(label)s %(field)s%(help_text)s</p>})))) (keyword (str{arg}{val=error_row}) (expr{value} (Str (str{s}{val=%s})))) (keyword (str{arg}{val=row_ender}) (expr{value} (Str (str{s}{val=</p>})))) (keyword (str{arg}{val=help_text_html}) (expr{value} (Str (str{s}{val= <span class="helptext">%s</span>})))) (keyword (str{arg}{val=errors_on_separate_row}) (expr{value} (Name (str{id}{val=True})))))))))
(root (FunctionDef (str{name}{val=non_field_errors}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=errors}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=NON_FIELD_ERRORS}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_class}))) (keyword*{keywords} (keyword (str{arg}{val=error_class}) (expr{value} (Str (str{s}{val=nonfield}))))))))))))
(root (FunctionDef (str{name}{val=_raw_value}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=fieldname})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=field})))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fields}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=fieldname})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=prefix})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=add_prefix}))) (expr*{args} (expr (Name (str{id}{val=fieldname}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=widget}))) (str{attr}{val=value_from_datadict}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=files}))) (expr (Name (str{id}{val=prefix}))))))))
(root (FunctionDef (str{name}{val=add_error}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=field}))) (expr (Name (str{id}{val=error})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=error}))) (expr (Name (str{id}{val=ValidationError})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=error})))) (expr{value} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Name (str{id}{val=error}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=error}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=field}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TypeError}))) (expr*{args} (expr (Str (str{s}{val=The argument `field` must be `None` when the `error` argument contains errors for multiple fields.}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=error})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=error}))) (str{attr}{val=error_dict})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=error})))) (expr{value} (Dict (expr*{keys} (expr (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=field}))) (expr (Name (str{id}{val=NON_FIELD_ERRORS}))))))) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=error}))) (str{attr}{val=error_list}))))))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=field}))) (expr (Name (str{id}{val=error_list})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=error}))) (str{attr}{val=items}))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=field}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=errors})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=field}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Name (str{id}{val=NON_FIELD_ERRORS})))))) (expr (Compare (expr{left} (Name (str{id}{val=field}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fields}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__class__}))) (str{attr}{val=__name__}))) (expr (Name (str{id}{val=field})))))))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=field}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=NON_FIELD_ERRORS})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_errors}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=field})))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_class}))) (keyword*{keywords} (keyword (str{arg}{val=error_class}) (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_errors}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=field})))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_class})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_errors}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=field}))))))) (str{attr}{val=extend}))) (expr*{args} (expr (Name (str{id}{val=error_list}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=field}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=cleaned_data})))))) (stmt*{body} (stmt (Pass)))))
(root (Delete (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=cleaned_data}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=field}))))))))))
(root (FunctionDef (str{name}{val=has_error}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=field}))) (expr (Name (str{id}{val=code})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=code}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Compare (expr{left} (Name (str{id}{val=field}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=errors}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=field}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=errors})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=error}))) (expr{iter} (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=errors}))) (str{attr}{val=as_data}))))) (slice{slice} (Index (expr{value} (Name (str{id}{val=field}))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=error}))) (str{attr}{val=code}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=code})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=True})))))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (FunctionDef (str{name}{val=full_clean}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_errors})))) (expr{value} (Call (expr{func} (Name (str{id}{val=ErrorDict})))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=is_bound}))))) (stmt*{body} (stmt (Pass)))))
(root (Return (epsilon)))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=cleaned_data})))) (expr{value} (Dict (epsilon)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=empty_permitted}))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=has_changed})))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (epsilon)))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_clean_fields})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_clean_form})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_post_clean})))))))
(root (FunctionDef (str{name}{val=_clean_fields}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=field})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fields}))) (str{attr}{val=items}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=widget}))) (str{attr}{val=value_from_datadict}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=files}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=add_prefix}))) (expr*{args} (expr (Name (str{id}{val=name})))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=field}))) (expr (Name (str{id}{val=FileField})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=initial})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=initial}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=initial}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=clean}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=initial}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=clean}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=cleaned_data}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=name})))))))) (expr{value} (Name (str{id}{val=value})))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=name})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=name}))))))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=cleaned_data}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=name})))))))) (expr{value} (Name (str{id}{val=value})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ValidationError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=add_error}))) (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=e}))))))))
(root (FunctionDef (str{name}{val=_clean_form}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cleaned_data})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=clean})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ValidationError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=add_error}))) (expr*{args} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=e}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=cleaned_data}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=cleaned_data})))) (expr{value} (Name (str{id}{val=cleaned_data})))))
(root (FunctionDef (str{name}{val=_post_clean}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (FunctionDef (str{name}{val=clean}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=cleaned_data})))))
(root (FunctionDef (str{name}{val=has_changed}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=bool}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=changed_data}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=changed_data}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_changed_data}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_changed_data})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=field})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fields}))) (str{attr}{val=items}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=prefixed_name})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=add_prefix}))) (expr*{args} (expr (Name (str{id}{val=name}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=data_value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=widget}))) (str{attr}{val=value_from_datadict}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=files}))) (expr (Name (str{id}{val=prefixed_name}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=show_hidden_initial}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=initial_value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=initial}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=initial}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=callable}))) (expr*{args} (expr (Name (str{id}{val=initial_value})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=initial_value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=initial_value})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=initial_prefixed_name})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=add_initial_prefix}))) (expr*{args} (expr (Name (str{id}{val=name}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=hidden_widget})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=hidden_widget})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=initial_value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=to_python}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=hidden_widget}))) (str{attr}{val=value_from_datadict}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=files}))) (expr (Name (str{id}{val=initial_prefixed_name})))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ValidationError}))) (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_changed_data}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=name}))))))))
(root (Continue))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=_has_changed}))) (expr*{args} (expr (Name (str{id}{val=initial_value}))) (expr (Name (str{id}{val=data_value})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_changed_data}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=name}))))))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_changed_data})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=media}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=media})))) (expr{value} (Call (expr{func} (Name (str{id}{val=Media})))))))
(root (For (expr{target} (Name (str{id}{val=field}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fields}))) (str{attr}{val=values}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=media})))) (expr{value} (BinOp (expr{left} (Name (str{id}{val=media}))) (operator{op} (Add)) (expr{right} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=widget}))) (str{attr}{val=media})))))))
(root (Return (expr{value} (Name (str{id}{val=media})))))
(root (FunctionDef (str{name}{val=is_multipart}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=field}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fields}))) (str{attr}{val=values}))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=widget}))) (str{attr}{val=needs_multipart_form}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=True})))))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (FunctionDef (str{name}{val=hidden_fields}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (ListComp (expr{elt} (Name (str{id}{val=field}))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=field}))) (expr{iter} (Name (str{id}{val=self}))) (expr*{ifs} (expr (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=is_hidden}))))))))))
(root (FunctionDef (str{name}{val=visible_fields}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (ListComp (expr{elt} (Name (str{id}{val=field}))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=field}))) (expr{iter} (Name (str{id}{val=self}))) (expr*{ifs} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=is_hidden}))))))))))))
(root (ClassDef (str{name}{val=Form}) (expr*{bases} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=with_metaclass}))) (expr*{args} (expr (Name (str{id}{val=DeclarativeFieldsMetaclass}))) (expr (Name (str{id}{val=BaseForm}))))))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=python_2_unicode_compatible}))))))
(root (ClassDef (str{name}{val=BoundField}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=form}))) (expr (Name (str{id}{val=field}))) (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=form})))) (expr{value} (Name (str{id}{val=form})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=field})))) (expr{value} (Name (str{id}{val=field})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=name})))) (expr{value} (Name (str{id}{val=name})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=html_name})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=add_prefix}))) (expr*{args} (expr (Name (str{id}{val=name}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=html_initial_name})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=add_initial_prefix}))) (expr*{args} (expr (Name (str{id}{val=name}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=html_initial_id})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=add_initial_prefix}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=auto_id}))))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=field}))) (str{attr}{val=label}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=label})))) (expr{value} (Call (expr{func} (Name (str{id}{val=pretty_name}))) (expr*{args} (expr (Name (str{id}{val=name}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=label})))) (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=field}))) (str{attr}{val=label})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=help_text})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=help_text}))) (expr (Str (str{s}{val=}))))))))
(root (FunctionDef (str{name}{val=__str__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=field}))) (str{attr}{val=show_hidden_initial}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=as_widget}))))) (operator{op} (Add)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=as_hidden}))) (keyword*{keywords} (keyword (str{arg}{val=only_initial}) (expr{value} (Name (str{id}{val=True})))))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=as_widget})))))))
(root (FunctionDef (str{name}{val=__iter__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=id_})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=field}))) (str{attr}{val=widget}))) (str{attr}{val=attrs}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=auto_id}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=attrs})))) (expr{value} (IfExp (expr{test} (Name (str{id}{val=id_}))) (expr{body} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:0_})))) (expr*{values} (expr (Name (str{id}{val=id_})))))) (expr{orelse} (Dict (epsilon)))))))
(root (For (expr{target} (Name (str{id}{val=subwidget}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=field}))) (str{attr}{val=widget}))) (str{attr}{val=subwidgets}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=html_name}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=value}))))) (expr (Name (str{id}{val=attrs})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Yield (expr{value} (Name (str{id}{val=subwidget})))))))
(root (FunctionDef (str{name}{val=__len__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__iter__})))))))))))))
(root (FunctionDef (str{name}{val=__getitem__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=idx})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Subscript (expr{value} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__iter__})))))))) (slice{slice} (Index (expr{value} (Name (str{id}{val=idx})))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=errors}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=form}))) (str{attr}{val=errors}))) (str{attr}{val=get}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=name}))) (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=form}))) (str{attr}{val=error_class}))))))))))
(root (FunctionDef (str{name}{val=as_widget}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=widget}))) (expr (Name (str{id}{val=attrs}))) (expr (Name (str{id}{val=only_initial})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=widget}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=widget})))) (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=field}))) (str{attr}{val=widget})))))
(root (If (expr{test} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=field}))) (str{attr}{val=localize}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=widget}))) (str{attr}{val=is_localized})))) (expr{value} (Name (str{id}{val=True})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=attrs})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=attrs}))) (expr (Dict (epsilon))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=auto_id})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=auto_id})))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=auto_id}))) (expr (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=attrs})))))) (expr (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=widget}))) (str{attr}{val=attrs}))))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=only_initial}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=attrs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Name (str{id}{val=auto_id})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=attrs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=html_initial_id})))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=only_initial}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=name})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=html_name})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=name})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=html_initial_name})))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=widget}))) (str{attr}{val=render}))) (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=value})))))) (keyword*{keywords} (keyword (str{arg}{val=attrs}) (expr{value} (Name (str{id}{val=attrs}))))))))))))
(root (FunctionDef (str{name}{val=as_text}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=attrs})))) (str{kwarg}{val=kwargs}) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=as_widget}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=TextInput}))))) (expr (Name (str{id}{val=attrs})))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (FunctionDef (str{name}{val=as_textarea}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=attrs})))) (str{kwarg}{val=kwargs}) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=as_widget}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=Textarea}))))) (expr (Name (str{id}{val=attrs})))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (FunctionDef (str{name}{val=as_hidden}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=attrs})))) (str{kwarg}{val=kwargs}) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=as_widget}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=field}))) (str{attr}{val=hidden_widget}))))) (expr (Name (str{id}{val=attrs})))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=data}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=field}))) (str{attr}{val=widget}))) (str{attr}{val=value_from_datadict}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=form}))) (str{attr}{val=data}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=form}))) (str{attr}{val=files}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=html_name}))))))))
(root (FunctionDef (str{name}{val=value}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=form}))) (str{attr}{val=is_bound}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=data})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=form}))) (str{attr}{val=initial}))) (str{attr}{val=get}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=name}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=field}))) (str{attr}{val=initial}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=callable}))) (expr*{args} (expr (Name (str{id}{val=data})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=data})))) (expr{value} (Call (expr{func} (Name (str{id}{val=data})))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=data}))) (expr (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=datetime}))) (expr (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=time}))))))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=field}))) (str{attr}{val=widget}))) (expr (Str (str{s}{val=supports_microseconds}))) (expr (Name (str{id}{val=True}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=data})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=data}))) (str{attr}{val=replace}))) (keyword*{keywords} (keyword (str{arg}{val=microsecond}) (expr{value} (Num (int{n}{val=0})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=data})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=field}))) (str{attr}{val=bound_data}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=form}))) (str{attr}{val=initial}))) (str{attr}{val=get}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=name}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=field}))) (str{attr}{val=initial})))))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=field}))) (str{attr}{val=prepare_value}))) (expr*{args} (expr (Name (str{id}{val=data}))))))))
(root (FunctionDef (str{name}{val=label_tag}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=contents}))) (expr (Name (str{id}{val=attrs}))) (expr (Name (str{id}{val=label_suffix})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=contents})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=contents}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=label}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=label_suffix}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=label_suffix})))) (expr{value} (IfExp (expr{test} (Compare (expr{left} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=field}))) (str{attr}{val=label_suffix}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr{body} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=field}))) (str{attr}{val=label_suffix}))) (expr{orelse} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=form}))) (str{attr}{val=label_suffix})))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=label_suffix}))) (expr (Name (str{id}{val=contents}))) (expr (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=contents}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=-1}))))))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=:?.!})))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=contents})))) (expr{value} (Call (expr{func} (Name (str{id}{val=format_html}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_}))) (expr (Name (str{id}{val=contents}))) (expr (Name (str{id}{val=label_suffix}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=widget})))) (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=field}))) (str{attr}{val=widget})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=id_})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=widget}))) (str{attr}{val=attrs}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=auto_id}))))))))
(root (If (expr{test} (Name (str{id}{val=id_}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=id_for_label})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=widget}))) (str{attr}{val=id_for_label}))) (expr*{args} (expr (Name (str{id}{val=id_}))))))))
(root (If (expr{test} (Name (str{id}{val=id_for_label}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=attrs})))) (expr{value} (Call (expr{func} (Name (str{id}{val=dict}))) (expr*{args} (expr (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=attrs}))) (expr (Dict (epsilon))))))) (expr{kwargs} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:0_})))) (expr*{values} (expr (Name (str{id}{val=id_for_label}))))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=field}))) (str{attr}{val=required}))) (expr (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=form}))) (expr (Str (str{s}{val=_STR:0_}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=attrs})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=attrs}))) (expr (Dict (epsilon))))))))
(root (If (expr{test} (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=attrs})))))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Subscript (expr{value} (Name (str{id}{val=attrs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (operator{op} (Add)) (expr{value} (BinOp (expr{left} (Str (str{s}{val= }))) (operator{op} (Add)) (expr{right} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=form}))) (str{attr}{val=required_css_class})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=attrs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=form}))) (str{attr}{val=required_css_class})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=attrs})))) (expr{value} (IfExp (expr{test} (Name (str{id}{val=attrs}))) (expr{body} (Call (expr{func} (Name (str{id}{val=flatatt}))) (expr*{args} (expr (Name (str{id}{val=attrs})))))) (expr{orelse} (Str (str{s}{val=})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=contents})))) (expr{value} (Call (expr{func} (Name (str{id}{val=format_html}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=attrs}))) (expr (Name (str{id}{val=contents}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=contents})))) (expr{value} (Call (expr{func} (Name (str{id}{val=conditional_escape}))) (expr*{args} (expr (Name (str{id}{val=contents}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=mark_safe}))) (expr*{args} (expr (Name (str{id}{val=contents}))))))))
(root (FunctionDef (str{name}{val=css_classes}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=extra_classes})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=extra_classes}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=extra_classes})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=extra_classes}))) (str{attr}{val=split})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=extra_classes})))) (expr{value} (Call (expr{func} (Name (str{id}{val=set}))) (expr*{args} (expr (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=extra_classes}))) (expr (List (epsilon)))))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=errors}))) (expr (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=form}))) (expr (Str (str{s}{val=_STR:0_}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=extra_classes}))) (str{attr}{val=add}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=form}))) (str{attr}{val=error_css_class}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=field}))) (str{attr}{val=required}))) (expr (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=form}))) (expr (Str (str{s}{val=_STR:0_}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=extra_classes}))) (str{attr}{val=add}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=form}))) (str{attr}{val=required_css_class}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val= }))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=extra_classes}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=is_hidden}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=field}))) (str{attr}{val=widget}))) (str{attr}{val=is_hidden})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=auto_id}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=auto_id})))) (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=form}))) (str{attr}{val=auto_id})))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=auto_id}))) (expr (Compare (expr{left} (Str (str{s}{val=%s}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Call (expr{func} (Name (str{id}{val=smart_text}))) (expr*{args} (expr (Name (str{id}{val=auto_id})))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=smart_text}))) (expr*{args} (expr (Name (str{id}{val=auto_id})))))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=html_name})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Name (str{id}{val=auto_id}))) (stmt*{body} (stmt (Pass))))))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=html_name})))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=id_for_label}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=widget})))) (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=field}))) (str{attr}{val=widget})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=id_})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=widget}))) (str{attr}{val=attrs}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=auto_id}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=widget}))) (str{attr}{val=id_for_label}))) (expr*{args} (expr (Name (str{id}{val=id_}))))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.exceptions}) (alias*{names} (alias (str{name}{val=ValidationError}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.forms}) (alias*{names} (alias (str{name}{val=Form}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.forms.fields}) (alias*{names} (alias (str{name}{val=IntegerField})) (alias (str{name}{val=BooleanField}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.forms.utils}) (alias*{names} (alias (str{name}{val=ErrorList}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.forms.widgets}) (alias*{names} (alias (str{name}{val=HiddenInput}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=python_2_unicode_compatible}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.functional}) (alias*{names} (alias (str{name}{val=cached_property}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.safestring}) (alias*{names} (alias (str{name}{val=mark_safe}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.six.moves}) (alias*{names} (alias (str{name}{val=xrange}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.translation}) (alias*{names} (alias (str{name}{val=ungettext})) (alias (str{name}{val=ugettext}) (str{asname}{val=_}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__all__})))) (expr{value} (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=TOTAL_FORM_COUNT})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=INITIAL_FORM_COUNT})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=MIN_NUM_FORM_COUNT})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=MAX_NUM_FORM_COUNT})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ORDERING_FIELD_NAME})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=DELETION_FIELD_NAME})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=DEFAULT_MIN_NUM})))) (expr{value} (Num (int{n}{val=0})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=DEFAULT_MAX_NUM})))) (expr{value} (Num (int{n}{val=1000})))))
(root (ClassDef (str{name}{val=ManagementForm}) (expr*{bases} (expr (Name (str{id}{val=Form})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=base_fields}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=TOTAL_FORM_COUNT})))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=IntegerField}))) (keyword*{keywords} (keyword (str{arg}{val=widget}) (expr{value} (Name (str{id}{val=HiddenInput})))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=base_fields}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=INITIAL_FORM_COUNT})))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=IntegerField}))) (keyword*{keywords} (keyword (str{arg}{val=widget}) (expr{value} (Name (str{id}{val=HiddenInput})))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=base_fields}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=MIN_NUM_FORM_COUNT})))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=IntegerField}))) (keyword*{keywords} (keyword (str{arg}{val=required}) (expr{value} (Name (str{id}{val=False})))) (keyword (str{arg}{val=widget}) (expr{value} (Name (str{id}{val=HiddenInput})))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=base_fields}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=MAX_NUM_FORM_COUNT})))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=IntegerField}))) (keyword*{keywords} (keyword (str{arg}{val=required}) (expr{value} (Name (str{id}{val=False})))) (keyword (str{arg}{val=widget}) (expr{value} (Name (str{id}{val=HiddenInput})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=ManagementForm}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=python_2_unicode_compatible}))))))
(root (ClassDef (str{name}{val=BaseFormSet}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=data}))) (expr (Name (str{id}{val=files}))) (expr (Name (str{id}{val=auto_id}))) (expr (Name (str{id}{val=prefix}))) (expr (Name (str{id}{val=initial}))) (expr (Name (str{id}{val=error_class})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=ErrorList})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=is_bound})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=data}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Compare (expr{left} (Name (str{id}{val=files}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=prefix})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=prefix}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get_default_prefix}))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=auto_id})))) (expr{value} (Name (str{id}{val=auto_id})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=data}))) (expr (Dict (epsilon))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=files})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=files}))) (expr (Dict (epsilon))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=initial})))) (expr{value} (Name (str{id}{val=initial})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_class})))) (expr{value} (Name (str{id}{val=error_class})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_errors})))) (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_non_form_errors})))) (expr{value} (Name (str{id}{val=None})))))
(root (FunctionDef (str{name}{val=__str__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=as_table})))))))
(root (FunctionDef (str{name}{val=__iter__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=iter}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=forms}))))))))
(root (FunctionDef (str{name}{val=__getitem__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=index})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=forms}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=index})))))))))
(root (FunctionDef (str{name}{val=__len__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=forms}))))))))
(root (FunctionDef (str{name}{val=__bool__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=True})))))
(root (FunctionDef (str{name}{val=__nonzero__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=type}))) (expr*{args} (expr (Name (str{id}{val=self})))))) (str{attr}{val=__bool__}))) (expr*{args} (expr (Name (str{id}{val=self}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=management_form}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=is_bound}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=form})))) (expr{value} (Call (expr{func} (Name (str{id}{val=ManagementForm}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data})))) (keyword*{keywords} (keyword (str{arg}{val=auto_id}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=auto_id})))) (keyword (str{arg}{val=prefix}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=prefix})))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=is_valid}))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=ManagementForm data is missing or has been tampered with}))))))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Str (str{s}{val=missing_management_form})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=form})))) (expr{value} (Call (expr{func} (Name (str{id}{val=ManagementForm}))) (keyword*{keywords} (keyword (str{arg}{val=auto_id}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=auto_id})))) (keyword (str{arg}{val=prefix}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=prefix})))) (keyword (str{arg}{val=initial}) (expr{value} (Dict (expr*{keys} (expr (Name (str{id}{val=TOTAL_FORM_COUNT}))) (expr (Name (str{id}{val=INITIAL_FORM_COUNT}))) (expr (Name (str{id}{val=MIN_NUM_FORM_COUNT}))) (expr (Name (str{id}{val=MAX_NUM_FORM_COUNT})))) (expr*{values} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=total_form_count}))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=initial_form_count}))))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=min_num}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=max_num}))))))))))))
(root (Return (expr{value} (Name (str{id}{val=form})))))
(root (FunctionDef (str{name}{val=total_form_count}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=is_bound}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=min}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=management_form}))) (str{attr}{val=cleaned_data}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=TOTAL_FORM_COUNT}))))))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=absolute_max}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=initial_forms})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=initial_form_count})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=total_forms})))) (expr{value} (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=max}))) (expr*{args} (expr (Name (str{id}{val=initial_forms}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=min_num})))))) (operator{op} (Add)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=extra})))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=initial_forms}))) (cmpop*{ops} (cmpop (Gt)) (cmpop (GtE))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=max_num}))) (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=total_forms})))) (expr{value} (Name (str{id}{val=initial_forms})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Name (str{id}{val=total_forms}))) (cmpop*{ops} (cmpop (Gt)) (cmpop (GtE))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=max_num}))) (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=total_forms})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=max_num})))))
(root (Return (expr{value} (Name (str{id}{val=total_forms})))))
(root (FunctionDef (str{name}{val=initial_form_count}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=is_bound}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=management_form}))) (str{attr}{val=cleaned_data}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=INITIAL_FORM_COUNT})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=initial_forms})))) (expr{value} (IfExp (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=initial}))) (expr{body} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=initial})))))) (expr{orelse} (Num (int{n}{val=0})))))))
(root (Return (expr{value} (Name (str{id}{val=initial_forms})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=cached_property}))))))
(root (FunctionDef (str{name}{val=forms}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=forms})))) (expr{value} (ListComp (expr{elt} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_construct_form}))) (expr*{args} (expr (Name (str{id}{val=i})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=i}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=xrange}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=total_form_count}))))))))))))))
(root (Return (expr{value} (Name (str{id}{val=forms})))))
(root (FunctionDef (str{name}{val=_construct_form}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=i})))) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=defaults})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=prefix}))) (expr (Str (str{s}{val=error_class})))) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=auto_id}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=add_prefix}))) (expr*{args} (expr (Name (str{id}{val=i})))))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_class}))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=is_bound}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=defaults}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data})))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=defaults}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=files})))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=initial}))) (expr (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=kwargs}))))))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=defaults}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=initial}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=i})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=IndexError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=i}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=initial_form_count})))))))) (expr (Compare (expr{left} (Name (str{id}{val=i}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=min_num}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=defaults}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Name (str{id}{val=True})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=defaults}))) (str{attr}{val=update}))) (expr*{args} (expr (Name (str{id}{val=kwargs}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=form})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=form}))) (expr{kwargs} (Name (str{id}{val=defaults})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=add_fields}))) (expr*{args} (expr (Name (str{id}{val=form}))) (expr (Name (str{id}{val=i}))))))))
(root (Return (expr{value} (Name (str{id}{val=form})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=initial_forms}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=forms}))) (slice{slice} (Slice (expr{upper} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=initial_form_count})))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=extra_forms}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=forms}))) (slice{slice} (Slice (expr{lower} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=initial_form_count})))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=empty_form}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=form})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=form}))) (keyword*{keywords} (keyword (str{arg}{val=auto_id}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=auto_id})))) (keyword (str{arg}{val=prefix}) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=add_prefix}))) (expr*{args} (expr (Str (str{s}{val=__prefix__}))))))) (keyword (str{arg}{val=empty_permitted}) (expr{value} (Name (str{id}{val=True})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=add_fields}))) (expr*{args} (expr (Name (str{id}{val=form}))) (expr (Name (str{id}{val=None}))))))))
(root (Return (expr{value} (Name (str{id}{val=form})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=cleaned_data}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=is_valid}))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=AttributeError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__class__}))) (str{attr}{val=__name__}))))))))))
(root (Return (expr{value} (ListComp (expr{elt} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=cleaned_data}))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=form}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=forms})))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=deleted_forms}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=is_valid}))))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=can_delete})))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (List (epsilon)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Str (str{s}{val=_STR:0_})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_deleted_form_indexes})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=i}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=range}))) (expr*{args} (expr (Num (int{n}{val=0}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=total_form_count})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=form})))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=forms}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=i})))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=i}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=initial_form_count})))))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=has_changed})))))))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_should_delete_form}))) (expr*{args} (expr (Name (str{id}{val=form})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_deleted_form_indexes}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=i}))))))))
(root (Return (expr{value} (ListComp (expr{elt} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=forms}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=i}))))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=i}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_deleted_form_indexes})))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=ordered_forms}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=is_valid}))))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=can_order})))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=AttributeError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__class__}))) (str{attr}{val=__name__}))))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Str (str{s}{val=_STR:0_})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_ordering})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=i}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=range}))) (expr*{args} (expr (Num (int{n}{val=0}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=total_form_count})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=form})))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=forms}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=i})))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=i}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=initial_form_count})))))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=has_changed})))))))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=can_delete}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_should_delete_form}))) (expr*{args} (expr (Name (str{id}{val=form}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_ordering}))) (str{attr}{val=append}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=i}))) (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=cleaned_data}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=ORDERING_FIELD_NAME})))))))))))))))
(root (FunctionDef (str{name}{val=compare_ordering_key}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=k})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=k}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Num (int{n}{val=1}))) (expr (Num (int{n}{val=0}))))))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Num (int{n}{val=0}))) (expr (Subscript (expr{value} (Name (str{id}{val=k}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_ordering}))) (str{attr}{val=sort}))) (keyword*{keywords} (keyword (str{arg}{val=key}) (expr{value} (Name (str{id}{val=compare_ordering_key})))))))))
(root (Return (expr{value} (ListComp (expr{elt} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=forms}))) (slice{slice} (Index (expr{value} (Subscript (expr{value} (Name (str{id}{val=i}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=i}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_ordering})))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=classmethod}))))))
(root (FunctionDef (str{name}{val=get_default_prefix}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=cls})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (FunctionDef (str{name}{val=non_form_errors}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_non_form_errors}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=full_clean})))))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_non_form_errors})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=errors}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_errors}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=full_clean})))))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_errors})))))
(root (FunctionDef (str{name}{val=total_error_count}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=non_form_errors})))))))) (operator{op} (Add)) (expr{right} (Call (expr{func} (Name (str{id}{val=sum}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=form_errors})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=form_errors}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=errors}))))))))))))))
(root (FunctionDef (str{name}{val=_should_delete_form}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=form})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=cleaned_data}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=DELETION_FIELD_NAME}))) (expr (Name (str{id}{val=False}))))))))
(root (FunctionDef (str{name}{val=is_valid}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=is_bound}))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=forms_valid})))) (expr{value} (Name (str{id}{val=True})))))
(root (Expr (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=errors})))))
(root (For (expr{target} (Name (str{id}{val=i}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=range}))) (expr*{args} (expr (Num (int{n}{val=0}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=total_form_count})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=form})))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=forms}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=i})))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=can_delete}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_should_delete_form}))) (expr*{args} (expr (Name (str{id}{val=form})))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (AugAssign (expr{target} (Name (str{id}{val=forms_valid}))) (operator{op} (BitAnd)) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=is_valid})))))))
(root (Return (expr{value} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=forms_valid}))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=non_form_errors}))))))))))))
(root (FunctionDef (str{name}{val=full_clean}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_errors})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_non_form_errors})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_class})))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=is_bound}))))) (stmt*{body} (stmt (Pass)))))
(root (Return (epsilon)))
(root (For (expr{target} (Name (str{id}{val=i}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=range}))) (expr*{args} (expr (Num (int{n}{val=0}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=total_form_count})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=form})))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=forms}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=i})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_errors}))) (str{attr}{val=append}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=errors}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=validate_max}))) (expr (Compare (expr{left} (BinOp (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=total_form_count}))))) (operator{op} (Sub)) (expr{right} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=deleted_forms})))))))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=max_num}))))))))) (expr (Compare (expr{left} (Subscript (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=management_form}))) (str{attr}{val=cleaned_data}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=TOTAL_FORM_COUNT}))))))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=absolute_max}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=ungettext}))) (expr*{args} (expr (Str (str{s}{val=Please submit %d or fewer forms.}))) (expr (Str (str{s}{val=Please submit %d or fewer forms.}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=max_num})))))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=max_num})))))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Str (str{s}{val=too_many_forms})))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=validate_min}))) (expr (Compare (expr{left} (BinOp (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=total_form_count}))))) (operator{op} (Sub)) (expr{right} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=deleted_forms})))))))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=min_num}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=ungettext}))) (expr*{args} (expr (Str (str{s}{val=Please submit %d or more forms.}))) (expr (Str (str{s}{val=Please submit %d or more forms.}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=min_num})))))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=min_num})))))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Str (str{s}{val=too_few_forms})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=clean})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ValidationError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_non_form_errors})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_class}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=error_list}))))))))
(root (FunctionDef (str{name}{val=clean}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (FunctionDef (str{name}{val=has_changed}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=any}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=has_changed}))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=form}))) (expr{iter} (Name (str{id}{val=self}))))))))))))
(root (FunctionDef (str{name}{val=add_fields}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=form}))) (expr (Name (str{id}{val=index})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=can_order}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=index}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Compare (expr{left} (Name (str{id}{val=index}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=initial_form_count}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=fields}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=ORDERING_FIELD_NAME})))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=IntegerField}))) (keyword*{keywords} (keyword (str{arg}{val=label}) (expr{value} (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=Order}))))))) (keyword (str{arg}{val=initial}) (expr{value} (BinOp (expr{left} (Name (str{id}{val=index}))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=1})))))) (keyword (str{arg}{val=required}) (expr{value} (Name (str{id}{val=False})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=fields}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=ORDERING_FIELD_NAME})))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=IntegerField}))) (keyword*{keywords} (keyword (str{arg}{val=label}) (expr{value} (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=Order}))))))) (keyword (str{arg}{val=required}) (expr{value} (Name (str{id}{val=False})))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=can_delete}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=fields}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=DELETION_FIELD_NAME})))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=BooleanField}))) (keyword*{keywords} (keyword (str{arg}{val=label}) (expr{value} (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=Delete}))))))) (keyword (str{arg}{val=required}) (expr{value} (Name (str{id}{val=False})))))))))
(root (FunctionDef (str{name}{val=add_prefix}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=index})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=prefix}))) (expr (Name (str{id}{val=index}))))))))))
(root (FunctionDef (str{name}{val=is_multipart}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=forms}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=forms}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (str{attr}{val=is_multipart})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=empty_form}))) (str{attr}{val=is_multipart})))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=media}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=forms}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=forms}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (str{attr}{val=media})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=empty_form}))) (str{attr}{val=media})))))
(root (FunctionDef (str{name}{val=as_table}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=forms})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val= }))) (str{attr}{val=join}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=as_table}))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=form}))) (expr{iter} (Name (str{id}{val=self}))))))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=mark_safe}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=\n}))) (str{attr}{val=join}))) (expr*{args} (expr (List (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=management_form})))))) (expr (Name (str{id}{val=forms}))))))))))))))
(root (FunctionDef (str{name}{val=as_p}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=forms})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val= }))) (str{attr}{val=join}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=as_p}))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=form}))) (expr{iter} (Name (str{id}{val=self}))))))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=mark_safe}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=\n}))) (str{attr}{val=join}))) (expr*{args} (expr (List (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=management_form})))))) (expr (Name (str{id}{val=forms}))))))))))))))
(root (FunctionDef (str{name}{val=as_ul}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=forms})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val= }))) (str{attr}{val=join}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=as_ul}))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=form}))) (expr{iter} (Name (str{id}{val=self}))))))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=mark_safe}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=\n}))) (str{attr}{val=join}))) (expr*{args} (expr (List (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=management_form})))))) (expr (Name (str{id}{val=forms}))))))))))))))
(root (FunctionDef (str{name}{val=formset_factory}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=form}))) (expr (Name (str{id}{val=formset}))) (expr (Name (str{id}{val=extra}))) (expr (Name (str{id}{val=can_order}))) (expr (Name (str{id}{val=can_delete}))) (expr (Name (str{id}{val=max_num}))) (expr (Name (str{id}{val=validate_max}))) (expr (Name (str{id}{val=min_num}))) (expr (Name (str{id}{val=validate_min})))) (expr*{defaults} (expr (Name (str{id}{val=BaseFormSet}))) (expr (Num (int{n}{val=1}))) (expr (Name (str{id}{val=False}))) (expr (Name (str{id}{val=False}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=False}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=min_num}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=min_num})))) (expr{value} (Name (str{id}{val=DEFAULT_MIN_NUM})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=max_num}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=max_num})))) (expr{value} (Name (str{id}{val=DEFAULT_MAX_NUM})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=absolute_max})))) (expr{value} (BinOp (expr{left} (Name (str{id}{val=max_num}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=DEFAULT_MAX_NUM})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=attrs})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=can_delete}))) (expr (Str (str{s}{val=min_num}))) (expr (Str (str{s}{val=max_num}))) (expr (Str (str{s}{val=absolute_max}))) (expr (Str (str{s}{val=validate_min}))) (expr (Str (str{s}{val=validate_max})))) (expr*{values} (expr (Name (str{id}{val=form}))) (expr (Name (str{id}{val=extra}))) (expr (Name (str{id}{val=can_order}))) (expr (Name (str{id}{val=can_delete}))) (expr (Name (str{id}{val=min_num}))) (expr (Name (str{id}{val=max_num}))) (expr (Name (str{id}{val=absolute_max}))) (expr (Name (str{id}{val=validate_min}))) (expr (Name (str{id}{val=validate_max}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=type}))) (expr*{args} (expr (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=__name__}))) (operator{op} (Add)) (expr{right} (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Str (str{s}{val=_STR:6_})))))))) (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=formset})))))) (expr (Name (str{id}{val=attrs}))))))))
(root (FunctionDef (str{name}{val=all_valid}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=formsets})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=valid})))) (expr{value} (Name (str{id}{val=True})))))
(root (For (expr{target} (Name (str{id}{val=formset}))) (expr{iter} (Name (str{id}{val=formsets}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=formset}))) (str{attr}{val=is_valid}))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=valid})))) (expr{value} (Name (str{id}{val=False})))))
(root (Return (expr{value} (Name (str{id}{val=valid})))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=collections}) (alias*{names} (alias (str{name}{val=OrderedDict}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=warnings})))))
(root (ImportFrom (str{module}{val=django.core.exceptions}) (alias*{names} (alias (str{name}{val=ImproperlyConfigured})) (alias (str{name}{val=ValidationError})) (alias (str{name}{val=NON_FIELD_ERRORS})) (alias (str{name}{val=FieldError}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.forms.fields}) (alias*{names} (alias (str{name}{val=Field})) (alias (str{name}{val=ChoiceField}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.forms.forms}) (alias*{names} (alias (str{name}{val=DeclarativeFieldsMetaclass})) (alias (str{name}{val=BaseForm}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.forms.formsets}) (alias*{names} (alias (str{name}{val=BaseFormSet})) (alias (str{name}{val=formset_factory}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.forms.utils}) (alias*{names} (alias (str{name}{val=ErrorList}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.forms.widgets}) (alias*{names} (alias (str{name}{val=SelectMultiple})) (alias (str{name}{val=HiddenInput})) (alias (str{name}{val=MultipleHiddenInput}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.deprecation}) (alias*{names} (alias (str{name}{val=RemovedInDjango19Warning}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=smart_text})) (alias (str{name}{val=force_text}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.text}) (alias*{names} (alias (str{name}{val=get_text_list})) (alias (str{name}{val=capfirst}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.translation}) (alias*{names} (alias (str{name}{val=ugettext_lazy}) (str{asname}{val=_})) (alias (str{name}{val=ugettext}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__all__})))) (expr{value} (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=_STR:3_}))) (expr (Str (str{s}{val=_STR:4_}))) (expr (Str (str{s}{val=ModelChoiceField}))) (expr (Str (str{s}{val=ModelMultipleChoiceField}))) (expr (Str (str{s}{val=ALL_FIELDS}))) (expr (Str (str{s}{val=BaseModelFormSet}))) (expr (Str (str{s}{val=modelformset_factory}))) (expr (Str (str{s}{val=BaseInlineFormSet}))) (expr (Str (str{s}{val=inlineformset_factory}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ALL_FIELDS})))) (expr{value} (Str (str{s}{val=_STR:7_})))))
(root (FunctionDef (str{name}{val=construct_instance}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=form}))) (expr (Name (str{id}{val=instance}))) (expr (Name (str{id}{val=fields}))) (expr (Name (str{id}{val=exclude})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=django.db}) (alias*{names} (alias (str{name}{val=models}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=opts})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=instance}))) (str{attr}{val=_meta})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cleaned_data})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=cleaned_data})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=file_field_list})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=f}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=opts}))) (str{attr}{val=fields}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=editable}))))) (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=f}))) (expr (Attribute (expr{value} (Name (str{id}{val=models}))) (str{attr}{val=AutoField})))))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=name}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=cleaned_data}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=fields}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=name}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=fields}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=exclude}))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=name}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=exclude}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=f}))) (expr (Attribute (expr{value} (Name (str{id}{val=models}))) (str{attr}{val=FileField})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=file_field_list}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=f}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=save_form_data}))) (expr*{args} (expr (Name (str{id}{val=instance}))) (expr (Subscript (expr{value} (Name (str{id}{val=cleaned_data}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=name}))))))))))))
(root (For (expr{target} (Name (str{id}{val=f}))) (expr{iter} (Name (str{id}{val=file_field_list}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=save_form_data}))) (expr*{args} (expr (Name (str{id}{val=instance}))) (expr (Subscript (expr{value} (Name (str{id}{val=cleaned_data}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=name}))))))))))))
(root (Return (expr{value} (Name (str{id}{val=instance})))))
(root (FunctionDef (str{name}{val=save_instance}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=form}))) (expr (Name (str{id}{val=instance}))) (expr (Name (str{id}{val=fields}))) (expr (Name (str{id}{val=fail_message}))) (expr (Name (str{id}{val=commit}))) (expr (Name (str{id}{val=exclude}))) (expr (Name (str{id}{val=construct})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=True}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=True})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=construct}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=instance})))) (expr{value} (Call (expr{func} (Name (str{id}{val=construct_instance}))) (expr*{args} (expr (Name (str{id}{val=form}))) (expr (Name (str{id}{val=instance}))) (expr (Name (str{id}{val=fields}))) (expr (Name (str{id}{val=exclude}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=opts})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=instance}))) (str{attr}{val=_meta})))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=errors}))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=The %s could not be %s because the data didn't validate.}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=opts}))) (str{attr}{val=object_name}))) (expr (Name (str{id}{val=fail_message})))))))))))))
(root (FunctionDef (str{name}{val=save_m2m}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cleaned_data})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=cleaned_data})))))
(root (For (expr{target} (Name (str{id}{val=f}))) (expr{iter} (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=opts}))) (str{attr}{val=many_to_many}))) (operator{op} (Add)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=opts}))) (str{attr}{val=virtual_fields}))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=f}))) (expr (Str (str{s}{val=_STR:0_})))))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=fields}))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=name}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=fields}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=exclude}))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=name}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=exclude}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=name}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=cleaned_data})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=save_form_data}))) (expr*{args} (expr (Name (str{id}{val=instance}))) (expr (Subscript (expr{value} (Name (str{id}{val=cleaned_data}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=name}))))))))))))
(root (If (expr{test} (Name (str{id}{val=commit}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=instance}))) (str{attr}{val=save})))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=save_m2m})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=save_m2m})))) (expr{value} (Name (str{id}{val=save_m2m})))))
(root (Return (expr{value} (Name (str{id}{val=instance})))))
(root (FunctionDef (str{name}{val=model_to_dict}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=instance}))) (expr (Name (str{id}{val=fields}))) (expr (Name (str{id}{val=exclude})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=django.db.models.fields.related}) (alias*{names} (alias (str{name}{val=ManyToManyField}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=opts})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=instance}))) (str{attr}{val=_meta})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=data})))) (expr{value} (Dict (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=f}))) (expr{iter} (BinOp (expr{left} (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=opts}))) (str{attr}{val=concrete_fields}))) (operator{op} (Add)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=opts}))) (str{attr}{val=virtual_fields}))))) (operator{op} (Add)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=opts}))) (str{attr}{val=many_to_many}))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=f}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=False})))))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=fields}))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=name}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=fields}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=exclude}))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=name}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=exclude}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=f}))) (expr (Name (str{id}{val=ManyToManyField})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=instance}))) (str{attr}{val=pk}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=data}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=name})))))))) (expr{value} (List (epsilon)))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=qs})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=value_from_object}))) (expr*{args} (expr (Name (str{id}{val=instance}))))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=qs}))) (str{attr}{val=_result_cache}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=data}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=name})))))))) (expr{value} (ListComp (expr{elt} (Attribute (expr{value} (Name (str{id}{val=item}))) (str{attr}{val=pk}))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=item}))) (expr{iter} (Name (str{id}{val=qs})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=data}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=name})))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=qs}))) (str{attr}{val=values_list}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=flat}) (expr{value} (Name (str{id}{val=True}))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=data}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=name})))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=value_from_object}))) (expr*{args} (expr (Name (str{id}{val=instance}))))))))
(root (Return (expr{value} (Name (str{id}{val=data})))))
(root (FunctionDef (str{name}{val=fields_for_model}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=model}))) (expr (Name (str{id}{val=fields}))) (expr (Name (str{id}{val=exclude}))) (expr (Name (str{id}{val=widgets}))) (expr (Name (str{id}{val=formfield_callback}))) (expr (Name (str{id}{val=localized_fields}))) (expr (Name (str{id}{val=labels}))) (expr (Name (str{id}{val=help_texts}))) (expr (Name (str{id}{val=error_messages})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=field_list})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ignored})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=opts})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=model}))) (str{attr}{val=_meta})))))
(root (ImportFrom (str{module}{val=django.db.models.fields}) (alias*{names} (alias (str{name}{val=Field}) (str{asname}{val=ModelField}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=sortable_virtual_fields})))) (expr{value} (ListComp (expr{elt} (Name (str{id}{val=f}))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=f}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=opts}))) (str{attr}{val=virtual_fields}))) (expr*{ifs} (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=f}))) (expr (Name (str{id}{val=ModelField})))))))))))))
(root (For (expr{target} (Name (str{id}{val=f}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=sorted}))) (expr*{args} (expr (BinOp (expr{left} (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=opts}))) (str{attr}{val=concrete_fields}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=sortable_virtual_fields}))))) (operator{op} (Add)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=opts}))) (str{attr}{val=many_to_many})))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=f}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=False})))))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=fields}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=name}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=fields}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=exclude}))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=name}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=exclude}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=kwargs})))) (expr{value} (Dict (epsilon)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=widgets}))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=name}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=widgets}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=kwargs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=widgets}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=name})))))))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=localized_fields}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=ALL_FIELDS})))))) (expr (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=localized_fields}))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=name}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=localized_fields})))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=kwargs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Name (str{id}{val=True})))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=labels}))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=name}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=labels}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=kwargs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=labels}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=name})))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=help_texts}))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=name}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=help_texts}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=kwargs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=help_texts}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=name})))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=error_messages}))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=name}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=error_messages}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=kwargs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=error_messages}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=name})))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=formfield_callback}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=formfield})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=formfield}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=callable}))) (expr*{args} (expr (Name (str{id}{val=formfield_callback})))))))) (stmt*{body} (stmt (Pass))))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TypeError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=formfield})))) (expr{value} (Call (expr{func} (Name (str{id}{val=formfield_callback}))) (expr*{args} (expr (Name (str{id}{val=f})))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (If (expr{test} (Name (str{id}{val=formfield}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=field_list}))) (str{attr}{val=append}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=name}))) (expr (Name (str{id}{val=formfield})))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=ignored}))) (str{attr}{val=append}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=name}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=field_dict})))) (expr{value} (Call (expr{func} (Name (str{id}{val=OrderedDict}))) (expr*{args} (expr (Name (str{id}{val=field_list}))))))))
(root (If (expr{test} (Name (str{id}{val=fields}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=field_dict})))) (expr{value} (Call (expr{func} (Name (str{id}{val=OrderedDict}))) (expr*{args} (expr (ListComp (expr{elt} (Tuple (expr*{elts} (expr (Name (str{id}{val=f}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=field_dict}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=f}))))))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=f}))) (expr{iter} (Name (str{id}{val=fields}))) (expr*{ifs} (expr (BoolOp (boolop{op} (And)) (expr*{values} (expr (BoolOp (boolop{op} (Or)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=exclude}))))) (expr (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=exclude}))) (expr (Compare (expr{left} (Name (str{id}{val=f}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=exclude})))))))))))) (expr (Compare (expr{left} (Name (str{id}{val=f}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=ignored})))))))))))))))))))
(root (Return (expr{value} (Name (str{id}{val=field_dict})))))
(root (ClassDef (str{name}{val=ModelFormOptions}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=options})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=model})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=options}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fields})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=options}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=exclude})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=options}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=widgets})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=options}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=localized_fields})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=options}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=labels})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=options}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=help_texts})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=options}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_messages})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=options}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))))))))
(root (ClassDef (str{name}{val=ModelFormMetaclass}) (expr*{bases} (expr (Name (str{id}{val=DeclarativeFieldsMetaclass})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__new__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=mcs}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=bases}))) (expr (Name (str{id}{val=attrs})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=formfield_callback})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=attrs}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=new_class})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=ModelFormMetaclass}))) (expr (Name (str{id}{val=mcs})))))) (str{attr}{val=__new__}))) (expr*{args} (expr (Name (str{id}{val=mcs}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=bases}))) (expr (Name (str{id}{val=attrs}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=bases}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=BaseModelForm}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=new_class})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=opts}))) (expr (Attribute (expr{value} (Name (str{id}{val=new_class}))) (str{attr}{val=_meta})))) (expr{value} (Call (expr{func} (Name (str{id}{val=ModelFormOptions}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=new_class}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None})))))))))))
(root (For (expr{target} (Name (str{id}{val=opt}))) (expr{iter} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=opts}))) (expr (Name (str{id}{val=opt}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=string_types})))))) (expr (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Name (str{id}{val=ALL_FIELDS}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=msg})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=%(model)s.Meta.%(opt)s cannot be a string. Did you mean to type: ('%(value)s',)?}))) (operator{op} (Mod)) (expr{right} (Dict (expr*{keys} (expr (Str (str{s}{val=model}))) (expr (Str (str{s}{val=opt}))) (expr (Str (str{s}{val=value})))) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=new_class}))) (str{attr}{val=__name__}))) (expr (Name (str{id}{val=opt}))) (expr (Name (str{id}{val=value}))))))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TypeError}))) (expr*{args} (expr (Name (str{id}{val=msg}))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=opts}))) (str{attr}{val=model}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=opts}))) (str{attr}{val=fields}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=opts}))) (str{attr}{val=exclude}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ImproperlyConfigured}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=Creating a ModelForm without either the '_STR:0_' attribute or the 'exclude' attribute is prohibited; form %s needs updating.}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=name}))))))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=opts}))) (str{attr}{val=fields}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=ALL_FIELDS})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=opts}))) (str{attr}{val=fields})))) (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=fields})))) (expr{value} (Call (expr{func} (Name (str{id}{val=fields_for_model}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=opts}))) (str{attr}{val=model}))) (expr (Attribute (expr{value} (Name (str{id}{val=opts}))) (str{attr}{val=fields}))) (expr (Attribute (expr{value} (Name (str{id}{val=opts}))) (str{attr}{val=exclude}))) (expr (Attribute (expr{value} (Name (str{id}{val=opts}))) (str{attr}{val=widgets}))) (expr (Name (str{id}{val=formfield_callback}))) (expr (Attribute (expr{value} (Name (str{id}{val=opts}))) (str{attr}{val=localized_fields}))) (expr (Attribute (expr{value} (Name (str{id}{val=opts}))) (str{attr}{val=labels}))) (expr (Attribute (expr{value} (Name (str{id}{val=opts}))) (str{attr}{val=help_texts}))) (expr (Attribute (expr{value} (Name (str{id}{val=opts}))) (str{attr}{val=error_messages}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=none_model_fields})))) (expr{value} (ListComp (expr{elt} (Name (str{id}{val=k}))) (comprehension*{generators} (comprehension (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Name (str{id}{val=v})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=iteritems}))) (expr*{args} (expr (Name (str{id}{val=fields})))))) (expr*{ifs} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=v}))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=missing_fields})))) (expr{value} (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=set}))) (expr*{args} (expr (Name (str{id}{val=none_model_fields})))))) (operator{op} (Sub)) (expr{right} (Call (expr{func} (Name (str{id}{val=set}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=new_class}))) (str{attr}{val=declared_fields}))) (str{attr}{val=keys}))))))))))))
(root (If (expr{test} (Name (str{id}{val=missing_fields}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=message})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=message})))) (expr{value} (BinOp (expr{left} (Name (str{id}{val=message}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=_STR:0_}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=missing_fields})))))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=opts}))) (str{attr}{val=model}))) (str{attr}{val=__name__}))))))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=FieldError}))) (expr*{args} (expr (Name (str{id}{val=message}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=fields}))) (str{attr}{val=update}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=new_class}))) (str{attr}{val=declared_fields}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=fields})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=new_class}))) (str{attr}{val=declared_fields})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=new_class}))) (str{attr}{val=base_fields})))) (expr{value} (Name (str{id}{val=fields})))))
(root (Return (expr{value} (Name (str{id}{val=new_class})))))
(root (ClassDef (str{name}{val=BaseModelForm}) (expr*{bases} (expr (Name (str{id}{val=BaseForm})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=data}))) (expr (Name (str{id}{val=files}))) (expr (Name (str{id}{val=auto_id}))) (expr (Name (str{id}{val=prefix}))) (expr (Name (str{id}{val=initial}))) (expr (Name (str{id}{val=error_class}))) (expr (Name (str{id}{val=label_suffix}))) (expr (Name (str{id}{val=empty_permitted}))) (expr (Name (str{id}{val=instance})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=ErrorList}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=False}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=opts})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_meta})))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=opts}))) (str{attr}{val=model}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=instance}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=instance})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=opts}))) (str{attr}{val=model})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=object_data})))) (expr{value} (Dict (epsilon)))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=instance})))) (expr{value} (Name (str{id}{val=instance})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=object_data})))) (expr{value} (Call (expr{func} (Name (str{id}{val=model_to_dict}))) (expr*{args} (expr (Name (str{id}{val=instance}))) (expr (Attribute (expr{value} (Name (str{id}{val=opts}))) (str{attr}{val=fields}))) (expr (Attribute (expr{value} (Name (str{id}{val=opts}))) (str{attr}{val=exclude}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=initial}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=object_data}))) (str{attr}{val=update}))) (expr*{args} (expr (Name (str{id}{val=initial}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_validate_unique})))) (expr{value} (Name (str{id}{val=False})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=BaseModelForm}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=data}))) (expr (Name (str{id}{val=files}))) (expr (Name (str{id}{val=auto_id}))) (expr (Name (str{id}{val=prefix}))) (expr (Name (str{id}{val=object_data}))) (expr (Name (str{id}{val=error_class}))) (expr (Name (str{id}{val=label_suffix}))) (expr (Name (str{id}{val=empty_permitted}))))))))
(root (For (expr{target} (Name (str{id}{val=field_name}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fields}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=formfield})))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fields}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=field_name})))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=formfield}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=limit_choices_to})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=formfield}))) (str{attr}{val=limit_choices_to})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=limit_choices_to}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=callable}))) (expr*{args} (expr (Name (str{id}{val=limit_choices_to})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=limit_choices_to})))) (expr{value} (Call (expr{func} (Name (str{id}{val=limit_choices_to})))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=formfield}))) (str{attr}{val=queryset})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=formfield}))) (str{attr}{val=queryset}))) (str{attr}{val=complex_filter}))) (expr*{args} (expr (Name (str{id}{val=limit_choices_to}))))))))
(root (FunctionDef (str{name}{val=_get_validation_exclusions}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=exclude})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=f}))) (expr{iter} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=instance}))) (str{attr}{val=_meta}))) (str{attr}{val=fields}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=field})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=name})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=field}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fields})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=exclude}))) (str{attr}{val=append}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=name}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_meta}))) (str{attr}{val=fields}))) (expr (Compare (expr{left} (Name (str{id}{val=field}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_meta}))) (str{attr}{val=fields}))))))))) (stmt*{body} (stmt (Pass))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=exclude}))) (str{attr}{val=append}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=name}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_meta}))) (str{attr}{val=exclude}))) (expr (Compare (expr{left} (Name (str{id}{val=field}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_meta}))) (str{attr}{val=exclude}))))))))) (stmt*{body} (stmt (Pass))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=exclude}))) (str{attr}{val=append}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=name}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Name (str{id}{val=field}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_errors}))) (str{attr}{val=keys})))))))) (stmt*{body} (stmt (Pass))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=exclude}))) (str{attr}{val=append}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=name}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=form_field})))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fields}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=field})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=field_value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=cleaned_data}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=field}))) (expr (Name (str{id}{val=None}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=blank}))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=form_field}))) (str{attr}{val=required}))))) (expr (Compare (expr{left} (Name (str{id}{val=field_value}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=form_field}))) (str{attr}{val=empty_values}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=exclude}))) (str{attr}{val=append}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=name}))))))))
(root (Return (expr{value} (Name (str{id}{val=exclude})))))
(root (FunctionDef (str{name}{val=clean}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_validate_unique})))) (expr{value} (Name (str{id}{val=True})))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=cleaned_data})))))
(root (FunctionDef (str{name}{val=_update_errors}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=errors})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=opts})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_meta})))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=field}))) (expr (Name (str{id}{val=messages})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=errors}))) (str{attr}{val=error_dict}))) (str{attr}{val=items}))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=field}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=NON_FIELD_ERRORS})))))) (expr (Attribute (expr{value} (Name (str{id}{val=opts}))) (str{attr}{val=error_messages}))) (expr (Compare (expr{left} (Name (str{id}{val=NON_FIELD_ERRORS}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=opts}))) (str{attr}{val=error_messages}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=error_messages})))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=opts}))) (str{attr}{val=error_messages}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=NON_FIELD_ERRORS})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Name (str{id}{val=field}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fields})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=error_messages})))) (expr{value} (Attribute (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fields}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=field}))))))) (str{attr}{val=error_messages})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Continue))
(root (For (expr{target} (Name (str{id}{val=message}))) (expr{iter} (Name (str{id}{val=messages}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=message}))) (expr (Name (str{id}{val=ValidationError})))))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=message}))) (str{attr}{val=code}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=error_messages}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=message}))) (str{attr}{val=message})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=error_messages}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Name (str{id}{val=message}))) (str{attr}{val=code})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=add_error}))) (expr*{args} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=errors}))))))))
(root (FunctionDef (str{name}{val=_post_clean}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=opts})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_meta})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=exclude})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_get_validation_exclusions})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=construct_instance_exclude})))) (expr{value} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Name (str{id}{val=exclude}))))))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=field})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fields}))) (str{attr}{val=items}))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=field}))) (expr (Name (str{id}{val=InlineForeignKeyField})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=cleaned_data}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=name})))))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Attribute (expr{value} (Attribute (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=cleaned_data}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=name}))))))) (str{attr}{val=_state}))) (str{attr}{val=adding})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=construct_instance_exclude}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=name}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=exclude}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=name}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=instance})))) (expr{value} (Call (expr{func} (Name (str{id}{val=construct_instance}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=instance}))) (expr (Attribute (expr{value} (Name (str{id}{val=opts}))) (str{attr}{val=fields}))) (expr (Name (str{id}{val=construct_instance_exclude}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=instance}))) (str{attr}{val=full_clean}))) (keyword*{keywords} (keyword (str{arg}{val=exclude}) (expr{value} (Name (str{id}{val=exclude})))) (keyword (str{arg}{val=validate_unique}) (expr{value} (Name (str{id}{val=False})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ValidationError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_update_errors}))) (expr*{args} (expr (Name (str{id}{val=e}))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_validate_unique}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=validate_unique})))))))
(root (FunctionDef (str{name}{val=validate_unique}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=exclude})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_get_validation_exclusions})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=instance}))) (str{attr}{val=validate_unique}))) (keyword*{keywords} (keyword (str{arg}{val=exclude}) (expr{value} (Name (str{id}{val=exclude})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ValidationError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_update_errors}))) (expr*{args} (expr (Name (str{id}{val=e}))))))))
(root (FunctionDef (str{name}{val=save}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=commit})))) (expr*{defaults} (expr (Name (str{id}{val=True})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=instance}))) (str{attr}{val=pk}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=fail_message})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=fail_message})))) (expr{value} (Str (str{s}{val=changed})))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=save_instance}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=instance}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_meta}))) (str{attr}{val=fields}))) (expr (Name (str{id}{val=fail_message}))) (expr (Name (str{id}{val=commit}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_meta}))) (str{attr}{val=exclude})))) (keyword*{keywords} (keyword (str{arg}{val=construct}) (expr{value} (Name (str{id}{val=False})))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=save}))) (str{attr}{val=alters_data})))) (expr{value} (Name (str{id}{val=True})))))
(root (ClassDef (str{name}{val=ModelForm}) (expr*{bases} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=with_metaclass}))) (expr*{args} (expr (Name (str{id}{val=ModelFormMetaclass}))) (expr (Name (str{id}{val=BaseModelForm}))))))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (FunctionDef (str{name}{val=modelform_factory}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=model}))) (expr (Name (str{id}{val=form}))) (expr (Name (str{id}{val=fields}))) (expr (Name (str{id}{val=exclude}))) (expr (Name (str{id}{val=formfield_callback}))) (expr (Name (str{id}{val=widgets}))) (expr (Name (str{id}{val=localized_fields}))) (expr (Name (str{id}{val=labels}))) (expr (Name (str{id}{val=help_texts}))) (expr (Name (str{id}{val=error_messages})))) (expr*{defaults} (expr (Name (str{id}{val=ModelForm}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=attrs})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:0_})))) (expr*{values} (expr (Name (str{id}{val=model}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=fields}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=attrs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Name (str{id}{val=fields})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=exclude}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=attrs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Name (str{id}{val=exclude})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=widgets}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=attrs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Name (str{id}{val=widgets})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=localized_fields}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=attrs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Name (str{id}{val=localized_fields})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=labels}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=attrs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Name (str{id}{val=labels})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=help_texts}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=attrs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Name (str{id}{val=help_texts})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=error_messages}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=attrs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Name (str{id}{val=error_messages})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=parent})))) (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=object}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=form}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=parent})))) (expr{value} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=Meta}))) (expr (Name (str{id}{val=object}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=Meta})))) (expr{value} (Call (expr{func} (Name (str{id}{val=type}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (expr (Name (str{id}{val=parent}))) (expr (Name (str{id}{val=attrs}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=class_name})))) (expr{value} (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=model}))) (str{attr}{val=__name__}))) (operator{op} (Add)) (expr{right} (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=form_class_attrs})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_})))) (expr*{values} (expr (Name (str{id}{val=Meta}))) (expr (Name (str{id}{val=formfield_callback}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=Meta}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None})))))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=Meta}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Name (str{id}{val=None})))))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ImproperlyConfigured}))) (expr*{args} (expr (Str (str{s}{val=Calling modelform_factory without defining 'fields' or 'exclude' explicitly is prohibited.}))))))))
(root (Return (expr{value} (Call (expr{func} (Call (expr{func} (Name (str{id}{val=type}))) (expr*{args} (expr (Name (str{id}{val=form})))))) (expr*{args} (expr (Name (str{id}{val=class_name}))) (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=form})))))) (expr (Name (str{id}{val=form_class_attrs}))))))))
(root (ClassDef (str{name}{val=BaseModelFormSet}) (expr*{bases} (expr (Name (str{id}{val=BaseFormSet})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=model})))) (expr{value} (Name (str{id}{val=None})))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=data}))) (expr (Name (str{id}{val=files}))) (expr (Name (str{id}{val=auto_id}))) (expr (Name (str{id}{val=prefix}))) (expr (Name (str{id}{val=queryset})))) (str{kwarg}{val=kwargs}) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=queryset})))) (expr{value} (Name (str{id}{val=queryset})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=initial_extra})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=kwargs}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=defaults})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=_STR:3_})))) (expr*{values} (expr (Name (str{id}{val=data}))) (expr (Name (str{id}{val=files}))) (expr (Name (str{id}{val=auto_id}))) (expr (Name (str{id}{val=prefix}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=defaults}))) (str{attr}{val=update}))) (expr*{args} (expr (Name (str{id}{val=kwargs}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=BaseModelFormSet}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr{kwargs} (Name (str{id}{val=defaults})))))))
(root (FunctionDef (str{name}{val=initial_form_count}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=files})))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get_queryset}))))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=BaseModelFormSet}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=initial_form_count})))))))
(root (FunctionDef (str{name}{val=_existing_object}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=pk})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Str (str{s}{val=_STR:0_})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_object_dict})))) (expr{value} (Call (expr{func} (Name (str{id}{val=dict}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=o}))) (str{attr}{val=pk}))) (expr (Name (str{id}{val=o})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=o}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get_queryset}))))))))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_object_dict}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=pk}))))))))
(root (FunctionDef (str{name}{val=_get_to_python}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=field})))))) (stmt*{body} (stmt (Pass)))))
(root (While (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=field})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=rel}))) (str{attr}{val=get_related_field})))))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=to_python})))))
(root (FunctionDef (str{name}{val=_construct_form}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=i})))) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=is_bound}))) (expr (Compare (expr{left} (Name (str{id}{val=i}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=initial_form_count}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=pk_key})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=add_prefix}))) (expr*{args} (expr (Name (str{id}{val=i})))))) (expr (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=model}))) (str{attr}{val=_meta}))) (str{attr}{val=pk}))) (str{attr}{val=name}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=pk})))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=pk_key})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=pk_field})))) (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=model}))) (str{attr}{val=_meta}))) (str{attr}{val=pk})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=to_python})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_get_to_python}))) (expr*{args} (expr (Name (str{id}{val=pk_field}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=pk})))) (expr{value} (Call (expr{func} (Name (str{id}{val=to_python}))) (expr*{args} (expr (Name (str{id}{val=pk}))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=kwargs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_existing_object}))) (expr*{args} (expr (Name (str{id}{val=pk}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=i}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=initial_form_count})))))))) (expr (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=kwargs}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=kwargs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get_queryset}))))) (slice{slice} (Index (expr{value} (Name (str{id}{val=i})))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=i}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=initial_form_count})))))))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=initial_extra})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=kwargs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=initial})))))))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=initial_extra}))) (slice{slice} (Index (expr{value} (BinOp (expr{left} (Name (str{id}{val=i}))) (operator{op} (Sub)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=initial_form_count})))))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=IndexError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=BaseModelFormSet}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=_construct_form}))) (expr*{args} (expr (Name (str{id}{val=i})))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (FunctionDef (str{name}{val=get_queryset}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Str (str{s}{val=_STR:0_})))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=queryset}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=qs})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=queryset})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=qs})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=model}))) (str{attr}{val=_default_manager}))) (str{attr}{val=get_queryset})))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=qs}))) (str{attr}{val=ordered}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=qs})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=qs}))) (str{attr}{val=order_by}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=model}))) (str{attr}{val=_meta}))) (str{attr}{val=pk}))) (str{attr}{val=name}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_queryset})))) (expr{value} (Name (str{id}{val=qs})))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_queryset})))))
(root (FunctionDef (str{name}{val=save_new}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=form}))) (expr (Name (str{id}{val=commit})))) (expr*{defaults} (expr (Name (str{id}{val=True})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=save}))) (keyword*{keywords} (keyword (str{arg}{val=commit}) (expr{value} (Name (str{id}{val=commit})))))))))
(root (FunctionDef (str{name}{val=save_existing}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=form}))) (expr (Name (str{id}{val=instance}))) (expr (Name (str{id}{val=commit})))) (expr*{defaults} (expr (Name (str{id}{val=True})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=save}))) (keyword*{keywords} (keyword (str{arg}{val=commit}) (expr{value} (Name (str{id}{val=commit})))))))))
(root (FunctionDef (str{name}{val=save}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=commit})))) (expr*{defaults} (expr (Name (str{id}{val=True})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=commit}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=saved_forms})))) (expr{value} (List (epsilon)))))
(root (FunctionDef (str{name}{val=save_m2m}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=form}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=saved_forms}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=save_m2m})))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=save_m2m})))) (expr{value} (Name (str{id}{val=save_m2m})))))
(root (Return (expr{value} (BinOp (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=save_existing_objects}))) (expr*{args} (expr (Name (str{id}{val=commit})))))) (operator{op} (Add)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=save_new_objects}))) (expr*{args} (expr (Name (str{id}{val=commit}))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=save}))) (str{attr}{val=alters_data})))) (expr{value} (Name (str{id}{val=True})))))
(root (FunctionDef (str{name}{val=clean}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=validate_unique})))))))
(root (FunctionDef (str{name}{val=validate_unique}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=all_unique_checks})))) (expr{value} (Call (expr{func} (Name (str{id}{val=set})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=all_date_checks})))) (expr{value} (Call (expr{func} (Name (str{id}{val=set})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=forms_to_delete})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=deleted_forms})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=valid_forms})))) (expr{value} (ListComp (expr{elt} (Name (str{id}{val=form}))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=form}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=forms}))) (expr*{ifs} (expr (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=is_valid}))))) (expr (Compare (expr{left} (Name (str{id}{val=form}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=forms_to_delete}))))))))))))))))
(root (For (expr{target} (Name (str{id}{val=form}))) (expr{iter} (Name (str{id}{val=valid_forms}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=exclude})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=_get_validation_exclusions})))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=unique_checks}))) (expr (Name (str{id}{val=date_checks}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=instance}))) (str{attr}{val=_get_unique_checks}))) (keyword*{keywords} (keyword (str{arg}{val=exclude}) (expr{value} (Name (str{id}{val=exclude})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=all_unique_checks})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=all_unique_checks}))) (str{attr}{val=union}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=set}))) (expr*{args} (expr (Name (str{id}{val=unique_checks})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=all_date_checks})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=all_date_checks}))) (str{attr}{val=union}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=set}))) (expr*{args} (expr (Name (str{id}{val=date_checks})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=errors})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=uclass}))) (expr (Name (str{id}{val=unique_check})))))) (expr{iter} (Name (str{id}{val=all_unique_checks}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=seen_data})))) (expr{value} (Call (expr{func} (Name (str{id}{val=set})))))))
(root (For (expr{target} (Name (str{id}{val=form}))) (expr{iter} (Name (str{id}{val=valid_forms}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=row_data})))) (expr{value} (GeneratorExp (expr{elt} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=cleaned_data}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=field}))))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=field}))) (expr{iter} (Name (str{id}{val=unique_check}))) (expr*{ifs} (expr (Compare (expr{left} (Name (str{id}{val=field}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=cleaned_data})))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=row_data})))) (expr{value} (Call (expr{func} (Name (str{id}{val=tuple}))) (expr*{args} (expr (GeneratorExp (expr{elt} (IfExp (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=d}))) (expr (Str (str{s}{val=_STR:0_})))))) (expr{body} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=d}))) (str{attr}{val=_get_pk_val}))))) (expr{orelse} (Name (str{id}{val=d}))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=d}))) (expr{iter} (Name (str{id}{val=row_data}))))))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=row_data}))) (expr (Compare (expr{left} (Name (str{id}{val=None}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=row_data}))))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=row_data}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=seen_data})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=errors}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get_unique_error_message}))) (expr*{args} (expr (Name (str{id}{val=unique_check})))))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=_errors}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=NON_FIELD_ERRORS})))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_class}))) (expr*{args} (expr (List (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get_form_error})))))))))))))
(root (For (expr{target} (Name (str{id}{val=field}))) (expr{iter} (Name (str{id}{val=unique_check}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=field}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=cleaned_data})))))) (stmt*{body} (stmt (Pass)))))
(root (Delete (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=cleaned_data}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=field}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=seen_data}))) (str{attr}{val=add}))) (expr*{args} (expr (Name (str{id}{val=row_data}))))))))
(root (For (expr{target} (Name (str{id}{val=date_check}))) (expr{iter} (Name (str{id}{val=all_date_checks}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=seen_data})))) (expr{value} (Call (expr{func} (Name (str{id}{val=set})))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=uclass}))) (expr (Name (str{id}{val=lookup}))) (expr (Name (str{id}{val=field}))) (expr (Name (str{id}{val=unique_for}))))))) (expr{value} (Name (str{id}{val=date_check})))))
(root (For (expr{target} (Name (str{id}{val=form}))) (expr{iter} (Name (str{id}{val=valid_forms}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=cleaned_data}))) (expr (Compare (expr{left} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=cleaned_data}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=field}))))))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Compare (expr{left} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=cleaned_data}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=unique_for}))))))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None}))))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=lookup}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=date})))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=cleaned_data}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=unique_for})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=date_data})))) (expr{value} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=date}))) (str{attr}{val=year}))) (expr (Attribute (expr{value} (Name (str{id}{val=date}))) (str{attr}{val=month}))) (expr (Attribute (expr{value} (Name (str{id}{val=date}))) (str{attr}{val=day}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=date_data})))) (expr{value} (Tuple (expr*{elts} (expr (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=cleaned_data}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=unique_for}))))))) (expr (Name (str{id}{val=lookup})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=data})))) (expr{value} (BinOp (expr{left} (Tuple (expr*{elts} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=cleaned_data}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=field})))))))))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=date_data})))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=data}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=seen_data})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=errors}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get_date_error_message}))) (expr*{args} (expr (Name (str{id}{val=date_check})))))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=_errors}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=NON_FIELD_ERRORS})))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_class}))) (expr*{args} (expr (List (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get_form_error})))))))))))))
(root (Delete (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=cleaned_data}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=field}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=seen_data}))) (str{attr}{val=add}))) (expr*{args} (expr (Name (str{id}{val=data}))))))))
(root (If (expr{test} (Name (str{id}{val=errors}))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Name (str{id}{val=errors}))))))))
(root (FunctionDef (str{name}{val=get_unique_error_message}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=unique_check})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=unique_check})))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=ugettext}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (operator{op} (Mod)) (expr{right} (Dict (expr*{keys} (expr (Str (str{s}{val=field})))) (expr*{values} (expr (Subscript (expr{value} (Name (str{id}{val=unique_check}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=ugettext}))) (expr*{args} (expr (Str (str{s}{val=Please correct the duplicate data for %(field)s, which must be unique.})))))) (operator{op} (Mod)) (expr{right} (Dict (expr*{keys} (expr (Str (str{s}{val=field})))) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=get_text_list}))) (expr*{args} (expr (Name (str{id}{val=unique_check}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=and})))))))))))))))))))
(root (FunctionDef (str{name}{val=get_date_error_message}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=date_check})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=ugettext}))) (expr*{args} (expr (Str (str{s}{val=Please correct the duplicate data for %(field_name)s which must be unique for the %(lookup)s in %(date_field)s.})))))) (operator{op} (Mod)) (expr{right} (Dict (expr*{keys} (expr (Str (str{s}{val=field_name}))) (expr (Str (str{s}{val=date_field}))) (expr (Str (str{s}{val=lookup})))) (expr*{values} (expr (Subscript (expr{value} (Name (str{id}{val=date_check}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=2}))))))) (expr (Subscript (expr{value} (Name (str{id}{val=date_check}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=3}))))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=date_check}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1})))))))))))))))))
(root (FunctionDef (str{name}{val=get_form_error}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=ugettext}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=save_existing_objects}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=commit})))) (expr*{defaults} (expr (Name (str{id}{val=True})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=changed_objects})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=deleted_objects})))) (expr{value} (List (epsilon)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=initial_forms}))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=saved_instances})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=forms_to_delete})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=deleted_forms})))))
(root (For (expr{target} (Name (str{id}{val=form}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=initial_forms}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=obj})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=instance})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=form}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=forms_to_delete})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=obj}))) (str{attr}{val=pk}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=deleted_objects}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=obj}))))))))
(root (If (expr{test} (Name (str{id}{val=commit}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=obj}))) (str{attr}{val=delete})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=has_changed}))))) (stmt*{body} (stmt (Pass))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=changed_objects}))) (str{attr}{val=append}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=obj}))) (expr (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=changed_data})))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=saved_instances}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=save_existing}))) (expr*{args} (expr (Name (str{id}{val=form}))) (expr (Name (str{id}{val=obj})))) (keyword*{keywords} (keyword (str{arg}{val=commit}) (expr{value} (Name (str{id}{val=commit}))))))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=commit}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=saved_forms}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=form}))))))))
(root (Return (expr{value} (Name (str{id}{val=saved_instances})))))
(root (FunctionDef (str{name}{val=save_new_objects}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=commit})))) (expr*{defaults} (expr (Name (str{id}{val=True})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=new_objects})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=form}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=extra_forms}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=has_changed}))))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=can_delete}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_should_delete_form}))) (expr*{args} (expr (Name (str{id}{val=form}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=new_objects}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=save_new}))) (expr*{args} (expr (Name (str{id}{val=form})))) (keyword*{keywords} (keyword (str{arg}{val=commit}) (expr{value} (Name (str{id}{val=commit}))))))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=commit}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=saved_forms}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=form}))))))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=new_objects})))))
(root (FunctionDef (str{name}{val=add_fields}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=form}))) (expr (Name (str{id}{val=index})))))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=django.db.models}) (alias*{names} (alias (str{name}{val=AutoField})) (alias (str{name}{val=OneToOneField})) (alias (str{name}{val=ForeignKey}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_pk_field}))) (expr (Name (str{id}{val=pk})))) (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=model}))) (str{attr}{val=_meta}))) (str{attr}{val=pk})))))
(root (FunctionDef (str{name}{val=pk_is_not_editable}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=pk})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=pk}))) (str{attr}{val=editable}))))) (expr (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=pk}))) (str{attr}{val=auto_created}))) (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=pk}))) (expr (Name (str{id}{val=AutoField}))))))))) (expr (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=pk}))) (str{attr}{val=rel}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=pk}))) (str{attr}{val=rel}))) (str{attr}{val=parent_link}))) (expr (Call (expr{func} (Name (str{id}{val=pk_is_not_editable}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=pk}))) (str{attr}{val=rel}))) (str{attr}{val=to}))) (str{attr}{val=_meta}))) (str{attr}{val=pk}))))))))))))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=pk_is_not_editable}))) (expr*{args} (expr (Name (str{id}{val=pk})))))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=pk}))) (str{attr}{val=name}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=fields}))))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=is_bound}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=pk_value})))) (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=instance}))) (str{attr}{val=pk})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=index}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=pk_value})))) (expr{value} (Attribute (expr{value} (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get_queryset}))))) (slice{slice} (Index (expr{value} (Name (str{id}{val=index}))))))) (str{attr}{val=pk})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=pk_value})))) (expr{value} (Name (str{id}{val=None})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=IndexError}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=pk_value})))) (expr{value} (Name (str{id}{val=None})))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=pk}))) (expr (Name (str{id}{val=OneToOneField})))))) (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=pk}))) (expr (Name (str{id}{val=ForeignKey}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=qs})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=pk}))) (str{attr}{val=rel}))) (str{attr}{val=to}))) (str{attr}{val=_default_manager}))) (str{attr}{val=get_queryset})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=qs})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=model}))) (str{attr}{val=_default_manager}))) (str{attr}{val=get_queryset})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=qs})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=qs}))) (str{attr}{val=using}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=instance}))) (str{attr}{val=_state}))) (str{attr}{val=db}))))))))
(root (If (expr{test} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=_meta}))) (str{attr}{val=widgets}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=widget})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=_meta}))) (str{attr}{val=widgets}))) (str{attr}{val=get}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_pk_field}))) (str{attr}{val=name}))) (expr (Name (str{id}{val=HiddenInput}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=widget})))) (expr{value} (Name (str{id}{val=HiddenInput})))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=fields}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_pk_field}))) (str{attr}{val=name})))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=ModelChoiceField}))) (expr*{args} (expr (Name (str{id}{val=qs})))) (keyword*{keywords} (keyword (str{arg}{val=initial}) (expr{value} (Name (str{id}{val=pk_value})))) (keyword (str{arg}{val=required}) (expr{value} (Name (str{id}{val=False})))) (keyword (str{arg}{val=widget}) (expr{value} (Name (str{id}{val=widget})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=BaseModelFormSet}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=add_fields}))) (expr*{args} (expr (Name (str{id}{val=form}))) (expr (Name (str{id}{val=index}))))))))
(root (FunctionDef (str{name}{val=modelformset_factory}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=model}))) (expr (Name (str{id}{val=form}))) (expr (Name (str{id}{val=formfield_callback}))) (expr (Name (str{id}{val=formset}))) (expr (Name (str{id}{val=extra}))) (expr (Name (str{id}{val=can_delete}))) (expr (Name (str{id}{val=can_order}))) (expr (Name (str{id}{val=max_num}))) (expr (Name (str{id}{val=fields}))) (expr (Name (str{id}{val=exclude}))) (expr (Name (str{id}{val=widgets}))) (expr (Name (str{id}{val=validate_max}))) (expr (Name (str{id}{val=localized_fields}))) (expr (Name (str{id}{val=labels}))) (expr (Name (str{id}{val=help_texts}))) (expr (Name (str{id}{val=error_messages}))) (expr (Name (str{id}{val=min_num}))) (expr (Name (str{id}{val=validate_min})))) (expr*{defaults} (expr (Name (str{id}{val=ModelForm}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=BaseModelFormSet}))) (expr (Num (int{n}{val=1}))) (expr (Name (str{id}{val=False}))) (expr (Name (str{id}{val=False}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=False}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=meta})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=form}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=meta}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=meta})))) (expr{value} (Call (expr{func} (Name (str{id}{val=type}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=object})))))) (expr (Dict (epsilon))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=meta}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=fields})))))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=meta}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Name (str{id}{val=exclude})))))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ImproperlyConfigured}))) (expr*{args} (expr (Str (str{s}{val=Calling modelformset_factory without defining '_STR:0_' or '_STR:1_' explicitly is prohibited.}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=form})))) (expr{value} (Call (expr{func} (Name (str{id}{val=modelform_factory}))) (expr*{args} (expr (Name (str{id}{val=model})))) (keyword*{keywords} (keyword (str{arg}{val=form}) (expr{value} (Name (str{id}{val=form})))) (keyword (str{arg}{val=fields}) (expr{value} (Name (str{id}{val=fields})))) (keyword (str{arg}{val=exclude}) (expr{value} (Name (str{id}{val=exclude})))) (keyword (str{arg}{val=formfield_callback}) (expr{value} (Name (str{id}{val=formfield_callback})))) (keyword (str{arg}{val=widgets}) (expr{value} (Name (str{id}{val=widgets})))) (keyword (str{arg}{val=localized_fields}) (expr{value} (Name (str{id}{val=localized_fields})))) (keyword (str{arg}{val=labels}) (expr{value} (Name (str{id}{val=labels})))) (keyword (str{arg}{val=help_texts}) (expr{value} (Name (str{id}{val=help_texts})))) (keyword (str{arg}{val=error_messages}) (expr{value} (Name (str{id}{val=error_messages})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=FormSet})))) (expr{value} (Call (expr{func} (Name (str{id}{val=formset_factory}))) (expr*{args} (expr (Name (str{id}{val=form}))) (expr (Name (str{id}{val=formset})))) (keyword*{keywords} (keyword (str{arg}{val=extra}) (expr{value} (Name (str{id}{val=extra})))) (keyword (str{arg}{val=min_num}) (expr{value} (Name (str{id}{val=min_num})))) (keyword (str{arg}{val=max_num}) (expr{value} (Name (str{id}{val=max_num})))) (keyword (str{arg}{val=can_order}) (expr{value} (Name (str{id}{val=can_order})))) (keyword (str{arg}{val=can_delete}) (expr{value} (Name (str{id}{val=can_delete})))) (keyword (str{arg}{val=validate_min}) (expr{value} (Name (str{id}{val=validate_min})))) (keyword (str{arg}{val=validate_max}) (expr{value} (Name (str{id}{val=validate_max})))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=FormSet}))) (str{attr}{val=model})))) (expr{value} (Name (str{id}{val=model})))))
(root (Return (expr{value} (Name (str{id}{val=FormSet})))))
(root (ClassDef (str{name}{val=BaseInlineFormSet}) (expr*{bases} (expr (Name (str{id}{val=BaseModelFormSet})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=data}))) (expr (Name (str{id}{val=files}))) (expr (Name (str{id}{val=instance}))) (expr (Name (str{id}{val=save_as_new}))) (expr (Name (str{id}{val=prefix}))) (expr (Name (str{id}{val=queryset})))) (str{kwarg}{val=kwargs}) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=False}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=instance}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=instance})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fk}))) (str{attr}{val=rel}))) (str{attr}{val=to})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=instance})))) (expr{value} (Name (str{id}{val=instance})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=save_as_new})))) (expr{value} (Name (str{id}{val=save_as_new})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=queryset}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=queryset})))) (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=model}))) (str{attr}{val=_default_manager})))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=instance}))) (str{attr}{val=pk}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=qs})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=queryset}))) (str{attr}{val=filter}))) (expr{kwargs} (Dict (expr*{keys} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fk}))) (str{attr}{val=name})))) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=instance}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=qs})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=queryset}))) (str{attr}{val=none})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=BaseInlineFormSet}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=data}))) (expr (Name (str{id}{val=files})))) (keyword*{keywords} (keyword (str{arg}{val=prefix}) (expr{value} (Name (str{id}{val=prefix})))) (keyword (str{arg}{val=queryset}) (expr{value} (Name (str{id}{val=qs}))))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (FunctionDef (str{name}{val=initial_form_count}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=save_as_new}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Num (int{n}{val=0})))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=BaseInlineFormSet}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=initial_form_count})))))))
(root (FunctionDef (str{name}{val=_construct_form}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=i})))) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=form})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=BaseInlineFormSet}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=_construct_form}))) (expr*{args} (expr (Name (str{id}{val=i})))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=save_as_new}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=data}))) (slice{slice} (Index (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=add_prefix}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_pk_field}))) (str{attr}{val=name}))))))))))) (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=data}))) (slice{slice} (Index (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=add_prefix}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fk}))) (str{attr}{val=name}))))))))))) (expr{value} (Name (str{id}{val=None})))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=setattr}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=instance}))) (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fk}))) (str{attr}{val=get_attname}))))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=instance}))) (str{attr}{val=pk}))))))))
(root (Return (expr{value} (Name (str{id}{val=form})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=classmethod}))))))
(root (FunctionDef (str{name}{val=get_default_prefix}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=cls})))))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=django.db.models.fields.related}) (alias*{names} (alias (str{name}{val=RelatedObject}))) (int{level}{val=0})))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=RelatedObject}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=cls}))) (str{attr}{val=fk}))) (str{attr}{val=rel}))) (str{attr}{val=to}))) (expr (Attribute (expr{value} (Name (str{id}{val=cls}))) (str{attr}{val=model}))) (expr (Attribute (expr{value} (Name (str{id}{val=cls}))) (str{attr}{val=fk})))))) (str{attr}{val=get_accessor_name}))))) (str{attr}{val=replace}))) (expr*{args} (expr (Str (str{s}{val=+}))) (expr (Str (str{s}{val=}))))))))
(root (FunctionDef (str{name}{val=save_new}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=form}))) (expr (Name (str{id}{val=commit})))) (expr*{defaults} (expr (Name (str{id}{val=True})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=obj})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=save}))) (keyword*{keywords} (keyword (str{arg}{val=commit}) (expr{value} (Name (str{id}{val=False})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=pk_value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=instance}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fk}))) (str{attr}{val=rel}))) (str{attr}{val=field_name}))))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=setattr}))) (expr*{args} (expr (Name (str{id}{val=obj}))) (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fk}))) (str{attr}{val=get_attname}))))) (expr (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=pk_value}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=pk_value})))))))))))
(root (If (expr{test} (Name (str{id}{val=commit}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=obj}))) (str{attr}{val=save})))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=commit}))) (expr (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=form}))) (expr (Str (str{s}{val=_STR:0_}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=save_m2m})))))))
(root (Return (expr{value} (Name (str{id}{val=obj})))))
(root (FunctionDef (str{name}{val=add_fields}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=form}))) (expr (Name (str{id}{val=index})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=BaseInlineFormSet}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=add_fields}))) (expr*{args} (expr (Name (str{id}{val=form}))) (expr (Name (str{id}{val=index}))))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_pk_field}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fk})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=name})))) (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_pk_field}))) (str{attr}{val=name})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=kwargs})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:0_})))) (expr*{values} (expr (Name (str{id}{val=True}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=name})))) (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fk}))) (str{attr}{val=name})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=kwargs})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:0_})))) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=fields}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=name})))))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Call (expr{func} (Name (str{id}{val=capfirst}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fk}))) (str{attr}{val=verbose_name}))))))))))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fk}))) (str{attr}{val=rel}))) (str{attr}{val=field_name}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fk}))) (str{attr}{val=rel}))) (str{attr}{val=to}))) (str{attr}{val=_meta}))) (str{attr}{val=pk}))) (str{attr}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=kwargs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fk}))) (str{attr}{val=rel}))) (str{attr}{val=field_name})))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=fields}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=name})))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=InlineForeignKeyField}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=instance})))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (If (expr{test} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=_meta}))) (str{attr}{val=fields}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=_meta}))) (str{attr}{val=fields}))) (expr (Name (str{id}{val=tuple})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=_meta}))) (str{attr}{val=fields})))) (expr{value} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=_meta}))) (str{attr}{val=fields}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=form}))) (str{attr}{val=_meta}))) (str{attr}{val=fields}))) (str{attr}{val=append}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fk}))) (str{attr}{val=name}))))))))
(root (FunctionDef (str{name}{val=get_unique_error_message}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=unique_check})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=unique_check})))) (expr{value} (ListComp (expr{elt} (Name (str{id}{val=field}))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=field}))) (expr{iter} (Name (str{id}{val=unique_check}))) (expr*{ifs} (expr (Compare (expr{left} (Name (str{id}{val=field}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fk}))) (str{attr}{val=name})))))))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=BaseInlineFormSet}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=get_unique_error_message}))) (expr*{args} (expr (Name (str{id}{val=unique_check}))))))))
(root (FunctionDef (str{name}{val=_get_foreign_key}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=parent_model}))) (expr (Name (str{id}{val=model}))) (expr (Name (str{id}{val=fk_name}))) (expr (Name (str{id}{val=can_fail})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=django.db.models}) (alias*{names} (alias (str{name}{val=ForeignKey}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=opts})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=model}))) (str{attr}{val=_meta})))))
(root (If (expr{test} (Name (str{id}{val=fk_name}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=fks_to_parent})))) (expr{value} (ListComp (expr{elt} (Name (str{id}{val=f}))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=f}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=opts}))) (str{attr}{val=fields}))) (expr*{ifs} (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=name}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=fk_name})))))))))))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=fks_to_parent})))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=fk})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=fks_to_parent}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=fk}))) (expr (Name (str{id}{val=ForeignKey})))))))) (expr (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=fk}))) (str{attr}{val=rel}))) (str{attr}{val=to}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Name (str{id}{val=parent_model})))))) (expr (Compare (expr{left} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=fk}))) (str{attr}{val=rel}))) (str{attr}{val=to}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=parent_model}))) (str{attr}{val=_meta}))) (str{attr}{val=get_parent_list})))))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=fk_name}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=parent_model}))) (str{attr}{val=_meta}))) (str{attr}{val=app_label}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=parent_model}))) (str{attr}{val=_meta}))) (str{attr}{val=object_name})))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=fks_to_parent})))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass))))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=model}))) (str{attr}{val=_meta}))) (str{attr}{val=app_label}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=model}))) (str{attr}{val=_meta}))) (str{attr}{val=object_name}))) (expr (Name (str{id}{val=fk_name})))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=fks_to_parent})))) (expr{value} (ListComp (expr{elt} (Name (str{id}{val=f}))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=f}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=opts}))) (str{attr}{val=fields}))) (expr*{ifs} (expr (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=f}))) (expr (Name (str{id}{val=ForeignKey})))))) (expr (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=rel}))) (str{attr}{val=to}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=parent_model})))))) (expr (Compare (expr{left} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=rel}))) (str{attr}{val=to}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=parent_model}))) (str{attr}{val=_meta}))) (str{attr}{val=get_parent_list})))))))))))))))))))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=fks_to_parent})))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=fk})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=fks_to_parent}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=fks_to_parent})))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass))))))))
(root (If (expr{test} (Name (str{id}{val=can_fail}))) (stmt*{body} (stmt (Pass)))))
(root (Return (epsilon)))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=model}))) (str{attr}{val=_meta}))) (str{attr}{val=app_label}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=model}))) (str{attr}{val=_meta}))) (str{attr}{val=object_name}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=parent_model}))) (str{attr}{val=_meta}))) (str{attr}{val=app_label}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=parent_model}))) (str{attr}{val=_meta}))) (str{attr}{val=object_name})))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=model}))) (str{attr}{val=_meta}))) (str{attr}{val=app_label}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=model}))) (str{attr}{val=_meta}))) (str{attr}{val=object_name}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=parent_model}))) (str{attr}{val=_meta}))) (str{attr}{val=app_label}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=parent_model}))) (str{attr}{val=_meta}))) (str{attr}{val=object_name})))))))))))))
(root (Return (expr{value} (Name (str{id}{val=fk})))))
(root (FunctionDef (str{name}{val=inlineformset_factory}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=parent_model}))) (expr (Name (str{id}{val=model}))) (expr (Name (str{id}{val=form}))) (expr (Name (str{id}{val=formset}))) (expr (Name (str{id}{val=fk_name}))) (expr (Name (str{id}{val=fields}))) (expr (Name (str{id}{val=exclude}))) (expr (Name (str{id}{val=extra}))) (expr (Name (str{id}{val=can_order}))) (expr (Name (str{id}{val=can_delete}))) (expr (Name (str{id}{val=max_num}))) (expr (Name (str{id}{val=formfield_callback}))) (expr (Name (str{id}{val=widgets}))) (expr (Name (str{id}{val=validate_max}))) (expr (Name (str{id}{val=localized_fields}))) (expr (Name (str{id}{val=labels}))) (expr (Name (str{id}{val=help_texts}))) (expr (Name (str{id}{val=error_messages}))) (expr (Name (str{id}{val=min_num}))) (expr (Name (str{id}{val=validate_min})))) (expr*{defaults} (expr (Name (str{id}{val=ModelForm}))) (expr (Name (str{id}{val=BaseInlineFormSet}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Num (int{n}{val=3}))) (expr (Name (str{id}{val=False}))) (expr (Name (str{id}{val=True}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=False}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=fk})))) (expr{value} (Call (expr{func} (Name (str{id}{val=_get_foreign_key}))) (expr*{args} (expr (Name (str{id}{val=parent_model}))) (expr (Name (str{id}{val=model})))) (keyword*{keywords} (keyword (str{arg}{val=fk_name}) (expr{value} (Name (str{id}{val=fk_name})))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=fk}))) (str{attr}{val=unique}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=max_num})))) (expr{value} (Num (int{n}{val=1})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=kwargs})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=extra}))) (expr (Str (str{s}{val=can_delete}))) (expr (Str (str{s}{val=can_order}))) (expr (Str (str{s}{val=fields}))) (expr (Str (str{s}{val=exclude}))) (expr (Str (str{s}{val=min_num}))) (expr (Str (str{s}{val=max_num}))) (expr (Str (str{s}{val=widgets}))) (expr (Str (str{s}{val=validate_min}))) (expr (Str (str{s}{val=validate_max}))) (expr (Str (str{s}{val=localized_fields}))) (expr (Str (str{s}{val=labels}))) (expr (Str (str{s}{val=help_texts}))) (expr (Str (str{s}{val=error_messages})))) (expr*{values} (expr (Name (str{id}{val=form}))) (expr (Name (str{id}{val=formfield_callback}))) (expr (Name (str{id}{val=formset}))) (expr (Name (str{id}{val=extra}))) (expr (Name (str{id}{val=can_delete}))) (expr (Name (str{id}{val=can_order}))) (expr (Name (str{id}{val=fields}))) (expr (Name (str{id}{val=exclude}))) (expr (Name (str{id}{val=min_num}))) (expr (Name (str{id}{val=max_num}))) (expr (Name (str{id}{val=widgets}))) (expr (Name (str{id}{val=validate_min}))) (expr (Name (str{id}{val=validate_max}))) (expr (Name (str{id}{val=localized_fields}))) (expr (Name (str{id}{val=labels}))) (expr (Name (str{id}{val=help_texts}))) (expr (Name (str{id}{val=error_messages}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=FormSet})))) (expr{value} (Call (expr{func} (Name (str{id}{val=modelformset_factory}))) (expr*{args} (expr (Name (str{id}{val=model})))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=FormSet}))) (str{attr}{val=fk})))) (expr{value} (Name (str{id}{val=fk})))))
(root (Return (expr{value} (Name (str{id}{val=FormSet})))))
(root (ClassDef (str{name}{val=InlineForeignKeyField}) (expr*{bases} (expr (Name (str{id}{val=Field})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=widget})))) (expr{value} (Name (str{id}{val=HiddenInput})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=default_error_messages})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=invalid_choice})))) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=The inline foreign key did not match the parent instance primary key.})))))))))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=parent_instance})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=parent_instance})))) (expr{value} (Name (str{id}{val=parent_instance})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=pk_field})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=kwargs}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=pk_field}))) (expr (Name (str{id}{val=False}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=to_field})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=kwargs}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=to_field}))) (expr (Name (str{id}{val=None}))))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=parent_instance}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=to_field}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=kwargs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=initial})))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=parent_instance}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=to_field}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=kwargs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=initial})))))))) (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=parent_instance}))) (str{attr}{val=pk})))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=kwargs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=required})))))))) (expr{value} (Name (str{id}{val=False})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=InlineForeignKeyField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (FunctionDef (str{name}{val=clean}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=empty_values})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=pk_field}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=None})))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=parent_instance})))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=to_field}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=orig})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=parent_instance}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=to_field}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=orig})))) (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=parent_instance}))) (str{attr}{val=pk})))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=value})))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=orig}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_messages}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=parent_instance})))))
(root (FunctionDef (str{name}{val=_has_changed}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=initial}))) (expr (Name (str{id}{val=data})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (ClassDef (str{name}{val=ModelChoiceIterator}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=field})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=field})))) (expr{value} (Name (str{id}{val=field})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=queryset})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=field}))) (str{attr}{val=queryset})))))
(root (FunctionDef (str{name}{val=__iter__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=field}))) (str{attr}{val=empty_label}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Yield (expr{value} (Tuple (expr*{elts} (expr (Str (str{s}{val=}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=field}))) (str{attr}{val=empty_label}))))))))))
(root (If (expr{test} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=field}))) (str{attr}{val=cache_choices}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=field}))) (str{attr}{val=choice_cache}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=field}))) (str{attr}{val=choice_cache})))) (expr{value} (ListComp (expr{elt} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=choice}))) (expr*{args} (expr (Name (str{id}{val=obj})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=obj}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=queryset}))) (str{attr}{val=all})))))))))))
(root (For (expr{target} (Name (str{id}{val=choice}))) (expr{iter} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=field}))) (str{attr}{val=choice_cache}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Yield (expr{value} (Name (str{id}{val=choice})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=obj}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=queryset}))) (str{attr}{val=all}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Yield (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=choice}))) (expr*{args} (expr (Name (str{id}{val=obj}))))))))))
(root (FunctionDef (str{name}{val=__len__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=queryset})))))) (operator{op} (Add)) (expr{right} (IfExp (expr{test} (Compare (expr{left} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=field}))) (str{attr}{val=empty_label}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr{body} (Num (int{n}{val=1}))) (expr{orelse} (Num (int{n}{val=0})))))))))
(root (FunctionDef (str{name}{val=choice}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=obj})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=field}))) (str{attr}{val=prepare_value}))) (expr*{args} (expr (Name (str{id}{val=obj})))))) (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=field}))) (str{attr}{val=label_from_instance}))) (expr*{args} (expr (Name (str{id}{val=obj})))))))))))
(root (ClassDef (str{name}{val=ModelChoiceField}) (expr*{bases} (expr (Name (str{id}{val=ChoiceField})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=default_error_messages})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=invalid_choice})))) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=Select a valid choice. That choice is not one of the available choices.})))))))))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=queryset}))) (expr (Name (str{id}{val=empty_label}))) (expr (Name (str{id}{val=cache_choices}))) (expr (Name (str{id}{val=required}))) (expr (Name (str{id}{val=widget}))) (expr (Name (str{id}{val=label}))) (expr (Name (str{id}{val=initial}))) (expr (Name (str{id}{val=help_text}))) (expr (Name (str{id}{val=to_field_name}))) (expr (Name (str{id}{val=limit_choices_to})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}) (expr*{defaults} (expr (Str (str{s}{val=_STR:2_}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=True}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Str (str{s}{val=}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=required}))) (expr (Compare (expr{left} (Name (str{id}{val=initial}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=empty_label})))) (expr{value} (Name (str{id}{val=None})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=empty_label})))) (expr{value} (Name (str{id}{val=empty_label})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=cache_choices}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=warnings}))) (str{attr}{val=warn}))) (expr*{args} (expr (Str (str{s}{val=cache_choices has been deprecated and will be removed in Django 1.9.}))) (expr (Name (str{id}{val=RemovedInDjango19Warning})))) (keyword*{keywords} (keyword (str{arg}{val=stacklevel}) (expr{value} (Num (int{n}{val=2})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cache_choices})))) (expr{value} (Name (str{id}{val=False})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=cache_choices})))) (expr{value} (Name (str{id}{val=cache_choices})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=Field}))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=required}))) (expr (Name (str{id}{val=widget}))) (expr (Name (str{id}{val=label}))) (expr (Name (str{id}{val=initial}))) (expr (Name (str{id}{val=help_text})))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=queryset})))) (expr{value} (Name (str{id}{val=queryset})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=limit_choices_to})))) (expr{value} (Name (str{id}{val=limit_choices_to})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=choice_cache})))) (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=to_field_name})))) (expr{value} (Name (str{id}{val=to_field_name})))))
(root (FunctionDef (str{name}{val=__deepcopy__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=memo})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=ChoiceField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__deepcopy__}))) (expr*{args} (expr (Name (str{id}{val=memo}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=result}))) (str{attr}{val=queryset})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=result}))) (str{attr}{val=queryset})))))
(root (Return (expr{value} (Name (str{id}{val=result})))))
(root (FunctionDef (str{name}{val=_get_queryset}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_queryset})))))
(root (FunctionDef (str{name}{val=_set_queryset}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=queryset})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_queryset})))) (expr{value} (Name (str{id}{val=queryset})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=widget}))) (str{attr}{val=choices})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=choices})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=queryset})))) (expr{value} (Call (expr{func} (Name (str{id}{val=property}))) (expr*{args} (expr (Name (str{id}{val=_get_queryset}))) (expr (Name (str{id}{val=_set_queryset}))))))))
(root (FunctionDef (str{name}{val=label_from_instance}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=obj})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=smart_text}))) (expr*{args} (expr (Name (str{id}{val=obj}))))))))
(root (FunctionDef (str{name}{val=_get_choices}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_choices})))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=ModelChoiceIterator}))) (expr*{args} (expr (Name (str{id}{val=self}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=choices})))) (expr{value} (Call (expr{func} (Name (str{id}{val=property}))) (expr*{args} (expr (Name (str{id}{val=_get_choices}))) (expr (Attribute (expr{value} (Name (str{id}{val=ChoiceField}))) (str{attr}{val=_set_choices}))))))))
(root (FunctionDef (str{name}{val=prepare_value}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=to_field_name}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=serializable_value}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=to_field_name}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=pk})))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=ModelChoiceField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=prepare_value}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (FunctionDef (str{name}{val=to_python}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=empty_values})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=None})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=key})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=to_field_name}))) (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=queryset}))) (str{attr}{val=get}))) (expr{kwargs} (Dict (expr*{keys} (expr (Name (str{id}{val=key})))) (expr*{values} (expr (Name (str{id}{val=value}))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=ValueError}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=queryset}))) (str{attr}{val=model}))) (str{attr}{val=DoesNotExist})))))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_messages}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (Return (expr{value} (Name (str{id}{val=value})))))
(root (FunctionDef (str{name}{val=validate}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=Field}))) (str{attr}{val=validate}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value}))))))))
(root (FunctionDef (str{name}{val=_has_changed}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=initial}))) (expr (Name (str{id}{val=data})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=initial_value})))) (expr{value} (IfExp (expr{test} (Compare (expr{left} (Name (str{id}{val=initial}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr{body} (Name (str{id}{val=initial}))) (expr{orelse} (Str (str{s}{val=})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=data_value})))) (expr{value} (IfExp (expr{test} (Compare (expr{left} (Name (str{id}{val=data}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr{body} (Name (str{id}{val=data}))) (expr{orelse} (Str (str{s}{val=})))))))
(root (Return (expr{value} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=prepare_value}))) (expr*{args} (expr (Name (str{id}{val=initial_value}))))))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=data_value})))))))))))
(root (ClassDef (str{name}{val=ModelMultipleChoiceField}) (expr*{bases} (expr (Name (str{id}{val=ModelChoiceField})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=widget})))) (expr{value} (Name (str{id}{val=SelectMultiple})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=hidden_widget})))) (expr{value} (Name (str{id}{val=MultipleHiddenInput})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=default_error_messages})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=list}))) (expr (Str (str{s}{val=invalid_choice}))) (expr (Str (str{s}{val=invalid_pk_value})))) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=Enter a list of values.})))))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=Select a valid choice. %(value)s is not one of the available choices.})))))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val="%(pk)s" is not a valid value for a primary key.})))))))))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=queryset}))) (expr (Name (str{id}{val=cache_choices}))) (expr (Name (str{id}{val=required}))) (expr (Name (str{id}{val=widget}))) (expr (Name (str{id}{val=label}))) (expr (Name (str{id}{val=initial}))) (expr (Name (str{id}{val=help_text})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=True}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Str (str{s}{val=})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=ModelMultipleChoiceField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=queryset}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=cache_choices}))) (expr (Name (str{id}{val=required}))) (expr (Name (str{id}{val=widget}))) (expr (Name (str{id}{val=label}))) (expr (Name (str{id}{val=initial}))) (expr (Name (str{id}{val=help_text})))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (FunctionDef (str{name}{val=to_python}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=value}))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=to_py})))) (expr{value} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=ModelMultipleChoiceField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=to_python})))))
(root (Return (expr{value} (ListComp (expr{elt} (Call (expr{func} (Name (str{id}{val=to_py}))) (expr*{args} (expr (Name (str{id}{val=val})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=val}))) (expr{iter} (Name (str{id}{val=value})))))))))
(root (FunctionDef (str{name}{val=clean}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=required}))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=value})))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_messages}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=required}))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=value})))))))) (stmt*{body} (stmt (Pass))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=queryset}))) (str{attr}{val=none})))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=list}))) (expr (Name (str{id}{val=tuple}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_messages}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=key})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=to_field_name}))) (expr (Str (str{s}{val=pk}))))))))
(root (For (expr{target} (Name (str{id}{val=pk}))) (expr{iter} (Name (str{id}{val=value}))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=queryset}))) (str{attr}{val=filter}))) (expr{kwargs} (Dict (expr*{keys} (expr (Name (str{id}{val=key})))) (expr*{values} (expr (Name (str{id}{val=pk}))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ValueError}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_messages}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Str (str{s}{val=_STR:0_})))) (keyword (str{arg}{val=params}) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=pk})))) (expr*{values} (expr (Name (str{id}{val=pk}))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=qs})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=queryset}))) (str{attr}{val=filter}))) (expr{kwargs} (Dict (expr*{keys} (expr (BinOp (expr{left} (Str (str{s}{val=%s__in}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=key})))))) (expr*{values} (expr (Name (str{id}{val=value}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=pks})))) (expr{value} (Call (expr{func} (Name (str{id}{val=set}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=o}))) (expr (Name (str{id}{val=key}))))))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=o}))) (expr{iter} (Name (str{id}{val=qs}))))))))))))
(root (For (expr{target} (Name (str{id}{val=val}))) (expr{iter} (Name (str{id}{val=value}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=val})))))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=pks})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_messages}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Str (str{s}{val=_STR:0_})))) (keyword (str{arg}{val=params}) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=value})))) (expr*{values} (expr (Name (str{id}{val=val}))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=run_validators}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (Return (expr{value} (Name (str{id}{val=qs})))))
(root (FunctionDef (str{name}{val=prepare_value}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Str (str{s}{val=_STR:0_})))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type})))))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Str (str{s}{val=_STR:1_}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (ListComp (expr{elt} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=ModelMultipleChoiceField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=prepare_value}))) (expr*{args} (expr (Name (str{id}{val=v})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=v}))) (expr{iter} (Name (str{id}{val=value})))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=ModelMultipleChoiceField}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=prepare_value}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (FunctionDef (str{name}{val=_has_changed}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=initial}))) (expr (Name (str{id}{val=data})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=initial}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=initial})))) (expr{value} (List (epsilon)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=data}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=data})))) (expr{value} (List (epsilon)))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=initial})))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=data}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=True})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=initial_set})))) (expr{value} (Call (expr{func} (Name (str{id}{val=set}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=value})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=value}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=prepare_value}))) (expr*{args} (expr (Name (str{id}{val=initial})))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=data_set})))) (expr{value} (Call (expr{func} (Name (str{id}{val=set}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=value})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=value}))) (expr{iter} (Name (str{id}{val=data}))))))))))))
(root (Return (expr{value} (Compare (expr{left} (Name (str{id}{val=data_set}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Name (str{id}{val=initial_set}))))))))
(root (FunctionDef (str{name}{val=modelform_defines_fields}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=form_class})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=form_class}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=form_class}))) (expr (Str (str{s}{val=_STR:0_})))))) (expr (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=form_class}))) (str{attr}{val=_meta}))) (str{attr}{val=fields}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Compare (expr{left} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=form_class}))) (str{attr}{val=_meta}))) (str{attr}{val=exclude}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))))))))))))))
(root (Import (alias*{names} (alias (str{name}{val=warnings})))))
(root (ImportFrom (str{module}{val=django.utils.deprecation}) (alias*{names} (alias (str{name}{val=RemovedInDjango19Warning}))) (int{level}{val=0})))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=warnings}))) (str{attr}{val=warn}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_Use django.forms.utils instead.}))) (expr (Name (str{id}{val=RemovedInDjango19Warning})))) (keyword*{keywords} (keyword (str{arg}{val=stacklevel}) (expr{value} (Num (int{n}{val=2})))))))))
(root (ImportFrom (str{module}{val=django.forms.utils}) (alias*{names} (alias (str{name}{val=*}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=json})))))
(root (Import (alias*{names} (alias (str{name}{val=sys})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (ImportFrom (str{module}{val=collections}) (alias*{names} (alias (str{name}{val=UserList}))) (int{level}{val=0})))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ImportError}))) (stmt*{body} (stmt (Pass)))))))
(root (ImportFrom (str{module}{val=UserList}) (alias*{names} (alias (str{name}{val=UserList}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=force_text})) (alias (str{name}{val=python_2_unicode_compatible}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.html}) (alias*{names} (alias (str{name}{val=format_html})) (alias (str{name}{val=format_html_join})) (alias (str{name}{val=escape}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=timezone}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.translation}) (alias*{names} (alias (str{name}{val=ugettext_lazy}) (str{asname}{val=_}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.exceptions}) (alias*{names} (alias (str{name}{val=ValidationError}))) (int{level}{val=0})))
(root (FunctionDef (str{name}{val=flatatt}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=attrs})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=boolean_attrs})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=attr}))) (expr (Name (str{id}{val=value})))))) (expr{iter} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=attrs}))) (str{attr}{val=items})))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=True})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=boolean_attrs}))) (str{attr}{val=append}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=attr})))))))))))
(root (Delete (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=attrs}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=attr}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass))))))))
(root (Delete (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=attrs}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=attr}))))))))))
(root (Return (expr{value} (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=format_html_join}))) (expr*{args} (expr (Str (str{s}{val=}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Call (expr{func} (Name (str{id}{val=sorted}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=attrs}))) (str{attr}{val=items}))))))))))) (operator{op} (Add)) (expr{right} (Call (expr{func} (Name (str{id}{val=format_html_join}))) (expr*{args} (expr (Str (str{s}{val=}))) (expr (Str (str{s}{val= {0}}))) (expr (Call (expr{func} (Name (str{id}{val=sorted}))) (expr*{args} (expr (Name (str{id}{val=boolean_attrs})))))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=python_2_unicode_compatible}))))))
(root (ClassDef (str{name}{val=ErrorDict}) (expr*{bases} (expr (Name (str{id}{val=dict})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=as_data}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (DictComp (expr{key} (Name (str{id}{val=f}))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=as_data}))))) (comprehension*{generators} (comprehension (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=f}))) (expr (Name (str{id}{val=e})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=items})))))))))))
(root (FunctionDef (str{name}{val=as_json}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=escape_html})))) (expr*{defaults} (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=json}))) (str{attr}{val=dumps}))) (expr*{args} (expr (DictComp (expr{key} (Name (str{id}{val=f}))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=get_json_data}))) (expr*{args} (expr (Name (str{id}{val=escape_html})))))) (comprehension*{generators} (comprehension (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=f}))) (expr (Name (str{id}{val=e})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=items}))))))))))))))
(root (FunctionDef (str{name}{val=as_ul}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=self}))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=format_html}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Call (expr{func} (Name (str{id}{val=format_html_join}))) (expr*{args} (expr (Str (str{s}{val=}))) (expr (Str (str{s}{val=<li>{0}{1}</li>}))) (expr (GeneratorExp (expr{elt} (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=v}))))))))) (comprehension*{generators} (comprehension (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Name (str{id}{val=v})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=items})))))))))))))))))
(root (FunctionDef (str{name}{val=as_text}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=output})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=field}))) (expr (Name (str{id}{val=errors})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=items}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=output}))) (str{attr}{val=append}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=* %s}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=field}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=output}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=\n}))) (str{attr}{val=join}))) (expr*{args} (expr (GeneratorExp (expr{elt} (BinOp (expr{left} (Str (str{s}{val=  * %s}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=e}))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=e}))) (expr{iter} (Name (str{id}{val=errors})))))))))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=\n}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=output}))))))))
(root (FunctionDef (str{name}{val=__str__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=as_ul})))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=python_2_unicode_compatible}))))))
(root (ClassDef (str{name}{val=ErrorList}) (expr*{bases} (expr (Name (str{id}{val=UserList}))) (expr (Name (str{id}{val=list})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=initlist}))) (expr (Name (str{id}{val=error_class})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=ErrorList}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=initlist}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=error_class}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_class})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_class})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=errorlist {}}))) (str{attr}{val=format}))) (expr*{args} (expr (Name (str{id}{val=error_class}))))))))
(root (FunctionDef (str{name}{val=as_data}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data})))))) (str{attr}{val=error_list})))))
(root (FunctionDef (str{name}{val=get_json_data}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=escape_html})))) (expr*{defaults} (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=errors})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=error}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=as_data}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=message})))) (expr{value} (Subscript (expr{value} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Name (str{id}{val=error})))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=errors}))) (str{attr}{val=append}))) (expr*{args} (expr (Dict (expr*{keys} (expr (Str (str{s}{val=message}))) (expr (Str (str{s}{val=code})))) (expr*{values} (expr (IfExp (expr{test} (Name (str{id}{val=escape_html}))) (expr{body} (Call (expr{func} (Name (str{id}{val=escape}))) (expr*{args} (expr (Name (str{id}{val=message})))))) (expr{orelse} (Name (str{id}{val=message}))))) (expr (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=error}))) (str{attr}{val=code}))) (expr (Str (str{s}{val=}))))))))))))))
(root (Return (expr{value} (Name (str{id}{val=errors})))))
(root (FunctionDef (str{name}{val=as_json}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=escape_html})))) (expr*{defaults} (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=json}))) (str{attr}{val=dumps}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get_json_data}))) (expr*{args} (expr (Name (str{id}{val=escape_html})))))))))))
(root (FunctionDef (str{name}{val=as_ul}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=format_html}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_class}))) (expr (Call (expr{func} (Name (str{id}{val=format_html_join}))) (expr*{args} (expr (Str (str{s}{val=}))) (expr (Str (str{s}{val=<li>{0}</li>}))) (expr (GeneratorExp (expr{elt} (Tuple (expr*{elts} (expr (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=e}))))))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=e}))) (expr{iter} (Name (str{id}{val=self})))))))))))))))
(root (FunctionDef (str{name}{val=as_text}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=\n}))) (str{attr}{val=join}))) (expr*{args} (expr (GeneratorExp (expr{elt} (BinOp (expr{left} (Str (str{s}{val=* %s}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=e}))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=e}))) (expr{iter} (Name (str{id}{val=self}))))))))))))
(root (FunctionDef (str{name}{val=__str__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=as_ul})))))))
(root (FunctionDef (str{name}{val=__repr__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=repr}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Name (str{id}{val=self})))))))))))
(root (FunctionDef (str{name}{val=__contains__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=item})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Compare (expr{left} (Name (str{id}{val=item}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Name (str{id}{val=self})))))))))))
(root (FunctionDef (str{name}{val=__eq__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=other})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Name (str{id}{val=self})))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=other}))))))))
(root (FunctionDef (str{name}{val=__ne__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=other})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Name (str{id}{val=self})))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Name (str{id}{val=other}))))))))
(root (FunctionDef (str{name}{val=__getitem__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=i})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=error})))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=i})))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=error}))) (expr (Name (str{id}{val=ValidationError})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Subscript (expr{value} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Name (str{id}{val=error})))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=error}))))))))
(root (FunctionDef (str{name}{val=from_current_timezone}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=USE_TZ}))) (expr (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=timezone}))) (str{attr}{val=is_naive}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=current_timezone})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=timezone}))) (str{attr}{val=get_current_timezone})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=timezone}))) (str{attr}{val=make_aware}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=current_timezone}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=Exception}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=message})))) (expr{value} (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=%(datetime)s couldn't be interpreted in time zone %(current_timezone)s; it may be ambiguous or it may not exist.}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=params})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_})))) (expr*{values} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=current_timezone}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=reraise}))) (expr*{args} (expr (Name (str{id}{val=ValidationError}))) (expr (Call (expr{func} (Name (str{id}{val=ValidationError}))) (expr*{args} (expr (Name (str{id}{val=message})))) (keyword*{keywords} (keyword (str{arg}{val=code}) (expr{value} (Str (str{s}{val=ambiguous_timezone})))) (keyword (str{arg}{val=params}) (expr{value} (Name (str{id}{val=params}))))))) (expr (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=exc_info}))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=2}))))))))))))
(root (Return (expr{value} (Name (str{id}{val=value})))))
(root (FunctionDef (str{name}{val=to_current_timezone}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=USE_TZ}))) (expr (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=timezone}))) (str{attr}{val=is_aware}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=current_timezone})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=timezone}))) (str{attr}{val=get_current_timezone})))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=timezone}))) (str{attr}{val=make_naive}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=current_timezone}))))))))
(root (Return (expr{value} (Name (str{id}{val=value})))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=copy})))))
(root (ImportFrom (str{module}{val=itertools}) (alias*{names} (alias (str{name}{val=chain}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.forms.utils}) (alias*{names} (alias (str{name}{val=flatatt})) (alias (str{name}{val=to_current_timezone}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.datastructures}) (alias*{names} (alias (str{name}{val=MultiValueDict})) (alias (str{name}{val=MergeDict}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=force_text})) (alias (str{name}{val=python_2_unicode_compatible}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.html}) (alias*{names} (alias (str{name}{val=conditional_escape})) (alias (str{name}{val=format_html}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.translation}) (alias*{names} (alias (str{name}{val=ugettext_lazy}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.safestring}) (alias*{names} (alias (str{name}{val=mark_safe}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=formats})) (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.six.moves.urllib.parse}) (alias*{names} (alias (str{name}{val=urljoin}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__all__})))) (expr{value} (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=_STR:3_}))) (expr (Str (str{s}{val=_STR:4_}))) (expr (Str (str{s}{val=_STR:5_}))) (expr (Str (str{s}{val=_STR:6_}))) (expr (Str (str{s}{val=PasswordInput}))) (expr (Str (str{s}{val=HiddenInput}))) (expr (Str (str{s}{val=MultipleHiddenInput}))) (expr (Str (str{s}{val=ClearableFileInput}))) (expr (Str (str{s}{val=FileInput}))) (expr (Str (str{s}{val=DateInput}))) (expr (Str (str{s}{val=DateTimeInput}))) (expr (Str (str{s}{val=TimeInput}))) (expr (Str (str{s}{val=Textarea}))) (expr (Str (str{s}{val=CheckboxInput}))) (expr (Str (str{s}{val=Select}))) (expr (Str (str{s}{val=NullBooleanSelect}))) (expr (Str (str{s}{val=SelectMultiple}))) (expr (Str (str{s}{val=RadioSelect}))) (expr (Str (str{s}{val=CheckboxSelectMultiple}))) (expr (Str (str{s}{val=MultiWidget}))) (expr (Str (str{s}{val=SplitDateTimeWidget}))) (expr (Str (str{s}{val=SplitHiddenDateTimeWidget}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=MEDIA_TYPES})))) (expr{value} (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:18_}))) (expr (Str (str{s}{val=_STR:19_}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=python_2_unicode_compatible}))))))
(root (ClassDef (str{name}{val=Media}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=media})))) (str{kwarg}{val=kwargs}) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=media}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=media_attrs})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=media}))) (str{attr}{val=__dict__})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=media_attrs})))) (expr{value} (Name (str{id}{val=kwargs})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_css})))) (expr{value} (Dict (epsilon)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_js})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=name}))) (expr{iter} (Name (str{id}{val=MEDIA_TYPES}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=name})))))))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=media_attrs}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=None})))))))))))
(root (FunctionDef (str{name}{val=__str__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=render})))))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=mark_safe}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=\n}))) (str{attr}{val=join}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=chain}))) (expr{starargs} (ListComp (expr{elt} (Call (expr{func} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=name})))))))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=name}))) (expr{iter} (Name (str{id}{val=MEDIA_TYPES})))))))))))))))))
(root (FunctionDef (str{name}{val=render_js}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (ListComp (expr{elt} (Call (expr{func} (Name (str{id}{val=format_html}))) (expr*{args} (expr (Str (str{s}{val=<script type="text/javascript" src="{0}"></script>}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=absolute_path}))) (expr*{args} (expr (Name (str{id}{val=path}))))))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=path}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_js})))))))))
(root (FunctionDef (str{name}{val=render_css}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=media})))) (expr{value} (Call (expr{func} (Name (str{id}{val=sorted}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_css}))) (str{attr}{val=keys}))))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=chain}))) (expr{starargs} (ListComp (expr{elt} (ListComp (expr{elt} (Call (expr{func} (Name (str{id}{val=format_html}))) (expr*{args} (expr (Str (str{s}{val=<link href="{0}" type="text/css" media="{1}" rel="stylesheet" />}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=absolute_path}))) (expr*{args} (expr (Name (str{id}{val=path})))))) (expr (Name (str{id}{val=medium})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=path}))) (expr{iter} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_css}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=medium}))))))))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=medium}))) (expr{iter} (Name (str{id}{val=media})))))))))))
(root (FunctionDef (str{name}{val=absolute_path}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=path}))) (expr (Name (str{id}{val=prefix})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=path}))) (str{attr}{val=startswith}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=path})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=prefix}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=STATIC_URL}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=prefix})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=MEDIA_URL})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=prefix})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=STATIC_URL})))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=urljoin}))) (expr*{args} (expr (Name (str{id}{val=prefix}))) (expr (Name (str{id}{val=path}))))))))
(root (FunctionDef (str{name}{val=__getitem__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=name}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=MEDIA_TYPES})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=Media}))) (expr{kwargs} (Dict (expr*{keys} (expr (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Name (str{id}{val=name}))))))) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=name})))))))))))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=KeyError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=name}))))))))))
(root (FunctionDef (str{name}{val=add_js}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=data})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=data}))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=path}))) (expr{iter} (Name (str{id}{val=data}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=path}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_js})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_js}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=path}))))))))
(root (FunctionDef (str{name}{val=add_css}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=data})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=data}))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=medium}))) (expr (Name (str{id}{val=paths})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=data}))) (str{attr}{val=items}))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=path}))) (expr{iter} (Name (str{id}{val=paths}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_css}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=medium})))))))) (expr (Compare (expr{left} (Name (str{id}{val=path}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_css}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=medium}))))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_css}))) (str{attr}{val=setdefault}))) (expr*{args} (expr (Name (str{id}{val=medium}))) (expr (List (epsilon)))))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=path}))))))))
(root (FunctionDef (str{name}{val=__add__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=other})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=combined})))) (expr{value} (Call (expr{func} (Name (str{id}{val=Media})))))))
(root (For (expr{target} (Name (str{id}{val=name}))) (expr{iter} (Name (str{id}{val=MEDIA_TYPES}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=combined}))) (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=name})))))))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (BinOp (expr{left} (Str (str{s}{val=_}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=name}))))) (expr (Name (str{id}{val=None})))))))))))
(root (Expr (expr{value} (Call (expr{func} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=combined}))) (expr (BinOp (expr{left} (Str (str{s}{val=_STR:1_}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=name})))))))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=other}))) (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=name}))))) (expr (Name (str{id}{val=None})))))))))))
(root (Return (expr{value} (Name (str{id}{val=combined})))))
(root (FunctionDef (str{name}{val=media_property}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=cls})))))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=_media}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=sup_cls})))) (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=cls}))) (expr (Name (str{id}{val=self}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=base})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=sup_cls}))) (str{attr}{val=media})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=AttributeError}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=base})))) (expr{value} (Call (expr{func} (Name (str{id}{val=Media})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=definition})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=cls}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))))))))
(root (If (expr{test} (Name (str{id}{val=definition}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=extend})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=definition}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=True}))))))))
(root (If (expr{test} (Name (str{id}{val=extend}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=extend}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=True})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=m})))) (expr{value} (Name (str{id}{val=base})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=m})))) (expr{value} (Call (expr{func} (Name (str{id}{val=Media})))))))
(root (For (expr{target} (Name (str{id}{val=medium}))) (expr{iter} (Name (str{id}{val=extend}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=m})))) (expr{value} (BinOp (expr{left} (Name (str{id}{val=m}))) (operator{op} (Add)) (expr{right} (Subscript (expr{value} (Name (str{id}{val=base}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=medium})))))))))))
(root (Return (expr{value} (BinOp (expr{left} (Name (str{id}{val=m}))) (operator{op} (Add)) (expr{right} (Call (expr{func} (Name (str{id}{val=Media}))) (expr*{args} (expr (Name (str{id}{val=definition}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=Media}))) (expr*{args} (expr (Name (str{id}{val=definition}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=base})))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=property}))) (expr*{args} (expr (Name (str{id}{val=_media}))))))))
(root (ClassDef (str{name}{val=MediaDefiningClass}) (expr*{bases} (expr (Name (str{id}{val=type})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__new__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=mcs}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=bases}))) (expr (Name (str{id}{val=attrs})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=new_class})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=MediaDefiningClass}))) (expr (Name (str{id}{val=mcs})))))) (str{attr}{val=__new__}))) (expr*{args} (expr (Name (str{id}{val=mcs}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=bases}))) (expr (Name (str{id}{val=attrs}))))))))
(root (If (expr{test} (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=attrs})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=new_class}))) (str{attr}{val=media})))) (expr{value} (Call (expr{func} (Name (str{id}{val=media_property}))) (expr*{args} (expr (Name (str{id}{val=new_class}))))))))
(root (Return (expr{value} (Name (str{id}{val=new_class})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=python_2_unicode_compatible}))))))
(root (ClassDef (str{name}{val=SubWidget}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=parent_widget}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=attrs}))) (expr (Name (str{id}{val=choices})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=parent_widget})))) (expr{value} (Name (str{id}{val=parent_widget})))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=name}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=value}))))))) (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=value}))))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=attrs}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=choices}))))))) (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=attrs}))) (expr (Name (str{id}{val=choices}))))))))
(root (FunctionDef (str{name}{val=__str__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=args})))) (expr{value} (List (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=name}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=value}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=attrs}))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=choices}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=args}))) (str{attr}{val=append}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=choices}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=parent_widget}))) (str{attr}{val=render}))) (expr{starargs} (Name (str{id}{val=args})))))))
(root (ClassDef (str{name}{val=Widget}) (expr*{bases} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=with_metaclass}))) (expr*{args} (expr (Name (str{id}{val=MediaDefiningClass}))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=needs_multipart_form})))) (expr{value} (Name (str{id}{val=False})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=is_localized})))) (expr{value} (Name (str{id}{val=False})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=is_required})))) (expr{value} (Name (str{id}{val=False})))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=attrs})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=attrs}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=attrs})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=attrs}))) (str{attr}{val=copy})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=attrs})))) (expr{value} (Dict (epsilon)))))
(root (FunctionDef (str{name}{val=__deepcopy__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=memo})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=obj})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=copy}))) (str{attr}{val=copy}))) (expr*{args} (expr (Name (str{id}{val=self}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=obj}))) (str{attr}{val=attrs})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=attrs}))) (str{attr}{val=copy})))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=memo}))) (slice{slice} (Index (expr{value} (Call (expr{func} (Name (str{id}{val=id}))) (expr*{args} (expr (Name (str{id}{val=self}))))))))))) (expr{value} (Name (str{id}{val=obj})))))
(root (Return (expr{value} (Name (str{id}{val=obj})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=is_hidden}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (IfExp (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Str (str{s}{val=_STR:1_})))))) (expr{body} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=input_type}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (expr{orelse} (Name (str{id}{val=False})))))))
(root (FunctionDef (str{name}{val=subwidgets}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=attrs}))) (expr (Name (str{id}{val=choices})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Tuple (epsilon)))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Yield (expr{value} (Call (expr{func} (Name (str{id}{val=SubWidget}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=attrs}))) (expr (Name (str{id}{val=choices}))))))))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=attrs})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=NotImplementedError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=build_attrs}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=extra_attrs})))) (str{kwarg}{val=kwargs}) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=attrs})))) (expr{value} (Call (expr{func} (Name (str{id}{val=dict}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=attrs})))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (If (expr{test} (Name (str{id}{val=extra_attrs}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=attrs}))) (str{attr}{val=update}))) (expr*{args} (expr (Name (str{id}{val=extra_attrs}))))))))
(root (Return (expr{value} (Name (str{id}{val=attrs})))))
(root (FunctionDef (str{name}{val=value_from_datadict}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=data}))) (expr (Name (str{id}{val=files}))) (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=data}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=None}))))))))
(root (FunctionDef (str{name}{val=id_for_label}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=id_})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=id_})))))
(root (ClassDef (str{name}{val=Input}) (expr*{bases} (expr (Name (str{id}{val=Widget})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=input_type})))) (expr{value} (Name (str{id}{val=None})))))
(root (FunctionDef (str{name}{val=_format_value}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=is_localized}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=formats}))) (str{attr}{val=localize_input}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (Return (expr{value} (Name (str{id}{val=value})))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=attrs})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Str (str{s}{val=})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=final_attrs})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=build_attrs}))) (expr*{args} (expr (Name (str{id}{val=attrs})))) (keyword*{keywords} (keyword (str{arg}{val=type}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=input_type})))) (keyword (str{arg}{val=name}) (expr{value} (Name (str{id}{val=name})))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Str (str{s}{val=})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=final_attrs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=value})))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_format_value}))) (expr*{args} (expr (Name (str{id}{val=value})))))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=format_html}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_}))) (expr (Call (expr{func} (Name (str{id}{val=flatatt}))) (expr*{args} (expr (Name (str{id}{val=final_attrs})))))))))))
(root (ClassDef (str{name}{val=TextInput}) (expr*{bases} (expr (Name (str{id}{val=Input})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=input_type})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=attrs})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=attrs}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=input_type})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=attrs}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=input_type}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=TextInput}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=attrs}))))))))
(root (ClassDef (str{name}{val=NumberInput}) (expr*{bases} (expr (Name (str{id}{val=TextInput})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=input_type})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (ClassDef (str{name}{val=EmailInput}) (expr*{bases} (expr (Name (str{id}{val=TextInput})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=input_type})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (ClassDef (str{name}{val=URLInput}) (expr*{bases} (expr (Name (str{id}{val=TextInput})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=input_type})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (ClassDef (str{name}{val=PasswordInput}) (expr*{bases} (expr (Name (str{id}{val=TextInput})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=input_type})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=attrs}))) (expr (Name (str{id}{val=render_value})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=PasswordInput}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=attrs}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=render_value})))) (expr{value} (Name (str{id}{val=render_value})))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=attrs})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=render_value}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Name (str{id}{val=None})))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=PasswordInput}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=render}))) (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=attrs}))))))))
(root (ClassDef (str{name}{val=HiddenInput}) (expr*{bases} (expr (Name (str{id}{val=Input})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=input_type})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (ClassDef (str{name}{val=MultipleHiddenInput}) (expr*{bases} (expr (Name (str{id}{val=HiddenInput})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=attrs}))) (expr (Name (str{id}{val=choices})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Tuple (epsilon)))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=MultipleHiddenInput}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=attrs}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=choices})))) (expr{value} (Name (str{id}{val=choices})))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=attrs}))) (expr (Name (str{id}{val=choices})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Tuple (epsilon)))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=final_attrs})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=build_attrs}))) (expr*{args} (expr (Name (str{id}{val=attrs})))) (keyword*{keywords} (keyword (str{arg}{val=type}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=input_type})))) (keyword (str{arg}{val=name}) (expr{value} (Name (str{id}{val=name})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=id_})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=final_attrs}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=inputs})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=i}))) (expr (Name (str{id}{val=v})))))) (expr{iter} (Call (expr{func} (Name (str{id}{val=enumerate}))) (expr*{args} (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=input_attrs})))) (expr{value} (Call (expr{func} (Name (str{id}{val=dict}))) (keyword*{keywords} (keyword (str{arg}{val=value}) (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=v})))))))) (expr{kwargs} (Name (str{id}{val=final_attrs})))))))
(root (If (expr{test} (Name (str{id}{val=id_}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=input_attrs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:1_})))))))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=id_}))) (expr (Name (str{id}{val=i}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=inputs}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=format_html}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Call (expr{func} (Name (str{id}{val=flatatt}))) (expr*{args} (expr (Name (str{id}{val=input_attrs}))))))))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=mark_safe}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=\n}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=inputs})))))))))))
(root (FunctionDef (str{name}{val=value_from_datadict}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=data}))) (expr (Name (str{id}{val=files}))) (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=data}))) (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=MultiValueDict}))) (expr (Name (str{id}{val=MergeDict}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=data}))) (str{attr}{val=getlist}))) (expr*{args} (expr (Name (str{id}{val=name}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=data}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=None}))))))))
(root (ClassDef (str{name}{val=FileInput}) (expr*{bases} (expr (Name (str{id}{val=Input})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=input_type})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=needs_multipart_form})))) (expr{value} (Name (str{id}{val=True})))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=attrs})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=FileInput}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=render}))) (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=None})))) (keyword*{keywords} (keyword (str{arg}{val=attrs}) (expr{value} (Name (str{id}{val=attrs})))))))))
(root (FunctionDef (str{name}{val=value_from_datadict}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=data}))) (expr (Name (str{id}{val=files}))) (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=files}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=None}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=FILE_INPUT_CONTRADICTION})))) (expr{value} (Call (expr{func} (Name (str{id}{val=object})))))))
(root (ClassDef (str{name}{val=ClearableFileInput}) (expr*{bases} (expr (Name (str{id}{val=FileInput})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=initial_text})))) (expr{value} (Call (expr{func} (Name (str{id}{val=ugettext_lazy}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=input_text})))) (expr{value} (Call (expr{func} (Name (str{id}{val=ugettext_lazy}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=clear_checkbox_label})))) (expr{value} (Call (expr{func} (Name (str{id}{val=ugettext_lazy}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=template_with_initial})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=template_with_clear})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=url_markup_template})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (FunctionDef (str{name}{val=clear_checkbox_name}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Name (str{id}{val=name}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=_STR:0_})))))))
(root (FunctionDef (str{name}{val=clear_checkbox_id}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Name (str{id}{val=name}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=_STR:0_})))))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=attrs})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=substitutions})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=clear_template}))) (expr (Str (str{s}{val=clear_checkbox_label})))) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=initial_text}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=input_text}))) (expr (Str (str{s}{val=}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=clear_checkbox_label}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=template})))) (expr{value} (Str (str{s}{val=_STR:2_})))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=substitutions}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=input})))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=ClearableFileInput}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=render}))) (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=attrs}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=value}))) (expr (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Str (str{s}{val=url}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=template})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=template_with_initial})))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=substitutions}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=initial})))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=format_html}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=url_markup_template}))) (expr (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=url}))) (expr (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=value})))))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=is_required}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=checkbox_name})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=clear_checkbox_name}))) (expr*{args} (expr (Name (str{id}{val=name}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=checkbox_id})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=clear_checkbox_id}))) (expr*{args} (expr (Name (str{id}{val=checkbox_name}))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=substitutions}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=clear_checkbox_name})))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=conditional_escape}))) (expr*{args} (expr (Name (str{id}{val=checkbox_name}))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=substitutions}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=clear_checkbox_id})))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=conditional_escape}))) (expr*{args} (expr (Name (str{id}{val=checkbox_id}))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=substitutions}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=clear})))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=CheckboxInput}))))) (str{attr}{val=render}))) (expr*{args} (expr (Name (str{id}{val=checkbox_name}))) (expr (Name (str{id}{val=False})))) (keyword*{keywords} (keyword (str{arg}{val=attrs}) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=id})))) (expr*{values} (expr (Name (str{id}{val=checkbox_id}))))))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=substitutions}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:2_})))))))) (expr{value} (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=template_with_clear}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=substitutions})))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=mark_safe}))) (expr*{args} (expr (BinOp (expr{left} (Name (str{id}{val=template}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=substitutions}))))))))))
(root (FunctionDef (str{name}{val=value_from_datadict}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=data}))) (expr (Name (str{id}{val=files}))) (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=upload})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=ClearableFileInput}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=value_from_datadict}))) (expr*{args} (expr (Name (str{id}{val=data}))) (expr (Name (str{id}{val=files}))) (expr (Name (str{id}{val=name}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=is_required}))))) (expr (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=CheckboxInput}))))) (str{attr}{val=value_from_datadict}))) (expr*{args} (expr (Name (str{id}{val=data}))) (expr (Name (str{id}{val=files}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=clear_checkbox_name}))) (expr*{args} (expr (Name (str{id}{val=name})))))))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=upload}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=FILE_INPUT_CONTRADICTION})))))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (Return (expr{value} (Name (str{id}{val=upload})))))
(root (ClassDef (str{name}{val=Textarea}) (expr*{bases} (expr (Name (str{id}{val=Widget})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=attrs})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=default_attrs})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:3_})))) (expr*{values} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:2_}))))))))
(root (If (expr{test} (Name (str{id}{val=attrs}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=default_attrs}))) (str{attr}{val=update}))) (expr*{args} (expr (Name (str{id}{val=attrs}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=Textarea}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=default_attrs}))))))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=attrs})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Str (str{s}{val=})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=final_attrs})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=build_attrs}))) (expr*{args} (expr (Name (str{id}{val=attrs})))) (keyword*{keywords} (keyword (str{arg}{val=name}) (expr{value} (Name (str{id}{val=name})))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=format_html}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Call (expr{func} (Name (str{id}{val=flatatt}))) (expr*{args} (expr (Name (str{id}{val=final_attrs})))))) (expr (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=value})))))))))))
(root (ClassDef (str{name}{val=DateTimeBaseInput}) (expr*{bases} (expr (Name (str{id}{val=TextInput})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=format_key})))) (expr{value} (Str (str{s}{val=})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=supports_microseconds})))) (expr{value} (Name (str{id}{val=False})))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=attrs}))) (expr (Name (str{id}{val=format})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=DateTimeBaseInput}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=attrs}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=format})))) (expr{value} (IfExp (expr{test} (Name (str{id}{val=format}))) (expr{body} (Name (str{id}{val=format}))) (expr{orelse} (Name (str{id}{val=None})))))))
(root (FunctionDef (str{name}{val=_format_value}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=formats}))) (str{attr}{val=localize_input}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=format}))) (expr (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=formats}))) (str{attr}{val=get_format}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=format_key})))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))))))))
(root (ClassDef (str{name}{val=DateInput}) (expr*{bases} (expr (Name (str{id}{val=DateTimeBaseInput})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=format_key})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (ClassDef (str{name}{val=DateTimeInput}) (expr*{bases} (expr (Name (str{id}{val=DateTimeBaseInput})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=format_key})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (ClassDef (str{name}{val=TimeInput}) (expr*{bases} (expr (Name (str{id}{val=DateTimeBaseInput})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=format_key})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (FunctionDef (str{name}{val=boolean_check}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=v})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (UnaryOp (unaryop{op} (Not)) (expr{operand} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=v}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=False})))))) (expr (Compare (expr{left} (Name (str{id}{val=v}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Compare (expr{left} (Name (str{id}{val=v}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=})))))))))))))
(root (ClassDef (str{name}{val=CheckboxInput}) (expr*{bases} (expr (Name (str{id}{val=Widget})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=attrs}))) (expr (Name (str{id}{val=check_test})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=CheckboxInput}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=attrs}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=check_test})))) (expr{value} (IfExp (expr{test} (Compare (expr{left} (Name (str{id}{val=check_test}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr{body} (Name (str{id}{val=boolean_check}))) (expr{orelse} (Name (str{id}{val=check_test})))))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=attrs})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=final_attrs})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=build_attrs}))) (expr*{args} (expr (Name (str{id}{val=attrs})))) (keyword*{keywords} (keyword (str{arg}{val=type}) (expr{value} (Str (str{s}{val=_STR:0_})))) (keyword (str{arg}{val=name}) (expr{value} (Name (str{id}{val=name})))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=check_test}))) (expr*{args} (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=final_attrs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=True})))))) (expr (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=False})))))) (expr (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=final_attrs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=format_html}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Call (expr{func} (Name (str{id}{val=flatatt}))) (expr*{args} (expr (Name (str{id}{val=final_attrs})))))))))))
(root (FunctionDef (str{name}{val=value_from_datadict}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=data}))) (expr (Name (str{id}{val=files}))) (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=name}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=data})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=data}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=name}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=values})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:0_})))) (expr*{values} (expr (Name (str{id}{val=True}))) (expr (Name (str{id}{val=False}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=string_types})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=values}))) (str{attr}{val=get}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=lower}))))) (expr (Name (str{id}{val=value}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=bool}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (ClassDef (str{name}{val=Select}) (expr*{bases} (expr (Name (str{id}{val=Widget})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=allow_multiple_selected})))) (expr{value} (Name (str{id}{val=False})))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=attrs}))) (expr (Name (str{id}{val=choices})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Tuple (epsilon)))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=Select}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=attrs}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=choices})))) (expr{value} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Name (str{id}{val=choices}))))))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=attrs}))) (expr (Name (str{id}{val=choices})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Tuple (epsilon)))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Str (str{s}{val=})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=final_attrs})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=build_attrs}))) (expr*{args} (expr (Name (str{id}{val=attrs})))) (keyword*{keywords} (keyword (str{arg}{val=name}) (expr{value} (Name (str{id}{val=name})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=output})))) (expr{value} (List (expr*{elts} (expr (Call (expr{func} (Name (str{id}{val=format_html}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Call (expr{func} (Name (str{id}{val=flatatt}))) (expr*{args} (expr (Name (str{id}{val=final_attrs}))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=options})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=render_options}))) (expr*{args} (expr (Name (str{id}{val=choices}))) (expr (List (expr*{elts} (expr (Name (str{id}{val=value})))))))))))
(root (If (expr{test} (Name (str{id}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=output}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=options}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=output}))) (str{attr}{val=append}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=mark_safe}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=\n}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=output})))))))))))
(root (FunctionDef (str{name}{val=render_option}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=selected_choices}))) (expr (Name (str{id}{val=option_value}))) (expr (Name (str{id}{val=option_label})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=option_value}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=option_value})))) (expr{value} (Str (str{s}{val=})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=option_value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=option_value}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=option_value}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=selected_choices})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=selected_html})))) (expr{value} (Call (expr{func} (Name (str{id}{val=mark_safe}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=allow_multiple_selected}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=selected_choices}))) (str{attr}{val=remove}))) (expr*{args} (expr (Name (str{id}{val=option_value}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=selected_html})))) (expr{value} (Str (str{s}{val=})))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=format_html}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=option_value}))) (expr (Name (str{id}{val=selected_html}))) (expr (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=option_label})))))))))))
(root (FunctionDef (str{name}{val=render_options}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=choices}))) (expr (Name (str{id}{val=selected_choices})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=selected_choices})))) (expr{value} (Call (expr{func} (Name (str{id}{val=set}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=v})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=v}))) (expr{iter} (Name (str{id}{val=selected_choices}))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=output})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=option_value}))) (expr (Name (str{id}{val=option_label})))))) (expr{iter} (Call (expr{func} (Name (str{id}{val=chain}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=choices}))) (expr (Name (str{id}{val=choices})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=option_label}))) (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=list}))) (expr (Name (str{id}{val=tuple}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=output}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=format_html}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=option_value}))))))))))))))
(root (For (expr{target} (Name (str{id}{val=option}))) (expr{iter} (Name (str{id}{val=option_label}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=output}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=render_option}))) (expr*{args} (expr (Name (str{id}{val=selected_choices})))) (expr{starargs} (Name (str{id}{val=option}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=output}))) (str{attr}{val=append}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=output}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=render_option}))) (expr*{args} (expr (Name (str{id}{val=selected_choices}))) (expr (Name (str{id}{val=option_value}))) (expr (Name (str{id}{val=option_label})))))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=\n}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=output}))))))))
(root (ClassDef (str{name}{val=NullBooleanSelect}) (expr*{bases} (expr (Name (str{id}{val=Select})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=attrs})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=choices})))) (expr{value} (Tuple (expr*{elts} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Call (expr{func} (Name (str{id}{val=ugettext_lazy}))) (expr*{args} (expr (Str (str{s}{val=Unknown}))))))))) (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=2}))) (expr (Call (expr{func} (Name (str{id}{val=ugettext_lazy}))) (expr*{args} (expr (Str (str{s}{val=Yes}))))))))) (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=3}))) (expr (Call (expr{func} (Name (str{id}{val=ugettext_lazy}))) (expr*{args} (expr (Str (str{s}{val=No}))))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=NullBooleanSelect}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=attrs}))) (expr (Name (str{id}{val=choices}))))))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=attrs}))) (expr (Name (str{id}{val=choices})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Tuple (epsilon)))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Subscript (expr{value} (Dict (expr*{keys} (expr (Name (str{id}{val=True}))) (expr (Name (str{id}{val=False}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_})))) (expr*{values} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_})))))) (slice{slice} (Index (expr{value} (Name (str{id}{val=value})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=KeyError}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=NullBooleanSelect}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=render}))) (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=attrs}))) (expr (Name (str{id}{val=choices}))))))))
(root (FunctionDef (str{name}{val=value_from_datadict}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=data}))) (expr (Name (str{id}{val=files}))) (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=data}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=None}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=True}))) (expr (Str (str{s}{val=True}))) (expr (Str (str{s}{val=3}))) (expr (Str (str{s}{val=False}))) (expr (Name (str{id}{val=False})))) (expr*{values} (expr (Name (str{id}{val=True}))) (expr (Name (str{id}{val=True}))) (expr (Name (str{id}{val=True}))) (expr (Name (str{id}{val=False}))) (expr (Name (str{id}{val=False}))) (expr (Name (str{id}{val=False})))))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=None}))))))))
(root (ClassDef (str{name}{val=SelectMultiple}) (expr*{bases} (expr (Name (str{id}{val=Select})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=allow_multiple_selected})))) (expr{value} (Name (str{id}{val=True})))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=attrs}))) (expr (Name (str{id}{val=choices})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Tuple (epsilon)))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=final_attrs})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=build_attrs}))) (expr*{args} (expr (Name (str{id}{val=attrs})))) (keyword*{keywords} (keyword (str{arg}{val=name}) (expr{value} (Name (str{id}{val=name})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=output})))) (expr{value} (List (expr*{elts} (expr (Call (expr{func} (Name (str{id}{val=format_html}))) (expr*{args} (expr (Str (str{s}{val=<select multiple="multiple"{0}>}))) (expr (Call (expr{func} (Name (str{id}{val=flatatt}))) (expr*{args} (expr (Name (str{id}{val=final_attrs}))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=options})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=render_options}))) (expr*{args} (expr (Name (str{id}{val=choices}))) (expr (Name (str{id}{val=value}))))))))
(root (If (expr{test} (Name (str{id}{val=options}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=output}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=options}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=output}))) (str{attr}{val=append}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=mark_safe}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=\n}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=output})))))))))))
(root (FunctionDef (str{name}{val=value_from_datadict}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=data}))) (expr (Name (str{id}{val=files}))) (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=data}))) (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=MultiValueDict}))) (expr (Name (str{id}{val=MergeDict}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=data}))) (str{attr}{val=getlist}))) (expr*{args} (expr (Name (str{id}{val=name}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=data}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=None}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=python_2_unicode_compatible}))))))
(root (ClassDef (str{name}{val=ChoiceInput}) (expr*{bases} (expr (Name (str{id}{val=SubWidget})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=input_type})))) (expr{value} (Name (str{id}{val=None})))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=attrs}))) (expr (Name (str{id}{val=choice}))) (expr (Name (str{id}{val=index})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=name})))) (expr{value} (Name (str{id}{val=name})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=value})))) (expr{value} (Name (str{id}{val=value})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=attrs})))) (expr{value} (Name (str{id}{val=attrs})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=choice_value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=choice}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=choice_label})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=choice}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=index})))) (expr{value} (Name (str{id}{val=index})))))
(root (If (expr{test} (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=attrs})))))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=attrs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:1_}))))))) (operator{op} (Add)) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_%d}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=index})))))))
(root (FunctionDef (str{name}{val=__str__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=render})))))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=attrs}))) (expr (Name (str{id}{val=choices})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Tuple (epsilon)))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=id_for_label}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=label_for})))) (expr{value} (Call (expr{func} (Name (str{id}{val=format_html}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=id_for_label}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=label_for})))) (expr{value} (Str (str{s}{val=})))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=format_html}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=label_for}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=tag}))))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=choice_label}))))))))
(root (FunctionDef (str{name}{val=is_checked}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=value}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=choice_value}))))))))
(root (FunctionDef (str{name}{val=tag}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=final_attrs})))) (expr{value} (Call (expr{func} (Name (str{id}{val=dict}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=attrs})))) (keyword*{keywords} (keyword (str{arg}{val=type}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=input_type})))) (keyword (str{arg}{val=name}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=name})))) (keyword (str{arg}{val=value}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=choice_value})))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=is_checked}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=final_attrs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=format_html}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Call (expr{func} (Name (str{id}{val=flatatt}))) (expr*{args} (expr (Name (str{id}{val=final_attrs})))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=id_for_label}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=attrs}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=}))))))))
(root (ClassDef (str{name}{val=RadioChoiceInput}) (expr*{bases} (expr (Name (str{id}{val=ChoiceInput})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=input_type})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=RadioChoiceInput}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=value}))))))))
(root (ClassDef (str{name}{val=CheckboxChoiceInput}) (expr*{bases} (expr (Name (str{id}{val=ChoiceInput})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=input_type})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=CheckboxChoiceInput}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=set}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=v})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=v}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=value}))))))))))))
(root (FunctionDef (str{name}{val=is_checked}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=choice_value}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=value}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=python_2_unicode_compatible}))))))
(root (ClassDef (str{name}{val=ChoiceFieldRenderer}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=choice_input_class})))) (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=outer_html})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=inner_html})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=attrs}))) (expr (Name (str{id}{val=choices})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=name})))) (expr{value} (Name (str{id}{val=name})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=value})))) (expr{value} (Name (str{id}{val=value})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=attrs})))) (expr{value} (Name (str{id}{val=attrs})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=choices})))) (expr{value} (Name (str{id}{val=choices})))))
(root (FunctionDef (str{name}{val=__getitem__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=idx})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=choice})))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=choices}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=idx})))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=choice_input_class}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=name}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=value}))) (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=attrs}))) (str{attr}{val=copy}))))) (expr (Name (str{id}{val=choice}))) (expr (Name (str{id}{val=idx}))))))))
(root (FunctionDef (str{name}{val=__str__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=render})))))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=id_})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=attrs}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=output})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=i}))) (expr (Name (str{id}{val=choice})))))) (expr{iter} (Call (expr{func} (Name (str{id}{val=enumerate}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=choices})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=choice_value}))) (expr (Name (str{id}{val=choice_label}))))))) (expr{value} (Name (str{id}{val=choice})))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=choice_label}))) (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=tuple}))) (expr (Name (str{id}{val=list}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=attrs_plus})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=attrs}))) (str{attr}{val=copy})))))))
(root (If (expr{test} (Name (str{id}{val=id_}))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Subscript (expr{value} (Name (str{id}{val=attrs_plus}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:1_}))))))) (operator{op} (Add)) (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=_{0}}))) (str{attr}{val=format}))) (expr*{args} (expr (Name (str{id}{val=i}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=sub_ul_renderer})))) (expr{value} (Call (expr{func} (Name (str{id}{val=ChoiceFieldRenderer}))) (keyword*{keywords} (keyword (str{arg}{val=name}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=name})))) (keyword (str{arg}{val=value}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=value})))) (keyword (str{arg}{val=attrs}) (expr{value} (Name (str{id}{val=attrs_plus})))) (keyword (str{arg}{val=choices}) (expr{value} (Name (str{id}{val=choice_label})))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=sub_ul_renderer}))) (str{attr}{val=choice_input_class})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=choice_input_class})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=output}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=format_html}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=inner_html})))) (keyword*{keywords} (keyword (str{arg}{val=choice_value}) (expr{value} (Name (str{id}{val=choice_value})))) (keyword (str{arg}{val=sub_widgets}) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sub_ul_renderer}))) (str{attr}{val=render}))))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=w})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=choice_input_class}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=name}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=value}))) (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=attrs}))) (str{attr}{val=copy}))))) (expr (Name (str{id}{val=choice}))) (expr (Name (str{id}{val=i}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=output}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=format_html}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=inner_html})))) (keyword*{keywords} (keyword (str{arg}{val=choice_value}) (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=w}))))))) (keyword (str{arg}{val=sub_widgets}) (expr{value} (Str (str{s}{val=}))))))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=format_html}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=outer_html})))) (keyword*{keywords} (keyword (str{arg}{val=id_attr}) (expr{value} (IfExp (expr{test} (Name (str{id}{val=id_}))) (expr{body} (Call (expr{func} (Name (str{id}{val=format_html}))) (expr*{args} (expr (Str (str{s}{val= id="{0}"}))) (expr (Name (str{id}{val=id_})))))) (expr{orelse} (Str (str{s}{val=})))))) (keyword (str{arg}{val=content}) (expr{value} (Call (expr{func} (Name (str{id}{val=mark_safe}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=\n}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=output})))))))))))))))
(root (ClassDef (str{name}{val=RadioFieldRenderer}) (expr*{bases} (expr (Name (str{id}{val=ChoiceFieldRenderer})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=choice_input_class})))) (expr{value} (Name (str{id}{val=RadioChoiceInput})))))
(root (ClassDef (str{name}{val=CheckboxFieldRenderer}) (expr*{bases} (expr (Name (str{id}{val=ChoiceFieldRenderer})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=choice_input_class})))) (expr{value} (Name (str{id}{val=CheckboxChoiceInput})))))
(root (ClassDef (str{name}{val=RendererMixin}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=renderer})))) (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_empty_value})))) (expr{value} (Name (str{id}{val=None})))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=renderer})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=kwargs}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=renderer}))) (expr (Name (str{id}{val=None}))))))))
(root (If (expr{test} (Name (str{id}{val=renderer}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=renderer})))) (expr{value} (Name (str{id}{val=renderer})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=RendererMixin}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (FunctionDef (str{name}{val=subwidgets}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=attrs}))) (expr (Name (str{id}{val=choices})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Tuple (epsilon)))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=widget}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get_renderer}))) (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=attrs}))) (expr (Name (str{id}{val=choices})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Yield (expr{value} (Name (str{id}{val=widget})))))))
(root (FunctionDef (str{name}{val=get_renderer}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=attrs}))) (expr (Name (str{id}{val=choices})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Tuple (epsilon)))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_empty_value})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=final_attrs})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=build_attrs}))) (expr*{args} (expr (Name (str{id}{val=attrs}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=choices})))) (expr{value} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=chain}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=choices}))) (expr (Name (str{id}{val=choices})))))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=renderer}))) (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=final_attrs}))) (expr (Name (str{id}{val=choices}))))))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=attrs}))) (expr (Name (str{id}{val=choices})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Tuple (epsilon)))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get_renderer}))) (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=attrs}))) (expr (Name (str{id}{val=choices})))))) (str{attr}{val=render})))))))
(root (FunctionDef (str{name}{val=id_for_label}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=id_})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=id_}))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=id_}))) (operator{op} (Add)) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Return (expr{value} (Name (str{id}{val=id_})))))
(root (ClassDef (str{name}{val=RadioSelect}) (expr*{bases} (expr (Name (str{id}{val=RendererMixin}))) (expr (Name (str{id}{val=Select})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=renderer})))) (expr{value} (Name (str{id}{val=RadioFieldRenderer})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_empty_value})))) (expr{value} (Str (str{s}{val=})))))
(root (ClassDef (str{name}{val=CheckboxSelectMultiple}) (expr*{bases} (expr (Name (str{id}{val=RendererMixin}))) (expr (Name (str{id}{val=SelectMultiple})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=renderer})))) (expr{value} (Name (str{id}{val=CheckboxFieldRenderer})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_empty_value})))) (expr{value} (List (epsilon)))))
(root (ClassDef (str{name}{val=MultiWidget}) (expr*{bases} (expr (Name (str{id}{val=Widget})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=widgets}))) (expr (Name (str{id}{val=attrs})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=widgets})))) (expr{value} (ListComp (expr{elt} (IfExp (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=w}))) (expr (Name (str{id}{val=type})))))) (expr{body} (Call (expr{func} (Name (str{id}{val=w}))))) (expr{orelse} (Name (str{id}{val=w}))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=w}))) (expr{iter} (Name (str{id}{val=widgets})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=MultiWidget}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=attrs}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=is_hidden}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=all}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Attribute (expr{value} (Name (str{id}{val=w}))) (str{attr}{val=is_hidden}))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=w}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=widgets}))))))))))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=attrs})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=is_localized}))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=widget}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=widgets}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=widget}))) (str{attr}{val=is_localized})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=is_localized})))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=list})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=decompress}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=output})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=final_attrs})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=build_attrs}))) (expr*{args} (expr (Name (str{id}{val=attrs}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=id_})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=final_attrs}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))))))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=i}))) (expr (Name (str{id}{val=widget})))))) (expr{iter} (Call (expr{func} (Name (str{id}{val=enumerate}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=widgets})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=widget_value})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=value}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=i})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=IndexError}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=widget_value})))) (expr{value} (Name (str{id}{val=None})))))
(root (If (expr{test} (Name (str{id}{val=id_}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=final_attrs})))) (expr{value} (Call (expr{func} (Name (str{id}{val=dict}))) (expr*{args} (expr (Name (str{id}{val=final_attrs})))) (keyword*{keywords} (keyword (str{arg}{val=id}) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=id_}))) (expr (Name (str{id}{val=i}))))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=output}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=widget}))) (str{attr}{val=render}))) (expr*{args} (expr (BinOp (expr{left} (Name (str{id}{val=name}))) (operator{op} (Add)) (expr{right} (BinOp (expr{left} (Str (str{s}{val=_%s}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=i}))))))) (expr (Name (str{id}{val=widget_value}))) (expr (Name (str{id}{val=final_attrs})))))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=mark_safe}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=format_output}))) (expr*{args} (expr (Name (str{id}{val=output})))))))))))
(root (FunctionDef (str{name}{val=id_for_label}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=id_})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=id_}))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=id_}))) (operator{op} (Add)) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Return (expr{value} (Name (str{id}{val=id_})))))
(root (FunctionDef (str{name}{val=value_from_datadict}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=data}))) (expr (Name (str{id}{val=files}))) (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (ListComp (expr{elt} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=widget}))) (str{attr}{val=value_from_datadict}))) (expr*{args} (expr (Name (str{id}{val=data}))) (expr (Name (str{id}{val=files}))) (expr (BinOp (expr{left} (Name (str{id}{val=name}))) (operator{op} (Add)) (expr{right} (BinOp (expr{left} (Str (str{s}{val=_%s}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=i})))))))))) (comprehension*{generators} (comprehension (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=i}))) (expr (Name (str{id}{val=widget})))))) (expr{iter} (Call (expr{func} (Name (str{id}{val=enumerate}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=widgets}))))))))))))
(root (FunctionDef (str{name}{val=format_output}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=rendered_widgets})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=rendered_widgets}))))))))
(root (FunctionDef (str{name}{val=decompress}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=NotImplementedError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=_get_media}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=media})))) (expr{value} (Call (expr{func} (Name (str{id}{val=Media})))))))
(root (For (expr{target} (Name (str{id}{val=w}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=widgets}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=media})))) (expr{value} (BinOp (expr{left} (Name (str{id}{val=media}))) (operator{op} (Add)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=w}))) (str{attr}{val=media})))))))
(root (Return (expr{value} (Name (str{id}{val=media})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=media})))) (expr{value} (Call (expr{func} (Name (str{id}{val=property}))) (expr*{args} (expr (Name (str{id}{val=_get_media}))))))))
(root (FunctionDef (str{name}{val=__deepcopy__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=memo})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=obj})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=MultiWidget}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__deepcopy__}))) (expr*{args} (expr (Name (str{id}{val=memo}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=obj}))) (str{attr}{val=widgets})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=copy}))) (str{attr}{val=deepcopy}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=widgets}))))))))
(root (Return (expr{value} (Name (str{id}{val=obj})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=needs_multipart_form}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=any}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Attribute (expr{value} (Name (str{id}{val=w}))) (str{attr}{val=needs_multipart_form}))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=w}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=widgets}))))))))))))
(root (ClassDef (str{name}{val=SplitDateTimeWidget}) (expr*{bases} (expr (Name (str{id}{val=MultiWidget})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=supports_microseconds})))) (expr{value} (Name (str{id}{val=False})))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=attrs}))) (expr (Name (str{id}{val=date_format}))) (expr (Name (str{id}{val=time_format})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=widgets})))) (expr{value} (Tuple (expr*{elts} (expr (Call (expr{func} (Name (str{id}{val=DateInput}))) (keyword*{keywords} (keyword (str{arg}{val=attrs}) (expr{value} (Name (str{id}{val=attrs})))) (keyword (str{arg}{val=format}) (expr{value} (Name (str{id}{val=date_format}))))))) (expr (Call (expr{func} (Name (str{id}{val=TimeInput}))) (keyword*{keywords} (keyword (str{arg}{val=attrs}) (expr{value} (Name (str{id}{val=attrs})))) (keyword (str{arg}{val=format}) (expr{value} (Name (str{id}{val=time_format}))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=SplitDateTimeWidget}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=widgets}))) (expr (Name (str{id}{val=attrs}))))))))
(root (FunctionDef (str{name}{val=decompress}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=value}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=to_current_timezone}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (Return (expr{value} (List (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=date}))))) (expr (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=time}))))) (str{attr}{val=replace}))) (keyword*{keywords} (keyword (str{arg}{val=microsecond}) (expr{value} (Num (int{n}{val=0}))))))))))))
(root (Return (expr{value} (List (expr*{elts} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))))))))
(root (ClassDef (str{name}{val=SplitHiddenDateTimeWidget}) (expr*{bases} (expr (Name (str{id}{val=SplitDateTimeWidget})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=attrs}))) (expr (Name (str{id}{val=date_format}))) (expr (Name (str{id}{val=time_format})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=SplitHiddenDateTimeWidget}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=attrs}))) (expr (Name (str{id}{val=date_format}))) (expr (Name (str{id}{val=time_format}))))))))
(root (For (expr{target} (Name (str{id}{val=widget}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=widgets}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=widget}))) (str{attr}{val=input_type})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (ImportFrom (str{module}{val=django.http.cookie}) (alias*{names} (alias (str{name}{val=SimpleCookie})) (alias (str{name}{val=parse_cookie}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.http.request}) (alias*{names} (alias (str{name}{val=HttpRequest})) (alias (str{name}{val=QueryDict})) (alias (str{name}{val=RawPostDataException})) (alias (str{name}{val=UnreadablePostError})) (alias (str{name}{val=build_request_repr}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.http.response}) (alias*{names} (alias (str{name}{val=HttpResponse})) (alias (str{name}{val=StreamingHttpResponse})) (alias (str{name}{val=HttpResponseRedirect})) (alias (str{name}{val=HttpResponsePermanentRedirect})) (alias (str{name}{val=HttpResponseNotModified})) (alias (str{name}{val=HttpResponseBadRequest})) (alias (str{name}{val=HttpResponseForbidden})) (alias (str{name}{val=HttpResponseNotFound})) (alias (str{name}{val=HttpResponseNotAllowed})) (alias (str{name}{val=HttpResponseGone})) (alias (str{name}{val=HttpResponseServerError})) (alias (str{name}{val=Http404})) (alias (str{name}{val=BadHeaderError})) (alias (str{name}{val=JsonResponse}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.http.utils}) (alias*{names} (alias (str{name}{val=fix_location_header})) (alias (str{name}{val=conditional_content_removal}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__all__})))) (expr{value} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=_STR:3_}))) (expr (Str (str{s}{val=_STR:4_}))) (expr (Str (str{s}{val=UnreadablePostError}))) (expr (Str (str{s}{val=build_request_repr}))) (expr (Str (str{s}{val=HttpResponse}))) (expr (Str (str{s}{val=StreamingHttpResponse}))) (expr (Str (str{s}{val=HttpResponseRedirect}))) (expr (Str (str{s}{val=HttpResponsePermanentRedirect}))) (expr (Str (str{s}{val=HttpResponseNotModified}))) (expr (Str (str{s}{val=HttpResponseBadRequest}))) (expr (Str (str{s}{val=HttpResponseForbidden}))) (expr (Str (str{s}{val=HttpResponseNotFound}))) (expr (Str (str{s}{val=HttpResponseNotAllowed}))) (expr (Str (str{s}{val=HttpResponseGone}))) (expr (Str (str{s}{val=HttpResponseServerError}))) (expr (Str (str{s}{val=Http404}))) (expr (Str (str{s}{val=BadHeaderError}))) (expr (Str (str{s}{val=fix_location_header}))) (expr (Str (str{s}{val=JsonResponse}))) (expr (Str (str{s}{val=conditional_content_removal}))))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=force_str}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.six.moves}) (alias*{names} (alias (str{name}{val=http_cookies}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_cookie_encodes_correctly})))) (expr{value} (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=http_cookies}))) (str{attr}{val=SimpleCookie}))))) (str{attr}{val=value_encode}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val="\073"})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_tc})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=http_cookies}))) (str{attr}{val=SimpleCookie})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=_tc}))) (str{attr}{val=load}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_cookie_allows_colon_in_names})))) (expr{value} (Name (str{id}{val=True})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Attribute (expr{value} (Name (str{id}{val=http_cookies}))) (str{attr}{val=CookieError}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_cookie_allows_colon_in_names})))) (expr{value} (Name (str{id}{val=False})))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=_cookie_encodes_correctly}))) (expr (Name (str{id}{val=_cookie_allows_colon_in_names})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=SimpleCookie})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=http_cookies}))) (str{attr}{val=SimpleCookie})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=Morsel})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=http_cookies}))) (str{attr}{val=Morsel})))))
(root (ClassDef (str{name}{val=SimpleCookie}) (expr*{bases} (expr (Attribute (expr{value} (Name (str{id}{val=http_cookies}))) (str{attr}{val=SimpleCookie})))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=_cookie_encodes_correctly}))))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=value_encode}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=val})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=val}))) (expr (Name (str{id}{val=encoded}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=SimpleCookie}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=value_encode}))) (expr*{args} (expr (Name (str{id}{val=val}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=encoded})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=encoded}))) (str{attr}{val=replace}))) (expr*{args} (expr (Str (str{s}{val=;}))) (expr (Str (str{s}{val=_STR:2_})))))) (str{attr}{val=replace}))) (expr*{args} (expr (Str (str{s}{val=,}))) (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Str (str{s}{val=\}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=encoded})))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=encoded}))) (str{attr}{val=startswith}))) (expr*{args} (expr (Str (str{s}{val="}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=encoded})))) (expr{value} (BinOp (expr{left} (BinOp (expr{left} (Str (str{s}{val="}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=encoded}))))) (operator{op} (Add)) (expr{right} (Str (str{s}{val="})))))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=val}))) (expr (Name (str{id}{val=encoded}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=_cookie_allows_colon_in_names}))))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=load}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=rawdata})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=bad_cookies})))) (expr{value} (Call (expr{func} (Name (str{id}{val=set})))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=PY2}))) (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=rawdata}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=rawdata})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_str}))) (expr*{args} (expr (Name (str{id}{val=rawdata}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=SimpleCookie}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=load}))) (expr*{args} (expr (Name (str{id}{val=rawdata}))))))))
(root (For (expr{target} (Name (str{id}{val=key}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=bad_cookies}))) (stmt*{body} (stmt (Pass)))))
(root (Delete (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=self}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key}))))))))))
(root (FunctionDef (str{name}{val=_BaseCookie__set}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=real_value}))) (expr (Name (str{id}{val=coded_value})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=key})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_str}))) (expr*{args} (expr (Name (str{id}{val=key}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=M})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (Call (expr{func} (Name (str{id}{val=Morsel}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=M}))) (str{attr}{val=set}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=real_value}))) (expr (Name (str{id}{val=coded_value}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=dict}))) (str{attr}{val=__setitem__}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=M}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Attribute (expr{value} (Name (str{id}{val=http_cookies}))) (str{attr}{val=CookieError}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Str (str{s}{val=_STR:0_})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=bad_cookies})))) (expr{value} (Call (expr{func} (Name (str{id}{val=set})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=bad_cookies}))) (str{attr}{val=add}))) (expr*{args} (expr (Name (str{id}{val=key}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=dict}))) (str{attr}{val=__setitem__}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=http_cookies}))) (str{attr}{val=Morsel}))))))))))
(root (FunctionDef (str{name}{val=parse_cookie}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=cookie})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=cookie}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Dict (epsilon)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=cookie}))) (expr (Attribute (expr{value} (Name (str{id}{val=http_cookies}))) (str{attr}{val=BaseCookie})))))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=c})))) (expr{value} (Call (expr{func} (Name (str{id}{val=SimpleCookie})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=c}))) (str{attr}{val=load}))) (expr*{args} (expr (Name (str{id}{val=cookie}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Attribute (expr{value} (Name (str{id}{val=http_cookies}))) (str{attr}{val=CookieError}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Dict (epsilon)))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=c})))) (expr{value} (Name (str{id}{val=cookie})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cookiedict})))) (expr{value} (Dict (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=key}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=c}))) (str{attr}{val=keys}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=cookiedict}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key})))))))) (expr{value} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=c}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=key})))))) (str{attr}{val=value})))))
(root (Return (expr{value} (Name (str{id}{val=cookiedict})))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=base64})))))
(root (Import (alias*{names} (alias (str{name}{val=binascii})))))
(root (Import (alias*{names} (alias (str{name}{val=cgi})))))
(root (Import (alias*{names} (alias (str{name}{val=sys})))))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.exceptions}) (alias*{names} (alias (str{name}{val=SuspiciousMultipartForm}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.datastructures}) (alias*{names} (alias (str{name}{val=MultiValueDict}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=force_text}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.text}) (alias*{names} (alias (str{name}{val=unescape_entities}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.files.uploadhandler}) (alias*{names} (alias (str{name}{val=StopUpload})) (alias (str{name}{val=SkipFile})) (alias (str{name}{val=StopFutureHandlers}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__all__})))) (expr{value} (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))))))))
(root (ClassDef (str{name}{val=MultiPartParserError}) (expr*{bases} (expr (Name (str{id}{val=Exception})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (ClassDef (str{name}{val=InputStreamExhausted}) (expr*{bases} (expr (Name (str{id}{val=Exception})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=RAW})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=FILE})))) (expr{value} (Str (str{s}{val=file})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=FIELD})))) (expr{value} (Str (str{s}{val=field})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_BASE64_DECODE_ERROR})))) (expr{value} (IfExp (expr{test} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=PY2}))) (expr{body} (Name (str{id}{val=TypeError}))) (expr{orelse} (Attribute (expr{value} (Name (str{id}{val=binascii}))) (str{attr}{val=Error})))))))
(root (ClassDef (str{name}{val=MultiPartParser}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=META}))) (expr (Name (str{id}{val=input_data}))) (expr (Name (str{id}{val=upload_handlers}))) (expr (Name (str{id}{val=encoding})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=content_type})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=META}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=META}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=CONTENT_TYPE}))) (expr (Str (str{s}{val=})))))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=content_type}))) (str{attr}{val=startswith}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_})))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=MultiPartParserError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=content_type}))))))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=ctypes}))) (expr (Name (str{id}{val=opts}))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=parse_header}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=content_type}))) (str{attr}{val=encode}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=boundary})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=opts}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=boundary}))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=cgi}))) (str{attr}{val=valid_boundary}))) (expr*{args} (expr (Name (str{id}{val=boundary}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=MultiPartParserError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=boundary}))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=content_length})))) (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=META}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=META}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_}))) (expr (Num (int{n}{val=0}))))))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=ValueError}))) (expr (Name (str{id}{val=TypeError})))))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=content_length})))) (expr{value} (Num (int{n}{val=0})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=content_length}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=MultiPartParserError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=content_length}))))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=boundary}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=boundary})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=boundary}))) (str{attr}{val=encode}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_boundary})))) (expr{value} (Name (str{id}{val=boundary})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_input_data})))) (expr{value} (Name (str{id}{val=input_data})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=possible_sizes})))) (expr{value} (ListComp (expr{elt} (Attribute (expr{value} (Name (str{id}{val=x}))) (str{attr}{val=chunk_size}))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=x}))) (expr{iter} (Name (str{id}{val=upload_handlers}))) (expr*{ifs} (expr (Attribute (expr{value} (Name (str{id}{val=x}))) (str{attr}{val=chunk_size}))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_chunk_size})))) (expr{value} (Call (expr{func} (Name (str{id}{val=min}))) (expr*{args} (expr (BinOp (expr{left} (List (expr*{elts} (expr (BinOp (expr{left} (BinOp (expr{left} (Num (int{n}{val=2}))) (operator{op} (Pow)) (expr{right} (Num (int{n}{val=31}))))) (operator{op} (Sub)) (expr{right} (Num (int{n}{val=4})))))))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=possible_sizes}))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_meta})))) (expr{value} (Name (str{id}{val=META})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_encoding})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=encoding}))) (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=DEFAULT_CHARSET}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_content_length})))) (expr{value} (Name (str{id}{val=content_length})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_upload_handlers})))) (expr{value} (Name (str{id}{val=upload_handlers})))))
(root (FunctionDef (str{name}{val=parse}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=django.http}) (alias*{names} (alias (str{name}{val=QueryDict}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=encoding})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_encoding})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=handlers})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_upload_handlers})))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_content_length}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Call (expr{func} (Name (str{id}{val=QueryDict}))) (expr*{args} (expr (Str (str{s}{val=})))) (keyword*{keywords} (keyword (str{arg}{val=encoding}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_encoding}))))))) (expr (Call (expr{func} (Name (str{id}{val=MultiValueDict}))))))))))
(root (For (expr{target} (Name (str{id}{val=handler}))) (expr{iter} (Name (str{id}{val=handlers}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=handle_raw_input}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_input_data}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_meta}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_content_length}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_boundary}))) (expr (Name (str{id}{val=encoding}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=result}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Subscript (expr{value} (Name (str{id}{val=result}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (expr (Subscript (expr{value} (Name (str{id}{val=result}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_post})))) (expr{value} (Call (expr{func} (Name (str{id}{val=QueryDict}))) (expr*{args} (expr (Str (str{s}{val=})))) (keyword*{keywords} (keyword (str{arg}{val=mutable}) (expr{value} (Name (str{id}{val=True})))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_files})))) (expr{value} (Call (expr{func} (Name (str{id}{val=MultiValueDict})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=stream})))) (expr{value} (Call (expr{func} (Name (str{id}{val=LazyStream}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=ChunkIter}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_input_data}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_chunk_size})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=old_field_name})))) (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=counters})))) (expr{value} (BinOp (expr{left} (List (expr*{elts} (expr (Num (int{n}{val=0})))))) (operator{op} (Mult)) (expr{right} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=handlers}))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=item_type}))) (expr (Name (str{id}{val=meta_data}))) (expr (Name (str{id}{val=field_stream})))))) (expr{iter} (Call (expr{func} (Name (str{id}{val=Parser}))) (expr*{args} (expr (Name (str{id}{val=stream}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_boundary})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=old_field_name}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=handle_file_complete}))) (expr*{args} (expr (Name (str{id}{val=old_field_name}))) (expr (Name (str{id}{val=counters}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=old_field_name})))) (expr{value} (Name (str{id}{val=None})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=disposition})))) (expr{value} (Subscript (expr{value} (Subscript (expr{value} (Name (str{id}{val=meta_data}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=field_name})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=disposition}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (str{attr}{val=strip})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=KeyError}))) (expr (Name (str{id}{val=IndexError}))) (expr (Name (str{id}{val=AttributeError})))))) (stmt*{body} (stmt (Pass)))))))
(root (Continue))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=transfer_encoding})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=meta_data}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=transfer_encoding}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=transfer_encoding})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=transfer_encoding}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (str{attr}{val=strip})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=field_name})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=field_name}))) (expr (Name (str{id}{val=encoding})))) (keyword*{keywords} (keyword (str{arg}{val=errors}) (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=item_type}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=FIELD})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=transfer_encoding}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=raw_data})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=field_stream}))) (str{attr}{val=read})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=data})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=base64}))) (str{attr}{val=b64decode}))) (expr*{args} (expr (Name (str{id}{val=raw_data}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=_BASE64_DECODE_ERROR}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=data})))) (expr{value} (Name (str{id}{val=raw_data})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=data})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=field_stream}))) (str{attr}{val=read})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_post}))) (str{attr}{val=appendlist}))) (expr*{args} (expr (Name (str{id}{val=field_name}))) (expr (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=data}))) (expr (Name (str{id}{val=encoding})))) (keyword*{keywords} (keyword (str{arg}{val=errors}) (expr{value} (Str (str{s}{val=replace}))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Name (str{id}{val=item_type}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=FILE})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=file_name})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=disposition}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=file_name}))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=file_name})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=file_name}))) (expr (Name (str{id}{val=encoding})))) (keyword*{keywords} (keyword (str{arg}{val=errors}) (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=file_name})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=IE_sanitize}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=unescape_entities}))) (expr*{args} (expr (Name (str{id}{val=file_name})))))))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=content_type}))) (expr (Name (str{id}{val=content_type_extra}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=meta_data}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=}))) (expr (Dict (epsilon)))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=content_type})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=content_type}))) (str{attr}{val=strip})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=charset})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=content_type_extra}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=content_length})))) (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=meta_data}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=IndexError}))) (expr (Name (str{id}{val=TypeError}))) (expr (Name (str{id}{val=ValueError})))))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=content_length})))) (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=counters})))) (expr{value} (BinOp (expr{left} (List (expr*{elts} (expr (Num (int{n}{val=0})))))) (operator{op} (Mult)) (expr{right} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=handlers}))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (For (expr{target} (Name (str{id}{val=handler}))) (expr{iter} (Name (str{id}{val=handlers}))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=new_file}))) (expr*{args} (expr (Name (str{id}{val=field_name}))) (expr (Name (str{id}{val=file_name}))) (expr (Name (str{id}{val=content_type}))) (expr (Name (str{id}{val=content_length}))) (expr (Name (str{id}{val=charset}))) (expr (Name (str{id}{val=content_type_extra}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=StopFutureHandlers}))) (stmt*{body} (stmt (Pass)))))))
(root (Break))
(root (For (expr{target} (Name (str{id}{val=chunk}))) (expr{iter} (Name (str{id}{val=field_stream}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=transfer_encoding}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=over_bytes})))) (expr{value} (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=chunk})))))) (operator{op} (Mod)) (expr{right} (Num (int{n}{val=4})))))))
(root (If (expr{test} (Name (str{id}{val=over_bytes}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=over_chunk})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=field_stream}))) (str{attr}{val=read}))) (expr*{args} (expr (BinOp (expr{left} (Num (int{n}{val=4}))) (operator{op} (Sub)) (expr{right} (Name (str{id}{val=over_bytes}))))))))))
(root (AugAssign (expr{target} (Name (str{id}{val=chunk}))) (operator{op} (Add)) (expr{value} (Name (str{id}{val=over_chunk})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=chunk})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=base64}))) (str{attr}{val=b64decode}))) (expr*{args} (expr (Name (str{id}{val=chunk}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=Exception}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=msg})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=e})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=reraise}))) (expr*{args} (expr (Name (str{id}{val=MultiPartParserError}))) (expr (Call (expr{func} (Name (str{id}{val=MultiPartParserError}))) (expr*{args} (expr (Name (str{id}{val=msg})))))) (expr (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=exc_info}))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=2}))))))))))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=i}))) (expr (Name (str{id}{val=handler})))))) (expr{iter} (Call (expr{func} (Name (str{id}{val=enumerate}))) (expr*{args} (expr (Name (str{id}{val=handlers})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=chunk_length})))) (expr{value} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=chunk}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=chunk})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=receive_data_chunk}))) (expr*{args} (expr (Name (str{id}{val=chunk}))) (expr (Subscript (expr{value} (Name (str{id}{val=counters}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=i}))))))))))))
(root (AugAssign (expr{target} (Subscript (expr{value} (Name (str{id}{val=counters}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=i}))))))) (operator{op} (Add)) (expr{value} (Name (str{id}{val=chunk_length})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=chunk}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Break))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=SkipFile}))) (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_close_files})))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=exhaust}))) (expr*{args} (expr (Name (str{id}{val=field_stream}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=old_field_name})))) (expr{value} (Name (str{id}{val=field_name})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=exhaust}))) (expr*{args} (expr (Name (str{id}{val=stream}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=StopUpload}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_close_files})))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=connection_reset}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=exhaust}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_input_data}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=exhaust}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_input_data}))))))))
(root (For (expr{target} (Name (str{id}{val=handler}))) (expr{iter} (Name (str{id}{val=handlers}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=retval})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=upload_complete})))))))
(root (If (expr{test} (Name (str{id}{val=retval}))) (stmt*{body} (stmt (Pass)))))
(root (Break))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_post}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_files}))))))))
(root (FunctionDef (str{name}{val=handle_file_complete}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=old_field_name}))) (expr (Name (str{id}{val=counters})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=i}))) (expr (Name (str{id}{val=handler})))))) (expr{iter} (Call (expr{func} (Name (str{id}{val=enumerate}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_upload_handlers})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=file_obj})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=file_complete}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=counters}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=i}))))))))))))
(root (If (expr{test} (Name (str{id}{val=file_obj}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_files}))) (str{attr}{val=appendlist}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=old_field_name}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_encoding})))) (keyword*{keywords} (keyword (str{arg}{val=errors}) (expr{value} (Str (str{s}{val=_STR:0_}))))))) (expr (Name (str{id}{val=file_obj}))))))))
(root (Break))
(root (FunctionDef (str{name}{val=IE_sanitize}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=filename})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=filename}))) (expr (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=filename}))) (slice{slice} (Slice (expr{lower} (BinOp (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=filename}))) (str{attr}{val=rfind}))) (expr*{args} (expr (Str (str{s}{val=\})))))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=1}))))))))) (str{attr}{val=strip}))))))))))
(root (FunctionDef (str{name}{val=_close_files}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=handler}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_upload_handlers}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=handler}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=file}))) (str{attr}{val=close})))))))
(root (ClassDef (str{name}{val=LazyStream}) (expr*{bases} (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=Iterator})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=producer}))) (expr (Name (str{id}{val=length})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_producer})))) (expr{value} (Name (str{id}{val=producer})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_empty})))) (expr{value} (Name (str{id}{val=False})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_leftover})))) (expr{value} (Str (str{s}{val=})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=length})))) (expr{value} (Name (str{id}{val=length})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=position})))) (expr{value} (Num (int{n}{val=0})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_remaining})))) (expr{value} (Name (str{id}{val=length})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_unget_history})))) (expr{value} (List (epsilon)))))
(root (FunctionDef (str{name}{val=tell}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=position})))))
(root (FunctionDef (str{name}{val=read}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=size})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=parts}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=remaining})))) (expr{value} (IfExp (expr{test} (Compare (expr{left} (Name (str{id}{val=size}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr{body} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_remaining}))) (expr{orelse} (Name (str{id}{val=size})))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=remaining}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Yield (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=self}))))))))))
(root (Return (epsilon)))
(root (While (expr{test} (Compare (expr{left} (Name (str{id}{val=remaining}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Assert (expr{test} (Compare (expr{left} (Name (str{id}{val=remaining}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (expr{msg} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=chunk})))) (expr{value} (Call (expr{func} (Name (str{id}{val=next}))) (expr*{args} (expr (Name (str{id}{val=self}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=emitting})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=chunk}))) (slice{slice} (Slice (expr{upper} (Name (str{id}{val=remaining})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=unget}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=chunk}))) (slice{slice} (Slice (expr{lower} (Name (str{id}{val=remaining}))))))))))))
(root (AugAssign (expr{target} (Name (str{id}{val=remaining}))) (operator{op} (Sub)) (expr{value} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=emitting}))))))))
(root (Expr (expr{value} (Yield (expr{value} (Name (str{id}{val=emitting})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=out})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=}))) (str{attr}{val=join}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=parts}))))))))))
(root (Return (expr{value} (Name (str{id}{val=out})))))
(root (FunctionDef (str{name}{val=__next__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_leftover}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=output})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_leftover})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_leftover})))) (expr{value} (Str (str{s}{val=})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=output})))) (expr{value} (Call (expr{func} (Name (str{id}{val=next}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_producer}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_unget_history})))) (expr{value} (List (epsilon)))))
(root (AugAssign (expr{target} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=position}))) (operator{op} (Add)) (expr{value} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=output}))))))))
(root (Return (expr{value} (Name (str{id}{val=output})))))
(root (FunctionDef (str{name}{val=close}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_producer})))) (expr{value} (List (epsilon)))))
(root (FunctionDef (str{name}{val=__iter__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=self})))))
(root (FunctionDef (str{name}{val=unget}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=bytes})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=bytes}))))) (stmt*{body} (stmt (Pass)))))
(root (Return (epsilon)))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_update_unget_history}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=bytes})))))))))))
(root (AugAssign (expr{target} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=position}))) (operator{op} (Sub)) (expr{value} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=bytes}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_leftover})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=}))) (str{attr}{val=join}))) (expr*{args} (expr (List (expr*{elts} (expr (Name (str{id}{val=bytes}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_leftover})))))))))))
(root (FunctionDef (str{name}{val=_update_unget_history}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=num_bytes})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_unget_history})))) (expr{value} (BinOp (expr{left} (List (expr*{elts} (expr (Name (str{id}{val=num_bytes})))))) (operator{op} (Add)) (expr{right} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_unget_history}))) (slice{slice} (Slice (expr{upper} (Num (int{n}{val=49})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=number_equal})))) (expr{value} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (ListComp (expr{elt} (Name (str{id}{val=current_number}))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=current_number}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_unget_history}))) (expr*{ifs} (expr (Compare (expr{left} (Name (str{id}{val=current_number}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=num_bytes}))))))))))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=number_equal}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=40})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=SuspiciousMultipartForm}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_ normal uploaded files. Check for malicious upload activity; if there is none, report this to the Django developers.}))))))))
(root (ClassDef (str{name}{val=ChunkIter}) (expr*{bases} (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=Iterator})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=flo}))) (expr (Name (str{id}{val=chunk_size})))) (expr*{defaults} (expr (BinOp (expr{left} (Num (int{n}{val=64}))) (operator{op} (Mult)) (expr{right} (Num (int{n}{val=1024})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=flo})))) (expr{value} (Name (str{id}{val=flo})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=chunk_size})))) (expr{value} (Name (str{id}{val=chunk_size})))))
(root (FunctionDef (str{name}{val=__next__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=data})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=flo}))) (str{attr}{val=read}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=chunk_size}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=InputStreamExhausted}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=StopIteration})))))))
(root (If (expr{test} (Name (str{id}{val=data}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=data})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=StopIteration})))))))
(root (FunctionDef (str{name}{val=__iter__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=self})))))
(root (ClassDef (str{name}{val=InterBoundaryIter}) (expr*{bases} (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=Iterator})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=stream}))) (expr (Name (str{id}{val=boundary})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_stream})))) (expr{value} (Name (str{id}{val=stream})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_boundary})))) (expr{value} (Name (str{id}{val=boundary})))))
(root (FunctionDef (str{name}{val=__iter__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=self})))))
(root (FunctionDef (str{name}{val=__next__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=LazyStream}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=BoundaryIter}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_stream}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_boundary})))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=InputStreamExhausted}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=StopIteration})))))))
(root (ClassDef (str{name}{val=BoundaryIter}) (expr*{bases} (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=Iterator})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=stream}))) (expr (Name (str{id}{val=boundary})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_stream})))) (expr{value} (Name (str{id}{val=stream})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_boundary})))) (expr{value} (Name (str{id}{val=boundary})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_done})))) (expr{value} (Name (str{id}{val=False})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_rollback})))) (expr{value} (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=boundary})))))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=6})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=unused_char})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_stream}))) (str{attr}{val=read}))) (expr*{args} (expr (Num (int{n}{val=1}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=unused_char}))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=InputStreamExhausted})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_stream}))) (str{attr}{val=unget}))) (expr*{args} (expr (Name (str{id}{val=unused_char}))))))))
(root (FunctionDef (str{name}{val=__iter__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=self})))))
(root (FunctionDef (str{name}{val=__next__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_done}))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=StopIteration})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=stream})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_stream})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=rollback})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_rollback})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=bytes_read})))) (expr{value} (Num (int{n}{val=0})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=chunks})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=bytes}))) (expr{iter} (Name (str{id}{val=stream}))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=bytes_read}))) (operator{op} (Add)) (expr{value} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=bytes}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=chunks}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=bytes}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=bytes_read}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Name (str{id}{val=rollback})))))) (stmt*{body} (stmt (Pass)))))
(root (Break))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=bytes}))))) (stmt*{body} (stmt (Pass)))))
(root (Break))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_done})))) (expr{value} (Name (str{id}{val=True})))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=chunks}))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=StopIteration})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=chunk})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=chunks}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=boundary})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_find_boundary}))) (expr*{args} (expr (Name (str{id}{val=chunk}))) (expr (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=chunk})))))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_rollback})))))))))))
(root (If (expr{test} (Name (str{id}{val=boundary}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=end}))) (expr (Name (str{id}{val=next}))))))) (expr{value} (Name (str{id}{val=boundary})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=stream}))) (str{attr}{val=unget}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=chunk}))) (slice{slice} (Slice (expr{lower} (Name (str{id}{val=next}))))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_done})))) (expr{value} (Name (str{id}{val=True})))))
(root (Return (expr{value} (Subscript (expr{value} (Name (str{id}{val=chunk}))) (slice{slice} (Slice (expr{upper} (Name (str{id}{val=end})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Subscript (expr{value} (Name (str{id}{val=chunk}))) (slice{slice} (Slice (expr{upper} (UnaryOp (unaryop{op} (USub)) (expr{operand} (Name (str{id}{val=rollback}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_done})))) (expr{value} (Name (str{id}{val=True})))))
(root (Return (expr{value} (Name (str{id}{val=chunk})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=stream}))) (str{attr}{val=unget}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=chunk}))) (slice{slice} (Slice (expr{lower} (UnaryOp (unaryop{op} (USub)) (expr{operand} (Name (str{id}{val=rollback}))))))))))))))
(root (Return (expr{value} (Subscript (expr{value} (Name (str{id}{val=chunk}))) (slice{slice} (Slice (expr{upper} (UnaryOp (unaryop{op} (USub)) (expr{operand} (Name (str{id}{val=rollback})))))))))))
(root (FunctionDef (str{name}{val=_find_boundary}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=data}))) (expr (Name (str{id}{val=eof})))) (expr*{defaults} (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=index})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=data}))) (str{attr}{val=find}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_boundary}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=index}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=None})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=end})))) (expr{value} (Name (str{id}{val=index})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=next})))) (expr{value} (BinOp (expr{left} (Name (str{id}{val=index}))) (operator{op} (Add)) (expr{right} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_boundary}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=last})))) (expr{value} (Call (expr{func} (Name (str{id}{val=max}))) (expr*{args} (expr (Num (int{n}{val=0}))) (expr (BinOp (expr{left} (Name (str{id}{val=end}))) (operator{op} (Sub)) (expr{right} (Num (int{n}{val=1}))))))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=data}))) (slice{slice} (Slice (expr{lower} (Name (str{id}{val=last}))) (expr{upper} (BinOp (expr{left} (Name (str{id}{val=last}))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=1}))))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=\n})))))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=end}))) (operator{op} (Sub)) (expr{value} (Num (int{n}{val=1})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=last})))) (expr{value} (Call (expr{func} (Name (str{id}{val=max}))) (expr*{args} (expr (Num (int{n}{val=0}))) (expr (BinOp (expr{left} (Name (str{id}{val=end}))) (operator{op} (Sub)) (expr{right} (Num (int{n}{val=1}))))))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=data}))) (slice{slice} (Slice (expr{lower} (Name (str{id}{val=last}))) (expr{upper} (BinOp (expr{left} (Name (str{id}{val=last}))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=1}))))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=})))))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=end}))) (operator{op} (Sub)) (expr{value} (Num (int{n}{val=1})))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=end}))) (expr (Name (str{id}{val=next}))))))))
(root (FunctionDef (str{name}{val=exhaust}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=stream_or_iterable})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=iterator})))) (expr{value} (Name (str{id}{val=None})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=iterator})))) (expr{value} (Call (expr{func} (Name (str{id}{val=iter}))) (expr*{args} (expr (Name (str{id}{val=stream_or_iterable}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=TypeError}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=iterator})))) (expr{value} (Call (expr{func} (Name (str{id}{val=ChunkIter}))) (expr*{args} (expr (Name (str{id}{val=stream_or_iterable}))) (expr (Num (int{n}{val=16384}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=iterator}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=MultiPartParserError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (For (expr{target} (Name (str{id}{val=__}))) (expr{iter} (Name (str{id}{val=iterator}))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (FunctionDef (str{name}{val=parse_boundary_stream}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=stream}))) (expr (Name (str{id}{val=max_header_size})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=chunk})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=stream}))) (str{attr}{val=read}))) (expr*{args} (expr (Name (str{id}{val=max_header_size}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=header_end})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=chunk}))) (str{attr}{val=find}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=_parse_header}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=line})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=main_value_pair}))) (expr (Name (str{id}{val=params}))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=parse_header}))) (expr*{args} (expr (Name (str{id}{val=line}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=value}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=main_value_pair}))) (str{attr}{val=split}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Num (int{n}{val=1}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ValueError}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=line}))))))))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=name}))) (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=params})))))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=header_end}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=-1})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=stream}))) (str{attr}{val=unget}))) (expr*{args} (expr (Name (str{id}{val=chunk}))))))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=RAW}))) (expr (Dict (epsilon))) (expr (Name (str{id}{val=stream}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=header})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=chunk}))) (slice{slice} (Slice (expr{upper} (Name (str{id}{val=header_end})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=stream}))) (str{attr}{val=unget}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=chunk}))) (slice{slice} (Slice (expr{lower} (BinOp (expr{left} (Name (str{id}{val=header_end}))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=4}))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=TYPE})))) (expr{value} (Name (str{id}{val=RAW})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=outdict})))) (expr{value} (Dict (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=line}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=header}))) (str{attr}{val=split}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=name}))) (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=params})))))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=_parse_header}))) (expr*{args} (expr (Name (str{id}{val=line}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ValueError}))) (stmt*{body} (stmt (Pass)))))))
(root (Continue))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=name}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=TYPE})))) (expr{value} (Name (str{id}{val=FIELD})))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=params}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=TYPE})))) (expr{value} (Name (str{id}{val=FILE})))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=outdict}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=name})))))))) (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=params}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=TYPE}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=RAW})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=stream}))) (str{attr}{val=unget}))) (expr*{args} (expr (Name (str{id}{val=chunk}))))))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=TYPE}))) (expr (Name (str{id}{val=outdict}))) (expr (Name (str{id}{val=stream}))))))))
(root (ClassDef (str{name}{val=Parser}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=stream}))) (expr (Name (str{id}{val=boundary})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_stream})))) (expr{value} (Name (str{id}{val=stream})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_separator})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=boundary})))))))
(root (FunctionDef (str{name}{val=__iter__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=boundarystream})))) (expr{value} (Call (expr{func} (Name (str{id}{val=InterBoundaryIter}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_stream}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_separator}))))))))
(root (For (expr{target} (Name (str{id}{val=sub_stream}))) (expr{iter} (Name (str{id}{val=boundarystream}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Yield (expr{value} (Call (expr{func} (Name (str{id}{val=parse_boundary_stream}))) (expr*{args} (expr (Name (str{id}{val=sub_stream}))) (expr (Num (int{n}{val=1024}))))))))))
(root (FunctionDef (str{name}{val=parse_header}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=line})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=plist})))) (expr{value} (Call (expr{func} (Name (str{id}{val=_parse_header_params}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=line}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=key})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=plist}))) (str{attr}{val=pop}))) (expr*{args} (expr (Num (int{n}{val=0})))))) (str{attr}{val=lower}))))) (str{attr}{val=decode}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=pdict})))) (expr{value} (Dict (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=p}))) (expr{iter} (Name (str{id}{val=plist}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=i})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=p}))) (str{attr}{val=find}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=i}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=name})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=p}))) (slice{slice} (Slice (expr{upper} (Name (str{id}{val=i}))))))) (str{attr}{val=strip}))))) (str{attr}{val=lower}))))) (str{attr}{val=decode}))) (expr*{args} (expr (Str (str{s}{val=ascii}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=p}))) (slice{slice} (Slice (expr{lower} (BinOp (expr{left} (Name (str{id}{val=i}))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=1}))))))))) (str{attr}{val=strip})))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=value})))))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Num (int{n}{val=2})))))) (expr (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=value}))) (slice{slice} (Slice (expr{upper} (Num (int{n}{val=1}))))))) (cmpop*{ops} (cmpop (Eq)) (cmpop (Eq))) (expr*{comparators} (expr (Subscript (expr{value} (Name (str{id}{val=value}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=-1}))))))) (expr (Str (str{s}{val="}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=value}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=1}))) (expr{upper} (Num (int{n}{val=-1})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=replace}))) (expr*{args} (expr (Str (str{s}{val=\\}))) (expr (Str (str{s}{val=\})))))) (str{attr}{val=replace}))) (expr*{args} (expr (Str (str{s}{val=\"}))) (expr (Str (str{s}{val="}))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=pdict}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=name})))))))) (expr{value} (Name (str{id}{val=value})))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=pdict}))))))))
(root (FunctionDef (str{name}{val=_parse_header_params}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=s})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=plist})))) (expr{value} (List (epsilon)))))
(root (While (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=s}))) (slice{slice} (Slice (expr{upper} (Num (int{n}{val=1}))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=s})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=s}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=1})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=end})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=s}))) (str{attr}{val=find}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (While (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=end}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (expr (BinOp (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=s}))) (str{attr}{val=count}))) (expr*{args} (expr (Str (str{s}{val="}))) (expr (Num (int{n}{val=0}))) (expr (Name (str{id}{val=end})))))) (operator{op} (Mod)) (expr{right} (Num (int{n}{val=2})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=end})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=s}))) (str{attr}{val=find}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (BinOp (expr{left} (Name (str{id}{val=end}))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=1}))))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=end}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=end})))) (expr{value} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=s}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=f})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=s}))) (slice{slice} (Slice (expr{upper} (Name (str{id}{val=end})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=plist}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=strip}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=s})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=s}))) (slice{slice} (Slice (expr{lower} (Name (str{id}{val=end})))))))))
(root (Return (expr{value} (Name (str{id}{val=plist})))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=copy})))))
(root (Import (alias*{names} (alias (str{name}{val=os})))))
(root (Import (alias*{names} (alias (str{name}{val=re})))))
(root (Import (alias*{names} (alias (str{name}{val=sys})))))
(root (ImportFrom (str{module}{val=io}) (alias*{names} (alias (str{name}{val=BytesIO}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=itertools}) (alias*{names} (alias (str{name}{val=chain}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=pprint}) (alias*{names} (alias (str{name}{val=pformat}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core}) (alias*{names} (alias (str{name}{val=signing}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.exceptions}) (alias*{names} (alias (str{name}{val=DisallowedHost})) (alias (str{name}{val=ImproperlyConfigured}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.files}) (alias*{names} (alias (str{name}{val=uploadhandler}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.http.multipartparser}) (alias*{names} (alias (str{name}{val=MultiPartParser})) (alias (str{name}{val=MultiPartParserError}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.datastructures}) (alias*{names} (alias (str{name}{val=MultiValueDict})) (alias (str{name}{val=ImmutableList}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=force_bytes})) (alias (str{name}{val=force_text})) (alias (str{name}{val=force_str})) (alias (str{name}{val=iri_to_uri}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.six.moves.urllib.parse}) (alias*{names} (alias (str{name}{val=parse_qsl})) (alias (str{name}{val=urlencode})) (alias (str{name}{val=quote})) (alias (str{name}{val=urljoin})) (alias (str{name}{val=urlsplit}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=RAISE_ERROR})))) (expr{value} (Call (expr{func} (Name (str{id}{val=object})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=absolute_http_url_re})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=I}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=host_validation_re})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (ClassDef (str{name}{val=UnreadablePostError}) (expr*{bases} (expr (Name (str{id}{val=IOError})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (ClassDef (str{name}{val=RawPostDataException}) (expr*{bases} (expr (Name (str{id}{val=Exception})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (ClassDef (str{name}{val=HttpRequest}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_encoding})))) (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_upload_handlers})))) (expr{value} (List (epsilon)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=GET})))) (expr{value} (Call (expr{func} (Name (str{id}{val=QueryDict}))) (keyword*{keywords} (keyword (str{arg}{val=mutable}) (expr{value} (Name (str{id}{val=True})))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=POST})))) (expr{value} (Call (expr{func} (Name (str{id}{val=QueryDict}))) (keyword*{keywords} (keyword (str{arg}{val=mutable}) (expr{value} (Name (str{id}{val=True})))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=COOKIES})))) (expr{value} (Dict (epsilon)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=META})))) (expr{value} (Dict (epsilon)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=FILES})))) (expr{value} (Call (expr{func} (Name (str{id}{val=MultiValueDict})))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=path})))) (expr{value} (Str (str{s}{val=})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=path_info})))) (expr{value} (Str (str{s}{val=})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=method})))) (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=resolver_match})))) (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_post_parse_error})))) (expr{value} (Name (str{id}{val=False})))))
(root (FunctionDef (str{name}{val=__repr__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=build_request_repr}))) (expr*{args} (expr (Name (str{id}{val=self}))))))))
(root (FunctionDef (str{name}{val=get_host}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=USE_X_FORWARDED_HOST}))) (expr (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=META}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=host})))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=META}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=META})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=host})))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=META}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=host})))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=META}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=server_port})))) (expr{value} (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=META}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=SERVER_PORT}))))))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=server_port}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (IfExp (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=is_secure}))))) (expr{body} (Str (str{s}{val=_STR:0_}))) (expr{orelse} (Str (str{s}{val=80})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=host})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=%s:%s}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=host}))) (expr (Name (str{id}{val=server_port}))))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=DEBUG}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=host})))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=domain}))) (expr (Name (str{id}{val=port}))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=split_domain_port}))) (expr*{args} (expr (Name (str{id}{val=host}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=domain}))) (expr (Call (expr{func} (Name (str{id}{val=validate_host}))) (expr*{args} (expr (Name (str{id}{val=domain}))) (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=ALLOWED_HOSTS}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=host})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=msg})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=host})))))))
(root (If (expr{test} (Name (str{id}{val=domain}))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=msg}))) (operator{op} (Add)) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=domain})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=msg}))) (operator{op} (Add)) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=DisallowedHost}))) (expr*{args} (expr (Name (str{id}{val=msg}))))))))
(root (FunctionDef (str{name}{val=get_full_path}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=%s%s}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=path}))) (expr (IfExp (expr{test} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=META}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=})))))) (expr{body} (BinOp (expr{left} (Str (str{s}{val=?}))) (operator{op} (Add)) (expr{right} (Call (expr{func} (Name (str{id}{val=iri_to_uri}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=META}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=}))))))))))) (expr{orelse} (Str (str{s}{val=}))))))))))))
(root (FunctionDef (str{name}{val=get_signed_cookie}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=default}))) (expr (Name (str{id}{val=salt}))) (expr (Name (str{id}{val=max_age})))) (expr*{defaults} (expr (Name (str{id}{val=RAISE_ERROR}))) (expr (Str (str{s}{val=}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cookie_value})))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=COOKIES}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=KeyError}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=default}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=RAISE_ERROR})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=default})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Raise (epsilon)))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=signing}))) (str{attr}{val=get_cookie_signer}))) (keyword*{keywords} (keyword (str{arg}{val=salt}) (expr{value} (BinOp (expr{left} (Name (str{id}{val=key}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=salt}))))))))) (str{attr}{val=unsign}))) (expr*{args} (expr (Name (str{id}{val=cookie_value})))) (keyword*{keywords} (keyword (str{arg}{val=max_age}) (expr{value} (Name (str{id}{val=max_age})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Attribute (expr{value} (Name (str{id}{val=signing}))) (str{attr}{val=BadSignature}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=default}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=RAISE_ERROR})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=default})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Raise (epsilon)))
(root (Return (expr{value} (Name (str{id}{val=value})))))
(root (FunctionDef (str{name}{val=build_absolute_uri}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=location})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=location}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=location})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=//%s}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get_full_path})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=bits})))) (expr{value} (Call (expr{func} (Name (str{id}{val=urlsplit}))) (expr*{args} (expr (Name (str{id}{val=location}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=bits}))) (str{attr}{val=scheme}))) (expr (Attribute (expr{value} (Name (str{id}{val=bits}))) (str{attr}{val=netloc})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=current_uri})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=_STR:0_}))) (str{attr}{val=format}))) (keyword*{keywords} (keyword (str{arg}{val=scheme}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=scheme})))) (keyword (str{arg}{val=host}) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get_host})))))) (keyword (str{arg}{val=path}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=path})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=location})))) (expr{value} (Call (expr{func} (Name (str{id}{val=urljoin}))) (expr*{args} (expr (Name (str{id}{val=current_uri}))) (expr (Name (str{id}{val=location}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=iri_to_uri}))) (expr*{args} (expr (Name (str{id}{val=location}))))))))
(root (FunctionDef (str{name}{val=_get_scheme}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (IfExp (expr{test} (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=environ}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_})))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=on})))))) (expr{body} (Str (str{s}{val=_STR:0_}))) (expr{orelse} (Str (str{s}{val=_STR:3_})))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=scheme}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=SECURE_PROXY_SSL_HEADER}))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=header}))) (expr (Name (str{id}{val=value}))))))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=SECURE_PROXY_SSL_HEADER})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ValueError}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ImproperlyConfigured}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=META}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=header}))) (expr (Name (str{id}{val=None})))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_get_scheme})))))))
(root (FunctionDef (str{name}{val=is_secure}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=scheme}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=is_ajax}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=META}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:1_}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=encoding}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_encoding})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Attribute (expr{value} (Name (str{id}{val=encoding}))) (str{attr}{val=setter}))))))
(root (FunctionDef (str{name}{val=encoding}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=val})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_encoding})))) (expr{value} (Name (str{id}{val=val})))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Delete (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_get}))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Delete (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_post}))))))
(root (FunctionDef (str{name}{val=_initialize_handlers}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_upload_handlers})))) (expr{value} (ListComp (expr{elt} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=uploadhandler}))) (str{attr}{val=load_handler}))) (expr*{args} (expr (Name (str{id}{val=handler}))) (expr (Name (str{id}{val=self})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=handler}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=FILE_UPLOAD_HANDLERS})))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=upload_handlers}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_upload_handlers}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_initialize_handlers})))))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_upload_handlers})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Attribute (expr{value} (Name (str{id}{val=upload_handlers}))) (str{attr}{val=setter}))))))
(root (FunctionDef (str{name}{val=upload_handlers}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=upload_handlers})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=AttributeError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_upload_handlers})))) (expr{value} (Name (str{id}{val=upload_handlers})))))
(root (FunctionDef (str{name}{val=parse_file_upload}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=META}))) (expr (Name (str{id}{val=post_data})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=upload_handlers})))) (expr{value} (Call (expr{func} (Name (str{id}{val=ImmutableList}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=upload_handlers})))) (keyword*{keywords} (keyword (str{arg}{val=warning}) (expr{value} (Str (str{s}{val=You cannot alter upload handlers after the upload has been processed.})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=parser})))) (expr{value} (Call (expr{func} (Name (str{id}{val=MultiPartParser}))) (expr*{args} (expr (Name (str{id}{val=META}))) (expr (Name (str{id}{val=post_data}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=upload_handlers}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=encoding}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=parse})))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=body}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Str (str{s}{val=_STR:0_})))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_read_started}))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=RawPostDataException}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_body})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=read})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=IOError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=reraise}))) (expr*{args} (expr (Name (str{id}{val=UnreadablePostError}))) (expr (Call (expr{func} (Name (str{id}{val=UnreadablePostError}))) (expr{starargs} (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=args}))))) (expr (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=exc_info}))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=2}))))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_stream})))) (expr{value} (Call (expr{func} (Name (str{id}{val=BytesIO}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_body}))))))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_body})))))
(root (FunctionDef (str{name}{val=_mark_post_parse_error}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_post})))) (expr{value} (Call (expr{func} (Name (str{id}{val=QueryDict}))) (expr*{args} (expr (Str (str{s}{val=}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_files})))) (expr{value} (Call (expr{func} (Name (str{id}{val=MultiValueDict})))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_post_parse_error})))) (expr{value} (Name (str{id}{val=True})))))
(root (FunctionDef (str{name}{val=_load_post_and_files}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=method}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_post}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_files}))))))) (expr{value} (Tuple (expr*{elts} (expr (Call (expr{func} (Name (str{id}{val=QueryDict}))) (expr*{args} (expr (Str (str{s}{val=})))) (keyword*{keywords} (keyword (str{arg}{val=encoding}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_encoding}))))))) (expr (Call (expr{func} (Name (str{id}{val=MultiValueDict}))))))))))
(root (Return (epsilon)))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_read_started}))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Str (str{s}{val=_STR:0_}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_mark_post_parse_error})))))))
(root (Return (epsilon)))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=META}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=})))))) (str{attr}{val=startswith}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=data})))) (expr{value} (Call (expr{func} (Name (str{id}{val=BytesIO}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_body}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=data})))) (expr{value} (Name (str{id}{val=self})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_post}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_files}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=parse_file_upload}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=META}))) (expr (Name (str{id}{val=data}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=MultiPartParserError}))) (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_mark_post_parse_error})))))))
(root (Raise (epsilon)))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=META}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=})))))) (str{attr}{val=startswith}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_post}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_files}))))))) (expr{value} (Tuple (expr*{elts} (expr (Call (expr{func} (Name (str{id}{val=QueryDict}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=body})))) (keyword*{keywords} (keyword (str{arg}{val=encoding}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_encoding}))))))) (expr (Call (expr{func} (Name (str{id}{val=MultiValueDict}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_post}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_files}))))))) (expr{value} (Tuple (expr*{elts} (expr (Call (expr{func} (Name (str{id}{val=QueryDict}))) (expr*{args} (expr (Str (str{s}{val=})))) (keyword*{keywords} (keyword (str{arg}{val=encoding}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_encoding}))))))) (expr (Call (expr{func} (Name (str{id}{val=MultiValueDict}))))))))))
(root (FunctionDef (str{name}{val=close}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=f}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=chain}))) (str{attr}{val=from_iterable}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Subscript (expr{value} (Name (str{id}{val=l}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=l}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_files}))) (str{attr}{val=lists})))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=f}))) (str{attr}{val=close})))))))
(root (FunctionDef (str{name}{val=read}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_read_started})))) (expr{value} (Name (str{id}{val=True})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_stream}))) (str{attr}{val=read}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=IOError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=reraise}))) (expr*{args} (expr (Name (str{id}{val=UnreadablePostError}))) (expr (Call (expr{func} (Name (str{id}{val=UnreadablePostError}))) (expr{starargs} (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=args}))))) (expr (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=exc_info}))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=2}))))))))))))
(root (FunctionDef (str{name}{val=readline}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_read_started})))) (expr{value} (Name (str{id}{val=True})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_stream}))) (str{attr}{val=readline}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=IOError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=reraise}))) (expr*{args} (expr (Name (str{id}{val=UnreadablePostError}))) (expr (Call (expr{func} (Name (str{id}{val=UnreadablePostError}))) (expr{starargs} (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=args}))))) (expr (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=exc_info}))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=2}))))))))))))
(root (FunctionDef (str{name}{val=xreadlines}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (While (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=buf})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=readline})))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=buf}))))) (stmt*{body} (stmt (Pass)))))
(root (Break))
(root (Expr (expr{value} (Yield (expr{value} (Name (str{id}{val=buf})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__iter__})))) (expr{value} (Name (str{id}{val=xreadlines})))))
(root (FunctionDef (str{name}{val=readlines}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=iter}))) (expr*{args} (expr (Name (str{id}{val=self})))))))))))
(root (ClassDef (str{name}{val=QueryDict}) (expr*{bases} (expr (Name (str{id}{val=MultiValueDict})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_mutable})))) (expr{value} (Name (str{id}{val=True})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_encoding})))) (expr{value} (Name (str{id}{val=None})))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=query_string}))) (expr (Name (str{id}{val=mutable}))) (expr (Name (str{id}{val=encoding})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=False}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=QueryDict}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__})))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=encoding}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=encoding})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=DEFAULT_CHARSET})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=encoding})))) (expr{value} (Name (str{id}{val=encoding})))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=PY3}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=query_string}))) (expr (Name (str{id}{val=bytes})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=query_string})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=query_string}))) (str{attr}{val=decode})))))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value})))))) (expr{iter} (Call (expr{func} (Name (str{id}{val=parse_qsl}))) (expr*{args} (expr (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=query_string}))) (expr (Str (str{s}{val=}))))))) (keyword*{keywords} (keyword (str{arg}{val=keep_blank_values}) (expr{value} (Name (str{id}{val=True})))) (keyword (str{arg}{val=encoding}) (expr{value} (Name (str{id}{val=encoding}))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=appendlist}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value})))))) (expr{iter} (Call (expr{func} (Name (str{id}{val=parse_qsl}))) (expr*{args} (expr (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=query_string}))) (expr (Str (str{s}{val=}))))))) (keyword*{keywords} (keyword (str{arg}{val=keep_blank_values}) (expr{value} (Name (str{id}{val=True}))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=appendlist}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=encoding})))) (keyword*{keywords} (keyword (str{arg}{val=errors}) (expr{value} (Str (str{s}{val=replace}))))))) (expr (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=encoding})))) (keyword*{keywords} (keyword (str{arg}{val=errors}) (expr{value} (Str (str{s}{val=replace}))))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_mutable})))) (expr{value} (Name (str{id}{val=mutable})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=encoding}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_encoding}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_encoding})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=DEFAULT_CHARSET})))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_encoding})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Attribute (expr{value} (Name (str{id}{val=encoding}))) (str{attr}{val=setter}))))))
(root (FunctionDef (str{name}{val=encoding}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_encoding})))) (expr{value} (Name (str{id}{val=value})))))
(root (FunctionDef (str{name}{val=_assert_mutable}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_mutable}))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=AttributeError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=__setitem__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_assert_mutable})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=key})))) (expr{value} (Call (expr{func} (Name (str{id}{val=bytes_to_text}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=encoding}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=bytes_to_text}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=encoding}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=QueryDict}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__setitem__}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value}))))))))
(root (FunctionDef (str{name}{val=__delitem__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_assert_mutable})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=QueryDict}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__delitem__}))) (expr*{args} (expr (Name (str{id}{val=key}))))))))
(root (FunctionDef (str{name}{val=__copy__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__class__}))) (expr*{args} (expr (Str (str{s}{val=})))) (keyword*{keywords} (keyword (str{arg}{val=mutable}) (expr{value} (Name (str{id}{val=True})))) (keyword (str{arg}{val=encoding}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=encoding})))))))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=iterlists}))) (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=result}))) (str{attr}{val=setlist}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value}))))))))
(root (Return (expr{value} (Name (str{id}{val=result})))))
(root (FunctionDef (str{name}{val=__deepcopy__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=memo})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__class__}))) (expr*{args} (expr (Str (str{s}{val=})))) (keyword*{keywords} (keyword (str{arg}{val=mutable}) (expr{value} (Name (str{id}{val=True})))) (keyword (str{arg}{val=encoding}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=encoding})))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=memo}))) (slice{slice} (Index (expr{value} (Call (expr{func} (Name (str{id}{val=id}))) (expr*{args} (expr (Name (str{id}{val=self}))))))))))) (expr{value} (Name (str{id}{val=result})))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=iterlists}))) (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=result}))) (str{attr}{val=setlist}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=copy}))) (str{attr}{val=deepcopy}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=memo})))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=copy}))) (str{attr}{val=deepcopy}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=memo})))))))))))
(root (Return (expr{value} (Name (str{id}{val=result})))))
(root (FunctionDef (str{name}{val=setlist}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=list_})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_assert_mutable})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=key})))) (expr{value} (Call (expr{func} (Name (str{id}{val=bytes_to_text}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=encoding}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=list_})))) (expr{value} (ListComp (expr{elt} (Call (expr{func} (Name (str{id}{val=bytes_to_text}))) (expr*{args} (expr (Name (str{id}{val=elt}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=encoding})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=elt}))) (expr{iter} (Name (str{id}{val=list_})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=QueryDict}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=setlist}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=list_}))))))))
(root (FunctionDef (str{name}{val=setlistdefault}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=default_list})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_assert_mutable})))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=QueryDict}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=setlistdefault}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=default_list}))))))))
(root (FunctionDef (str{name}{val=appendlist}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_assert_mutable})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=key})))) (expr{value} (Call (expr{func} (Name (str{id}{val=bytes_to_text}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=encoding}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=bytes_to_text}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=encoding}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=QueryDict}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=appendlist}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value}))))))))
(root (FunctionDef (str{name}{val=pop}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key})))) (str{vararg}{val=args}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_assert_mutable})))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=QueryDict}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=pop}))) (expr*{args} (expr (Name (str{id}{val=key})))) (expr{starargs} (Name (str{id}{val=args})))))))
(root (FunctionDef (str{name}{val=popitem}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_assert_mutable})))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=QueryDict}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=popitem})))))))
(root (FunctionDef (str{name}{val=clear}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_assert_mutable})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=QueryDict}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=clear})))))))
(root (FunctionDef (str{name}{val=setdefault}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=default})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_assert_mutable})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=key})))) (expr{value} (Call (expr{func} (Name (str{id}{val=bytes_to_text}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=encoding}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=default})))) (expr{value} (Call (expr{func} (Name (str{id}{val=bytes_to_text}))) (expr*{args} (expr (Name (str{id}{val=default}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=encoding}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=QueryDict}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=setdefault}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=default}))))))))
(root (FunctionDef (str{name}{val=copy}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__deepcopy__}))) (expr*{args} (expr (Dict (epsilon))))))))
(root (FunctionDef (str{name}{val=urlencode}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=safe})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=output})))) (expr{value} (List (epsilon)))))
(root (If (expr{test} (Name (str{id}{val=safe}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=safe})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_bytes}))) (expr*{args} (expr (Name (str{id}{val=safe}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=encoding}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=encode})))) (expr{value} (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=k}))) (expr (Name (str{id}{val=v})))))) (expr{body} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Call (expr{func} (Name (str{id}{val=quote}))) (expr*{args} (expr (Name (str{id}{val=k}))) (expr (Name (str{id}{val=safe})))))) (expr (Call (expr{func} (Name (str{id}{val=quote}))) (expr*{args} (expr (Name (str{id}{val=v}))) (expr (Name (str{id}{val=safe})))))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=encode})))) (expr{value} (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=k}))) (expr (Name (str{id}{val=v})))))) (expr{body} (Call (expr{func} (Name (str{id}{val=urlencode}))) (expr*{args} (expr (Dict (expr*{keys} (expr (Name (str{id}{val=k})))) (expr*{values} (expr (Name (str{id}{val=v})))))))))))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Name (str{id}{val=list_})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=lists}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=k})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_bytes}))) (expr*{args} (expr (Name (str{id}{val=k}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=encoding}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=output}))) (str{attr}{val=extend}))) (expr*{args} (expr (ListComp (expr{elt} (Call (expr{func} (Name (str{id}{val=encode}))) (expr*{args} (expr (Name (str{id}{val=k}))) (expr (Call (expr{func} (Name (str{id}{val=force_bytes}))) (expr*{args} (expr (Name (str{id}{val=v}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=encoding}))))))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=v}))) (expr{iter} (Name (str{id}{val=list_}))))))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=_STR:0_}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=output}))))))))
(root (FunctionDef (str{name}{val=build_request_repr}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=request}))) (expr (Name (str{id}{val=path_override}))) (expr (Name (str{id}{val=GET_override}))) (expr (Name (str{id}{val=POST_override}))) (expr (Name (str{id}{val=COOKIES_override}))) (expr (Name (str{id}{val=META_override})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=get})))) (expr{value} (IfExp (expr{test} (Compare (expr{left} (Name (str{id}{val=GET_override}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr{body} (Call (expr{func} (Name (str{id}{val=pformat}))) (expr*{args} (expr (Name (str{id}{val=GET_override})))))) (expr{orelse} (Call (expr{func} (Name (str{id}{val=pformat}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=request}))) (str{attr}{val=GET}))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=Exception}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=get})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=request}))) (str{attr}{val=_post_parse_error}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=post})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=post})))) (expr{value} (IfExp (expr{test} (Compare (expr{left} (Name (str{id}{val=POST_override}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr{body} (Call (expr{func} (Name (str{id}{val=pformat}))) (expr*{args} (expr (Name (str{id}{val=POST_override})))))) (expr{orelse} (Call (expr{func} (Name (str{id}{val=pformat}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=request}))) (str{attr}{val=POST}))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=Exception}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=post})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cookies})))) (expr{value} (IfExp (expr{test} (Compare (expr{left} (Name (str{id}{val=COOKIES_override}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr{body} (Call (expr{func} (Name (str{id}{val=pformat}))) (expr*{args} (expr (Name (str{id}{val=COOKIES_override})))))) (expr{orelse} (Call (expr{func} (Name (str{id}{val=pformat}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=request}))) (str{attr}{val=COOKIES}))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=Exception}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cookies})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=meta})))) (expr{value} (IfExp (expr{test} (Compare (expr{left} (Name (str{id}{val=META_override}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr{body} (Call (expr{func} (Name (str{id}{val=pformat}))) (expr*{args} (expr (Name (str{id}{val=META_override})))))) (expr{orelse} (Call (expr{func} (Name (str{id}{val=pformat}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=request}))) (str{attr}{val=META}))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=Exception}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=meta})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=path})))) (expr{value} (IfExp (expr{test} (Compare (expr{left} (Name (str{id}{val=path_override}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr{body} (Name (str{id}{val=path_override}))) (expr{orelse} (Attribute (expr{value} (Name (str{id}{val=request}))) (str{attr}{val=path})))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=force_str}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=request}))) (str{attr}{val=__class__}))) (str{attr}{val=__name__}))) (expr (Name (str{id}{val=path}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))) (expr*{args} (expr (Name (str{id}{val=get})))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))) (expr*{args} (expr (Name (str{id}{val=post})))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))) (expr*{args} (expr (Name (str{id}{val=cookies})))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))) (expr*{args} (expr (Name (str{id}{val=meta}))))))))))))))))
(root (FunctionDef (str{name}{val=bytes_to_text}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=s}))) (expr (Name (str{id}{val=encoding})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=s}))) (expr (Name (str{id}{val=bytes})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))) (expr*{args} (expr (Name (str{id}{val=s}))) (expr (Name (str{id}{val=encoding}))) (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=s})))))
(root (FunctionDef (str{name}{val=split_domain_port}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=host})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=host})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=host}))) (str{attr}{val=lower})))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=host_validation_re}))) (str{attr}{val=match}))) (expr*{args} (expr (Name (str{id}{val=host})))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Str (str{s}{val=}))) (expr (Str (str{s}{val=}))))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=host}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=-1}))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=host}))) (expr (Str (str{s}{val=}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=bits})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=host}))) (str{attr}{val=rsplit}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Num (int{n}{val=1}))))))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=bits})))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=2})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=tuple}))) (expr*{args} (expr (Name (str{id}{val=bits}))))))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (expr (Str (str{s}{val=}))))))))
(root (FunctionDef (str{name}{val=validate_host}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=host}))) (expr (Name (str{id}{val=allowed_hosts})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=host})))) (expr{value} (IfExp (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=host}))) (str{attr}{val=endswith}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (expr{body} (Subscript (expr{value} (Name (str{id}{val=host}))) (slice{slice} (Slice (expr{upper} (Num (int{n}{val=-1}))))))) (expr{orelse} (Name (str{id}{val=host})))))))
(root (For (expr{target} (Name (str{id}{val=pattern}))) (expr{iter} (Name (str{id}{val=allowed_hosts}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=pattern})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=pattern}))) (str{attr}{val=lower})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=match})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=pattern}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (expr (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=pattern}))) (str{attr}{val=startswith}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_})))))) (expr (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=host}))) (str{attr}{val=endswith}))) (expr*{args} (expr (Name (str{id}{val=pattern})))))) (expr (Compare (expr{left} (Name (str{id}{val=host}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Subscript (expr{value} (Name (str{id}{val=pattern}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=1})))))))))))))))) (expr (Compare (expr{left} (Name (str{id}{val=pattern}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=host})))))))))))
(root (If (expr{test} (Name (str{id}{val=match}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=True})))))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=datetime})))))
(root (Import (alias*{names} (alias (str{name}{val=json})))))
(root (Import (alias*{names} (alias (str{name}{val=sys})))))
(root (Import (alias*{names} (alias (str{name}{val=time})))))
(root (ImportFrom (str{module}{val=email.header}) (alias*{names} (alias (str{name}{val=Header}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core}) (alias*{names} (alias (str{name}{val=signals}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core}) (alias*{names} (alias (str{name}{val=signing}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.exceptions}) (alias*{names} (alias (str{name}{val=DisallowedRedirect}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.serializers.json}) (alias*{names} (alias (str{name}{val=DjangoJSONEncoder}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.http.cookie}) (alias*{names} (alias (str{name}{val=SimpleCookie}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six})) (alias (str{name}{val=timezone}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=force_bytes})) (alias (str{name}{val=force_text})) (alias (str{name}{val=iri_to_uri}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.http}) (alias*{names} (alias (str{name}{val=cookie_date}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.six.moves}) (alias*{names} (alias (str{name}{val=map}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.six.moves.urllib.parse}) (alias*{names} (alias (str{name}{val=urlparse}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=REASON_PHRASES})))) (expr{value} (Dict (expr*{keys} (expr (Num (int{n}{val=100}))) (expr (Num (int{n}{val=101}))) (expr (Num (int{n}{val=102}))) (expr (Num (int{n}{val=200}))) (expr (Num (int{n}{val=201}))) (expr (Num (int{n}{val=202}))) (expr (Num (int{n}{val=203}))) (expr (Num (int{n}{val=204}))) (expr (Num (int{n}{val=205}))) (expr (Num (int{n}{val=206}))) (expr (Num (int{n}{val=207}))) (expr (Num (int{n}{val=208}))) (expr (Num (int{n}{val=226}))) (expr (Num (int{n}{val=300}))) (expr (Num (int{n}{val=301}))) (expr (Num (int{n}{val=302}))) (expr (Num (int{n}{val=303}))) (expr (Num (int{n}{val=304}))) (expr (Num (int{n}{val=305}))) (expr (Num (int{n}{val=306}))) (expr (Num (int{n}{val=307}))) (expr (Num (int{n}{val=308}))) (expr (Num (int{n}{val=400}))) (expr (Num (int{n}{val=401}))) (expr (Num (int{n}{val=402}))) (expr (Num (int{n}{val=403}))) (expr (Num (int{n}{val=404}))) (expr (Num (int{n}{val=405}))) (expr (Num (int{n}{val=406}))) (expr (Num (int{n}{val=407}))) (expr (Num (int{n}{val=408}))) (expr (Num (int{n}{val=409}))) (expr (Num (int{n}{val=410}))) (expr (Num (int{n}{val=411}))) (expr (Num (int{n}{val=412}))) (expr (Num (int{n}{val=413}))) (expr (Num (int{n}{val=414}))) (expr (Num (int{n}{val=415}))) (expr (Num (int{n}{val=416}))) (expr (Num (int{n}{val=417}))) (expr (Num (int{n}{val=418}))) (expr (Num (int{n}{val=422}))) (expr (Num (int{n}{val=423}))) (expr (Num (int{n}{val=424}))) (expr (Num (int{n}{val=426}))) (expr (Num (int{n}{val=428}))) (expr (Num (int{n}{val=429}))) (expr (Num (int{n}{val=431}))) (expr (Num (int{n}{val=500}))) (expr (Num (int{n}{val=501}))) (expr (Num (int{n}{val=502}))) (expr (Num (int{n}{val=503}))) (expr (Num (int{n}{val=504}))) (expr (Num (int{n}{val=505}))) (expr (Num (int{n}{val=506}))) (expr (Num (int{n}{val=507}))) (expr (Num (int{n}{val=508}))) (expr (Num (int{n}{val=510}))) (expr (Num (int{n}{val=511})))) (expr*{values} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=PROCESSING}))) (expr (Str (str{s}{val=OK}))) (expr (Str (str{s}{val=CREATED}))) (expr (Str (str{s}{val=ACCEPTED}))) (expr (Str (str{s}{val=NON-AUTHORITATIVE INFORMATION}))) (expr (Str (str{s}{val=NO CONTENT}))) (expr (Str (str{s}{val=RESET CONTENT}))) (expr (Str (str{s}{val=PARTIAL CONTENT}))) (expr (Str (str{s}{val=MULTI-STATUS}))) (expr (Str (str{s}{val=ALREADY REPORTED}))) (expr (Str (str{s}{val=IM USED}))) (expr (Str (str{s}{val=MULTIPLE CHOICES}))) (expr (Str (str{s}{val=MOVED PERMANENTLY}))) (expr (Str (str{s}{val=FOUND}))) (expr (Str (str{s}{val=SEE OTHER}))) (expr (Str (str{s}{val=NOT MODIFIED}))) (expr (Str (str{s}{val=USE PROXY}))) (expr (Str (str{s}{val=RESERVED}))) (expr (Str (str{s}{val=TEMPORARY REDIRECT}))) (expr (Str (str{s}{val=PERMANENT REDIRECT}))) (expr (Str (str{s}{val=BAD REQUEST}))) (expr (Str (str{s}{val=UNAUTHORIZED}))) (expr (Str (str{s}{val=PAYMENT REQUIRED}))) (expr (Str (str{s}{val=FORBIDDEN}))) (expr (Str (str{s}{val=NOT FOUND}))) (expr (Str (str{s}{val=METHOD NOT ALLOWED}))) (expr (Str (str{s}{val=NOT ACCEPTABLE}))) (expr (Str (str{s}{val=PROXY AUTHENTICATION REQUIRED}))) (expr (Str (str{s}{val=REQUEST TIMEOUT}))) (expr (Str (str{s}{val=CONFLICT}))) (expr (Str (str{s}{val=GONE}))) (expr (Str (str{s}{val=LENGTH REQUIRED}))) (expr (Str (str{s}{val=PRECONDITION FAILED}))) (expr (Str (str{s}{val=REQUEST ENTITY TOO LARGE}))) (expr (Str (str{s}{val=REQUEST-URI TOO LONG}))) (expr (Str (str{s}{val=UNSUPPORTED MEDIA TYPE}))) (expr (Str (str{s}{val=REQUESTED RANGE NOT SATISFIABLE}))) (expr (Str (str{s}{val=EXPECTATION FAILED}))) (expr (Str (str{s}{val=I'M A TEAPOT}))) (expr (Str (str{s}{val=UNPROCESSABLE ENTITY}))) (expr (Str (str{s}{val=LOCKED}))) (expr (Str (str{s}{val=FAILED DEPENDENCY}))) (expr (Str (str{s}{val=UPGRADE REQUIRED}))) (expr (Str (str{s}{val=PRECONDITION REQUIRED}))) (expr (Str (str{s}{val=TOO MANY REQUESTS}))) (expr (Str (str{s}{val=REQUEST HEADER FIELDS TOO LARGE}))) (expr (Str (str{s}{val=INTERNAL SERVER ERROR}))) (expr (Str (str{s}{val=NOT IMPLEMENTED}))) (expr (Str (str{s}{val=BAD GATEWAY}))) (expr (Str (str{s}{val=SERVICE UNAVAILABLE}))) (expr (Str (str{s}{val=GATEWAY TIMEOUT}))) (expr (Str (str{s}{val=HTTP VERSION NOT SUPPORTED}))) (expr (Str (str{s}{val=VARIANT ALSO NEGOTIATES}))) (expr (Str (str{s}{val=INSUFFICIENT STORAGE}))) (expr (Str (str{s}{val=LOOP DETECTED}))) (expr (Str (str{s}{val=NOT EXTENDED}))) (expr (Str (str{s}{val=NETWORK AUTHENTICATION REQUIRED}))))))))
(root (ClassDef (str{name}{val=BadHeaderError}) (expr*{bases} (expr (Name (str{id}{val=ValueError})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (ClassDef (str{name}{val=HttpResponseBase}) (expr*{bases} (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=Iterator})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=status_code})))) (expr{value} (Num (int{n}{val=200})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=reason_phrase})))) (expr{value} (Name (str{id}{val=None})))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=content_type}))) (expr (Name (str{id}{val=status}))) (expr (Name (str{id}{val=reason})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_headers})))) (expr{value} (Dict (epsilon)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_charset})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=DEFAULT_CHARSET})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_closable_objects})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_handler_class})))) (expr{value} (Name (str{id}{val=None})))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=content_type}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=content_type})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=DEFAULT_CONTENT_TYPE}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_charset}))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=cookies})))) (expr{value} (Call (expr{func} (Name (str{id}{val=SimpleCookie})))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=status}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=status_code})))) (expr{value} (Name (str{id}{val=status})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=reason}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=reason_phrase})))) (expr{value} (Name (str{id}{val=reason})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=reason_phrase}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=reason_phrase})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=REASON_PHRASES}))) (str{attr}{val=get}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=status_code}))) (expr (Str (str{s}{val=UNKNOWN STATUS CODE}))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=self}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:1_})))))))) (expr{value} (Name (str{id}{val=content_type})))))
(root (FunctionDef (str{name}{val=serialize_headers}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=to_bytes}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=val}))) (expr (Name (str{id}{val=encoding})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (IfExp (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=val}))) (expr (Name (str{id}{val=bytes})))))) (expr{body} (Name (str{id}{val=val}))) (expr{orelse} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=val}))) (str{attr}{val=encode}))) (expr*{args} (expr (Name (str{id}{val=encoding}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=headers})))) (expr{value} (ListComp (expr{elt} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=: }))) (str{attr}{val=join}))) (expr*{args} (expr (List (expr*{elts} (expr (Call (expr{func} (Name (str{id}{val=to_bytes}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (Str (str{s}{val=ascii})))))) (expr (Call (expr{func} (Name (str{id}{val=to_bytes}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Str (str{s}{val=latin-1})))))))))))) (comprehension*{generators} (comprehension (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_headers}))) (str{attr}{val=values})))))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=_STR:3_}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=headers}))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=PY3}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__bytes__})))) (expr{value} (Name (str{id}{val=serialize_headers})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__str__})))) (expr{value} (Name (str{id}{val=serialize_headers})))))
(root (FunctionDef (str{name}{val=_convert_to_charset}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=charset}))) (expr (Name (str{id}{val=mime_encode})))) (expr*{defaults} (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=bytes}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=PY3}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=str})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=encode}))) (expr*{args} (expr (Name (str{id}{val=charset}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=decode}))) (expr*{args} (expr (Name (str{id}{val=charset}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=str})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=decode}))) (expr*{args} (expr (Name (str{id}{val=charset}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=encode}))) (expr*{args} (expr (Name (str{id}{val=charset}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=UnicodeError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Name (str{id}{val=mime_encode}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=Header}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=maxlinelen}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=maxsize}))))))) (str{attr}{val=encode}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (AugAssign (expr{target} (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=reason}))) (operator{op} (Add)) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=charset})))))))
(root (Raise (epsilon)))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=value})))))) (expr (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_})))))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=value}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=BadHeaderError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=value}))))))))))
(root (Return (expr{value} (Name (str{id}{val=value})))))
(root (FunctionDef (str{name}{val=__setitem__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=header}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=header})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_convert_to_charset}))) (expr*{args} (expr (Name (str{id}{val=header}))) (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_convert_to_charset}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=mime_encode}) (expr{value} (Name (str{id}{val=True})))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_headers}))) (slice{slice} (Index (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=header}))) (str{attr}{val=lower})))))))))) (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=header}))) (expr (Name (str{id}{val=value}))))))))
(root (FunctionDef (str{name}{val=__delitem__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=header})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Delete (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_headers}))) (slice{slice} (Index (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=header}))) (str{attr}{val=lower}))))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=KeyError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (FunctionDef (str{name}{val=__getitem__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=header})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Subscript (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_headers}))) (slice{slice} (Index (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=header}))) (str{attr}{val=lower}))))))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1})))))))))
(root (FunctionDef (str{name}{val=__getstate__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=state})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__dict__}))) (str{attr}{val=copy})))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=state}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=state}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))))))))
(root (Return (expr{value} (Name (str{id}{val=state})))))
(root (FunctionDef (str{name}{val=__setstate__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=state})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__dict__}))) (str{attr}{val=update}))) (expr*{args} (expr (Name (str{id}{val=state}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=cookies})))) (expr{value} (Call (expr{func} (Name (str{id}{val=SimpleCookie}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=cookies}))))))))
(root (FunctionDef (str{name}{val=has_header}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=header})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=header}))) (str{attr}{val=lower}))))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_headers}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__contains__})))) (expr{value} (Name (str{id}{val=has_header})))))
(root (FunctionDef (str{name}{val=items}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_headers}))) (str{attr}{val=values})))))))
(root (FunctionDef (str{name}{val=get}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=header}))) (expr (Name (str{id}{val=alternate})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_headers}))) (str{attr}{val=get}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=header}))) (str{attr}{val=lower}))))) (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=alternate}))))))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1})))))))))
(root (FunctionDef (str{name}{val=set_cookie}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=max_age}))) (expr (Name (str{id}{val=expires}))) (expr (Name (str{id}{val=path}))) (expr (Name (str{id}{val=domain}))) (expr (Name (str{id}{val=secure}))) (expr (Name (str{id}{val=httponly})))) (expr*{defaults} (expr (Str (str{s}{val=}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Str (str{s}{val=/}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=False}))) (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=cookies}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key})))))))) (expr{value} (Name (str{id}{val=value})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=expires}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=expires}))) (expr (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=datetime})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=timezone}))) (str{attr}{val=is_aware}))) (expr*{args} (expr (Name (str{id}{val=expires})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=expires})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=timezone}))) (str{attr}{val=make_naive}))) (expr*{args} (expr (Name (str{id}{val=expires}))) (expr (Attribute (expr{value} (Name (str{id}{val=timezone}))) (str{attr}{val=utc}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=delta})))) (expr{value} (BinOp (expr{left} (Name (str{id}{val=expires}))) (operator{op} (Sub)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=expires}))) (str{attr}{val=utcnow})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=delta})))) (expr{value} (BinOp (expr{left} (Name (str{id}{val=delta}))) (operator{op} (Add)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=timedelta}))) (keyword*{keywords} (keyword (str{arg}{val=seconds}) (expr{value} (Num (int{n}{val=1})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=expires})))) (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=max_age})))) (expr{value} (Call (expr{func} (Name (str{id}{val=max}))) (expr*{args} (expr (Num (int{n}{val=0}))) (expr (BinOp (expr{left} (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=delta}))) (str{attr}{val=days}))) (operator{op} (Mult)) (expr{right} (Num (int{n}{val=86400}))))) (operator{op} (Add)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=delta}))) (str{attr}{val=seconds}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=cookies}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key}))))))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Name (str{id}{val=expires})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=max_age}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=cookies}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key}))))))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Name (str{id}{val=max_age})))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=expires}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=cookies}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key}))))))) (slice{slice} (Index (expr{value} (Str (str{s}{val=expires})))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=cookie_date}))) (expr*{args} (expr (BinOp (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=time}))) (str{attr}{val=time}))))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=max_age}))))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=path}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=cookies}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key}))))))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Name (str{id}{val=path})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=domain}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=cookies}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key}))))))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Name (str{id}{val=domain})))))
(root (If (expr{test} (Name (str{id}{val=secure}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=cookies}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key}))))))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Name (str{id}{val=True})))))
(root (If (expr{test} (Name (str{id}{val=httponly}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=cookies}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key}))))))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Name (str{id}{val=True})))))
(root (FunctionDef (str{name}{val=set_signed_cookie}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=salt})))) (str{kwarg}{val=kwargs}) (expr*{defaults} (expr (Str (str{s}{val=})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=signing}))) (str{attr}{val=get_cookie_signer}))) (keyword*{keywords} (keyword (str{arg}{val=salt}) (expr{value} (BinOp (expr{left} (Name (str{id}{val=key}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=salt}))))))))) (str{attr}{val=sign}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=set_cookie}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value})))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (FunctionDef (str{name}{val=delete_cookie}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=path}))) (expr (Name (str{id}{val=domain})))) (expr*{defaults} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=set_cookie}))) (expr*{args} (expr (Name (str{id}{val=key})))) (keyword*{keywords} (keyword (str{arg}{val=max_age}) (expr{value} (Num (int{n}{val=0})))) (keyword (str{arg}{val=path}) (expr{value} (Name (str{id}{val=path})))) (keyword (str{arg}{val=domain}) (expr{value} (Name (str{id}{val=domain})))) (keyword (str{arg}{val=expires}) (expr{value} (Str (str{s}{val=Thu, 01-Jan-1970 00:00:00 GMT})))))))))
(root (FunctionDef (str{name}{val=make_bytes}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=has_header}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=bytes}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=bytes})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=bytes}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=bytes}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=encode}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_charset})))))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=force_bytes}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_charset}))))))))
(root (FunctionDef (str{name}{val=close}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=closable}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_closable_objects}))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=closable}))) (str{attr}{val=close})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=Exception}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=signals}))) (str{attr}{val=request_finished}))) (str{attr}{val=send}))) (keyword*{keywords} (keyword (str{arg}{val=sender}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_handler_class})))))))))
(root (FunctionDef (str{name}{val=write}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=content})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=Exception}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__class__}))) (str{attr}{val=__name__}))))))))))
(root (FunctionDef (str{name}{val=flush}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (FunctionDef (str{name}{val=tell}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=Exception}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__class__}))) (str{attr}{val=__name__}))))))))))
(root (ClassDef (str{name}{val=HttpResponse}) (expr*{bases} (expr (Name (str{id}{val=HttpResponseBase})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=streaming})))) (expr{value} (Name (str{id}{val=False})))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=content})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}) (expr*{defaults} (expr (Str (str{s}{val=})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=HttpResponse}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=content})))) (expr{value} (Name (str{id}{val=content})))))
(root (FunctionDef (str{name}{val=serialize}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (BinOp (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=serialize_headers}))))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=_STR:0_}))))) (operator{op} (Add)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=content})))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=PY3}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__bytes__})))) (expr{value} (Name (str{id}{val=serialize})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__str__})))) (expr{value} (Name (str{id}{val=serialize})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=content}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=}))) (str{attr}{val=join}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_container}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Attribute (expr{value} (Name (str{id}{val=content}))) (str{attr}{val=setter}))))))
(root (FunctionDef (str{name}{val=content}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Str (str{s}{val=_STR:0_})))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=bytes}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=string_types})))))))))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_closable_objects}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=}))) (str{attr}{val=join}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=make_bytes}))) (expr*{args} (expr (Name (str{id}{val=chunk})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=chunk}))) (expr{iter} (Name (str{id}{val=value}))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=make_bytes}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_container})))) (expr{value} (List (expr*{elts} (expr (Name (str{id}{val=value}))))))))
(root (FunctionDef (str{name}{val=__iter__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=iter}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_container}))))))))
(root (FunctionDef (str{name}{val=write}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=content})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_container}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=make_bytes}))) (expr*{args} (expr (Name (str{id}{val=content})))))))))))
(root (FunctionDef (str{name}{val=tell}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=content}))))))))
(root (ClassDef (str{name}{val=StreamingHttpResponse}) (expr*{bases} (expr (Name (str{id}{val=HttpResponseBase})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=streaming})))) (expr{value} (Name (str{id}{val=True})))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=streaming_content})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}) (expr*{defaults} (expr (Tuple (epsilon)))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=StreamingHttpResponse}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=streaming_content})))) (expr{value} (Name (str{id}{val=streaming_content})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=content}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=AttributeError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_Use `streaming_content` instead.}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__class__}))) (str{attr}{val=__name__}))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=streaming_content}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=map}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=make_bytes}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_iterator}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Attribute (expr{value} (Name (str{id}{val=streaming_content}))) (str{attr}{val=setter}))))))
(root (FunctionDef (str{name}{val=streaming_content}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_iterator})))) (expr{value} (Call (expr{func} (Name (str{id}{val=iter}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_closable_objects}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (FunctionDef (str{name}{val=__iter__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=streaming_content})))))
(root (ClassDef (str{name}{val=HttpResponseRedirectBase}) (expr*{bases} (expr (Name (str{id}{val=HttpResponse})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=allowed_schemes})))) (expr{value} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))))))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=redirect_to})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=parsed})))) (expr{value} (Call (expr{func} (Name (str{id}{val=urlparse}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=redirect_to})))))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=parsed}))) (str{attr}{val=scheme}))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=parsed}))) (str{attr}{val=scheme}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=allowed_schemes}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=DisallowedRedirect}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=parsed}))) (str{attr}{val=scheme}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=HttpResponseRedirectBase}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=self}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=iri_to_uri}))) (expr*{args} (expr (Name (str{id}{val=redirect_to}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=url})))) (expr{value} (Call (expr{func} (Name (str{id}{val=property}))) (expr*{args} (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (expr{body} (Subscript (expr{value} (Name (str{id}{val=self}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))))))))))
(root (ClassDef (str{name}{val=HttpResponseRedirect}) (expr*{bases} (expr (Name (str{id}{val=HttpResponseRedirectBase})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=status_code})))) (expr{value} (Num (int{n}{val=302})))))
(root (ClassDef (str{name}{val=HttpResponsePermanentRedirect}) (expr*{bases} (expr (Name (str{id}{val=HttpResponseRedirectBase})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=status_code})))) (expr{value} (Num (int{n}{val=301})))))
(root (ClassDef (str{name}{val=HttpResponseNotModified}) (expr*{bases} (expr (Name (str{id}{val=HttpResponse})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=status_code})))) (expr{value} (Num (int{n}{val=304})))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=HttpResponseNotModified}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (Delete (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=self}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=HttpResponse}))) (str{attr}{val=content}))) (str{attr}{val=setter}))))))
(root (FunctionDef (str{name}{val=content}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=value}))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=AttributeError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_container})))) (expr{value} (List (epsilon)))))
(root (ClassDef (str{name}{val=HttpResponseBadRequest}) (expr*{bases} (expr (Name (str{id}{val=HttpResponse})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=status_code})))) (expr{value} (Num (int{n}{val=400})))))
(root (ClassDef (str{name}{val=HttpResponseNotFound}) (expr*{bases} (expr (Name (str{id}{val=HttpResponse})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=status_code})))) (expr{value} (Num (int{n}{val=404})))))
(root (ClassDef (str{name}{val=HttpResponseForbidden}) (expr*{bases} (expr (Name (str{id}{val=HttpResponse})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=status_code})))) (expr{value} (Num (int{n}{val=403})))))
(root (ClassDef (str{name}{val=HttpResponseNotAllowed}) (expr*{bases} (expr (Name (str{id}{val=HttpResponse})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=status_code})))) (expr{value} (Num (int{n}{val=405})))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=permitted_methods})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=HttpResponseNotAllowed}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=self}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:1_})))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=_STR:0_}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=permitted_methods}))))))))
(root (ClassDef (str{name}{val=HttpResponseGone}) (expr*{bases} (expr (Name (str{id}{val=HttpResponse})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=status_code})))) (expr{value} (Num (int{n}{val=410})))))
(root (ClassDef (str{name}{val=HttpResponseServerError}) (expr*{bases} (expr (Name (str{id}{val=HttpResponse})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=status_code})))) (expr{value} (Num (int{n}{val=500})))))
(root (ClassDef (str{name}{val=Http404}) (expr*{bases} (expr (Name (str{id}{val=Exception})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (ClassDef (str{name}{val=JsonResponse}) (expr*{bases} (expr (Name (str{id}{val=HttpResponse})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=data}))) (expr (Name (str{id}{val=encoder}))) (expr (Name (str{id}{val=safe})))) (str{kwarg}{val=kwargs}) (expr*{defaults} (expr (Name (str{id}{val=DjangoJSONEncoder}))) (expr (Name (str{id}{val=True})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=safe}))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=data}))) (expr (Name (str{id}{val=dict}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TypeError}))) (expr*{args} (expr (Str (str{s}{val=In order to allow non-dict objects to be serialized set the safe parameter to False}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=kwargs}))) (str{attr}{val=setdefault}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=data})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=json}))) (str{attr}{val=dumps}))) (expr*{args} (expr (Name (str{id}{val=data})))) (keyword*{keywords} (keyword (str{arg}{val=cls}) (expr{value} (Name (str{id}{val=encoder})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=JsonResponse}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (keyword*{keywords} (keyword (str{arg}{val=content}) (expr{value} (Name (str{id}{val=data}))))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (FunctionDef (str{name}{val=fix_location_header}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=request}))) (expr (Name (str{id}{val=response})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=response})))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=request}))) (str{attr}{val=get_host})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=response}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=request}))) (str{attr}{val=build_absolute_uri}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=response}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))))))))
(root (Return (expr{value} (Name (str{id}{val=response})))))
(root (FunctionDef (str{name}{val=conditional_content_removal}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=request}))) (expr (Name (str{id}{val=response})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Num (int{n}{val=100}))) (cmpop*{ops} (cmpop (LtE)) (cmpop (Lt))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=response}))) (str{attr}{val=status_code}))) (expr (Num (int{n}{val=200})))))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=response}))) (str{attr}{val=status_code}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Tuple (expr*{elts} (expr (Num (int{n}{val=204}))) (expr (Num (int{n}{val=304})))))))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=response}))) (str{attr}{val=streaming}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=response}))) (str{attr}{val=streaming_content})))) (expr{value} (List (epsilon)))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=response}))) (str{attr}{val=content})))) (expr{value} (Str (str{s}{val=})))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=response}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:1_})))))))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=request}))) (str{attr}{val=method}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=response}))) (str{attr}{val=streaming}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=response}))) (str{attr}{val=streaming_content})))) (expr{value} (List (epsilon)))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=response}))) (str{attr}{val=content})))) (expr{value} (Str (str{s}{val=})))))
(root (Return (expr{value} (Name (str{id}{val=response})))))
(root (ImportFrom (str{module}{val=django.template.base}) (alias*{names} (alias (str{name}{val=ALLOWED_VARIABLE_CHARS})) (alias (str{name}{val=BLOCK_TAG_END})) (alias (str{name}{val=BLOCK_TAG_START})) (alias (str{name}{val=COMMENT_TAG_END})) (alias (str{name}{val=COMMENT_TAG_START})) (alias (str{name}{val=FILTER_ARGUMENT_SEPARATOR})) (alias (str{name}{val=FILTER_SEPARATOR})) (alias (str{name}{val=SINGLE_BRACE_END})) (alias (str{name}{val=SINGLE_BRACE_START})) (alias (str{name}{val=TOKEN_BLOCK})) (alias (str{name}{val=TOKEN_COMMENT})) (alias (str{name}{val=TOKEN_TEXT})) (alias (str{name}{val=TOKEN_VAR})) (alias (str{name}{val=TRANSLATOR_COMMENT_MARK})) (alias (str{name}{val=UNKNOWN_SOURCE})) (alias (str{name}{val=VARIABLE_ATTRIBUTE_SEPARATOR})) (alias (str{name}{val=VARIABLE_TAG_END})) (alias (str{name}{val=VARIABLE_TAG_START})) (alias (str{name}{val=filter_re})) (alias (str{name}{val=tag_re}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.template.base}) (alias*{names} (alias (str{name}{val=ContextPopException})) (alias (str{name}{val=InvalidTemplateLibrary})) (alias (str{name}{val=TemplateDoesNotExist})) (alias (str{name}{val=TemplateEncodingError})) (alias (str{name}{val=TemplateSyntaxError})) (alias (str{name}{val=VariableDoesNotExist}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.template.base}) (alias*{names} (alias (str{name}{val=Context})) (alias (str{name}{val=FilterExpression})) (alias (str{name}{val=Lexer})) (alias (str{name}{val=Node})) (alias (str{name}{val=NodeList})) (alias (str{name}{val=Parser})) (alias (str{name}{val=RequestContext})) (alias (str{name}{val=Origin})) (alias (str{name}{val=StringOrigin})) (alias (str{name}{val=Template})) (alias (str{name}{val=TextNode})) (alias (str{name}{val=Token})) (alias (str{name}{val=TokenParser})) (alias (str{name}{val=Variable})) (alias (str{name}{val=VariableNode})) (alias (str{name}{val=constant_string})) (alias (str{name}{val=filter_raw_string}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.template.base}) (alias*{names} (alias (str{name}{val=compile_string})) (alias (str{name}{val=resolve_variable})) (alias (str{name}{val=unescape_string_literal})) (alias (str{name}{val=generic_tag_compiler}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.template.base}) (alias*{names} (alias (str{name}{val=Library})) (alias (str{name}{val=add_to_builtins})) (alias (str{name}{val=builtins})) (alias (str{name}{val=get_library})) (alias (str{name}{val=get_templatetags_modules})) (alias (str{name}{val=get_text_list})) (alias (str{name}{val=import_library})) (alias (str{name}{val=libraries}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__all__})))) (expr{value} (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=_STR:3_}))))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=re})))))
(root (ImportFrom (str{module}{val=functools}) (alias*{names} (alias (str{name}{val=partial}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=importlib}) (alias*{names} (alias (str{name}{val=import_module}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=inspect}) (alias*{names} (alias (str{name}{val=getargspec})) (alias (str{name}{val=getcallargs}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=warnings})))))
(root (ImportFrom (str{module}{val=django.apps}) (alias*{names} (alias (str{name}{val=apps}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.template.context}) (alias*{names} (alias (str{name}{val=BaseContext})) (alias (str{name}{val=Context})) (alias (str{name}{val=RequestContext})) (alias (str{name}{val=ContextPopException}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.deprecation}) (alias*{names} (alias (str{name}{val=RemovedInDjango20Warning}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.itercompat}) (alias*{names} (alias (str{name}{val=is_iterable}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.text}) (alias*{names} (alias (str{name}{val=smart_split})) (alias (str{name}{val=unescape_string_literal})) (alias (str{name}{val=get_text_list}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=force_str})) (alias (str{name}{val=force_text}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.translation}) (alias*{names} (alias (str{name}{val=ugettext_lazy})) (alias (str{name}{val=pgettext_lazy}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.safestring}) (alias*{names} (alias (str{name}{val=SafeData})) (alias (str{name}{val=EscapeData})) (alias (str{name}{val=mark_safe})) (alias (str{name}{val=mark_for_escaping}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.formats}) (alias*{names} (alias (str{name}{val=localize}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.html}) (alias*{names} (alias (str{name}{val=escape}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.module_loading}) (alias*{names} (alias (str{name}{val=module_has_submodule}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.timezone}) (alias*{names} (alias (str{name}{val=template_localtime}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=python_2_unicode_compatible}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=TOKEN_TEXT})))) (expr{value} (Num (int{n}{val=0})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=TOKEN_VAR})))) (expr{value} (Num (int{n}{val=1})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=TOKEN_BLOCK})))) (expr{value} (Num (int{n}{val=2})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=TOKEN_COMMENT})))) (expr{value} (Num (int{n}{val=3})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=TOKEN_MAPPING})))) (expr{value} (Dict (expr*{keys} (expr (Name (str{id}{val=TOKEN_TEXT}))) (expr (Name (str{id}{val=TOKEN_VAR}))) (expr (Name (str{id}{val=TOKEN_BLOCK}))) (expr (Name (str{id}{val=TOKEN_COMMENT})))) (expr*{values} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=Comment}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=FILTER_SEPARATOR})))) (expr{value} (Str (str{s}{val=_STR:1_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=FILTER_ARGUMENT_SEPARATOR})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=VARIABLE_ATTRIBUTE_SEPARATOR})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=BLOCK_TAG_START})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=BLOCK_TAG_END})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=VARIABLE_TAG_START})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=VARIABLE_TAG_END})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=COMMENT_TAG_START})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=COMMENT_TAG_END})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=TRANSLATOR_COMMENT_MARK})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=SINGLE_BRACE_START})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=SINGLE_BRACE_END})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ALLOWED_VARIABLE_CHARS})))) (expr{value} (Str (str{s}{val=abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=UNKNOWN_SOURCE})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=tag_re})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=escape}))) (expr*{args} (expr (Name (str{id}{val=BLOCK_TAG_START})))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=escape}))) (expr*{args} (expr (Name (str{id}{val=BLOCK_TAG_END})))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=escape}))) (expr*{args} (expr (Name (str{id}{val=VARIABLE_TAG_START})))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=escape}))) (expr*{args} (expr (Name (str{id}{val=VARIABLE_TAG_END})))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=escape}))) (expr*{args} (expr (Name (str{id}{val=COMMENT_TAG_START})))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=escape}))) (expr*{args} (expr (Name (str{id}{val=COMMENT_TAG_END}))))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=libraries})))) (expr{value} (Dict (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=builtins})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=invalid_var_format_string})))) (expr{value} (Name (str{id}{val=None})))))
(root (ClassDef (str{name}{val=TemplateSyntaxError}) (expr*{bases} (expr (Name (str{id}{val=Exception})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (ClassDef (str{name}{val=TemplateDoesNotExist}) (expr*{bases} (expr (Name (str{id}{val=Exception})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (ClassDef (str{name}{val=TemplateEncodingError}) (expr*{bases} (expr (Name (str{id}{val=Exception})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=python_2_unicode_compatible}))))))
(root (ClassDef (str{name}{val=VariableDoesNotExist}) (expr*{bases} (expr (Name (str{id}{val=Exception})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=msg}))) (expr (Name (str{id}{val=params})))) (expr*{defaults} (expr (Tuple (epsilon)))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=msg})))) (expr{value} (Name (str{id}{val=msg})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=params})))) (expr{value} (Name (str{id}{val=params})))))
(root (FunctionDef (str{name}{val=__str__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=msg}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Name (str{id}{val=tuple}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=p})))) (keyword*{keywords} (keyword (str{arg}{val=errors}) (expr{value} (Str (str{s}{val=replace}))))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=p}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=params}))))))))))))))
(root (ClassDef (str{name}{val=InvalidTemplateLibrary}) (expr*{bases} (expr (Name (str{id}{val=Exception})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (ClassDef (str{name}{val=Origin}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=name})))) (expr{value} (Name (str{id}{val=name})))))
(root (FunctionDef (str{name}{val=reload}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=NotImplementedError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=__str__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=name})))))
(root (ClassDef (str{name}{val=StringOrigin}) (expr*{bases} (expr (Name (str{id}{val=Origin})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=source})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=StringOrigin}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=UNKNOWN_SOURCE}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=source})))) (expr{value} (Name (str{id}{val=source})))))
(root (FunctionDef (str{name}{val=reload}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=source})))))
(root (ClassDef (str{name}{val=Template}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=template_string}))) (expr (Name (str{id}{val=origin}))) (expr (Name (str{id}{val=name})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=template_string})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=template_string}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=UnicodeDecodeError}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateEncodingError}))) (expr*{args} (expr (Str (str{s}{val=Templates can only be constructed from unicode or UTF-8 strings.}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=TEMPLATE_DEBUG}))) (expr (Compare (expr{left} (Name (str{id}{val=origin}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=origin})))) (expr{value} (Call (expr{func} (Name (str{id}{val=StringOrigin}))) (expr*{args} (expr (Name (str{id}{val=template_string}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=nodelist})))) (expr{value} (Call (expr{func} (Name (str{id}{val=compile_string}))) (expr*{args} (expr (Name (str{id}{val=template_string}))) (expr (Name (str{id}{val=origin}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=name})))) (expr{value} (Name (str{id}{val=name})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=origin})))) (expr{value} (Name (str{id}{val=origin})))))
(root (FunctionDef (str{name}{val=__iter__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=node}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=nodelist}))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=subnode}))) (expr{iter} (Name (str{id}{val=node}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Yield (expr{value} (Name (str{id}{val=subnode})))))))
(root (FunctionDef (str{name}{val=_render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=nodelist}))) (str{attr}{val=render}))) (expr*{args} (expr (Name (str{id}{val=context}))))))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=context}))) (str{attr}{val=render_context}))) (str{attr}{val=push})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_render}))) (expr*{args} (expr (Name (str{id}{val=context}))))))))
(root (TryFinally (stmt*{body} (stmt (Pass))) (stmt*{finalbody} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=context}))) (str{attr}{val=render_context}))) (str{attr}{val=pop})))))))
(root (FunctionDef (str{name}{val=compile_string}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=template_string}))) (expr (Name (str{id}{val=origin})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=TEMPLATE_DEBUG}))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=django.template.debug}) (alias*{names} (alias (str{name}{val=DebugLexer})) (alias (str{name}{val=DebugParser}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=lexer_class}))) (expr (Name (str{id}{val=parser_class}))))))) (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=DebugLexer}))) (expr (Name (str{id}{val=DebugParser}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=lexer_class}))) (expr (Name (str{id}{val=parser_class}))))))) (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=Lexer}))) (expr (Name (str{id}{val=Parser}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=lexer})))) (expr{value} (Call (expr{func} (Name (str{id}{val=lexer_class}))) (expr*{args} (expr (Name (str{id}{val=template_string}))) (expr (Name (str{id}{val=origin}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=parser})))) (expr{value} (Call (expr{func} (Name (str{id}{val=parser_class}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=lexer}))) (str{attr}{val=tokenize}))))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=parse})))))))
(root (ClassDef (str{name}{val=Token}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=token_type}))) (expr (Name (str{id}{val=contents})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=token_type}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=contents}))))))) (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=token_type}))) (expr (Name (str{id}{val=contents}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=lineno})))) (expr{value} (Name (str{id}{val=None})))))
(root (FunctionDef (str{name}{val=__str__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=token_name})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=TOKEN_MAPPING}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=token_type})))))))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=token_name}))) (expr (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=contents}))) (slice{slice} (Slice (expr{upper} (Num (int{n}{val=20}))))))) (str{attr}{val=replace}))) (expr*{args} (expr (Str (str{s}{val=\n}))) (expr (Str (str{s}{val=})))))))))))))
(root (FunctionDef (str{name}{val=split_contents}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=split})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=bits})))) (expr{value} (Call (expr{func} (Name (str{id}{val=iter}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=smart_split}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=contents})))))))))))
(root (For (expr{target} (Name (str{id}{val=bit}))) (expr{iter} (Name (str{id}{val=bits}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=bit}))) (str{attr}{val=startswith}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=bit}))) (str{attr}{val=startswith}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=sentinal})))) (expr{value} (BinOp (expr{left} (Subscript (expr{value} (Name (str{id}{val=bit}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=2}))))))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=_STR:0_})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=trans_bit})))) (expr{value} (List (expr*{elts} (expr (Name (str{id}{val=bit}))))))))
(root (While (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=bit}))) (str{attr}{val=endswith}))) (expr*{args} (expr (Name (str{id}{val=sentinal})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=bit})))) (expr{value} (Call (expr{func} (Name (str{id}{val=next}))) (expr*{args} (expr (Name (str{id}{val=bits}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=trans_bit}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=bit}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=bit})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val= }))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=trans_bit}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=split}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=bit}))))))))
(root (Return (expr{value} (Name (str{id}{val=split})))))
(root (ClassDef (str{name}{val=Lexer}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=template_string}))) (expr (Name (str{id}{val=origin})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=template_string})))) (expr{value} (Name (str{id}{val=template_string})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=origin})))) (expr{value} (Name (str{id}{val=origin})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=lineno})))) (expr{value} (Num (int{n}{val=1})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbatim})))) (expr{value} (Name (str{id}{val=False})))))
(root (FunctionDef (str{name}{val=tokenize}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=in_tag})))) (expr{value} (Name (str{id}{val=False})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=bit}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=tag_re}))) (str{attr}{val=split}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=template_string})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=bit}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=result}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=create_token}))) (expr*{args} (expr (Name (str{id}{val=bit}))) (expr (Name (str{id}{val=in_tag})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=in_tag})))) (expr{value} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=in_tag})))))))
(root (Return (expr{value} (Name (str{id}{val=result})))))
(root (FunctionDef (str{name}{val=create_token}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=token_string}))) (expr (Name (str{id}{val=in_tag})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=in_tag}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=token_string}))) (str{attr}{val=startswith}))) (expr*{args} (expr (Name (str{id}{val=BLOCK_TAG_START}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=block_content})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=token_string}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=2}))) (expr{upper} (Num (int{n}{val=-2}))))))) (str{attr}{val=strip})))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbatim}))) (expr (Compare (expr{left} (Name (str{id}{val=block_content}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbatim}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbatim})))) (expr{value} (Name (str{id}{val=False})))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=in_tag}))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbatim})))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=token_string}))) (str{attr}{val=startswith}))) (expr*{args} (expr (Name (str{id}{val=VARIABLE_TAG_START})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=token})))) (expr{value} (Call (expr{func} (Name (str{id}{val=Token}))) (expr*{args} (expr (Name (str{id}{val=TOKEN_VAR}))) (expr (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=token_string}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=2}))) (expr{upper} (Num (int{n}{val=-2}))))))) (str{attr}{val=strip}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=token_string}))) (str{attr}{val=startswith}))) (expr*{args} (expr (Name (str{id}{val=BLOCK_TAG_START})))))) (stmt*{body} (stmt (Pass))))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=block_content}))) (slice{slice} (Slice (expr{upper} (Num (int{n}{val=9}))))))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=verbatim})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=end%s}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=block_content})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=token})))) (expr{value} (Call (expr{func} (Name (str{id}{val=Token}))) (expr*{args} (expr (Name (str{id}{val=TOKEN_BLOCK}))) (expr (Name (str{id}{val=block_content}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=token_string}))) (str{attr}{val=startswith}))) (expr*{args} (expr (Name (str{id}{val=COMMENT_TAG_START})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=content})))) (expr{value} (Str (str{s}{val=})))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=token_string}))) (str{attr}{val=find}))) (expr*{args} (expr (Name (str{id}{val=TRANSLATOR_COMMENT_MARK})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=content})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=token_string}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=2}))) (expr{upper} (Num (int{n}{val=-2}))))))) (str{attr}{val=strip})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=token})))) (expr{value} (Call (expr{func} (Name (str{id}{val=Token}))) (expr*{args} (expr (Name (str{id}{val=TOKEN_COMMENT}))) (expr (Name (str{id}{val=content}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=token})))) (expr{value} (Call (expr{func} (Name (str{id}{val=Token}))) (expr*{args} (expr (Name (str{id}{val=TOKEN_TEXT}))) (expr (Name (str{id}{val=token_string}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=lineno})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=lineno})))))
(root (AugAssign (expr{target} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=lineno}))) (operator{op} (Add)) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=token_string}))) (str{attr}{val=count}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Return (expr{value} (Name (str{id}{val=token})))))
(root (ClassDef (str{name}{val=Parser}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=tokens})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=tokens})))) (expr{value} (Name (str{id}{val=tokens})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=tags})))) (expr{value} (Dict (epsilon)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=filters})))) (expr{value} (Dict (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=lib}))) (expr{iter} (Name (str{id}{val=builtins}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=add_library}))) (expr*{args} (expr (Name (str{id}{val=lib}))))))))
(root (FunctionDef (str{name}{val=parse}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=parse_until})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=parse_until}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=parse_until})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=nodelist})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=create_nodelist})))))))
(root (While (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=tokens}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=token})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=next_token})))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=token_type}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=extend_nodelist}))) (expr*{args} (expr (Name (str{id}{val=nodelist}))) (expr (Call (expr{func} (Name (str{id}{val=TextNode}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=contents})))))) (expr (Name (str{id}{val=token}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=token_type}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (stmt*{body} (stmt (Pass))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=contents}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=empty_variable}))) (expr*{args} (expr (Name (str{id}{val=token}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=filter_expression})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=compile_filter}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=contents}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=TemplateSyntaxError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=compile_filter_error}))) (expr*{args} (expr (Name (str{id}{val=token}))) (expr (Name (str{id}{val=e})))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (epsilon)))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=var_node})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=create_variable_node}))) (expr*{args} (expr (Name (str{id}{val=filter_expression}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=extend_nodelist}))) (expr*{args} (expr (Name (str{id}{val=nodelist}))) (expr (Name (str{id}{val=var_node}))) (expr (Name (str{id}{val=token}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=token_type}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=2})))))) (stmt*{body} (stmt (Pass))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=command})))) (expr{value} (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=contents}))) (str{attr}{val=split}))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=IndexError}))) (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=empty_block_tag}))) (expr*{args} (expr (Name (str{id}{val=token}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=command}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=parse_until})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=prepend_token}))) (expr*{args} (expr (Name (str{id}{val=token}))))))))
(root (Return (expr{value} (Name (str{id}{val=nodelist})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=enter_command}))) (expr*{args} (expr (Name (str{id}{val=command}))) (expr (Name (str{id}{val=token}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=compile_func})))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=tags}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=command})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=KeyError}))) (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=invalid_block_tag}))) (expr*{args} (expr (Name (str{id}{val=token}))) (expr (Name (str{id}{val=command}))) (expr (Name (str{id}{val=parse_until}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=compiled_result})))) (expr{value} (Call (expr{func} (Name (str{id}{val=compile_func}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=token}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=TemplateSyntaxError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=compile_function_error}))) (expr*{args} (expr (Name (str{id}{val=token}))) (expr (Name (str{id}{val=e})))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (epsilon)))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=extend_nodelist}))) (expr*{args} (expr (Name (str{id}{val=nodelist}))) (expr (Name (str{id}{val=compiled_result}))) (expr (Name (str{id}{val=token}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=exit_command})))))))
(root (If (expr{test} (Name (str{id}{val=parse_until}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=unclosed_block_tag}))) (expr*{args} (expr (Name (str{id}{val=parse_until}))))))))
(root (Return (expr{value} (Name (str{id}{val=nodelist})))))
(root (FunctionDef (str{name}{val=skip_past}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=endtag})))))) (stmt*{body} (stmt (Pass)))))
(root (While (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=tokens}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=token})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=next_token})))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=token_type}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=TOKEN_BLOCK})))))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=contents}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=endtag}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (epsilon)))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=unclosed_block_tag}))) (expr*{args} (expr (List (expr*{elts} (expr (Name (str{id}{val=endtag})))))))))))
(root (FunctionDef (str{name}{val=create_variable_node}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=filter_expression})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=VariableNode}))) (expr*{args} (expr (Name (str{id}{val=filter_expression}))))))))
(root (FunctionDef (str{name}{val=create_nodelist}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=NodeList})))))))
(root (FunctionDef (str{name}{val=extend_nodelist}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=nodelist}))) (expr (Name (str{id}{val=node}))) (expr (Name (str{id}{val=token})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=node}))) (str{attr}{val=must_be_first}))) (expr (Name (str{id}{val=nodelist})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=nodelist}))) (str{attr}{val=contains_nontext}))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Name (str{id}{val=AttributeError})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=AttributeError}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=%r must be the first tag in the template.}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=node}))))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=nodelist}))) (expr (Name (str{id}{val=NodeList})))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=node}))) (expr (Name (str{id}{val=TextNode}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=nodelist}))) (str{attr}{val=contains_nontext})))) (expr{value} (Name (str{id}{val=True})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=nodelist}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=node}))))))))
(root (FunctionDef (str{name}{val=enter_command}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=command}))) (expr (Name (str{id}{val=token})))))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (FunctionDef (str{name}{val=exit_command}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (FunctionDef (str{name}{val=error}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=token}))) (expr (Name (str{id}{val=msg})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (Name (str{id}{val=msg}))))))))
(root (FunctionDef (str{name}{val=empty_variable}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=token})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error}))) (expr*{args} (expr (Name (str{id}{val=token}))) (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=empty_block_tag}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=token})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error}))) (expr*{args} (expr (Name (str{id}{val=token}))) (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=invalid_block_tag}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=token}))) (expr (Name (str{id}{val=command}))) (expr (Name (str{id}{val=parse_until})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=parse_until}))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error}))) (expr*{args} (expr (Name (str{id}{val=token}))) (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=command}))) (expr (Call (expr{func} (Name (str{id}{val=get_text_list}))) (expr*{args} (expr (ListComp (expr{elt} (BinOp (expr{left} (Str (str{s}{val='%s'}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=p}))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=p}))) (expr{iter} (Name (str{id}{val=parse_until}))))))))))))))))))))
(root (Raise (expr{type} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error}))) (expr*{args} (expr (Name (str{id}{val=token}))) (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=command}))))))))))
(root (FunctionDef (str{name}{val=unclosed_block_tag}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=parse_until})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error}))) (expr*{args} (expr (Name (str{id}{val=None}))) (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=, }))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=parse_until})))))))))))))
(root (FunctionDef (str{name}{val=compile_filter_error}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=token}))) (expr (Name (str{id}{val=e})))))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (FunctionDef (str{name}{val=compile_function_error}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=token}))) (expr (Name (str{id}{val=e})))))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (FunctionDef (str{name}{val=next_token}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=tokens}))) (str{attr}{val=pop}))) (expr*{args} (expr (Num (int{n}{val=0}))))))))
(root (FunctionDef (str{name}{val=prepend_token}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=token})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=tokens}))) (str{attr}{val=insert}))) (expr*{args} (expr (Num (int{n}{val=0}))) (expr (Name (str{id}{val=token}))))))))
(root (FunctionDef (str{name}{val=delete_first_token}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Delete (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=tokens}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))))))
(root (FunctionDef (str{name}{val=add_library}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=lib})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=tags}))) (str{attr}{val=update}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=lib}))) (str{attr}{val=tags}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=filters}))) (str{attr}{val=update}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=lib}))) (str{attr}{val=filters}))))))))
(root (FunctionDef (str{name}{val=compile_filter}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=token})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=FilterExpression}))) (expr*{args} (expr (Name (str{id}{val=token}))) (expr (Name (str{id}{val=self}))))))))
(root (FunctionDef (str{name}{val=find_filter}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=filter_name})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=filter_name}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=filters})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=filters}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=filter_name})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=filter_name}))))))))))
(root (ClassDef (str{name}{val=TokenParser}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=subject})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=subject})))) (expr{value} (Name (str{id}{val=subject})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=pointer})))) (expr{value} (Num (int{n}{val=0})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=backout})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=tagname})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=tag})))))))
(root (FunctionDef (str{name}{val=top}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=NotImplementedError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=more}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=pointer}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=subject})))))))))))
(root (FunctionDef (str{name}{val=back}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=backout})))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (Str (str{s}{val=back called without some previous parsing}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=pointer})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=backout}))) (str{attr}{val=pop})))))))
(root (FunctionDef (str{name}{val=tag}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=subject})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=subject})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=i})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=pointer})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=i}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=subject}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=expected another tag, found end of string: %s}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=subject}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=p})))) (expr{value} (Name (str{id}{val=i})))))
(root (While (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=i}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=subject}))))))))) (expr (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=subject}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=i}))))))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val= }))) (expr (Str (str{s}{val=	})))))))))))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=i}))) (operator{op} (Add)) (expr{value} (Num (int{n}{val=1})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=s})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=subject}))) (slice{slice} (Slice (expr{lower} (Name (str{id}{val=p}))) (expr{upper} (Name (str{id}{val=i})))))))))
(root (While (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=i}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=subject}))))))))) (expr (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=subject}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=i}))))))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val= }))) (expr (Str (str{s}{val=	})))))))))))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=i}))) (operator{op} (Add)) (expr{value} (Num (int{n}{val=1})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=backout}))) (str{attr}{val=append}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=pointer}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=pointer})))) (expr{value} (Name (str{id}{val=i})))))
(root (Return (expr{value} (Name (str{id}{val=s})))))
(root (FunctionDef (str{name}{val=value}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=subject})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=subject})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=i})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=pointer})))))
(root (FunctionDef (str{name}{val=next_space_index}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=subject}))) (expr (Name (str{id}{val=i})))))) (stmt*{body} (stmt (Pass)))))
(root (While (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=i}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=subject}))))))))) (expr (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=subject}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=i}))))))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val= }))) (expr (Str (str{s}{val=	})))))))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=subject}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=i}))))))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=c})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=subject}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=i})))))))))
(root (AugAssign (expr{target} (Name (str{id}{val=i}))) (operator{op} (Add)) (expr{value} (Num (int{n}{val=1})))))
(root (While (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=i}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=subject}))))))))) (expr (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=subject}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=i}))))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Name (str{id}{val=c}))))))))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=i}))) (operator{op} (Add)) (expr{value} (Num (int{n}{val=1})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=i}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=subject}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=Searching for value. Unexpected end of string in column %d: %s}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=i}))) (expr (Name (str{id}{val=subject})))))))))))))
(root (AugAssign (expr{target} (Name (str{id}{val=i}))) (operator{op} (Add)) (expr{value} (Num (int{n}{val=1})))))
(root (Return (expr{value} (Name (str{id}{val=i})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=i}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=subject}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=Searching for value. Expected another value but found end of string: %s}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=subject}))))))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=subject}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=i}))))))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=p})))) (expr{value} (Name (str{id}{val=i})))))
(root (AugAssign (expr{target} (Name (str{id}{val=i}))) (operator{op} (Add)) (expr{value} (Num (int{n}{val=1})))))
(root (While (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=i}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=subject}))))))))) (expr (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=subject}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=i}))))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Subscript (expr{value} (Name (str{id}{val=subject}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=p}))))))))))))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=i}))) (operator{op} (Add)) (expr{value} (Num (int{n}{val=1})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=i}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=subject}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=Searching for value. Unexpected end of string in column %d: %s}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=i}))) (expr (Name (str{id}{val=subject})))))))))))))
(root (AugAssign (expr{target} (Name (str{id}{val=i}))) (operator{op} (Add)) (expr{value} (Num (int{n}{val=1})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=i})))) (expr{value} (Call (expr{func} (Name (str{id}{val=next_space_index}))) (expr*{args} (expr (Name (str{id}{val=subject}))) (expr (Name (str{id}{val=i}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=res})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=subject}))) (slice{slice} (Slice (expr{lower} (Name (str{id}{val=p}))) (expr{upper} (Name (str{id}{val=i})))))))))
(root (While (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=i}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=subject}))))))))) (expr (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=subject}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=i}))))))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val= }))) (expr (Str (str{s}{val=	})))))))))))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=i}))) (operator{op} (Add)) (expr{value} (Num (int{n}{val=1})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=backout}))) (str{attr}{val=append}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=pointer}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=pointer})))) (expr{value} (Name (str{id}{val=i})))))
(root (Return (expr{value} (Name (str{id}{val=res})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=p})))) (expr{value} (Name (str{id}{val=i})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=i})))) (expr{value} (Call (expr{func} (Name (str{id}{val=next_space_index}))) (expr*{args} (expr (Name (str{id}{val=subject}))) (expr (Name (str{id}{val=i}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=s})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=subject}))) (slice{slice} (Slice (expr{lower} (Name (str{id}{val=p}))) (expr{upper} (Name (str{id}{val=i})))))))))
(root (While (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=i}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=subject}))))))))) (expr (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=subject}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=i}))))))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val= }))) (expr (Str (str{s}{val=	})))))))))))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=i}))) (operator{op} (Add)) (expr{value} (Num (int{n}{val=1})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=backout}))) (str{attr}{val=append}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=pointer}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=pointer})))) (expr{value} (Name (str{id}{val=i})))))
(root (Return (expr{value} (Name (str{id}{val=s})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=constant_string})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val= (?:%(i18n_open)s%(strdq)s%(i18n_close)s| %(i18n_open)s%(strsq)s%(i18n_close)s| %(strdq)s| %(strsq)s) }))) (operator{op} (Mod)) (expr{right} (Dict (expr*{keys} (expr (Str (str{s}{val=strdq}))) (expr (Str (str{s}{val=strsq}))) (expr (Str (str{s}{val=i18n_open}))) (expr (Str (str{s}{val=i18n_close})))) (expr*{values} (expr (Str (str{s}{val="[^"\\]*(?:\\.[^"\\]*)*"}))) (expr (Str (str{s}{val='[^'\\]*(?:\\.[^'\\]*)*'}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=escape}))) (expr*{args} (expr (Str (str{s}{val=_(})))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=escape}))) (expr*{args} (expr (Str (str{s}{val=)})))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=constant_string})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=constant_string}))) (str{attr}{val=replace}))) (expr*{args} (expr (Str (str{s}{val=\n}))) (expr (Str (str{s}{val=}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=filter_raw_string})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val= ^(?P<constant>%(constant)s)| ^(?P<var>[%(var_chars)s]+|%(num)s)|  (?:\s*%(filter_sep)s\s*      (?P<filter_name>\w+)          (?:%(arg_sep)s              (?:               (?P<constant_arg>%(constant)s)|               (?P<var_arg>[%(var_chars)s]+|%(num)s)              )          )?  )}))) (operator{op} (Mod)) (expr{right} (Dict (expr*{keys} (expr (Str (str{s}{val=constant}))) (expr (Str (str{s}{val=num}))) (expr (Str (str{s}{val=var_chars}))) (expr (Str (str{s}{val=filter_sep}))) (expr (Str (str{s}{val=arg_sep})))) (expr*{values} (expr (Name (str{id}{val=constant_string}))) (expr (Str (str{s}{val=[-+\.]?\d[\d\.e]*}))) (expr (Str (str{s}{val=\w\.}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=escape}))) (expr*{args} (expr (Name (str{id}{val=FILTER_SEPARATOR})))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=escape}))) (expr*{args} (expr (Name (str{id}{val=FILTER_ARGUMENT_SEPARATOR})))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=filter_re})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Name (str{id}{val=filter_raw_string}))) (expr (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=UNICODE}))) (operator{op} (BitOr)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=VERBOSE}))))))))))
(root (ClassDef (str{name}{val=FilterExpression}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=token}))) (expr (Name (str{id}{val=parser})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=token})))) (expr{value} (Name (str{id}{val=token})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=matches})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=filter_re}))) (str{attr}{val=finditer}))) (expr*{args} (expr (Name (str{id}{val=token}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=var_obj})))) (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=filters})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=upto})))) (expr{value} (Num (int{n}{val=0})))))
(root (For (expr{target} (Name (str{id}{val=match}))) (expr{iter} (Name (str{id}{val=matches}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=start})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=match}))) (str{attr}{val=start})))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=upto}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Name (str{id}{val=start})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=Could not parse some characters: %s|%s|%s}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Subscript (expr{value} (Name (str{id}{val=token}))) (slice{slice} (Slice (expr{upper} (Name (str{id}{val=upto}))))))) (expr (Subscript (expr{value} (Name (str{id}{val=token}))) (slice{slice} (Slice (expr{lower} (Name (str{id}{val=upto}))) (expr{upper} (Name (str{id}{val=start}))))))) (expr (Subscript (expr{value} (Name (str{id}{val=token}))) (slice{slice} (Slice (expr{lower} (Name (str{id}{val=start})))))))))))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=var_obj}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=var}))) (expr (Name (str{id}{val=constant}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=match}))) (str{attr}{val=group}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))))))))
(root (If (expr{test} (Name (str{id}{val=constant}))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=var_obj})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=Variable}))) (expr*{args} (expr (Name (str{id}{val=constant})))))) (str{attr}{val=resolve}))) (expr*{args} (expr (Dict (epsilon))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=VariableDoesNotExist}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=var_obj})))) (expr{value} (Name (str{id}{val=None})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Name (str{id}{val=var}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass))))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=Could not find variable at start of %s.}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=token}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=var_obj})))) (expr{value} (Call (expr{func} (Name (str{id}{val=Variable}))) (expr*{args} (expr (Name (str{id}{val=var}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=filter_name})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=match}))) (str{attr}{val=group}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=args})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=constant_arg}))) (expr (Name (str{id}{val=var_arg}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=match}))) (str{attr}{val=group}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))))))))
(root (If (expr{test} (Name (str{id}{val=constant_arg}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=args}))) (str{attr}{val=append}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=False}))) (expr (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=Variable}))) (expr*{args} (expr (Name (str{id}{val=constant_arg})))))) (str{attr}{val=resolve}))) (expr*{args} (expr (Dict (epsilon))))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Name (str{id}{val=var_arg}))) (stmt*{body} (stmt (Pass))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=args}))) (str{attr}{val=append}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=True}))) (expr (Call (expr{func} (Name (str{id}{val=Variable}))) (expr*{args} (expr (Name (str{id}{val=var_arg}))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=filter_func})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=find_filter}))) (expr*{args} (expr (Name (str{id}{val=filter_name}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=args_check}))) (expr*{args} (expr (Name (str{id}{val=filter_name}))) (expr (Name (str{id}{val=filter_func}))) (expr (Name (str{id}{val=args}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=filters}))) (str{attr}{val=append}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=filter_func}))) (expr (Name (str{id}{val=args})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=upto})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=match}))) (str{attr}{val=end})))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=upto}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=token}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=Could not parse the remainder: '%s' from '%s'}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Subscript (expr{value} (Name (str{id}{val=token}))) (slice{slice} (Slice (expr{lower} (Name (str{id}{val=upto}))))))) (expr (Name (str{id}{val=token})))))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=filters})))) (expr{value} (Name (str{id}{val=filters})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=var})))) (expr{value} (Name (str{id}{val=var_obj})))))
(root (FunctionDef (str{name}{val=resolve}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context}))) (expr (Name (str{id}{val=ignore_failures})))) (expr*{defaults} (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=var}))) (expr (Name (str{id}{val=Variable})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=obj})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=var}))) (str{attr}{val=resolve}))) (expr*{args} (expr (Name (str{id}{val=context}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=VariableDoesNotExist}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Name (str{id}{val=ignore_failures}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=obj})))) (expr{value} (Name (str{id}{val=None})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=TEMPLATE_STRING_IF_INVALID}))) (stmt*{body} (stmt (Pass)))))
(root (Global (str*{names} (str{val=invalid_var_format_string}))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=invalid_var_format_string}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=invalid_var_format_string})))) (expr{value} (Compare (expr{left} (Str (str{s}{val=%s}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=TEMPLATE_STRING_IF_INVALID}))))))))
(root (If (expr{test} (Name (str{id}{val=invalid_var_format_string}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=TEMPLATE_STRING_IF_INVALID}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=var})))))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=TEMPLATE_STRING_IF_INVALID})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=obj})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=TEMPLATE_STRING_IF_INVALID})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=obj})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=var})))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=func}))) (expr (Name (str{id}{val=args})))))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=filters}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=arg_vals})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=lookup}))) (expr (Name (str{id}{val=arg})))))) (expr{iter} (Name (str{id}{val=args}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=lookup}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=arg_vals}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=mark_safe}))) (expr*{args} (expr (Name (str{id}{val=arg})))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=arg_vals}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=arg}))) (str{attr}{val=resolve}))) (expr*{args} (expr (Name (str{id}{val=context})))))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=func}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=obj})))) (expr{value} (Call (expr{func} (Name (str{id}{val=template_localtime}))) (expr*{args} (expr (Name (str{id}{val=obj}))) (expr (Attribute (expr{value} (Name (str{id}{val=context}))) (str{attr}{val=use_tz}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=func}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=new_obj})))) (expr{value} (Call (expr{func} (Name (str{id}{val=func}))) (expr*{args} (expr (Name (str{id}{val=obj})))) (keyword*{keywords} (keyword (str{arg}{val=autoescape}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=context}))) (str{attr}{val=autoescape}))))) (expr{starargs} (Name (str{id}{val=arg_vals})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=new_obj})))) (expr{value} (Call (expr{func} (Name (str{id}{val=func}))) (expr*{args} (expr (Name (str{id}{val=obj})))) (expr{starargs} (Name (str{id}{val=arg_vals})))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=func}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=False})))))) (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=obj}))) (expr (Name (str{id}{val=SafeData}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=obj})))) (expr{value} (Call (expr{func} (Name (str{id}{val=mark_safe}))) (expr*{args} (expr (Name (str{id}{val=new_obj}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=obj}))) (expr (Name (str{id}{val=EscapeData})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=obj})))) (expr{value} (Call (expr{func} (Name (str{id}{val=mark_for_escaping}))) (expr*{args} (expr (Name (str{id}{val=new_obj}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=obj})))) (expr{value} (Name (str{id}{val=new_obj})))))
(root (Return (expr{value} (Name (str{id}{val=obj})))))
(root (FunctionDef (str{name}{val=args_check}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=func}))) (expr (Name (str{id}{val=provided})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=provided})))) (expr{value} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Name (str{id}{val=provided}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=plen})))) (expr{value} (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=provided})))))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=1})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=func})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=func}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=func}))))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=args}))) (expr (Name (str{id}{val=varargs}))) (expr (Name (str{id}{val=varkw}))) (expr (Name (str{id}{val=defaults}))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=getargspec}))) (expr*{args} (expr (Name (str{id}{val=func}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=alen})))) (expr{value} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=args}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=dlen})))) (expr{value} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=defaults}))) (expr (List (epsilon)))))))))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=plen}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (BinOp (expr{left} (Name (str{id}{val=alen}))) (operator{op} (Sub)) (expr{right} (Name (str{id}{val=dlen})))))))) (expr (Compare (expr{left} (Name (str{id}{val=plen}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Name (str{id}{val=alen}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=name}))) (expr (BinOp (expr{left} (Name (str{id}{val=alen}))) (operator{op} (Sub)) (expr{right} (Name (str{id}{val=dlen}))))) (expr (Name (str{id}{val=plen})))))))))))))
(root (Return (expr{value} (Name (str{id}{val=True})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=args_check})))) (expr{value} (Call (expr{func} (Name (str{id}{val=staticmethod}))) (expr*{args} (expr (Name (str{id}{val=args_check}))))))))
(root (FunctionDef (str{name}{val=__str__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=token})))))
(root (FunctionDef (str{name}{val=resolve_variable}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=path}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=warnings}))) (str{attr}{val=warn}))) (expr*{args} (expr (Str (str{s}{val=resolve_variable() is deprecated. Use django.template.Variable(path).resolve(context) instead}))) (expr (Name (str{id}{val=RemovedInDjango20Warning})))) (keyword*{keywords} (keyword (str{arg}{val=stacklevel}) (expr{value} (Num (int{n}{val=2})))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=Variable}))) (expr*{args} (expr (Name (str{id}{val=path})))))) (str{attr}{val=resolve}))) (expr*{args} (expr (Name (str{id}{val=context}))))))))
(root (ClassDef (str{name}{val=Variable}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=var})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=var})))) (expr{value} (Name (str{id}{val=var})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=literal})))) (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=lookups})))) (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=translate})))) (expr{value} (Name (str{id}{val=False})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=message_context})))) (expr{value} (Name (str{id}{val=None})))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=var}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=string_types})))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TypeError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Name (str{id}{val=type}))) (expr*{args} (expr (Name (str{id}{val=var})))))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=literal})))) (expr{value} (Call (expr{func} (Name (str{id}{val=float}))) (expr*{args} (expr (Name (str{id}{val=var}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=var})))))) (expr (Compare (expr{left} (Str (str{s}{val=_STR:1_}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=var}))) (str{attr}{val=lower}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=literal})))) (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=literal}))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=var}))) (str{attr}{val=endswith}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Name (str{id}{val=ValueError})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ValueError}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=var}))) (str{attr}{val=startswith}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=var}))) (str{attr}{val=endswith}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=translate})))) (expr{value} (Name (str{id}{val=True})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=var})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=var}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=2}))) (expr{upper} (Num (int{n}{val=-1})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=literal})))) (expr{value} (Call (expr{func} (Name (str{id}{val=mark_safe}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=unescape_string_literal}))) (expr*{args} (expr (Name (str{id}{val=var})))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ValueError}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=var}))) (str{attr}{val=find}))) (expr*{args} (expr (BinOp (expr{left} (Name (str{id}{val=VARIABLE_ATTRIBUTE_SEPARATOR}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=_STR:0_})))))))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=-1})))))) (expr (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=var}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=Variables and attributes may not begin with underscores: '%s'}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=var}))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=lookups})))) (expr{value} (Call (expr{func} (Name (str{id}{val=tuple}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=var}))) (str{attr}{val=split}))) (expr*{args} (expr (Name (str{id}{val=VARIABLE_ATTRIBUTE_SEPARATOR})))))))))))
(root (FunctionDef (str{name}{val=resolve}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=lookups}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_resolve_lookup}))) (expr*{args} (expr (Name (str{id}{val=context}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=literal})))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=translate}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=message_context}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=pgettext_lazy}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=message_context}))) (expr (Name (str{id}{val=value}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=ugettext_lazy}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (Return (expr{value} (Name (str{id}{val=value})))))
(root (FunctionDef (str{name}{val=__repr__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__class__}))) (str{attr}{val=__name__}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=var}))))))))))
(root (FunctionDef (str{name}{val=__str__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=var})))))
(root (FunctionDef (str{name}{val=_resolve_lookup}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=current})))) (expr{value} (Name (str{id}{val=context})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (For (expr{target} (Name (str{id}{val=bit}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=lookups}))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=current})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=current}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=bit})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=TypeError}))) (expr (Name (str{id}{val=AttributeError}))) (expr (Name (str{id}{val=KeyError}))) (expr (Name (str{id}{val=ValueError})))))) (stmt*{body} (stmt (Pass)))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=current}))) (expr (Name (str{id}{val=BaseContext})))))) (expr (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=type}))) (expr*{args} (expr (Name (str{id}{val=current})))))) (expr (Name (str{id}{val=bit}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Name (str{id}{val=AttributeError})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=current})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=current}))) (expr (Name (str{id}{val=bit}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=TypeError}))) (expr (Name (str{id}{val=AttributeError})))))) (stmt*{body} (stmt (Pass)))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=current})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=current}))) (slice{slice} (Index (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=bit}))))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=IndexError}))) (expr (Name (str{id}{val=ValueError}))) (expr (Name (str{id}{val=KeyError}))) (expr (Name (str{id}{val=TypeError})))))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=VariableDoesNotExist}))) (expr*{args} (expr (Str (str{s}{val=Failed lookup for key [%s] in %r}))) (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=bit}))) (expr (Name (str{id}{val=current})))))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=callable}))) (expr*{args} (expr (Name (str{id}{val=current})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=current}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=current}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=current})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=TEMPLATE_STRING_IF_INVALID})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=current})))) (expr{value} (Call (expr{func} (Name (str{id}{val=current})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=TypeError}))) (stmt*{body} (stmt (Pass)))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=getcallargs}))) (expr*{args} (expr (Name (str{id}{val=current}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=TypeError}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=current})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=TEMPLATE_STRING_IF_INVALID})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Raise (epsilon)))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=Exception}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=e}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=current})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=TEMPLATE_STRING_IF_INVALID})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Raise (epsilon)))
(root (Return (expr{value} (Name (str{id}{val=current})))))
(root (ClassDef (str{name}{val=Node}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=must_be_first})))) (expr{value} (Name (str{id}{val=False})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=child_nodelists})))) (expr{value} (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (FunctionDef (str{name}{val=__iter__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Yield (expr{value} (Name (str{id}{val=self})))))))
(root (FunctionDef (str{name}{val=get_nodes_by_type}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=nodetype})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=nodes})))) (expr{value} (List (epsilon)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=nodetype})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=nodes}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=self}))))))))
(root (For (expr{target} (Name (str{id}{val=attr}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=child_nodelists}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=nodelist})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=attr}))) (expr (Name (str{id}{val=None}))))))))
(root (If (expr{test} (Name (str{id}{val=nodelist}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=nodes}))) (str{attr}{val=extend}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=nodelist}))) (str{attr}{val=get_nodes_by_type}))) (expr*{args} (expr (Name (str{id}{val=nodetype})))))))))))
(root (Return (expr{value} (Name (str{id}{val=nodes})))))
(root (ClassDef (str{name}{val=NodeList}) (expr*{bases} (expr (Name (str{id}{val=list})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=contains_nontext})))) (expr{value} (Name (str{id}{val=False})))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=bits})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=node}))) (expr{iter} (Name (str{id}{val=self}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=node}))) (expr (Name (str{id}{val=Node})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=bit})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=render_node}))) (expr*{args} (expr (Name (str{id}{val=node}))) (expr (Name (str{id}{val=context}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=bit})))) (expr{value} (Name (str{id}{val=node})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=bits}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=bit})))))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=mark_safe}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=bits})))))))))))
(root (FunctionDef (str{name}{val=get_nodes_by_type}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=nodetype})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=nodes})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=node}))) (expr{iter} (Name (str{id}{val=self}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=nodes}))) (str{attr}{val=extend}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=node}))) (str{attr}{val=get_nodes_by_type}))) (expr*{args} (expr (Name (str{id}{val=nodetype})))))))))))
(root (Return (expr{value} (Name (str{id}{val=nodes})))))
(root (FunctionDef (str{name}{val=render_node}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=node}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=node}))) (str{attr}{val=render}))) (expr*{args} (expr (Name (str{id}{val=context}))))))))
(root (ClassDef (str{name}{val=TextNode}) (expr*{bases} (expr (Name (str{id}{val=Node})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=s})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=s})))) (expr{value} (Name (str{id}{val=s})))))
(root (FunctionDef (str{name}{val=__repr__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=force_str}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=s}))) (slice{slice} (Slice (expr{upper} (Num (int{n}{val=25}))))))))) (expr (Str (str{s}{val=ascii})))) (keyword*{keywords} (keyword (str{arg}{val=errors}) (expr{value} (Str (str{s}{val=replace})))))))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=s})))))
(root (FunctionDef (str{name}{val=render_value_in_context}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=template_localtime}))) (expr*{args} (expr (Name (str{id}{val=value})))) (keyword*{keywords} (keyword (str{arg}{val=use_tz}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=context}))) (str{attr}{val=use_tz})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=localize}))) (expr*{args} (expr (Name (str{id}{val=value})))) (keyword*{keywords} (keyword (str{arg}{val=use_l10n}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=context}))) (str{attr}{val=use_l10n})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=context}))) (str{attr}{val=autoescape}))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=SafeData}))))))))))) (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=EscapeData}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=escape}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=value})))))
(root (ClassDef (str{name}{val=VariableNode}) (expr*{bases} (expr (Name (str{id}{val=Node})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=filter_expression})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=filter_expression})))) (expr{value} (Name (str{id}{val=filter_expression})))))
(root (FunctionDef (str{name}{val=__repr__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=filter_expression})))))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=output})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=filter_expression}))) (str{attr}{val=resolve}))) (expr*{args} (expr (Name (str{id}{val=context}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=UnicodeDecodeError}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=render_value_in_context}))) (expr*{args} (expr (Name (str{id}{val=output}))) (expr (Name (str{id}{val=context}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=kwarg_re})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=token_kwargs}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=bits}))) (expr (Name (str{id}{val=parser}))) (expr (Name (str{id}{val=support_legacy})))) (expr*{defaults} (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=bits}))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Dict (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=match})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=kwarg_re}))) (str{attr}{val=match}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=kwarg_format})))) (expr{value} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=match}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=match}))) (str{attr}{val=group}))) (expr*{args} (expr (Num (int{n}{val=1})))))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=kwarg_format}))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=support_legacy}))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Dict (epsilon)))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=bits})))))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Num (int{n}{val=3})))))) (expr (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Dict (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=kwargs})))) (expr{value} (Dict (epsilon)))))
(root (While (expr{test} (Name (str{id}{val=bits}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=kwarg_format}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=match})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=kwarg_re}))) (str{attr}{val=match}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))))))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=match}))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=match}))) (str{attr}{val=group}))) (expr*{args} (expr (Num (int{n}{val=1}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=kwargs})))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=match}))) (str{attr}{val=groups})))))))
(root (Delete (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Slice (expr{upper} (Num (int{n}{val=1}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=bits})))))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Num (int{n}{val=3})))))) (expr (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=kwargs})))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value}))))))) (expr{value} (Tuple (expr*{elts} (expr (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=2}))))))) (expr (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))))))))
(root (Delete (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Slice (expr{upper} (Num (int{n}{val=3}))))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=kwargs}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key})))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=compile_filter}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=bits}))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=kwarg_format})))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=kwargs})))))
(root (Delete (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Slice (expr{upper} (Num (int{n}{val=1}))))))))))
(root (Return (expr{value} (Name (str{id}{val=kwargs})))))
(root (FunctionDef (str{name}{val=parse_bits}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=parser}))) (expr (Name (str{id}{val=bits}))) (expr (Name (str{id}{val=params}))) (expr (Name (str{id}{val=varargs}))) (expr (Name (str{id}{val=varkw}))) (expr (Name (str{id}{val=defaults}))) (expr (Name (str{id}{val=takes_context}))) (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=takes_context}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=params}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=params})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=params}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=1})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val='%s' is decorated with takes_context=True so it must have a first argument of 'context'}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=name}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=args})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=kwargs})))) (expr{value} (Dict (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=unhandled_params})))) (expr{value} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Name (str{id}{val=params}))))))))
(root (For (expr{target} (Name (str{id}{val=bit}))) (expr{iter} (Name (str{id}{val=bits}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=kwarg})))) (expr{value} (Call (expr{func} (Name (str{id}{val=token_kwargs}))) (expr*{args} (expr (List (expr*{elts} (expr (Name (str{id}{val=bit})))))) (expr (Name (str{id}{val=parser}))))))))
(root (If (expr{test} (Name (str{id}{val=kwarg}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=param}))) (expr (Name (str{id}{val=value}))))))) (expr{value} (Subscript (expr{value} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=iteritems}))) (expr*{args} (expr (Name (str{id}{val=kwarg}))))))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=param}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=params})))))) (expr (Compare (expr{left} (Name (str{id}{val=varkw}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=param})))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Name (str{id}{val=param}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=kwargs})))))) (stmt*{body} (stmt (Pass))))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=param})))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=kwargs}))) (slice{slice} (Index (expr{value} (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Name (str{id}{val=param}))))))))))) (expr{value} (Name (str{id}{val=value})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=param}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=unhandled_params})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=unhandled_params}))) (str{attr}{val=remove}))) (expr*{args} (expr (Name (str{id}{val=param}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val='%s' received some positional argument(s) after some keyword argument(s)}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=name}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=args}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=compile_filter}))) (expr*{args} (expr (Name (str{id}{val=bit})))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=unhandled_params}))) (str{attr}{val=pop}))) (expr*{args} (expr (Num (int{n}{val=0}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=IndexError}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=varargs}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=name}))))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=defaults}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=unhandled_params})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=unhandled_params}))) (slice{slice} (Slice (expr{upper} (UnaryOp (unaryop{op} (USub)) (expr{operand} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=defaults}))))))))))))))
(root (If (expr{test} (Name (str{id}{val=unhandled_params}))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val='%s' did not receive value(s) for the argument(s): %s}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=name}))) (expr (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=, }))) (str{attr}{val=join}))) (expr*{args} (expr (GeneratorExp (expr{elt} (BinOp (expr{left} (Str (str{s}{val='%s'}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=p}))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=p}))) (expr{iter} (Name (str{id}{val=unhandled_params}))))))))))))))))))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=args}))) (expr (Name (str{id}{val=kwargs}))))))))
(root (FunctionDef (str{name}{val=generic_tag_compiler}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=parser}))) (expr (Name (str{id}{val=token}))) (expr (Name (str{id}{val=params}))) (expr (Name (str{id}{val=varargs}))) (expr (Name (str{id}{val=varkw}))) (expr (Name (str{id}{val=defaults}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=takes_context}))) (expr (Name (str{id}{val=node_class})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=bits})))) (expr{value} (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=split_contents}))))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=1})))))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=args}))) (expr (Name (str{id}{val=kwargs}))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=parse_bits}))) (expr*{args} (expr (Name (str{id}{val=parser}))) (expr (Name (str{id}{val=bits}))) (expr (Name (str{id}{val=params}))) (expr (Name (str{id}{val=varargs}))) (expr (Name (str{id}{val=varkw}))) (expr (Name (str{id}{val=defaults}))) (expr (Name (str{id}{val=takes_context}))) (expr (Name (str{id}{val=name}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=node_class}))) (expr*{args} (expr (Name (str{id}{val=takes_context}))) (expr (Name (str{id}{val=args}))) (expr (Name (str{id}{val=kwargs}))))))))
(root (ClassDef (str{name}{val=TagHelperNode}) (expr*{bases} (expr (Name (str{id}{val=Node})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=takes_context}))) (expr (Name (str{id}{val=args}))) (expr (Name (str{id}{val=kwargs})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=takes_context})))) (expr{value} (Name (str{id}{val=takes_context})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=args})))) (expr{value} (Name (str{id}{val=args})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=kwargs})))) (expr{value} (Name (str{id}{val=kwargs})))))
(root (FunctionDef (str{name}{val=get_resolved_arguments}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=resolved_args})))) (expr{value} (ListComp (expr{elt} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=var}))) (str{attr}{val=resolve}))) (expr*{args} (expr (Name (str{id}{val=context})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=var}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=args})))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=takes_context}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=resolved_args})))) (expr{value} (BinOp (expr{left} (List (expr*{elts} (expr (Name (str{id}{val=context})))))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=resolved_args})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=resolved_kwargs})))) (expr{value} (Call (expr{func} (Name (str{id}{val=dict}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=v}))) (str{attr}{val=resolve}))) (expr*{args} (expr (Name (str{id}{val=context}))))))))) (comprehension*{generators} (comprehension (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Name (str{id}{val=v})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=kwargs}))) (str{attr}{val=items}))))))))))))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=resolved_args}))) (expr (Name (str{id}{val=resolved_kwargs}))))))))
(root (ClassDef (str{name}{val=Library}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=filters})))) (expr{value} (Dict (epsilon)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=tags})))) (expr{value} (Dict (epsilon)))))
(root (FunctionDef (str{name}{val=tag}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=compile_function})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=name}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Compare (expr{left} (Name (str{id}{val=compile_function}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=tag_function})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=name}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Compare (expr{left} (Name (str{id}{val=compile_function}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None}))))))))) (stmt*{body} (stmt (Pass))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=callable}))) (expr*{args} (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=tag_function}))) (expr*{args} (expr (Name (str{id}{val=name}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=dec}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=func})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=tag}))) (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=func}))))))))
(root (Return (expr{value} (Name (str{id}{val=dec})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=name}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Compare (expr{left} (Name (str{id}{val=compile_function}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None}))))))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=tags}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=name})))))))) (expr{value} (Name (str{id}{val=compile_function})))))
(root (Return (expr{value} (Name (str{id}{val=compile_function})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=InvalidTemplateLibrary}))) (expr*{args} (expr (Str (str{s}{val=Unsupported arguments to Library.tag: (%r, %r)}))) (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=compile_function})))))))))))
(root (FunctionDef (str{name}{val=tag_function}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=func})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=tags}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=func}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=func})))))) (str{attr}{val=__name__})))))))) (expr{value} (Name (str{id}{val=func})))))
(root (Return (expr{value} (Name (str{id}{val=func})))))
(root (FunctionDef (str{name}{val=filter}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=filter_func})))) (str{kwarg}{val=flags}) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=name}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Compare (expr{left} (Name (str{id}{val=filter_func}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None}))))))))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=dec}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=func})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=filter_function}))) (expr*{args} (expr (Name (str{id}{val=func})))) (expr{kwargs} (Name (str{id}{val=flags})))))))
(root (Return (expr{value} (Name (str{id}{val=dec})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=name}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Compare (expr{left} (Name (str{id}{val=filter_func}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None}))))))))) (stmt*{body} (stmt (Pass))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=callable}))) (expr*{args} (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=filter_function}))) (expr*{args} (expr (Name (str{id}{val=name})))) (expr{kwargs} (Name (str{id}{val=flags})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=dec}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=func})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=filter}))) (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=func})))) (expr{kwargs} (Name (str{id}{val=flags})))))))
(root (Return (expr{value} (Name (str{id}{val=dec})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=name}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Compare (expr{left} (Name (str{id}{val=filter_func}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None}))))))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=filters}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=name})))))))) (expr{value} (Name (str{id}{val=filter_func})))))
(root (For (expr{target} (Name (str{id}{val=attr}))) (expr{iter} (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=attr}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=flags})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=flags}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=attr})))))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=setattr}))) (expr*{args} (expr (Name (str{id}{val=filter_func}))) (expr (Name (str{id}{val=attr}))) (expr (Name (str{id}{val=value}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=filter_func}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=setattr}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=filter_func}))) (str{attr}{val=_decorated_function}))) (expr (Name (str{id}{val=attr}))) (expr (Name (str{id}{val=value}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=filter_func}))) (str{attr}{val=_filter_name})))) (expr{value} (Name (str{id}{val=name})))))
(root (Return (expr{value} (Name (str{id}{val=filter_func})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=InvalidTemplateLibrary}))) (expr*{args} (expr (Str (str{s}{val=Unsupported arguments to Library.filter: (%r, %r)}))) (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=filter_func})))))))))))
(root (FunctionDef (str{name}{val=filter_function}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=func})))) (str{kwarg}{val=flags}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=name})))) (expr{value} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=func}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=func})))))) (str{attr}{val=__name__})))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=filter}))) (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=func})))) (expr{kwargs} (Name (str{id}{val=flags})))))))
(root (FunctionDef (str{name}{val=simple_tag}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=func}))) (expr (Name (str{id}{val=takes_context}))) (expr (Name (str{id}{val=name})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=dec}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=func})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=params}))) (expr (Name (str{id}{val=varargs}))) (expr (Name (str{id}{val=varkw}))) (expr (Name (str{id}{val=defaults}))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=getargspec}))) (expr*{args} (expr (Name (str{id}{val=func}))))))))
(root (ClassDef (str{name}{val=SimpleNode}) (expr*{bases} (expr (Name (str{id}{val=TagHelperNode})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=resolved_args}))) (expr (Name (str{id}{val=resolved_kwargs}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get_resolved_arguments}))) (expr*{args} (expr (Name (str{id}{val=context}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=func}))) (expr{starargs} (Name (str{id}{val=resolved_args}))) (expr{kwargs} (Name (str{id}{val=resolved_kwargs})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=function_name})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=name}))) (expr (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=func}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=func})))))) (str{attr}{val=__name__}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=compile_func})))) (expr{value} (Call (expr{func} (Name (str{id}{val=partial}))) (expr*{args} (expr (Name (str{id}{val=generic_tag_compiler})))) (keyword*{keywords} (keyword (str{arg}{val=params}) (expr{value} (Name (str{id}{val=params})))) (keyword (str{arg}{val=varargs}) (expr{value} (Name (str{id}{val=varargs})))) (keyword (str{arg}{val=varkw}) (expr{value} (Name (str{id}{val=varkw})))) (keyword (str{arg}{val=defaults}) (expr{value} (Name (str{id}{val=defaults})))) (keyword (str{arg}{val=name}) (expr{value} (Name (str{id}{val=function_name})))) (keyword (str{arg}{val=takes_context}) (expr{value} (Name (str{id}{val=takes_context})))) (keyword (str{arg}{val=node_class}) (expr{value} (Name (str{id}{val=SimpleNode})))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=compile_func}))) (str{attr}{val=__doc__})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=func}))) (str{attr}{val=__doc__})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=tag}))) (expr*{args} (expr (Name (str{id}{val=function_name}))) (expr (Name (str{id}{val=compile_func}))))))))
(root (Return (expr{value} (Name (str{id}{val=func})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=func}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=dec})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Call (expr{func} (Name (str{id}{val=callable}))) (expr*{args} (expr (Name (str{id}{val=func})))))) (stmt*{body} (stmt (Pass))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=dec}))) (expr*{args} (expr (Name (str{id}{val=func}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=assignment_tag}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=func}))) (expr (Name (str{id}{val=takes_context}))) (expr (Name (str{id}{val=name})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=dec}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=func})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=params}))) (expr (Name (str{id}{val=varargs}))) (expr (Name (str{id}{val=varkw}))) (expr (Name (str{id}{val=defaults}))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=getargspec}))) (expr*{args} (expr (Name (str{id}{val=func}))))))))
(root (ClassDef (str{name}{val=AssignmentNode}) (expr*{bases} (expr (Name (str{id}{val=TagHelperNode})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=takes_context}))) (expr (Name (str{id}{val=args}))) (expr (Name (str{id}{val=kwargs}))) (expr (Name (str{id}{val=target_var})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=AssignmentNode}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=takes_context}))) (expr (Name (str{id}{val=args}))) (expr (Name (str{id}{val=kwargs}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=target_var})))) (expr{value} (Name (str{id}{val=target_var})))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=resolved_args}))) (expr (Name (str{id}{val=resolved_kwargs}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get_resolved_arguments}))) (expr*{args} (expr (Name (str{id}{val=context}))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=context}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=target_var})))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=func}))) (expr{starargs} (Name (str{id}{val=resolved_args}))) (expr{kwargs} (Name (str{id}{val=resolved_kwargs})))))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=function_name})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=name}))) (expr (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=func}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=func})))))) (str{attr}{val=__name__}))))))))
(root (FunctionDef (str{name}{val=compile_func}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=parser}))) (expr (Name (str{id}{val=token})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=bits})))) (expr{value} (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=split_contents}))))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=1})))))))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=bits})))))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Num (int{n}{val=2})))))) (expr (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=-2}))))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val='%s' tag takes at least 2 arguments and the second last argument must be 'as'}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=function_name}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=target_var})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=-1})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=bits})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Slice (expr{upper} (Num (int{n}{val=-2})))))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=args}))) (expr (Name (str{id}{val=kwargs}))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=parse_bits}))) (expr*{args} (expr (Name (str{id}{val=parser}))) (expr (Name (str{id}{val=bits}))) (expr (Name (str{id}{val=params}))) (expr (Name (str{id}{val=varargs}))) (expr (Name (str{id}{val=varkw}))) (expr (Name (str{id}{val=defaults}))) (expr (Name (str{id}{val=takes_context}))) (expr (Name (str{id}{val=function_name}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=AssignmentNode}))) (expr*{args} (expr (Name (str{id}{val=takes_context}))) (expr (Name (str{id}{val=args}))) (expr (Name (str{id}{val=kwargs}))) (expr (Name (str{id}{val=target_var}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=compile_func}))) (str{attr}{val=__doc__})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=func}))) (str{attr}{val=__doc__})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=tag}))) (expr*{args} (expr (Name (str{id}{val=function_name}))) (expr (Name (str{id}{val=compile_func}))))))))
(root (Return (expr{value} (Name (str{id}{val=func})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=func}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=dec})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Call (expr{func} (Name (str{id}{val=callable}))) (expr*{args} (expr (Name (str{id}{val=func})))))) (stmt*{body} (stmt (Pass))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=dec}))) (expr*{args} (expr (Name (str{id}{val=func}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=inclusion_tag}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=file_name}))) (expr (Name (str{id}{val=context_class}))) (expr (Name (str{id}{val=takes_context}))) (expr (Name (str{id}{val=name})))) (expr*{defaults} (expr (Name (str{id}{val=Context}))) (expr (Name (str{id}{val=False}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=dec}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=func})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=params}))) (expr (Name (str{id}{val=varargs}))) (expr (Name (str{id}{val=varkw}))) (expr (Name (str{id}{val=defaults}))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=getargspec}))) (expr*{args} (expr (Name (str{id}{val=func}))))))))
(root (ClassDef (str{name}{val=InclusionNode}) (expr*{bases} (expr (Name (str{id}{val=TagHelperNode})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=resolved_args}))) (expr (Name (str{id}{val=resolved_kwargs}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get_resolved_arguments}))) (expr*{args} (expr (Name (str{id}{val=context}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_dict})))) (expr{value} (Call (expr{func} (Name (str{id}{val=func}))) (expr{starargs} (Name (str{id}{val=resolved_args}))) (expr{kwargs} (Name (str{id}{val=resolved_kwargs})))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=False})))))))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=django.template.loader}) (alias*{names} (alias (str{name}{val=get_template})) (alias (str{name}{val=select_template}))) (int{level}{val=0})))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=file_name}))) (expr (Name (str{id}{val=Template})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=t})))) (expr{value} (Name (str{id}{val=file_name})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=file_name}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=string_types})))))))) (expr (Call (expr{func} (Name (str{id}{val=is_iterable}))) (expr*{args} (expr (Name (str{id}{val=file_name}))))))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=t})))) (expr{value} (Call (expr{func} (Name (str{id}{val=select_template}))) (expr*{args} (expr (Name (str{id}{val=file_name}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=t})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_template}))) (expr*{args} (expr (Name (str{id}{val=file_name}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=nodelist})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=t}))) (str{attr}{val=nodelist})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=new_context})))) (expr{value} (Call (expr{func} (Name (str{id}{val=context_class}))) (expr*{args} (expr (Name (str{id}{val=_dict})))) (expr{kwargs} (Dict (expr*{keys} (expr (Str (str{s}{val=autoescape}))) (expr (Str (str{s}{val=current_app}))) (expr (Str (str{s}{val=use_l10n}))) (expr (Str (str{s}{val=use_tz})))) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=context}))) (str{attr}{val=autoescape}))) (expr (Attribute (expr{value} (Name (str{id}{val=context}))) (str{attr}{val=current_app}))) (expr (Attribute (expr{value} (Name (str{id}{val=context}))) (str{attr}{val=use_l10n}))) (expr (Attribute (expr{value} (Name (str{id}{val=context}))) (str{attr}{val=use_tz}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=csrf_token})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=context}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:4_}))) (expr (Name (str{id}{val=None}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=csrf_token}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=new_context}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Name (str{id}{val=csrf_token})))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=nodelist}))) (str{attr}{val=render}))) (expr*{args} (expr (Name (str{id}{val=new_context}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=function_name})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=name}))) (expr (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=func}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=func})))))) (str{attr}{val=__name__}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=compile_func})))) (expr{value} (Call (expr{func} (Name (str{id}{val=partial}))) (expr*{args} (expr (Name (str{id}{val=generic_tag_compiler})))) (keyword*{keywords} (keyword (str{arg}{val=params}) (expr{value} (Name (str{id}{val=params})))) (keyword (str{arg}{val=varargs}) (expr{value} (Name (str{id}{val=varargs})))) (keyword (str{arg}{val=varkw}) (expr{value} (Name (str{id}{val=varkw})))) (keyword (str{arg}{val=defaults}) (expr{value} (Name (str{id}{val=defaults})))) (keyword (str{arg}{val=name}) (expr{value} (Name (str{id}{val=function_name})))) (keyword (str{arg}{val=takes_context}) (expr{value} (Name (str{id}{val=takes_context})))) (keyword (str{arg}{val=node_class}) (expr{value} (Name (str{id}{val=InclusionNode})))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=compile_func}))) (str{attr}{val=__doc__})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=func}))) (str{attr}{val=__doc__})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=tag}))) (expr*{args} (expr (Name (str{id}{val=function_name}))) (expr (Name (str{id}{val=compile_func}))))))))
(root (Return (expr{value} (Name (str{id}{val=func})))))
(root (Return (expr{value} (Name (str{id}{val=dec})))))
(root (FunctionDef (str{name}{val=is_library_missing}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=path}))) (expr (Name (str{id}{val=module}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=name}))) (str{attr}{val=rsplit}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Num (int{n}{val=1}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=package})))) (expr{value} (Call (expr{func} (Name (str{id}{val=import_module}))) (expr*{args} (expr (Name (str{id}{val=path}))))))))
(root (Return (expr{value} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=module_has_submodule}))) (expr*{args} (expr (Name (str{id}{val=package}))) (expr (Name (str{id}{val=module}))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ImportError}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=is_library_missing}))) (expr*{args} (expr (Name (str{id}{val=path}))))))))
(root (FunctionDef (str{name}{val=import_library}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=taglib_module})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=mod})))) (expr{value} (Call (expr{func} (Name (str{id}{val=import_module}))) (expr*{args} (expr (Name (str{id}{val=taglib_module}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ImportError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=is_library_missing}))) (expr*{args} (expr (Name (str{id}{val=taglib_module})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=None})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=InvalidTemplateLibrary}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=taglib_module}))) (expr (Name (str{id}{val=e})))))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=mod}))) (str{attr}{val=register})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=AttributeError}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=InvalidTemplateLibrary}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=Template library %s does not have a variable named 'register'}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=taglib_module}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=templatetags_modules})))) (expr{value} (List (epsilon)))))
(root (FunctionDef (str{name}{val=get_templatetags_modules}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (Global (str*{names} (str{val=templatetags_modules}))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=templatetags_modules}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_templatetags_modules})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=templatetags_modules_candidates})))) (expr{value} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (AugAssign (expr{target} (Name (str{id}{val=templatetags_modules_candidates}))) (operator{op} (Add)) (expr{value} (ListComp (expr{elt} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=app_config}))) (str{attr}{val=name}))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=app_config}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=apps}))) (str{attr}{val=get_app_configs})))))))))))
(root (For (expr{target} (Name (str{id}{val=templatetag_module}))) (expr{iter} (Name (str{id}{val=templatetags_modules_candidates}))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=import_module}))) (expr*{args} (expr (Name (str{id}{val=templatetag_module}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=_templatetags_modules}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=templatetag_module}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ImportError}))) (stmt*{body} (stmt (Pass)))))))
(root (Continue))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=templatetags_modules})))) (expr{value} (Name (str{id}{val=_templatetags_modules})))))
(root (Return (expr{value} (Name (str{id}{val=templatetags_modules})))))
(root (FunctionDef (str{name}{val=get_library}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=library_name})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=lib})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=libraries}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=library_name}))) (expr (Name (str{id}{val=None}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=lib}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=templatetags_modules})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_templatetags_modules})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=tried_modules})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=module}))) (expr{iter} (Name (str{id}{val=templatetags_modules}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=taglib_module})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=module}))) (expr (Name (str{id}{val=library_name}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=tried_modules}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=taglib_module}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=lib})))) (expr{value} (Call (expr{func} (Name (str{id}{val=import_library}))) (expr*{args} (expr (Name (str{id}{val=taglib_module}))))))))
(root (If (expr{test} (Name (str{id}{val=lib}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=libraries}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=library_name})))))))) (expr{value} (Name (str{id}{val=lib})))))
(root (Break))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=lib}))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=InvalidTemplateLibrary}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=Template library %s not found, tried %s}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=library_name}))) (expr (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=,}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=tried_modules}))))))))))))))))
(root (Return (expr{value} (Name (str{id}{val=lib})))))
(root (FunctionDef (str{name}{val=add_to_builtins}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=module})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=builtins}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=import_library}))) (expr*{args} (expr (Name (str{id}{val=module})))))))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=add_to_builtins}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=add_to_builtins}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=add_to_builtins}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (ImportFrom (str{module}{val=copy}) (alias*{names} (alias (str{name}{val=copy}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.module_loading}) (alias*{names} (alias (str{name}{val=import_string}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_standard_context_processors})))) (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_builtin_context_processors})))) (expr{value} (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (ClassDef (str{name}{val=ContextPopException}) (expr*{bases} (expr (Name (str{id}{val=Exception})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (ClassDef (str{name}{val=ContextDict}) (expr*{bases} (expr (Name (str{id}{val=dict})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=ContextDict}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=context}))) (str{attr}{val=dicts}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=self}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=context})))) (expr{value} (Name (str{id}{val=context})))))
(root (FunctionDef (str{name}{val=__enter__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=self})))))
(root (FunctionDef (str{name}{val=__exit__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=context}))) (str{attr}{val=pop})))))))
(root (ClassDef (str{name}{val=BaseContext}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=dict_})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_reset_dicts}))) (expr*{args} (expr (Name (str{id}{val=dict_}))))))))
(root (FunctionDef (str{name}{val=_reset_dicts}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=builtins})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_})))) (expr*{values} (expr (Name (str{id}{val=True}))) (expr (Name (str{id}{val=False}))) (expr (Name (str{id}{val=None}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=dicts})))) (expr{value} (List (expr*{elts} (expr (Name (str{id}{val=builtins}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=dicts}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (FunctionDef (str{name}{val=__copy__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=duplicate})))) (expr{value} (Call (expr{func} (Name (str{id}{val=copy}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=BaseContext}))) (expr (Name (str{id}{val=self})))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=duplicate}))) (str{attr}{val=dicts})))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=dicts}))) (slice{slice} (Slice (epsilon)))))))
(root (Return (expr{value} (Name (str{id}{val=duplicate})))))
(root (FunctionDef (str{name}{val=__repr__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=repr}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=dicts}))))))))
(root (FunctionDef (str{name}{val=__iter__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=d}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=reversed}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=dicts})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Yield (expr{value} (Name (str{id}{val=d})))))))
(root (FunctionDef (str{name}{val=push}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=ContextDict}))) (expr*{args} (expr (Name (str{id}{val=self})))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (FunctionDef (str{name}{val=pop}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=dicts})))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Name (str{id}{val=ContextPopException})))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=dicts}))) (str{attr}{val=pop})))))))
(root (FunctionDef (str{name}{val=__setitem__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=dicts}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=-1}))))))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key})))))))) (expr{value} (Name (str{id}{val=value})))))
(root (FunctionDef (str{name}{val=__getitem__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=d}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=reversed}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=dicts})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=key}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=d})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Subscript (expr{value} (Name (str{id}{val=d}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key})))))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=KeyError}))) (expr*{args} (expr (Name (str{id}{val=key}))))))))
(root (FunctionDef (str{name}{val=__delitem__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key})))))) (stmt*{body} (stmt (Pass)))))
(root (Delete (expr*{targets} (expr (Subscript (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=dicts}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=-1}))))))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key}))))))))))
(root (FunctionDef (str{name}{val=has_key}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=d}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=dicts}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=key}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=d})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=True})))))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (FunctionDef (str{name}{val=__contains__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=has_key}))) (expr*{args} (expr (Name (str{id}{val=key}))))))))
(root (FunctionDef (str{name}{val=get}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=otherwise})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=d}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=reversed}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=dicts})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=key}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=d})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Subscript (expr{value} (Name (str{id}{val=d}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key})))))))))
(root (Return (expr{value} (Name (str{id}{val=otherwise})))))
(root (FunctionDef (str{name}{val=new}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=values})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=new_context})))) (expr{value} (Call (expr{func} (Name (str{id}{val=copy}))) (expr*{args} (expr (Name (str{id}{val=self}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=new_context}))) (str{attr}{val=_reset_dicts}))) (expr*{args} (expr (Name (str{id}{val=values}))))))))
(root (Return (expr{value} (Name (str{id}{val=new_context})))))
(root (FunctionDef (str{name}{val=flatten}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=flat})))) (expr{value} (Dict (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=d}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=dicts}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=flat}))) (str{attr}{val=update}))) (expr*{args} (expr (Name (str{id}{val=d}))))))))
(root (Return (expr{value} (Name (str{id}{val=flat})))))
(root (FunctionDef (str{name}{val=__eq__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=other})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=other}))) (expr (Name (str{id}{val=BaseContext})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=flatten}))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=other}))) (str{attr}{val=flatten}))))))))))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (ClassDef (str{name}{val=Context}) (expr*{bases} (expr (Name (str{id}{val=BaseContext})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=dict_}))) (expr (Name (str{id}{val=autoescape}))) (expr (Name (str{id}{val=current_app}))) (expr (Name (str{id}{val=use_l10n}))) (expr (Name (str{id}{val=use_tz})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=True}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=autoescape})))) (expr{value} (Name (str{id}{val=autoescape})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=current_app})))) (expr{value} (Name (str{id}{val=current_app})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=use_l10n})))) (expr{value} (Name (str{id}{val=use_l10n})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=use_tz})))) (expr{value} (Name (str{id}{val=use_tz})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=render_context})))) (expr{value} (Call (expr{func} (Name (str{id}{val=RenderContext})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=Context}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=dict_}))))))))
(root (FunctionDef (str{name}{val=__copy__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=duplicate})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=Context}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__copy__})))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=duplicate}))) (str{attr}{val=render_context})))) (expr{value} (Call (expr{func} (Name (str{id}{val=copy}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=render_context}))))))))
(root (Return (expr{value} (Name (str{id}{val=duplicate})))))
(root (FunctionDef (str{name}{val=update}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=other_dict})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=other_dict}))) (expr (Str (str{s}{val=_STR:0_})))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TypeError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=dicts}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=other_dict}))))))))
(root (Return (expr{value} (Name (str{id}{val=other_dict})))))
(root (ClassDef (str{name}{val=RenderContext}) (expr*{bases} (expr (Name (str{id}{val=BaseContext})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__iter__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=d}))) (expr{iter} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=dicts}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=-1}))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Yield (expr{value} (Name (str{id}{val=d})))))))
(root (FunctionDef (str{name}{val=has_key}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Compare (expr{left} (Name (str{id}{val=key}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=dicts}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=-1}))))))))))))
(root (FunctionDef (str{name}{val=get}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=otherwise})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=dicts}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=-1}))))))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=otherwise}))))))))
(root (FunctionDef (str{name}{val=__getitem__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Subscript (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=dicts}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=-1}))))))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key})))))))))
(root (FunctionDef (str{name}{val=get_standard_processors}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (Global (str*{names} (str{val=_standard_context_processors}))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=_standard_context_processors}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=processors})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=collect})))) (expr{value} (List (epsilon)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=collect}))) (str{attr}{val=extend}))) (expr*{args} (expr (Name (str{id}{val=_builtin_context_processors}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=collect}))) (str{attr}{val=extend}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=TEMPLATE_CONTEXT_PROCESSORS}))))))))
(root (For (expr{target} (Name (str{id}{val=path}))) (expr{iter} (Name (str{id}{val=collect}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=func})))) (expr{value} (Call (expr{func} (Name (str{id}{val=import_string}))) (expr*{args} (expr (Name (str{id}{val=path}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=processors}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=func}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_standard_context_processors})))) (expr{value} (Call (expr{func} (Name (str{id}{val=tuple}))) (expr*{args} (expr (Name (str{id}{val=processors}))))))))
(root (Return (expr{value} (Name (str{id}{val=_standard_context_processors})))))
(root (ClassDef (str{name}{val=RequestContext}) (expr*{bases} (expr (Name (str{id}{val=Context})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=request}))) (expr (Name (str{id}{val=dict_}))) (expr (Name (str{id}{val=processors}))) (expr (Name (str{id}{val=current_app}))) (expr (Name (str{id}{val=use_l10n}))) (expr (Name (str{id}{val=use_tz})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=Context}))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=dict_})))) (keyword*{keywords} (keyword (str{arg}{val=current_app}) (expr{value} (Name (str{id}{val=current_app})))) (keyword (str{arg}{val=use_l10n}) (expr{value} (Name (str{id}{val=use_l10n})))) (keyword (str{arg}{val=use_tz}) (expr{value} (Name (str{id}{val=use_tz})))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=processors}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=processors})))) (expr{value} (Tuple (epsilon)))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=processors})))) (expr{value} (Call (expr{func} (Name (str{id}{val=tuple}))) (expr*{args} (expr (Name (str{id}{val=processors}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=updates})))) (expr{value} (Call (expr{func} (Name (str{id}{val=dict})))))))
(root (For (expr{target} (Name (str{id}{val=processor}))) (expr{iter} (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=get_standard_processors}))))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=processors}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=updates}))) (str{attr}{val=update}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=processor}))) (expr*{args} (expr (Name (str{id}{val=request})))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=update}))) (expr*{args} (expr (Name (str{id}{val=updates}))))))))
(root (ImportFrom (str{module}{val=django.template.base}) (alias*{names} (alias (str{name}{val=Lexer})) (alias (str{name}{val=Parser})) (alias (str{name}{val=tag_re})) (alias (str{name}{val=NodeList})) (alias (str{name}{val=VariableNode})) (alias (str{name}{val=TemplateSyntaxError}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=force_text}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.html}) (alias*{names} (alias (str{name}{val=escape}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.safestring}) (alias*{names} (alias (str{name}{val=SafeData})) (alias (str{name}{val=EscapeData}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.formats}) (alias*{names} (alias (str{name}{val=localize}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.timezone}) (alias*{names} (alias (str{name}{val=template_localtime}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=DebugLexer}) (expr*{bases} (expr (Name (str{id}{val=Lexer})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=template_string}))) (expr (Name (str{id}{val=origin})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=DebugLexer}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=template_string}))) (expr (Name (str{id}{val=origin}))))))))
(root (FunctionDef (str{name}{val=tokenize}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=result}))) (expr (Name (str{id}{val=upto}))))))) (expr{value} (Tuple (expr*{elts} (expr (List (epsilon))) (expr (Num (int{n}{val=0}))))))))
(root (For (expr{target} (Name (str{id}{val=match}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=tag_re}))) (str{attr}{val=finditer}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=template_string})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=start}))) (expr (Name (str{id}{val=end}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=match}))) (str{attr}{val=span})))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=start}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Name (str{id}{val=upto})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=result}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=create_token}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=template_string}))) (slice{slice} (Slice (expr{lower} (Name (str{id}{val=upto}))) (expr{upper} (Name (str{id}{val=start}))))))) (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=upto}))) (expr (Name (str{id}{val=start})))))) (expr (Name (str{id}{val=False})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=upto})))) (expr{value} (Name (str{id}{val=start})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=result}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=create_token}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=template_string}))) (slice{slice} (Slice (expr{lower} (Name (str{id}{val=start}))) (expr{upper} (Name (str{id}{val=end}))))))) (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=start}))) (expr (Name (str{id}{val=end})))))) (expr (Name (str{id}{val=True})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=upto})))) (expr{value} (Name (str{id}{val=end})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=last_bit})))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=template_string}))) (slice{slice} (Slice (expr{lower} (Name (str{id}{val=upto})))))))))
(root (If (expr{test} (Name (str{id}{val=last_bit}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=result}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=create_token}))) (expr*{args} (expr (Name (str{id}{val=last_bit}))) (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=upto}))) (expr (BinOp (expr{left} (Name (str{id}{val=upto}))) (operator{op} (Add)) (expr{right} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=last_bit}))))))))))) (expr (Name (str{id}{val=False})))))))))))
(root (Return (expr{value} (Name (str{id}{val=result})))))
(root (FunctionDef (str{name}{val=create_token}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=token_string}))) (expr (Name (str{id}{val=source}))) (expr (Name (str{id}{val=in_tag})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=token})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=DebugLexer}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=create_token}))) (expr*{args} (expr (Name (str{id}{val=token_string}))) (expr (Name (str{id}{val=in_tag}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=source})))) (expr{value} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=origin}))) (expr (Name (str{id}{val=source}))))))))
(root (Return (expr{value} (Name (str{id}{val=token})))))
(root (ClassDef (str{name}{val=DebugParser}) (expr*{bases} (expr (Name (str{id}{val=Parser})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=lexer})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=DebugParser}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=lexer}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=command_stack})))) (expr{value} (List (epsilon)))))
(root (FunctionDef (str{name}{val=enter_command}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=command}))) (expr (Name (str{id}{val=token})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=command_stack}))) (str{attr}{val=append}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=command}))) (expr (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=source})))))))))))
(root (FunctionDef (str{name}{val=exit_command}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=command_stack}))) (str{attr}{val=pop})))))))
(root (FunctionDef (str{name}{val=error}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=token}))) (expr (Name (str{id}{val=msg})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=source_error}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=source}))) (expr (Name (str{id}{val=msg}))))))))
(root (FunctionDef (str{name}{val=source_error}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=source}))) (expr (Name (str{id}{val=msg})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=e})))) (expr{value} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (Name (str{id}{val=msg}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=django_template_source})))) (expr{value} (Name (str{id}{val=source})))))
(root (Return (expr{value} (Name (str{id}{val=e})))))
(root (FunctionDef (str{name}{val=create_nodelist}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=DebugNodeList})))))))
(root (FunctionDef (str{name}{val=create_variable_node}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=contents})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=DebugVariableNode}))) (expr*{args} (expr (Name (str{id}{val=contents}))))))))
(root (FunctionDef (str{name}{val=extend_nodelist}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=nodelist}))) (expr (Name (str{id}{val=node}))) (expr (Name (str{id}{val=token})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=node}))) (str{attr}{val=source})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=source})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=DebugParser}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=extend_nodelist}))) (expr*{args} (expr (Name (str{id}{val=nodelist}))) (expr (Name (str{id}{val=node}))) (expr (Name (str{id}{val=token}))))))))
(root (FunctionDef (str{name}{val=unclosed_block_tag}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=parse_until})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=command}))) (expr (Name (str{id}{val=source}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=command_stack}))) (str{attr}{val=pop})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=msg})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=command}))) (expr (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=, }))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=parse_until})))))))))))))
(root (Raise (expr{type} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=source_error}))) (expr*{args} (expr (Name (str{id}{val=source}))) (expr (Name (str{id}{val=msg}))))))))
(root (FunctionDef (str{name}{val=compile_filter_error}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=token}))) (expr (Name (str{id}{val=e})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=e}))) (expr (Str (str{s}{val=_STR:0_})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=django_template_source})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=source})))))
(root (FunctionDef (str{name}{val=compile_function_error}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=token}))) (expr (Name (str{id}{val=e})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=e}))) (expr (Str (str{s}{val=_STR:0_})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=django_template_source})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=source})))))
(root (ClassDef (str{name}{val=DebugNodeList}) (expr*{bases} (expr (Name (str{id}{val=NodeList})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=render_node}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=node}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=node}))) (str{attr}{val=render}))) (expr*{args} (expr (Name (str{id}{val=context}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=Exception}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=e}))) (expr (Str (str{s}{val=_STR:0_})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=django_template_source})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=node}))) (str{attr}{val=source})))))
(root (Raise (epsilon)))
(root (ClassDef (str{name}{val=DebugVariableNode}) (expr*{bases} (expr (Name (str{id}{val=VariableNode})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=output})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=filter_expression}))) (str{attr}{val=resolve}))) (expr*{args} (expr (Name (str{id}{val=context}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=output})))) (expr{value} (Call (expr{func} (Name (str{id}{val=template_localtime}))) (expr*{args} (expr (Name (str{id}{val=output})))) (keyword*{keywords} (keyword (str{arg}{val=use_tz}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=context}))) (str{attr}{val=use_tz})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=output})))) (expr{value} (Call (expr{func} (Name (str{id}{val=localize}))) (expr*{args} (expr (Name (str{id}{val=output})))) (keyword*{keywords} (keyword (str{arg}{val=use_l10n}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=context}))) (str{attr}{val=use_l10n})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=output})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=output}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=UnicodeDecodeError}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=Exception}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=e}))) (expr (Str (str{s}{val=_STR:0_})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=django_template_source})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=source})))))
(root (Raise (epsilon)))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=context}))) (str{attr}{val=autoescape}))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=output}))) (expr (Name (str{id}{val=SafeData}))))))))))) (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=output}))) (expr (Name (str{id}{val=EscapeData}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=escape}))) (expr*{args} (expr (Name (str{id}{val=output}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=output})))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=re})))))
(root (Import (alias*{names} (alias (str{name}{val=random}) (str{asname}{val=random_module})))))
(root (ImportFrom (str{module}{val=decimal}) (alias*{names} (alias (str{name}{val=Decimal})) (alias (str{name}{val=InvalidOperation})) (alias (str{name}{val=Context})) (alias (str{name}{val=ROUND_HALF_UP}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=functools}) (alias*{names} (alias (str{name}{val=wraps}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=pprint}) (alias*{names} (alias (str{name}{val=pformat}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.template.base}) (alias*{names} (alias (str{name}{val=Variable})) (alias (str{name}{val=Library})) (alias (str{name}{val=VariableDoesNotExist}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=formats}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.dateformat}) (alias*{names} (alias (str{name}{val=format})) (alias (str{name}{val=time_format}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=force_text})) (alias (str{name}{val=iri_to_uri}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.html}) (alias*{names} (alias (str{name}{val=conditional_escape})) (alias (str{name}{val=escapejs})) (alias (str{name}{val=escape})) (alias (str{name}{val=urlize}) (str{asname}{val=_urlize})) (alias (str{name}{val=linebreaks})) (alias (str{name}{val=strip_tags})) (alias (str{name}{val=avoid_wrapping})) (alias (str{name}{val=remove_tags}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.http}) (alias*{names} (alias (str{name}{val=urlquote}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.text}) (alias*{names} (alias (str{name}{val=Truncator})) (alias (str{name}{val=wrap})) (alias (str{name}{val=phone2numeric}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.safestring}) (alias*{names} (alias (str{name}{val=mark_safe})) (alias (str{name}{val=SafeData})) (alias (str{name}{val=mark_for_escaping}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.timesince}) (alias*{names} (alias (str{name}{val=timesince})) (alias (str{name}{val=timeuntil}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.translation}) (alias*{names} (alias (str{name}{val=ugettext})) (alias (str{name}{val=ungettext}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.text}) (alias*{names} (alias (str{name}{val=normalize_newlines})) (alias (str{name}{val=slugify}) (str{asname}{val=_slugify}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=register})))) (expr{value} (Call (expr{func} (Name (str{id}{val=Library})))))))
(root (FunctionDef (str{name}{val=stringfilter}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=func})))))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=_dec}) (arguments{args} (arguments (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=args}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=args})))) (expr{value} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Name (str{id}{val=args}))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=args}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=args}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=args}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (expr (Name (str{id}{val=SafeData})))))) (expr (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=_dec}))) (str{attr}{val=_decorated_function}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=False}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=mark_safe}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=func}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs}))))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=func}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=_dec}))) (str{attr}{val=_decorated_function})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=func}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=func}))))))))
(root (Return (expr{value} (Call (expr{func} (Call (expr{func} (Name (str{id}{val=wraps}))) (expr*{args} (expr (Name (str{id}{val=func})))))) (expr*{args} (expr (Name (str{id}{val=_dec}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=True}))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=stringfilter}))))))
(root (FunctionDef (str{name}{val=addslashes}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=replace}))) (expr*{args} (expr (Str (str{s}{val=\}))) (expr (Str (str{s}{val=\\})))))) (str{attr}{val=replace}))) (expr*{args} (expr (Str (str{s}{val="}))) (expr (Str (str{s}{val=\"})))))) (str{attr}{val=replace}))) (expr*{args} (expr (Str (str{s}{val='}))) (expr (Str (str{s}{val=\'}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=True}))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=stringfilter}))))))
(root (FunctionDef (str{name}{val=capfirst}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=value}))) (expr (BinOp (expr{left} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=value}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (str{attr}{val=upper}))))) (operator{op} (Add)) (expr{right} (Subscript (expr{value} (Name (str{id}{val=value}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=1}))))))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=stringfilter}))))))
(root (FunctionDef (str{name}{val=escapejs_filter}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=escapejs}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=pos_inf})))) (expr{value} (BinOp (expr{left} (Num (float{n}{val=1e+200}))) (operator{op} (Mult)) (expr{right} (Num (float{n}{val=1e+200})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=neg_inf})))) (expr{value} (BinOp (expr{left} (Num (float{n}{val=-1e+200}))) (operator{op} (Mult)) (expr{right} (Num (float{n}{val=1e+200})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=nan})))) (expr{value} (BinOp (expr{left} (BinOp (expr{left} (Num (float{n}{val=1e+200}))) (operator{op} (Mult)) (expr{right} (Num (float{n}{val=1e+200}))))) (operator{op} (FloorDiv)) (expr{right} (BinOp (expr{left} (Num (float{n}{val=1e+200}))) (operator{op} (Mult)) (expr{right} (Num (float{n}{val=1e+200})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=special_floats})))) (expr{value} (List (expr*{elts} (expr (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Name (str{id}{val=pos_inf})))))) (expr (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Name (str{id}{val=neg_inf})))))) (expr (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Name (str{id}{val=nan})))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=True}))))))))))
(root (FunctionDef (str{name}{val=floatformat}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=text}))) (expr (Name (str{id}{val=arg})))) (expr*{defaults} (expr (Num (int{n}{val=-1})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=input_val})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=text}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=d})))) (expr{value} (Call (expr{func} (Name (str{id}{val=Decimal}))) (expr*{args} (expr (Name (str{id}{val=input_val}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=UnicodeEncodeError}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=InvalidOperation}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=input_val}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=special_floats})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=input_val})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=d})))) (expr{value} (Call (expr{func} (Name (str{id}{val=Decimal}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=float}))) (expr*{args} (expr (Name (str{id}{val=text}))))))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=ValueError}))) (expr (Name (str{id}{val=InvalidOperation}))) (expr (Name (str{id}{val=TypeError}))) (expr (Name (str{id}{val=UnicodeEncodeError})))))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=p})))) (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=arg}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ValueError}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Name (str{id}{val=input_val})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=m})))) (expr{value} (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=d})))))) (operator{op} (Sub)) (expr{right} (Name (str{id}{val=d})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=ValueError}))) (expr (Name (str{id}{val=OverflowError}))) (expr (Name (str{id}{val=InvalidOperation})))))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Name (str{id}{val=input_val})))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=m}))))) (expr (Compare (expr{left} (Name (str{id}{val=p}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Num (int{n}{val=0}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=mark_safe}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=formats}))) (str{attr}{val=number_format}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=%d}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=d})))))))) (expr (Num (int{n}{val=0})))))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=p}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=exp})))) (expr{value} (Call (expr{func} (Name (str{id}{val=Decimal}))) (expr*{args} (expr (Num (int{n}{val=1}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=exp})))) (expr{value} (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=Decimal}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (operator{op} (Div)) (expr{right} (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=Decimal}))) (expr*{args} (expr (Num (int{n}{val=10})))))) (operator{op} (Pow)) (expr{right} (Call (expr{func} (Name (str{id}{val=abs}))) (expr*{args} (expr (Name (str{id}{val=p}))))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=tupl})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=d}))) (str{attr}{val=as_tuple})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=units})))) (expr{value} (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=tupl}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1})))))))))) (operator{op} (Sub)) (expr{right} (Subscript (expr{value} (Name (str{id}{val=tupl}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=2})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=prec})))) (expr{value} (BinOp (expr{left} (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=abs}))) (expr*{args} (expr (Name (str{id}{val=p})))))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=units}))))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=1})))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=sign}))) (expr (Name (str{id}{val=digits}))) (expr (Name (str{id}{val=exponent}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=d}))) (str{attr}{val=quantize}))) (expr*{args} (expr (Name (str{id}{val=exp}))) (expr (Name (str{id}{val=ROUND_HALF_UP}))) (expr (Call (expr{func} (Name (str{id}{val=Context}))) (keyword*{keywords} (keyword (str{arg}{val=prec}) (expr{value} (Name (str{id}{val=prec})))))))))) (str{attr}{val=as_tuple})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=digits})))) (expr{value} (ListComp (expr{elt} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))) (expr*{args} (expr (Name (str{id}{val=digit})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=digit}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=reversed}))) (expr*{args} (expr (Name (str{id}{val=digits}))))))))))))
(root (While (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=digits})))))) (cmpop*{ops} (cmpop (LtE))) (expr*{comparators} (expr (Call (expr{func} (Name (str{id}{val=abs}))) (expr*{args} (expr (Name (str{id}{val=exponent}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=digits}))) (str{attr}{val=append}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=digits}))) (str{attr}{val=insert}))) (expr*{args} (expr (UnaryOp (unaryop{op} (USub)) (expr{operand} (Name (str{id}{val=exponent}))))) (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Name (str{id}{val=sign}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=digits}))) (str{attr}{val=append}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=number})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=}))) (str{attr}{val=join}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=reversed}))) (expr*{args} (expr (Name (str{id}{val=digits})))))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=mark_safe}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=formats}))) (str{attr}{val=number_format}))) (expr*{args} (expr (Name (str{id}{val=number}))) (expr (Call (expr{func} (Name (str{id}{val=abs}))) (expr*{args} (expr (Name (str{id}{val=p}))))))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=InvalidOperation}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Name (str{id}{val=input_val})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=True}))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=stringfilter}))))))
(root (FunctionDef (str{name}{val=iriencode}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=iri_to_uri}))) (expr*{args} (expr (Name (str{id}{val=value})))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=True})))) (keyword (str{arg}{val=needs_autoescape}) (expr{value} (Name (str{id}{val=True}))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=stringfilter}))))))
(root (FunctionDef (str{name}{val=linenumbers}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=autoescape})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=lines})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=split}))) (expr*{args} (expr (Str (str{s}{val=\n}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=width})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=lines})))))))))))))))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=autoescape}))))) (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=SafeData}))))))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=i}))) (expr (Name (str{id}{val=line})))))) (expr{iter} (Call (expr{func} (Name (str{id}{val=enumerate}))) (expr*{args} (expr (Name (str{id}{val=lines})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=lines}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=i})))))))) (expr{value} (BinOp (expr{left} (BinOp (expr{left} (BinOp (expr{left} (Str (str{s}{val=%0}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=width}))))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=_STR:1_}))))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (BinOp (expr{left} (Name (str{id}{val=i}))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=1}))))) (expr (Name (str{id}{val=line}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=i}))) (expr (Name (str{id}{val=line})))))) (expr{iter} (Call (expr{func} (Name (str{id}{val=enumerate}))) (expr*{args} (expr (Name (str{id}{val=lines})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=lines}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=i})))))))) (expr{value} (BinOp (expr{left} (BinOp (expr{left} (BinOp (expr{left} (Str (str{s}{val=%0}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=width}))))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=_STR:1_}))))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (BinOp (expr{left} (Name (str{id}{val=i}))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=1}))))) (expr (Call (expr{func} (Name (str{id}{val=escape}))) (expr*{args} (expr (Name (str{id}{val=line})))))))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=mark_safe}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=\n}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=lines})))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=True}))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=stringfilter}))))))
(root (FunctionDef (str{name}{val=lower}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=lower})))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=False}))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=stringfilter}))))))
(root (FunctionDef (str{name}{val=make_list}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=True}))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=stringfilter}))))))
(root (FunctionDef (str{name}{val=slugify}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=_slugify}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=True}))))))))))
(root (FunctionDef (str{name}{val=stringformat}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=arg})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (BinOp (expr{left} (BinOp (expr{left} (Str (str{s}{val=%}))) (operator{op} (Add)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))) (expr*{args} (expr (Name (str{id}{val=arg})))))))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=value})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=ValueError}))) (expr (Name (str{id}{val=TypeError})))))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=True}))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=stringfilter}))))))
(root (FunctionDef (str{name}{val=title}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=t})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=sub}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=m})))))) (expr{body} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=m}))) (str{attr}{val=group}))) (expr*{args} (expr (Num (int{n}{val=0})))))) (str{attr}{val=lower}))))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=title}))))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=sub}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=m})))))) (expr{body} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=m}))) (str{attr}{val=group}))) (expr*{args} (expr (Num (int{n}{val=0})))))) (str{attr}{val=lower}))))))) (expr (Name (str{id}{val=t}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=True}))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=stringfilter}))))))
(root (FunctionDef (str{name}{val=truncatechars}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=arg})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=length})))) (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=arg}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ValueError}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Name (str{id}{val=value})))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=Truncator}))) (expr*{args} (expr (Name (str{id}{val=value})))))) (str{attr}{val=chars}))) (expr*{args} (expr (Name (str{id}{val=length}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=True}))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=stringfilter}))))))
(root (FunctionDef (str{name}{val=truncatechars_html}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=arg})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=length})))) (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=arg}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ValueError}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Name (str{id}{val=value})))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=Truncator}))) (expr*{args} (expr (Name (str{id}{val=value})))))) (str{attr}{val=chars}))) (expr*{args} (expr (Name (str{id}{val=length})))) (keyword*{keywords} (keyword (str{arg}{val=html}) (expr{value} (Name (str{id}{val=True})))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=True}))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=stringfilter}))))))
(root (FunctionDef (str{name}{val=truncatewords}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=arg})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=length})))) (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=arg}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ValueError}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Name (str{id}{val=value})))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=Truncator}))) (expr*{args} (expr (Name (str{id}{val=value})))))) (str{attr}{val=words}))) (expr*{args} (expr (Name (str{id}{val=length})))) (keyword*{keywords} (keyword (str{arg}{val=truncate}) (expr{value} (Str (str{s}{val= ...})))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=True}))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=stringfilter}))))))
(root (FunctionDef (str{name}{val=truncatewords_html}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=arg})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=length})))) (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=arg}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ValueError}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Name (str{id}{val=value})))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=Truncator}))) (expr*{args} (expr (Name (str{id}{val=value})))))) (str{attr}{val=words}))) (expr*{args} (expr (Name (str{id}{val=length})))) (keyword*{keywords} (keyword (str{arg}{val=html}) (expr{value} (Name (str{id}{val=True})))) (keyword (str{arg}{val=truncate}) (expr{value} (Str (str{s}{val= ...})))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=False}))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=stringfilter}))))))
(root (FunctionDef (str{name}{val=upper}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=upper})))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=False}))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=stringfilter}))))))
(root (FunctionDef (str{name}{val=urlencode}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=safe})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=kwargs})))) (expr{value} (Dict (epsilon)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=safe}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=kwargs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Name (str{id}{val=safe})))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=urlquote}))) (expr*{args} (expr (Name (str{id}{val=value})))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=True})))) (keyword (str{arg}{val=needs_autoescape}) (expr{value} (Name (str{id}{val=True}))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=stringfilter}))))))
(root (FunctionDef (str{name}{val=urlize}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=autoescape})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=mark_safe}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=_urlize}))) (expr*{args} (expr (Name (str{id}{val=value})))) (keyword*{keywords} (keyword (str{arg}{val=nofollow}) (expr{value} (Name (str{id}{val=True})))) (keyword (str{arg}{val=autoescape}) (expr{value} (Name (str{id}{val=autoescape}))))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=True})))) (keyword (str{arg}{val=needs_autoescape}) (expr{value} (Name (str{id}{val=True}))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=stringfilter}))))))
(root (FunctionDef (str{name}{val=urlizetrunc}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=limit}))) (expr (Name (str{id}{val=autoescape})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=mark_safe}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=_urlize}))) (expr*{args} (expr (Name (str{id}{val=value})))) (keyword*{keywords} (keyword (str{arg}{val=trim_url_limit}) (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=limit}))))))) (keyword (str{arg}{val=nofollow}) (expr{value} (Name (str{id}{val=True})))) (keyword (str{arg}{val=autoescape}) (expr{value} (Name (str{id}{val=autoescape}))))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=False}))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=stringfilter}))))))
(root (FunctionDef (str{name}{val=wordcount}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=split}))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=True}))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=stringfilter}))))))
(root (FunctionDef (str{name}{val=wordwrap}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=arg})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=wrap}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=arg})))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=True}))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=stringfilter}))))))
(root (FunctionDef (str{name}{val=ljust}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=arg})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=ljust}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=arg})))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=True}))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=stringfilter}))))))
(root (FunctionDef (str{name}{val=rjust}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=arg})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=rjust}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=arg})))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=True}))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=stringfilter}))))))
(root (FunctionDef (str{name}{val=center}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=arg})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=center}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=arg})))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=stringfilter}))))))
(root (FunctionDef (str{name}{val=cut}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=arg})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=safe})))) (expr{value} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=SafeData}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=replace}))) (expr*{args} (expr (Name (str{id}{val=arg}))) (expr (Str (str{s}{val=}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=safe}))) (expr (Compare (expr{left} (Name (str{id}{val=arg}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=mark_safe}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (Return (expr{value} (Name (str{id}{val=value})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=True}))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=stringfilter}))))))
(root (FunctionDef (str{name}{val=escape_filter}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=mark_for_escaping}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=True}))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=stringfilter}))))))
(root (FunctionDef (str{name}{val=force_escape}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=escape}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (expr*{args} (expr (Str (str{s}{val=linebreaks})))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=True})))) (keyword (str{arg}{val=needs_autoescape}) (expr{value} (Name (str{id}{val=True}))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=stringfilter}))))))
(root (FunctionDef (str{name}{val=linebreaks_filter}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=autoescape})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=autoescape})))) (expr{value} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=autoescape}))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=SafeData})))))))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=mark_safe}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=linebreaks}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=autoescape})))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=True})))) (keyword (str{arg}{val=needs_autoescape}) (expr{value} (Name (str{id}{val=True}))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=stringfilter}))))))
(root (FunctionDef (str{name}{val=linebreaksbr}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=autoescape})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=autoescape})))) (expr{value} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=autoescape}))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=SafeData})))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=normalize_newlines}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (If (expr{test} (Name (str{id}{val=autoescape}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=escape}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=mark_safe}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=replace}))) (expr*{args} (expr (Str (str{s}{val=\n}))) (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=True}))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=stringfilter}))))))
(root (FunctionDef (str{name}{val=safe}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=mark_safe}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=True}))))))))))
(root (FunctionDef (str{name}{val=safeseq}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (ListComp (expr{elt} (Call (expr{func} (Name (str{id}{val=mark_safe}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=obj}))))))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=obj}))) (expr{iter} (Name (str{id}{val=value})))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=True}))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=stringfilter}))))))
(root (FunctionDef (str{name}{val=removetags}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=tags})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=remove_tags}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=tags}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=True}))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=stringfilter}))))))
(root (FunctionDef (str{name}{val=striptags}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=strip_tags}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=False}))))))))))
(root (FunctionDef (str{name}{val=dictsort}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=arg})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=sorted}))) (expr*{args} (expr (Name (str{id}{val=value})))) (keyword*{keywords} (keyword (str{arg}{val=key}) (expr{value} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=Variable}))) (expr*{args} (expr (Name (str{id}{val=arg})))))) (str{attr}{val=resolve})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=TypeError}))) (expr (Name (str{id}{val=VariableDoesNotExist})))))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=False}))))))))))
(root (FunctionDef (str{name}{val=dictsortreversed}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=arg})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=sorted}))) (expr*{args} (expr (Name (str{id}{val=value})))) (keyword*{keywords} (keyword (str{arg}{val=key}) (expr{value} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=Variable}))) (expr*{args} (expr (Name (str{id}{val=arg})))))) (str{attr}{val=resolve})))) (keyword (str{arg}{val=reverse}) (expr{value} (Name (str{id}{val=True})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=TypeError}))) (expr (Name (str{id}{val=VariableDoesNotExist})))))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=False}))))))))))
(root (FunctionDef (str{name}{val=first}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Subscript (expr{value} (Name (str{id}{val=value}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=IndexError}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=True})))) (keyword (str{arg}{val=needs_autoescape}) (expr{value} (Name (str{id}{val=True}))))))))))
(root (FunctionDef (str{name}{val=join}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=arg}))) (expr (Name (str{id}{val=autoescape})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=map}))) (expr*{args} (expr (Name (str{id}{val=force_text}))) (expr (Name (str{id}{val=value}))))))))
(root (If (expr{test} (Name (str{id}{val=autoescape}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (ListComp (expr{elt} (Call (expr{func} (Name (str{id}{val=conditional_escape}))) (expr*{args} (expr (Name (str{id}{val=v})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=v}))) (expr{iter} (Name (str{id}{val=value})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=data})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=conditional_escape}))) (expr*{args} (expr (Name (str{id}{val=arg})))))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=AttributeError}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Name (str{id}{val=value})))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=mark_safe}))) (expr*{args} (expr (Name (str{id}{val=data}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=True}))))))))))
(root (FunctionDef (str{name}{val=last}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Subscript (expr{value} (Name (str{id}{val=value}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=-1})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=IndexError}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=False}))))))))))
(root (FunctionDef (str{name}{val=length}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=ValueError}))) (expr (Name (str{id}{val=TypeError})))))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Num (int{n}{val=0})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=False}))))))))))
(root (FunctionDef (str{name}{val=length_is}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=arg})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=value})))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=arg})))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=ValueError}))) (expr (Name (str{id}{val=TypeError})))))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=True}))))))))))
(root (FunctionDef (str{name}{val=random}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=random_module}))) (str{attr}{val=choice}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=True}))))))))))
(root (FunctionDef (str{name}{val=slice_filter}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=arg})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=bits})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=x}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=arg}))) (str{attr}{val=split}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=x})))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=bits}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=None}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=bits}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=x})))))))))))
(root (Return (expr{value} (Subscript (expr{value} (Name (str{id}{val=value}))) (slice{slice} (Index (expr{value} (Call (expr{func} (Name (str{id}{val=slice}))) (expr{starargs} (Name (str{id}{val=bits})))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=ValueError}))) (expr (Name (str{id}{val=TypeError})))))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Name (str{id}{val=value})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=True})))) (keyword (str{arg}{val=needs_autoescape}) (expr{value} (Name (str{id}{val=True}))))))))))
(root (FunctionDef (str{name}{val=unordered_list}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=autoescape})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=autoescape}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=escaper})))) (expr{value} (Name (str{id}{val=conditional_escape})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=escaper})))) (expr{value} (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=x})))))) (expr{body} (Name (str{id}{val=x})))))))
(root (FunctionDef (str{name}{val=convert_old_style_list}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=list_})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=list_}))) (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=tuple}))) (expr (Name (str{id}{val=list}))))))))))) (expr (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=list_})))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Num (int{n}{val=2}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=list_}))) (expr (Name (str{id}{val=False}))))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=first_item}))) (expr (Name (str{id}{val=second_item}))))))) (expr{value} (Name (str{id}{val=list_})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=second_item}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (List (epsilon)))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (List (expr*{elts} (expr (Name (str{id}{val=first_item})))))) (expr (Name (str{id}{val=True}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=iter}))) (expr*{args} (expr (Name (str{id}{val=second_item}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=TypeError}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=list_}))) (expr (Name (str{id}{val=False}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=old_style_list})))) (expr{value} (Name (str{id}{val=True})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=new_second_item})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=sublist}))) (expr{iter} (Name (str{id}{val=second_item}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=item}))) (expr (Name (str{id}{val=old_style_list}))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=convert_old_style_list}))) (expr*{args} (expr (Name (str{id}{val=sublist}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=old_style_list}))))) (stmt*{body} (stmt (Pass)))))
(root (Break))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=new_second_item}))) (str{attr}{val=extend}))) (expr*{args} (expr (Name (str{id}{val=item}))))))))
(root (If (expr{test} (Name (str{id}{val=old_style_list}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=second_item})))) (expr{value} (Name (str{id}{val=new_second_item})))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (List (expr*{elts} (expr (Name (str{id}{val=first_item}))) (expr (Name (str{id}{val=second_item})))))) (expr (Name (str{id}{val=old_style_list}))))))))
(root (FunctionDef (str{name}{val=_helper}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=list_}))) (expr (Name (str{id}{val=tabs})))) (expr*{defaults} (expr (Num (int{n}{val=1})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=indent})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=	}))) (operator{op} (Mult)) (expr{right} (Name (str{id}{val=tabs})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=output})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=list_length})))) (expr{value} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=list_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=i})))) (expr{value} (Num (int{n}{val=0})))))
(root (While (expr{test} (Compare (expr{left} (Name (str{id}{val=i}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Name (str{id}{val=list_length})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=title})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=list_}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=i})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=sublist})))) (expr{value} (Str (str{s}{val=})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=sublist_item})))) (expr{value} (Name (str{id}{val=None})))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=title}))) (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=list}))) (expr (Name (str{id}{val=tuple}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=sublist_item})))) (expr{value} (Name (str{id}{val=title})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=title})))) (expr{value} (Str (str{s}{val=})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Name (str{id}{val=i}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (BinOp (expr{left} (Name (str{id}{val=list_length}))) (operator{op} (Sub)) (expr{right} (Num (int{n}{val=1})))))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=next_item})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=list_}))) (slice{slice} (Index (expr{value} (BinOp (expr{left} (Name (str{id}{val=i}))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=1})))))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=next_item}))) (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=next_item}))) (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=list}))) (expr (Name (str{id}{val=tuple})))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=sublist_item})))) (expr{value} (Name (str{id}{val=next_item})))))
(root (AugAssign (expr{target} (Name (str{id}{val=i}))) (operator{op} (Add)) (expr{value} (Num (int{n}{val=1})))))
(root (If (expr{test} (Name (str{id}{val=sublist_item}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=sublist})))) (expr{value} (Call (expr{func} (Name (str{id}{val=_helper}))) (expr*{args} (expr (Name (str{id}{val=sublist_item}))) (expr (BinOp (expr{left} (Name (str{id}{val=tabs}))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=1}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=sublist})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=indent}))) (expr (Name (str{id}{val=sublist}))) (expr (Name (str{id}{val=indent}))) (expr (Name (str{id}{val=indent}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=output}))) (str{attr}{val=append}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=indent}))) (expr (Call (expr{func} (Name (str{id}{val=escaper}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=title}))))))))) (expr (Name (str{id}{val=sublist})))))))))))))
(root (AugAssign (expr{target} (Name (str{id}{val=i}))) (operator{op} (Add)) (expr{value} (Num (int{n}{val=1})))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=\n}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=output}))))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=converted}))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=convert_old_style_list}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=mark_safe}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=_helper}))) (expr*{args} (expr (Name (str{id}{val=value})))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=False}))))))))))
(root (FunctionDef (str{name}{val=add}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=arg})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=value})))))) (operator{op} (Add)) (expr{right} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=arg}))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=ValueError}))) (expr (Name (str{id}{val=TypeError})))))) (stmt*{body} (stmt (Pass)))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (BinOp (expr{left} (Name (str{id}{val=value}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=arg})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=Exception}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=False}))))))))))
(root (FunctionDef (str{name}{val=get_digit}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=arg})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=arg})))) (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=arg}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ValueError}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Name (str{id}{val=value})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=arg}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=value})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Subscript (expr{value} (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Name (str{id}{val=value})))))) (slice{slice} (Index (expr{value} (UnaryOp (unaryop{op} (USub)) (expr{operand} (Name (str{id}{val=arg}))))))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=IndexError}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Num (int{n}{val=0})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=expects_localtime}) (expr{value} (Name (str{id}{val=True})))) (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=False}))))))))))
(root (FunctionDef (str{name}{val=date}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=arg})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=None}))) (expr (Str (str{s}{val=}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=arg}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=arg})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=DATE_FORMAT})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=formats}))) (str{attr}{val=date_format}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=arg}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=AttributeError}))) (stmt*{body} (stmt (Pass)))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=format}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=arg}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=AttributeError}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=expects_localtime}) (expr{value} (Name (str{id}{val=True})))) (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=False}))))))))))
(root (FunctionDef (str{name}{val=time}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=arg})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=None}))) (expr (Str (str{s}{val=}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=arg}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=arg})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=TIME_FORMAT})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=formats}))) (str{attr}{val=time_format}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=arg}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=AttributeError}))) (stmt*{body} (stmt (Pass)))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=time_format}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=arg}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=AttributeError}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=False}))))))))))
(root (FunctionDef (str{name}{val=timesince_filter}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=arg})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=value}))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Name (str{id}{val=arg}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=timesince}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=arg}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=timesince}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=ValueError}))) (expr (Name (str{id}{val=TypeError})))))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=False}))))))))))
(root (FunctionDef (str{name}{val=timeuntil_filter}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=arg})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=value}))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=timeuntil}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=arg}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=ValueError}))) (expr (Name (str{id}{val=TypeError})))))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=False}))))))))))
(root (FunctionDef (str{name}{val=default}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=arg})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=arg}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=False}))))))))))
(root (FunctionDef (str{name}{val=default_if_none}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=arg})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=arg})))))
(root (Return (expr{value} (Name (str{id}{val=value})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=False}))))))))))
(root (FunctionDef (str{name}{val=divisibleby}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=arg})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Compare (expr{left} (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=value})))))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=arg})))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=0}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=False}))))))))))
(root (FunctionDef (str{name}{val=yesno}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=arg})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=arg}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=arg})))) (expr{value} (Call (expr{func} (Name (str{id}{val=ugettext}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=bits})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=arg}))) (str{attr}{val=split}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=bits})))))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Num (int{n}{val=2})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=value})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=yes}))) (expr (Name (str{id}{val=no}))) (expr (Name (str{id}{val=maybe}))))))) (expr{value} (Name (str{id}{val=bits})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ValueError}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=yes}))) (expr (Name (str{id}{val=no}))) (expr (Name (str{id}{val=maybe}))))))) (expr{value} (Tuple (expr*{elts} (expr (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (expr (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))) (expr (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=maybe})))))
(root (If (expr{test} (Name (str{id}{val=value}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=yes})))))
(root (Return (expr{value} (Name (str{id}{val=no})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=True}))))))))))
(root (FunctionDef (str{name}{val=filesizeformat}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=bytes})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=bytes})))) (expr{value} (Call (expr{func} (Name (str{id}{val=float}))) (expr*{args} (expr (Name (str{id}{val=bytes}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=TypeError}))) (expr (Name (str{id}{val=ValueError}))) (expr (Name (str{id}{val=UnicodeDecodeError})))))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=ungettext}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Num (int{n}{val=0})))))) (operator{op} (Mod)) (expr{right} (Dict (expr*{keys} (expr (Str (str{s}{val=size})))) (expr*{values} (expr (Num (int{n}{val=0}))))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=avoid_wrapping}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=filesize_number_format})))) (expr{value} (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value})))))) (expr{body} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=formats}))) (str{attr}{val=number_format}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=round}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Num (int{n}{val=1})))))) (expr (Num (int{n}{val=1}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=KB})))) (expr{value} (BinOp (expr{left} (Num (int{n}{val=1}))) (operator{op} (LShift)) (expr{right} (Num (int{n}{val=10})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=MB})))) (expr{value} (BinOp (expr{left} (Num (int{n}{val=1}))) (operator{op} (LShift)) (expr{right} (Num (int{n}{val=20})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=GB})))) (expr{value} (BinOp (expr{left} (Num (int{n}{val=1}))) (operator{op} (LShift)) (expr{right} (Num (int{n}{val=30})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=TB})))) (expr{value} (BinOp (expr{left} (Num (int{n}{val=1}))) (operator{op} (LShift)) (expr{right} (Num (int{n}{val=40})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=PB})))) (expr{value} (BinOp (expr{left} (Num (int{n}{val=1}))) (operator{op} (LShift)) (expr{right} (Num (int{n}{val=50})))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=bytes}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Name (str{id}{val=KB})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=ungettext}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Name (str{id}{val=bytes})))))) (operator{op} (Mod)) (expr{right} (Dict (expr*{keys} (expr (Str (str{s}{val=size})))) (expr*{values} (expr (Name (str{id}{val=bytes}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Name (str{id}{val=bytes}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Name (str{id}{val=MB})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=ugettext}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Name (str{id}{val=filesize_number_format}))) (expr*{args} (expr (BinOp (expr{left} (Name (str{id}{val=bytes}))) (operator{op} (Div)) (expr{right} (Name (str{id}{val=KB}))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Name (str{id}{val=bytes}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Name (str{id}{val=GB})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=ugettext}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Name (str{id}{val=filesize_number_format}))) (expr*{args} (expr (BinOp (expr{left} (Name (str{id}{val=bytes}))) (operator{op} (Div)) (expr{right} (Name (str{id}{val=MB}))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Name (str{id}{val=bytes}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Name (str{id}{val=TB})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=ugettext}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Name (str{id}{val=filesize_number_format}))) (expr*{args} (expr (BinOp (expr{left} (Name (str{id}{val=bytes}))) (operator{op} (Div)) (expr{right} (Name (str{id}{val=GB}))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Name (str{id}{val=bytes}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Name (str{id}{val=PB})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=ugettext}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Name (str{id}{val=filesize_number_format}))) (expr*{args} (expr (BinOp (expr{left} (Name (str{id}{val=bytes}))) (operator{op} (Div)) (expr{right} (Name (str{id}{val=TB}))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=ugettext}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Name (str{id}{val=filesize_number_format}))) (expr*{args} (expr (BinOp (expr{left} (Name (str{id}{val=bytes}))) (operator{op} (Div)) (expr{right} (Name (str{id}{val=PB}))))))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=avoid_wrapping}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=False}))))))))))
(root (FunctionDef (str{name}{val=pluralize}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=arg})))) (expr*{defaults} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=arg})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=arg})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=arg})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=bits})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=arg}))) (str{attr}{val=split}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=bits})))))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=2})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=singular_suffix}))) (expr (Name (str{id}{val=plural_suffix}))))))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Slice (expr{upper} (Num (int{n}{val=2})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=float}))) (expr*{args} (expr (Name (str{id}{val=value})))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=plural_suffix})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ValueError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=TypeError}))) (stmt*{body} (stmt (Pass)))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=value})))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=plural_suffix})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=TypeError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (Return (expr{value} (Name (str{id}{val=singular_suffix})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=True}))))))))))
(root (FunctionDef (str{name}{val=phone2numeric_filter}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=phone2numeric}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=filter}))) (keyword*{keywords} (keyword (str{arg}{val=is_safe}) (expr{value} (Name (str{id}{val=True}))))))))))
(root (FunctionDef (str{name}{val=pprint}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=pformat}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=Exception}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=e})))) (keyword*{keywords} (keyword (str{arg}{val=errors}) (expr{value} (Str (str{s}{val=replace})))))))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=os})))))
(root (Import (alias*{names} (alias (str{name}{val=sys})))))
(root (Import (alias*{names} (alias (str{name}{val=re})))))
(root (ImportFrom (str{module}{val=datetime}) (alias*{names} (alias (str{name}{val=datetime}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=itertools}) (alias*{names} (alias (str{name}{val=groupby})) (alias (str{name}{val=cycle}) (str{asname}{val=itertools_cycle}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=warnings})))))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.template.base}) (alias*{names} (alias (str{name}{val=Node})) (alias (str{name}{val=NodeList})) (alias (str{name}{val=Template})) (alias (str{name}{val=Context})) (alias (str{name}{val=Library})) (alias (str{name}{val=TemplateSyntaxError})) (alias (str{name}{val=VariableDoesNotExist})) (alias (str{name}{val=InvalidTemplateLibrary})) (alias (str{name}{val=BLOCK_TAG_START})) (alias (str{name}{val=BLOCK_TAG_END})) (alias (str{name}{val=VARIABLE_TAG_START})) (alias (str{name}{val=VARIABLE_TAG_END})) (alias (str{name}{val=SINGLE_BRACE_START})) (alias (str{name}{val=SINGLE_BRACE_END})) (alias (str{name}{val=COMMENT_TAG_START})) (alias (str{name}{val=COMMENT_TAG_END})) (alias (str{name}{val=VARIABLE_ATTRIBUTE_SEPARATOR})) (alias (str{name}{val=get_library})) (alias (str{name}{val=token_kwargs})) (alias (str{name}{val=kwarg_re})) (alias (str{name}{val=render_value_in_context}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.template.smartif}) (alias*{names} (alias (str{name}{val=IfParser})) (alias (str{name}{val=Literal}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.template.defaultfilters}) (alias*{names} (alias (str{name}{val=date}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.deprecation}) (alias*{names} (alias (str{name}{val=RemovedInDjango20Warning}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=force_text})) (alias (str{name}{val=smart_text}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.safestring}) (alias*{names} (alias (str{name}{val=mark_safe}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.html}) (alias*{names} (alias (str{name}{val=format_html}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=timezone}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=register})))) (expr{value} (Call (expr{func} (Name (str{id}{val=Library})))))))
(root (ClassDef (str{name}{val=AutoEscapeControlNode}) (expr*{bases} (expr (Name (str{id}{val=Node})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=setting}))) (expr (Name (str{id}{val=nodelist})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=setting}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=nodelist}))))))) (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=setting}))) (expr (Name (str{id}{val=nodelist}))))))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=old_setting})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=context}))) (str{attr}{val=autoescape})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=context}))) (str{attr}{val=autoescape})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=setting})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=output})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=nodelist}))) (str{attr}{val=render}))) (expr*{args} (expr (Name (str{id}{val=context}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=context}))) (str{attr}{val=autoescape})))) (expr{value} (Name (str{id}{val=old_setting})))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=setting}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=mark_safe}))) (expr*{args} (expr (Name (str{id}{val=output}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=output})))))
(root (ClassDef (str{name}{val=CommentNode}) (expr*{bases} (expr (Name (str{id}{val=Node})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (ClassDef (str{name}{val=CsrfTokenNode}) (expr*{bases} (expr (Name (str{id}{val=Node})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=csrf_token})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=context}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))))))))
(root (If (expr{test} (Name (str{id}{val=csrf_token}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=csrf_token}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=format_html}))) (expr*{args} (expr (Str (str{s}{val=}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=format_html}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=csrf_token}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=DEBUG}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=warnings}))) (str{attr}{val=warn}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (ClassDef (str{name}{val=CycleNode}) (expr*{bases} (expr (Name (str{id}{val=Node})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=cyclevars}))) (expr (Name (str{id}{val=variable_name}))) (expr (Name (str{id}{val=silent})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=cyclevars})))) (expr{value} (Name (str{id}{val=cyclevars})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=variable_name})))) (expr{value} (Name (str{id}{val=variable_name})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=silent})))) (expr{value} (Name (str{id}{val=silent})))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=self}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=context}))) (str{attr}{val=render_context})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=context}))) (str{attr}{val=render_context}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=self})))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=itertools_cycle}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=cyclevars}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cycle_iter})))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=context}))) (str{attr}{val=render_context}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=self})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=next}))) (expr*{args} (expr (Name (str{id}{val=cycle_iter})))))) (str{attr}{val=resolve}))) (expr*{args} (expr (Name (str{id}{val=context}))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=variable_name}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=context}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=variable_name})))))))) (expr{value} (Name (str{id}{val=value})))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=silent}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=render_value_in_context}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=context}))))))))
(root (ClassDef (str{name}{val=DebugNode}) (expr*{bases} (expr (Name (str{id}{val=Node})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=pprint}) (alias*{names} (alias (str{name}{val=pformat}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=output})))) (expr{value} (ListComp (expr{elt} (Call (expr{func} (Name (str{id}{val=pformat}))) (expr*{args} (expr (Name (str{id}{val=val})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=val}))) (expr{iter} (Name (str{id}{val=context})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=output}))) (str{attr}{val=append}))) (expr*{args} (expr (Str (str{s}{val=\n\n}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=output}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=pformat}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=modules})))))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=output}))))))))
(root (ClassDef (str{name}{val=FilterNode}) (expr*{bases} (expr (Name (str{id}{val=Node})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=filter_expr}))) (expr (Name (str{id}{val=nodelist})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=filter_expr}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=nodelist}))))))) (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=filter_expr}))) (expr (Name (str{id}{val=nodelist}))))))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=output})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=nodelist}))) (str{attr}{val=render}))) (expr*{args} (expr (Name (str{id}{val=context}))))))))
(root (With (expr{context_expr} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=context}))) (str{attr}{val=push}))) (keyword*{keywords} (keyword (str{arg}{val=var}) (expr{value} (Name (str{id}{val=output}))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=filter_expr}))) (str{attr}{val=resolve}))) (expr*{args} (expr (Name (str{id}{val=context}))))))))
(root (ClassDef (str{name}{val=FirstOfNode}) (expr*{bases} (expr (Name (str{id}{val=Node})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=variables})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=vars})))) (expr{value} (Name (str{id}{val=variables})))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=var}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=vars}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=var}))) (str{attr}{val=resolve}))) (expr*{args} (expr (Name (str{id}{val=context}))) (expr (Name (str{id}{val=True}))))))))
(root (If (expr{test} (Name (str{id}{val=value}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=render_value_in_context}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=context}))))))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (ClassDef (str{name}{val=ForNode}) (expr*{bases} (expr (Name (str{id}{val=Node})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=child_nodelists})))) (expr{value} (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))))))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=loopvars}))) (expr (Name (str{id}{val=sequence}))) (expr (Name (str{id}{val=is_reversed}))) (expr (Name (str{id}{val=nodelist_loop}))) (expr (Name (str{id}{val=nodelist_empty})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=loopvars}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=sequence}))))))) (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=loopvars}))) (expr (Name (str{id}{val=sequence}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=is_reversed})))) (expr{value} (Name (str{id}{val=is_reversed})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=nodelist_loop})))) (expr{value} (Name (str{id}{val=nodelist_loop})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=nodelist_empty}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=nodelist_empty})))) (expr{value} (Call (expr{func} (Name (str{id}{val=NodeList})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=nodelist_empty})))) (expr{value} (Name (str{id}{val=nodelist_empty})))))
(root (FunctionDef (str{name}{val=__repr__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=reversed_text})))) (expr{value} (IfExp (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=is_reversed}))) (expr{body} (Str (str{s}{val=_STR:0_}))) (expr{orelse} (Str (str{s}{val=})))))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=, }))) (str{attr}{val=join}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=loopvars})))))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=sequence}))) (expr (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=nodelist_loop})))))) (expr (Name (str{id}{val=reversed_text}))))))))))
(root (FunctionDef (str{name}{val=__iter__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=node}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=nodelist_loop}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Yield (expr{value} (Name (str{id}{val=node})))))))
(root (For (expr{target} (Name (str{id}{val=node}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=nodelist_empty}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Yield (expr{value} (Name (str{id}{val=node})))))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=parentloop})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=context}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=parentloop})))) (expr{value} (Dict (epsilon)))))
(root (With (expr{context_expr} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=context}))) (str{attr}{val=push}))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=values})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=sequence}))) (str{attr}{val=resolve}))) (expr*{args} (expr (Name (str{id}{val=context}))) (expr (Name (str{id}{val=True}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=VariableDoesNotExist}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=values})))) (expr{value} (List (epsilon)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=values}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=values})))) (expr{value} (List (epsilon)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=values}))) (expr (Str (str{s}{val=_STR:0_})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=values})))) (expr{value} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Name (str{id}{val=values}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=len_values})))) (expr{value} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=values}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=len_values}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=nodelist_empty}))) (str{attr}{val=render}))) (expr*{args} (expr (Name (str{id}{val=context}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=nodelist})))) (expr{value} (List (epsilon)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=is_reversed}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=values})))) (expr{value} (Call (expr{func} (Name (str{id}{val=reversed}))) (expr*{args} (expr (Name (str{id}{val=values}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=num_loopvars})))) (expr{value} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=loopvars}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=unpack})))) (expr{value} (Compare (expr{left} (Name (str{id}{val=num_loopvars}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=1}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=loop_dict}))) (expr (Subscript (expr{value} (Name (str{id}{val=context}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:1_})))) (expr*{values} (expr (Name (str{id}{val=parentloop}))))))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=i}))) (expr (Name (str{id}{val=item})))))) (expr{iter} (Call (expr{func} (Name (str{id}{val=enumerate}))) (expr*{args} (expr (Name (str{id}{val=values})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=loop_dict}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Name (str{id}{val=i})))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=loop_dict}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (BinOp (expr{left} (Name (str{id}{val=i}))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=1})))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=loop_dict}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (BinOp (expr{left} (Name (str{id}{val=len_values}))) (operator{op} (Sub)) (expr{right} (Name (str{id}{val=i})))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=loop_dict}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=revcounter0})))))))) (expr{value} (BinOp (expr{left} (BinOp (expr{left} (Name (str{id}{val=len_values}))) (operator{op} (Sub)) (expr{right} (Name (str{id}{val=i}))))) (operator{op} (Sub)) (expr{right} (Num (int{n}{val=1})))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=loop_dict}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Compare (expr{left} (Name (str{id}{val=i}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=0}))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=loop_dict}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Compare (expr{left} (Name (str{id}{val=i}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (BinOp (expr{left} (Name (str{id}{val=len_values}))) (operator{op} (Sub)) (expr{right} (Num (int{n}{val=1}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=pop_context})))) (expr{value} (Name (str{id}{val=False})))))
(root (If (expr{test} (Name (str{id}{val=unpack}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=item}))) (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=list}))) (expr (Name (str{id}{val=tuple}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=len_item})))) (expr{value} (Num (int{n}{val=1})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=len_item})))) (expr{value} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=item}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=num_loopvars}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Name (str{id}{val=len_item})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=warnings}))) (str{attr}{val=warn}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=Need {0} values to unpack in for loop; got {1}. This will raise an exception in Django 2.0.}))) (str{attr}{val=format}))) (expr*{args} (expr (Name (str{id}{val=num_loopvars}))) (expr (Name (str{id}{val=len_item})))))) (expr (Name (str{id}{val=RemovedInDjango20Warning}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=unpacked_vars})))) (expr{value} (Call (expr{func} (Name (str{id}{val=dict}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=zip}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=loopvars}))) (expr (Name (str{id}{val=item})))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=TypeError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=pop_context})))) (expr{value} (Name (str{id}{val=True})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=context}))) (str{attr}{val=update}))) (expr*{args} (expr (Name (str{id}{val=unpacked_vars}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=context}))) (slice{slice} (Index (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=loopvars}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))))) (expr{value} (Name (str{id}{val=item})))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=TEMPLATE_DEBUG}))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=node}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=nodelist_loop}))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=nodelist}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=node}))) (str{attr}{val=render}))) (expr*{args} (expr (Name (str{id}{val=context})))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=Exception}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=e}))) (expr (Str (str{s}{val=_STR:0_})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=django_template_source})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=node}))) (str{attr}{val=source})))))
(root (Raise (epsilon)))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=node}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=nodelist_loop}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=nodelist}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=node}))) (str{attr}{val=render}))) (expr*{args} (expr (Name (str{id}{val=context})))))))))))
(root (If (expr{test} (Name (str{id}{val=pop_context}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=context}))) (str{attr}{val=pop})))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=mark_safe}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=}))) (str{attr}{val=join}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=n})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=n}))) (expr{iter} (Name (str{id}{val=nodelist})))))))))))))))
(root (ClassDef (str{name}{val=IfChangedNode}) (expr*{bases} (expr (Name (str{id}{val=Node})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=child_nodelists})))) (expr{value} (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))))))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=nodelist_true}))) (expr (Name (str{id}{val=nodelist_false})))) (str{vararg}{val=varlist}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=nodelist_true}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=nodelist_false}))))))) (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=nodelist_true}))) (expr (Name (str{id}{val=nodelist_false}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_varlist})))) (expr{value} (Name (str{id}{val=varlist})))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=state_frame})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_get_context_stack_frame}))) (expr*{args} (expr (Name (str{id}{val=context}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=self}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=state_frame})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=state_frame}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=self})))))))) (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=nodelist_true_output})))) (expr{value} (Name (str{id}{val=None})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_varlist}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=compare_to})))) (expr{value} (ListComp (expr{elt} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=var}))) (str{attr}{val=resolve}))) (expr*{args} (expr (Name (str{id}{val=context}))) (expr (Name (str{id}{val=True})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=var}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_varlist})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=compare_to}))) (expr (Name (str{id}{val=nodelist_true_output})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=nodelist_true}))) (str{attr}{val=render}))) (expr*{args} (expr (Name (str{id}{val=context}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=VariableDoesNotExist}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=compare_to})))) (expr{value} (Name (str{id}{val=None})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=compare_to}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Subscript (expr{value} (Name (str{id}{val=state_frame}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=self})))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=state_frame}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=self})))))))) (expr{value} (Name (str{id}{val=compare_to})))))
(root (Return (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=nodelist_true_output}))) (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=nodelist_true}))) (str{attr}{val=render}))) (expr*{args} (expr (Name (str{id}{val=context})))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=nodelist_false}))) (stmt*{body} (stmt (Pass))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=nodelist_false}))) (str{attr}{val=render}))) (expr*{args} (expr (Name (str{id}{val=context}))))))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (FunctionDef (str{name}{val=_get_context_stack_frame}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Subscript (expr{value} (Name (str{id}{val=context}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=context}))) (str{attr}{val=render_context})))))
(root (ClassDef (str{name}{val=IfEqualNode}) (expr*{bases} (expr (Name (str{id}{val=Node})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=child_nodelists})))) (expr{value} (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))))))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=var1}))) (expr (Name (str{id}{val=var2}))) (expr (Name (str{id}{val=nodelist_true}))) (expr (Name (str{id}{val=nodelist_false}))) (expr (Name (str{id}{val=negate})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=var1}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=var2}))))))) (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=var1}))) (expr (Name (str{id}{val=var2}))))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=nodelist_true}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=nodelist_false}))))))) (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=nodelist_true}))) (expr (Name (str{id}{val=nodelist_false}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=negate})))) (expr{value} (Name (str{id}{val=negate})))))
(root (FunctionDef (str{name}{val=__repr__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=val1})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=var1}))) (str{attr}{val=resolve}))) (expr*{args} (expr (Name (str{id}{val=context}))) (expr (Name (str{id}{val=True}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=val2})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=var2}))) (str{attr}{val=resolve}))) (expr*{args} (expr (Name (str{id}{val=context}))) (expr (Name (str{id}{val=True}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=negate}))) (expr (Compare (expr{left} (Name (str{id}{val=val1}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Name (str{id}{val=val2}))))))))) (expr (BoolOp (boolop{op} (And)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=negate}))))) (expr (Compare (expr{left} (Name (str{id}{val=val1}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=val2})))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=nodelist_true}))) (str{attr}{val=render}))) (expr*{args} (expr (Name (str{id}{val=context}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=nodelist_false}))) (str{attr}{val=render}))) (expr*{args} (expr (Name (str{id}{val=context}))))))))
(root (ClassDef (str{name}{val=IfNode}) (expr*{bases} (expr (Name (str{id}{val=Node})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=conditions_nodelists})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=conditions_nodelists})))) (expr{value} (Name (str{id}{val=conditions_nodelists})))))
(root (FunctionDef (str{name}{val=__repr__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (FunctionDef (str{name}{val=__iter__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=_}))) (expr (Name (str{id}{val=nodelist})))))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=conditions_nodelists}))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=node}))) (expr{iter} (Name (str{id}{val=nodelist}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Yield (expr{value} (Name (str{id}{val=node})))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=nodelist}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=NodeList}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Name (str{id}{val=node}))) (comprehension*{generators} (comprehension (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=_}))) (expr (Name (str{id}{val=nodelist})))))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=conditions_nodelists})))) (comprehension (expr{target} (Name (str{id}{val=node}))) (expr{iter} (Name (str{id}{val=nodelist}))))))))))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=condition}))) (expr (Name (str{id}{val=nodelist})))))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=conditions_nodelists}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=condition}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=match})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=condition}))) (str{attr}{val=eval}))) (expr*{args} (expr (Name (str{id}{val=context}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=VariableDoesNotExist}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=match})))) (expr{value} (Name (str{id}{val=None})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=match})))) (expr{value} (Name (str{id}{val=True})))))
(root (If (expr{test} (Name (str{id}{val=match}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=nodelist}))) (str{attr}{val=render}))) (expr*{args} (expr (Name (str{id}{val=context}))))))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (ClassDef (str{name}{val=RegroupNode}) (expr*{bases} (expr (Name (str{id}{val=Node})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=target}))) (expr (Name (str{id}{val=expression}))) (expr (Name (str{id}{val=var_name})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=target}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=expression}))))))) (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=target}))) (expr (Name (str{id}{val=expression}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=var_name})))) (expr{value} (Name (str{id}{val=var_name})))))
(root (FunctionDef (str{name}{val=resolve_expression}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=obj}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=context}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=var_name})))))))) (expr{value} (Name (str{id}{val=obj})))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=expression}))) (str{attr}{val=resolve}))) (expr*{args} (expr (Name (str{id}{val=context}))) (expr (Name (str{id}{val=True}))))))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=obj_list})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=target}))) (str{attr}{val=resolve}))) (expr*{args} (expr (Name (str{id}{val=context}))) (expr (Name (str{id}{val=True}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=obj_list}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=context}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=var_name})))))))) (expr{value} (List (epsilon)))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=context}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=var_name})))))))) (expr{value} (ListComp (expr{elt} (Dict (expr*{keys} (expr (Str (str{s}{val=grouper}))) (expr (Str (str{s}{val=list})))) (expr*{values} (expr (Name (str{id}{val=key}))) (expr (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Name (str{id}{val=val}))))))))) (comprehension*{generators} (comprehension (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=val})))))) (expr{iter} (Call (expr{func} (Name (str{id}{val=groupby}))) (expr*{args} (expr (Name (str{id}{val=obj_list}))) (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=obj})))))) (expr{body} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=resolve_expression}))) (expr*{args} (expr (Name (str{id}{val=obj}))) (expr (Name (str{id}{val=context})))))))))))))))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (FunctionDef (str{name}{val=include_is_allowed}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=filepath})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=filepath})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=abspath}))) (expr*{args} (expr (Name (str{id}{val=filepath}))))))))
(root (For (expr{target} (Name (str{id}{val=root}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=ALLOWED_INCLUDE_ROOTS}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=filepath}))) (str{attr}{val=startswith}))) (expr*{args} (expr (Name (str{id}{val=root})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=True})))))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (ClassDef (str{name}{val=SsiNode}) (expr*{bases} (expr (Name (str{id}{val=Node})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=filepath}))) (expr (Name (str{id}{val=parsed})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=filepath})))) (expr{value} (Name (str{id}{val=filepath})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=parsed})))) (expr{value} (Name (str{id}{val=parsed})))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=filepath})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=filepath}))) (str{attr}{val=resolve}))) (expr*{args} (expr (Name (str{id}{val=context}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=include_is_allowed}))) (expr*{args} (expr (Name (str{id}{val=filepath})))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=DEBUG}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (With (expr{context_expr} (Call (expr{func} (Name (str{id}{val=open}))) (expr*{args} (expr (Name (str{id}{val=filepath}))) (expr (Str (str{s}{val=r})))))) (expr{optional_vars} (Name (str{id}{val=fp}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=output})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=fp}))) (str{attr}{val=read})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=IOError}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=output})))) (expr{value} (Str (str{s}{val=})))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=parsed}))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=t})))) (expr{value} (Call (expr{func} (Name (str{id}{val=Template}))) (expr*{args} (expr (Name (str{id}{val=output})))) (keyword*{keywords} (keyword (str{arg}{val=name}) (expr{value} (Name (str{id}{val=filepath})))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=t}))) (str{attr}{val=render}))) (expr*{args} (expr (Name (str{id}{val=context}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=TemplateSyntaxError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=DEBUG}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=e})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (Return (expr{value} (Name (str{id}{val=output})))))
(root (ClassDef (str{name}{val=LoadNode}) (expr*{bases} (expr (Name (str{id}{val=Node})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (ClassDef (str{name}{val=NowNode}) (expr*{bases} (expr (Name (str{id}{val=Node})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=format_string})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=format_string})))) (expr{value} (Name (str{id}{val=format_string})))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=tzinfo})))) (expr{value} (IfExp (expr{test} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=USE_TZ}))) (expr{body} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=timezone}))) (str{attr}{val=get_current_timezone}))))) (expr{orelse} (Name (str{id}{val=None})))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=date}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=now}))) (keyword*{keywords} (keyword (str{arg}{val=tz}) (expr{value} (Name (str{id}{val=tzinfo}))))))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=format_string}))))))))
(root (ClassDef (str{name}{val=SpacelessNode}) (expr*{bases} (expr (Name (str{id}{val=Node})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=nodelist})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=nodelist})))) (expr{value} (Name (str{id}{val=nodelist})))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=django.utils.html}) (alias*{names} (alias (str{name}{val=strip_spaces_between_tags}))) (int{level}{val=0})))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=strip_spaces_between_tags}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=nodelist}))) (str{attr}{val=render}))) (expr*{args} (expr (Name (str{id}{val=context})))))) (str{attr}{val=strip}))))))))))
(root (ClassDef (str{name}{val=TemplateTagNode}) (expr*{bases} (expr (Name (str{id}{val=Node})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=mapping})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=openvariable}))) (expr (Str (str{s}{val=closevariable}))) (expr (Str (str{s}{val=openbrace}))) (expr (Str (str{s}{val=closebrace}))) (expr (Str (str{s}{val=opencomment}))) (expr (Str (str{s}{val=closecomment})))) (expr*{values} (expr (Name (str{id}{val=BLOCK_TAG_START}))) (expr (Name (str{id}{val=BLOCK_TAG_END}))) (expr (Name (str{id}{val=VARIABLE_TAG_START}))) (expr (Name (str{id}{val=VARIABLE_TAG_END}))) (expr (Name (str{id}{val=SINGLE_BRACE_START}))) (expr (Name (str{id}{val=SINGLE_BRACE_END}))) (expr (Name (str{id}{val=COMMENT_TAG_START}))) (expr (Name (str{id}{val=COMMENT_TAG_END}))))))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=tagtype})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=tagtype})))) (expr{value} (Name (str{id}{val=tagtype})))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=mapping}))) (str{attr}{val=get}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=tagtype}))) (expr (Str (str{s}{val=}))))))))
(root (ClassDef (str{name}{val=URLNode}) (expr*{bases} (expr (Name (str{id}{val=Node})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=view_name}))) (expr (Name (str{id}{val=args}))) (expr (Name (str{id}{val=kwargs}))) (expr (Name (str{id}{val=asvar})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=view_name})))) (expr{value} (Name (str{id}{val=view_name})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=args})))) (expr{value} (Name (str{id}{val=args})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=kwargs})))) (expr{value} (Name (str{id}{val=kwargs})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=asvar})))) (expr{value} (Name (str{id}{val=asvar})))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=django.core.urlresolvers}) (alias*{names} (alias (str{name}{val=reverse})) (alias (str{name}{val=NoReverseMatch}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=args})))) (expr{value} (ListComp (expr{elt} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=arg}))) (str{attr}{val=resolve}))) (expr*{args} (expr (Name (str{id}{val=context})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=arg}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=args})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=kwargs})))) (expr{value} (Call (expr{func} (Name (str{id}{val=dict}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Tuple (expr*{elts} (expr (Call (expr{func} (Name (str{id}{val=smart_text}))) (expr*{args} (expr (Name (str{id}{val=k}))) (expr (Str (str{s}{val=ascii})))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=v}))) (str{attr}{val=resolve}))) (expr*{args} (expr (Name (str{id}{val=context}))))))))) (comprehension*{generators} (comprehension (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Name (str{id}{val=v})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=kwargs}))) (str{attr}{val=items}))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=view_name})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=view_name}))) (str{attr}{val=resolve}))) (expr*{args} (expr (Name (str{id}{val=context}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=url})))) (expr{value} (Str (str{s}{val=})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=url})))) (expr{value} (Call (expr{func} (Name (str{id}{val=reverse}))) (expr*{args} (expr (Name (str{id}{val=view_name})))) (keyword*{keywords} (keyword (str{arg}{val=args}) (expr{value} (Name (str{id}{val=args})))) (keyword (str{arg}{val=kwargs}) (expr{value} (Name (str{id}{val=kwargs})))) (keyword (str{arg}{val=current_app}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=context}))) (str{attr}{val=current_app})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=NoReverseMatch}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=exc_info})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=exc_info})))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=SETTINGS_MODULE}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=project_name})))) (expr{value} (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=SETTINGS_MODULE}))) (str{attr}{val=split}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=url})))) (expr{value} (Call (expr{func} (Name (str{id}{val=reverse}))) (expr*{args} (expr (BinOp (expr{left} (BinOp (expr{left} (Name (str{id}{val=project_name}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=_STR:0_}))))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=view_name})))))) (keyword*{keywords} (keyword (str{arg}{val=args}) (expr{value} (Name (str{id}{val=args})))) (keyword (str{arg}{val=kwargs}) (expr{value} (Name (str{id}{val=kwargs})))) (keyword (str{arg}{val=current_app}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=context}))) (str{attr}{val=current_app})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=NoReverseMatch}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=asvar}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=reraise}))) (expr{starargs} (Name (str{id}{val=exc_info})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=asvar}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (epsilon)))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=asvar}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=context}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=asvar})))))))) (expr{value} (Name (str{id}{val=url})))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=url})))))
(root (ClassDef (str{name}{val=VerbatimNode}) (expr*{bases} (expr (Name (str{id}{val=Node})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=content})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=content})))) (expr{value} (Name (str{id}{val=content})))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=content})))))
(root (ClassDef (str{name}{val=WidthRatioNode}) (expr*{bases} (expr (Name (str{id}{val=Node})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=val_expr}))) (expr (Name (str{id}{val=max_expr}))) (expr (Name (str{id}{val=max_width}))) (expr (Name (str{id}{val=asvar})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=val_expr})))) (expr{value} (Name (str{id}{val=val_expr})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=max_expr})))) (expr{value} (Name (str{id}{val=max_expr})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=max_width})))) (expr{value} (Name (str{id}{val=max_width})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=asvar})))) (expr{value} (Name (str{id}{val=asvar})))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=val_expr}))) (str{attr}{val=resolve}))) (expr*{args} (expr (Name (str{id}{val=context}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=max_value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=max_expr}))) (str{attr}{val=resolve}))) (expr*{args} (expr (Name (str{id}{val=context}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=max_width})))) (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=max_width}))) (str{attr}{val=resolve}))) (expr*{args} (expr (Name (str{id}{val=context})))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=VariableDoesNotExist}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=ValueError}))) (expr (Name (str{id}{val=TypeError})))))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=float}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=max_value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=float}))) (expr*{args} (expr (Name (str{id}{val=max_value}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ratio})))) (expr{value} (BinOp (expr{left} (BinOp (expr{left} (Name (str{id}{val=value}))) (operator{op} (Div)) (expr{right} (Name (str{id}{val=max_value}))))) (operator{op} (Mult)) (expr{right} (Name (str{id}{val=max_width})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=round}))) (expr*{args} (expr (Name (str{id}{val=ratio}))))))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ZeroDivisionError}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=ValueError}))) (expr (Name (str{id}{val=TypeError}))) (expr (Name (str{id}{val=OverflowError})))))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=asvar}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=context}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=asvar})))))))) (expr{value} (Name (str{id}{val=result})))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=result})))))
(root (ClassDef (str{name}{val=WithNode}) (expr*{bases} (expr (Name (str{id}{val=Node})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=var}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=nodelist}))) (expr (Name (str{id}{val=extra_context})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=nodelist})))) (expr{value} (Name (str{id}{val=nodelist})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=extra_context})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=extra_context}))) (expr (Dict (epsilon))))))))
(root (If (expr{test} (Name (str{id}{val=name}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=extra_context}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=name})))))))) (expr{value} (Name (str{id}{val=var})))))
(root (FunctionDef (str{name}{val=__repr__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=values})))) (expr{value} (Call (expr{func} (Name (str{id}{val=dict}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Tuple (expr*{elts} (expr (Name (str{id}{val=key}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=val}))) (str{attr}{val=resolve}))) (expr*{args} (expr (Name (str{id}{val=context}))))))))) (comprehension*{generators} (comprehension (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=val})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=iteritems}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=extra_context})))))))))))))))
(root (With (expr{context_expr} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=context}))) (str{attr}{val=push}))) (expr{kwargs} (Name (str{id}{val=values}))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=nodelist}))) (str{attr}{val=render}))) (expr*{args} (expr (Name (str{id}{val=context}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=tag}))))))
(root (FunctionDef (str{name}{val=autoescape}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=parser}))) (expr (Name (str{id}{val=token})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=args})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=contents}))) (str{attr}{val=split})))))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=args})))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Num (int{n}{val=2})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=arg})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=args}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1})))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=arg}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=nodelist})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=parse}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=delete_first_token})))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=AutoEscapeControlNode}))) (expr*{args} (expr (Compare (expr{left} (Name (str{id}{val=arg}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (expr (Name (str{id}{val=nodelist}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=tag}))))))
(root (FunctionDef (str{name}{val=comment}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=parser}))) (expr (Name (str{id}{val=token})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=skip_past}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=CommentNode})))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=tag}))))))
(root (FunctionDef (str{name}{val=cycle}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=parser}))) (expr (Name (str{id}{val=token})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=args})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=split_contents})))))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=args})))))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Num (int{n}{val=2})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Subscript (expr{value} (Name (str{id}{val=args}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1})))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=args}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=1}))) (expr{upper} (Num (int{n}{val=2})))))))) (expr{value} (ListComp (expr{elt} (BinOp (expr{left} (Str (str{s}{val="%s"}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=arg}))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=arg}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=args}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))) (str{attr}{val=split}))) (expr*{args} (expr (Str (str{s}{val=,}))))))))))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=args})))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=2})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=name})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=args}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1})))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=parser}))) (expr (Str (str{s}{val=_STR:0_})))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=name}))))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=name}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=_namedCycleNodes})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=name}))))))))))
(root (Return (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=_namedCycleNodes}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=name})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=as_form})))) (expr{value} (Name (str{id}{val=False})))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=args})))))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=4})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=args}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=-3}))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=as})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=args}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=-1}))))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Subscript (expr{value} (Name (str{id}{val=args}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=-1}))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=as_form})))) (expr{value} (Name (str{id}{val=True})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=silent})))) (expr{value} (Name (str{id}{val=True})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=args})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=args}))) (slice{slice} (Slice (expr{upper} (Num (int{n}{val=-1})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=args}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=-2}))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=as})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=as_form})))) (expr{value} (Name (str{id}{val=True})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=silent})))) (expr{value} (Name (str{id}{val=False})))))
(root (If (expr{test} (Name (str{id}{val=as_form}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=name})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=args}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=-1})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=values})))) (expr{value} (ListComp (expr{elt} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=compile_filter}))) (expr*{args} (expr (Name (str{id}{val=arg})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=arg}))) (expr{iter} (Subscript (expr{value} (Name (str{id}{val=args}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=1}))) (expr{upper} (Num (int{n}{val=-2})))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=node})))) (expr{value} (Call (expr{func} (Name (str{id}{val=CycleNode}))) (expr*{args} (expr (Name (str{id}{val=values}))) (expr (Name (str{id}{val=name})))) (keyword*{keywords} (keyword (str{arg}{val=silent}) (expr{value} (Name (str{id}{val=silent})))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=parser}))) (expr (Str (str{s}{val=_STR:0_})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=_namedCycleNodes})))) (expr{value} (Dict (epsilon)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=_namedCycleNodes}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=name})))))))) (expr{value} (Name (str{id}{val=node})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=values})))) (expr{value} (ListComp (expr{elt} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=compile_filter}))) (expr*{args} (expr (Name (str{id}{val=arg})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=arg}))) (expr{iter} (Subscript (expr{value} (Name (str{id}{val=args}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=1})))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=node})))) (expr{value} (Call (expr{func} (Name (str{id}{val=CycleNode}))) (expr*{args} (expr (Name (str{id}{val=values}))))))))
(root (Return (expr{value} (Name (str{id}{val=node})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=tag}))))))
(root (FunctionDef (str{name}{val=csrf_token}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=parser}))) (expr (Name (str{id}{val=token})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=CsrfTokenNode})))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=tag}))))))
(root (FunctionDef (str{name}{val=debug}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=parser}))) (expr (Name (str{id}{val=token})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=DebugNode})))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=tag}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))))
(root (FunctionDef (str{name}{val=do_filter}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=parser}))) (expr (Name (str{id}{val=token})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=_}))) (expr (Name (str{id}{val=rest}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=contents}))) (str{attr}{val=split}))) (expr*{args} (expr (Name (str{id}{val=None}))) (expr (Num (int{n}{val=1}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=filter_expr})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=compile_filter}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=rest}))))))))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=func}))) (expr (Name (str{id}{val=unused})))))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=filter_expr}))) (str{attr}{val=filters}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=filter_name})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=func}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=filter_name}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=filter_name}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=nodelist})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=parse}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=delete_first_token})))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=FilterNode}))) (expr*{args} (expr (Name (str{id}{val=filter_expr}))) (expr (Name (str{id}{val=nodelist}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=tag}))))))
(root (FunctionDef (str{name}{val=firstof}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=parser}))) (expr (Name (str{id}{val=token})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=bits})))) (expr{value} (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=split_contents}))))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=1})))))))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=bits})))))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=FirstOfNode}))) (expr*{args} (expr (ListComp (expr{elt} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=compile_filter}))) (expr*{args} (expr (Name (str{id}{val=bit})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=bit}))) (expr{iter} (Name (str{id}{val=bits}))))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=tag}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))))
(root (FunctionDef (str{name}{val=do_for}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=parser}))) (expr (Name (str{id}{val=token})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=bits})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=split_contents})))))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=bits})))))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Num (int{n}{val=4})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val='for' statements should have at least four words: %s}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=contents}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=is_reversed})))) (expr{value} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=-1}))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=in_index})))) (expr{value} (IfExp (expr{test} (Name (str{id}{val=is_reversed}))) (expr{body} (Num (int{n}{val=-3}))) (expr{orelse} (Num (int{n}{val=-2})))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=in_index}))))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val='for' statements should use the format 'for x in y': %s}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=contents}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=loopvars})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=split}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val= }))) (str{attr}{val=join}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=1}))) (expr{upper} (Name (str{id}{val=in_index})))))))))))))))
(root (For (expr{target} (Name (str{id}{val=var}))) (expr{iter} (Name (str{id}{val=loopvars}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=var}))))) (expr (Compare (expr{left} (Str (str{s}{val= }))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=var}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val='for' tag received an invalid argument: %s}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=contents}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=sequence})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=compile_filter}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (BinOp (expr{left} (Name (str{id}{val=in_index}))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=1}))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=nodelist_loop})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=parse}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=token})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=next_token})))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=contents}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=nodelist_empty})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=parse}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=delete_first_token})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=nodelist_empty})))) (expr{value} (Name (str{id}{val=None})))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=ForNode}))) (expr*{args} (expr (Name (str{id}{val=loopvars}))) (expr (Name (str{id}{val=sequence}))) (expr (Name (str{id}{val=is_reversed}))) (expr (Name (str{id}{val=nodelist_loop}))) (expr (Name (str{id}{val=nodelist_empty}))))))))
(root (FunctionDef (str{name}{val=do_ifequal}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=parser}))) (expr (Name (str{id}{val=token}))) (expr (Name (str{id}{val=negate})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=bits})))) (expr{value} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=split_contents}))))))))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=bits})))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Num (int{n}{val=3})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=end_tag})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:1_}))) (operator{op} (Add)) (expr{right} (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=nodelist_loop})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=parse}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=end_tag})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=token})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=next_token})))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=contents}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=nodelist_false})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=parse}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=end_tag})))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=delete_first_token})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=nodelist_false})))) (expr{value} (Call (expr{func} (Name (str{id}{val=NodeList})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=val1})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=compile_filter}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=val2})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=compile_filter}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=2}))))))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=IfEqualNode}))) (expr*{args} (expr (Name (str{id}{val=val1}))) (expr (Name (str{id}{val=val2}))) (expr (Name (str{id}{val=nodelist_true}))) (expr (Name (str{id}{val=nodelist_false}))) (expr (Name (str{id}{val=negate}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=tag}))))))
(root (FunctionDef (str{name}{val=ifequal}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=parser}))) (expr (Name (str{id}{val=token})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=do_ifequal}))) (expr*{args} (expr (Name (str{id}{val=parser}))) (expr (Name (str{id}{val=token}))) (expr (Name (str{id}{val=False}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=tag}))))))
(root (FunctionDef (str{name}{val=ifnotequal}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=parser}))) (expr (Name (str{id}{val=token})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=do_ifequal}))) (expr*{args} (expr (Name (str{id}{val=parser}))) (expr (Name (str{id}{val=token}))) (expr (Name (str{id}{val=True}))))))))
(root (ClassDef (str{name}{val=TemplateLiteral}) (expr*{bases} (expr (Name (str{id}{val=Literal})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=text})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=value})))) (expr{value} (Name (str{id}{val=value})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=text})))) (expr{value} (Name (str{id}{val=text})))))
(root (FunctionDef (str{name}{val=display}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=text})))))
(root (FunctionDef (str{name}{val=eval}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=value}))) (str{attr}{val=resolve}))) (expr*{args} (expr (Name (str{id}{val=context})))) (keyword*{keywords} (keyword (str{arg}{val=ignore_failures}) (expr{value} (Name (str{id}{val=True})))))))))
(root (ClassDef (str{name}{val=TemplateIfParser}) (expr*{bases} (expr (Name (str{id}{val=IfParser})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=error_class})))) (expr{value} (Name (str{id}{val=TemplateSyntaxError})))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=parser})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=template_parser})))) (expr{value} (Name (str{id}{val=parser})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=TemplateIfParser}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (FunctionDef (str{name}{val=create_var}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=TemplateLiteral}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=template_parser}))) (str{attr}{val=compile_filter}))) (expr*{args} (expr (Name (str{id}{val=value})))))) (expr (Name (str{id}{val=value}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=tag}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))))
(root (FunctionDef (str{name}{val=do_if}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=parser}))) (expr (Name (str{id}{val=token})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=bits})))) (expr{value} (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=split_contents}))))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=1})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=condition})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=TemplateIfParser}))) (expr*{args} (expr (Name (str{id}{val=parser}))) (expr (Name (str{id}{val=bits})))))) (str{attr}{val=parse})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=nodelist})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=parse}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=conditions_nodelists})))) (expr{value} (List (expr*{elts} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=condition}))) (expr (Name (str{id}{val=nodelist})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=token})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=next_token})))))))
(root (While (expr{test} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=contents}))) (str{attr}{val=startswith}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=bits})))) (expr{value} (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=split_contents}))))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=1})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=condition})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=TemplateIfParser}))) (expr*{args} (expr (Name (str{id}{val=parser}))) (expr (Name (str{id}{val=bits})))))) (str{attr}{val=parse})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=nodelist})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=parse}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_})))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=conditions_nodelists}))) (str{attr}{val=append}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=condition}))) (expr (Name (str{id}{val=nodelist})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=token})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=next_token})))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=contents}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=nodelist})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=parse}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=conditions_nodelists}))) (str{attr}{val=append}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=nodelist})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=token})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=next_token})))))))
(root (Assert (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=contents}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=IfNode}))) (expr*{args} (expr (Name (str{id}{val=conditions_nodelists}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=tag}))))))
(root (FunctionDef (str{name}{val=ifchanged}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=parser}))) (expr (Name (str{id}{val=token})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=bits})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=split_contents})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=nodelist_true})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=parse}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=endifchanged})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=token})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=next_token})))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=contents}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=nodelist_false})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=parse}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=delete_first_token})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=nodelist_false})))) (expr{value} (Call (expr{func} (Name (str{id}{val=NodeList})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=values})))) (expr{value} (ListComp (expr{elt} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=compile_filter}))) (expr*{args} (expr (Name (str{id}{val=bit})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=bit}))) (expr{iter} (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=1})))))))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=IfChangedNode}))) (expr*{args} (expr (Name (str{id}{val=nodelist_true}))) (expr (Name (str{id}{val=nodelist_false})))) (expr{starargs} (Name (str{id}{val=values})))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=tag}))))))
(root (FunctionDef (str{name}{val=ssi}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=parser}))) (expr (Name (str{id}{val=token})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=bits})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=split_contents})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=parsed})))) (expr{value} (Name (str{id}{val=False})))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=bits})))))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Tuple (expr*{elts} (expr (Num (int{n}{val=2}))) (expr (Num (int{n}{val=3}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (Str (str{s}{val='ssi' tag takes one argument: the path to the file to be included}))))))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=bits})))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=3})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=2}))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=parsed})))) (expr{value} (Name (str{id}{val=True})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=Second (optional) argument to %s tag must be 'parsed'}))) (operator{op} (Mod)) (expr{right} (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=filepath})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=compile_filter}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=SsiNode}))) (expr*{args} (expr (Name (str{id}{val=filepath}))) (expr (Name (str{id}{val=parsed}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=tag}))))))
(root (FunctionDef (str{name}{val=load}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=parser}))) (expr (Name (str{id}{val=token})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=bits})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=contents}))) (str{attr}{val=split})))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=bits})))))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Num (int{n}{val=4})))))) (expr (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=-2}))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=from}))))))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=taglib})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=-1})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=lib})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_library}))) (expr*{args} (expr (Name (str{id}{val=taglib}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=InvalidTemplateLibrary}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=taglib}))) (expr (Name (str{id}{val=e})))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=temp_lib})))) (expr{value} (Call (expr{func} (Name (str{id}{val=Library})))))))
(root (For (expr{target} (Name (str{id}{val=name}))) (expr{iter} (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=1}))) (expr{upper} (Num (int{n}{val=-2}))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=name}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=lib}))) (str{attr}{val=tags})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=temp_lib}))) (str{attr}{val=tags}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=name})))))))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=lib}))) (str{attr}{val=tags}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=name})))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=name}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=lib}))) (str{attr}{val=filters})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=temp_lib}))) (str{attr}{val=filters}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=name})))))))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=lib}))) (str{attr}{val=filters}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=name})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Name (str{id}{val=name}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=lib}))) (str{attr}{val=filters})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=temp_lib}))) (str{attr}{val=filters}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=name})))))))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=lib}))) (str{attr}{val=filters}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=name})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=taglib})))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_library}))) (expr*{args} (expr (Name (str{id}{val=temp_lib}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=taglib}))) (expr{iter} (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=1}))))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=lib})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_library}))) (expr*{args} (expr (Name (str{id}{val=taglib}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=add_library}))) (expr*{args} (expr (Name (str{id}{val=lib}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=InvalidTemplateLibrary}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=taglib}))) (expr (Name (str{id}{val=e})))))))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=LoadNode})))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=tag}))))))
(root (FunctionDef (str{name}{val=now}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=parser}))) (expr (Name (str{id}{val=token})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=bits})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=split_contents})))))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=bits})))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Num (int{n}{val=2})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=format_string})))) (expr{value} (Subscript (expr{value} (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=1}))) (expr{upper} (Num (int{n}{val=-1})))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=NowNode}))) (expr*{args} (expr (Name (str{id}{val=format_string}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=tag}))))))
(root (FunctionDef (str{name}{val=regroup}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=parser}))) (expr (Name (str{id}{val=token})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=bits})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=split_contents})))))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=bits})))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Num (int{n}{val=6})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=target})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=compile_filter}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=2}))))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=4}))))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (Str (str{s}{val=next-to-last argument to 'regroup' tag must be 'as'}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=var_name})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=5})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=expression})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=compile_filter}))) (expr*{args} (expr (BinOp (expr{left} (BinOp (expr{left} (Name (str{id}{val=var_name}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=VARIABLE_ATTRIBUTE_SEPARATOR}))))) (operator{op} (Add)) (expr{right} (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=3}))))))))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=RegroupNode}))) (expr*{args} (expr (Name (str{id}{val=target}))) (expr (Name (str{id}{val=expression}))) (expr (Name (str{id}{val=var_name}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=tag}))))))
(root (FunctionDef (str{name}{val=spaceless}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=parser}))) (expr (Name (str{id}{val=token})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=nodelist})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=parse}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=delete_first_token})))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=SpacelessNode}))) (expr*{args} (expr (Name (str{id}{val=nodelist}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=tag}))))))
(root (FunctionDef (str{name}{val=templatetag}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=parser}))) (expr (Name (str{id}{val=token})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=bits})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=contents}))) (str{attr}{val=split})))))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=bits})))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Num (int{n}{val=2})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=tag})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1})))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=tag}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=TemplateTagNode}))) (str{attr}{val=mapping})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=Invalid templatetag argument: '%s'. Must be one of: %s}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=tag}))) (expr (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=TemplateTagNode}))) (str{attr}{val=mapping}))))))))))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=TemplateTagNode}))) (expr*{args} (expr (Name (str{id}{val=tag}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=tag}))))))
(root (FunctionDef (str{name}{val=url}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=parser}))) (expr (Name (str{id}{val=token})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=bits})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=split_contents})))))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=bits})))))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Num (int{n}{val=2})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val='%s' takes at least one argument (path to a view)}))) (operator{op} (Mod)) (expr{right} (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=viewname})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=compile_filter}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=args})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=kwargs})))) (expr{value} (Dict (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=asvar})))) (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=bits})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=2})))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=bits})))))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Num (int{n}{val=2})))))) (expr (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=-2}))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=asvar})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=-1})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=bits})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Slice (expr{upper} (Num (int{n}{val=-2})))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=bits})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=bit}))) (expr{iter} (Name (str{id}{val=bits}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=match})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=kwarg_re}))) (str{attr}{val=match}))) (expr*{args} (expr (Name (str{id}{val=bit}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=match}))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=value}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=match}))) (str{attr}{val=groups})))))))
(root (If (expr{test} (Name (str{id}{val=name}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=kwargs}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=name})))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=compile_filter}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=args}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=compile_filter}))) (expr*{args} (expr (Name (str{id}{val=value})))))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=URLNode}))) (expr*{args} (expr (Name (str{id}{val=viewname}))) (expr (Name (str{id}{val=args}))) (expr (Name (str{id}{val=kwargs}))) (expr (Name (str{id}{val=asvar}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=tag}))))))
(root (FunctionDef (str{name}{val=verbatim}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=parser}))) (expr (Name (str{id}{val=token})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=nodelist})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=parse}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=delete_first_token})))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=VerbatimNode}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=nodelist}))) (str{attr}{val=render}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=Context})))))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=tag}))))))
(root (FunctionDef (str{name}{val=widthratio}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=parser}))) (expr (Name (str{id}{val=token})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=bits})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=split_contents})))))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=bits})))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=4})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=tag}))) (expr (Name (str{id}{val=this_value_expr}))) (expr (Name (str{id}{val=max_value_expr}))) (expr (Name (str{id}{val=max_width}))))))) (expr{value} (Name (str{id}{val=bits})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=asvar})))) (expr{value} (Name (str{id}{val=None})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=bits})))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=6})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=tag}))) (expr (Name (str{id}{val=this_value_expr}))) (expr (Name (str{id}{val=max_value_expr}))) (expr (Name (str{id}{val=max_width}))) (expr (Name (str{id}{val=as_}))) (expr (Name (str{id}{val=asvar}))))))) (expr{value} (Name (str{id}{val=bits})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=as_}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=WidthRatioNode}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=compile_filter}))) (expr*{args} (expr (Name (str{id}{val=this_value_expr})))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=compile_filter}))) (expr*{args} (expr (Name (str{id}{val=max_value_expr})))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=compile_filter}))) (expr*{args} (expr (Name (str{id}{val=max_width}))))))) (keyword*{keywords} (keyword (str{arg}{val=asvar}) (expr{value} (Name (str{id}{val=asvar})))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=tag}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))))
(root (FunctionDef (str{name}{val=do_with}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=parser}))) (expr (Name (str{id}{val=token})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=bits})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=split_contents})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=remaining_bits})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=1})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=extra_context})))) (expr{value} (Call (expr{func} (Name (str{id}{val=token_kwargs}))) (expr*{args} (expr (Name (str{id}{val=remaining_bits}))) (expr (Name (str{id}{val=parser})))) (keyword*{keywords} (keyword (str{arg}{val=support_legacy}) (expr{value} (Name (str{id}{val=True})))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=extra_context}))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=%r expected at least one variable assignment}))) (operator{op} (Mod)) (expr{right} (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))))))))))
(root (If (expr{test} (Name (str{id}{val=remaining_bits}))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (expr (Subscript (expr{value} (Name (str{id}{val=remaining_bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=nodelist})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=parse}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=delete_first_token})))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=WithNode}))) (expr*{args} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=nodelist})))) (keyword*{keywords} (keyword (str{arg}{val=extra_context}) (expr{value} (Name (str{id}{val=extra_context})))))))))
(root (ImportFrom (str{module}{val=django.core.exceptions}) (alias*{names} (alias (str{name}{val=ImproperlyConfigured}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.template.base}) (alias*{names} (alias (str{name}{val=Origin})) (alias (str{name}{val=Template})) (alias (str{name}{val=Context})) (alias (str{name}{val=TemplateDoesNotExist}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.module_loading}) (alias*{names} (alias (str{name}{val=import_string}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=template_source_loaders})))) (expr{value} (Name (str{id}{val=None})))))
(root (ClassDef (str{name}{val=BaseLoader}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=is_usable})))) (expr{value} (Name (str{id}{val=False})))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (FunctionDef (str{name}{val=__call__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=template_name}))) (expr (Name (str{id}{val=template_dirs})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=load_template}))) (expr*{args} (expr (Name (str{id}{val=template_name}))) (expr (Name (str{id}{val=template_dirs}))))))))
(root (FunctionDef (str{name}{val=load_template}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=template_name}))) (expr (Name (str{id}{val=template_dirs})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=source}))) (expr (Name (str{id}{val=display_name}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=load_template_source}))) (expr*{args} (expr (Name (str{id}{val=template_name}))) (expr (Name (str{id}{val=template_dirs}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=origin})))) (expr{value} (Call (expr{func} (Name (str{id}{val=make_origin}))) (expr*{args} (expr (Name (str{id}{val=display_name}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=load_template_source}))) (expr (Name (str{id}{val=template_name}))) (expr (Name (str{id}{val=template_dirs}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=template})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_template_from_string}))) (expr*{args} (expr (Name (str{id}{val=source}))) (expr (Name (str{id}{val=origin}))) (expr (Name (str{id}{val=template_name}))))))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=template}))) (expr (Name (str{id}{val=None}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=TemplateDoesNotExist}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=source}))) (expr (Name (str{id}{val=display_name}))))))))
(root (FunctionDef (str{name}{val=load_template_source}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=template_name}))) (expr (Name (str{id}{val=template_dirs})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=NotImplementedError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=reset}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (ClassDef (str{name}{val=LoaderOrigin}) (expr*{bases} (expr (Name (str{id}{val=Origin})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=display_name}))) (expr (Name (str{id}{val=loader}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=dirs})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=LoaderOrigin}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=display_name}))))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=loader}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=loadname}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=dirs}))))))) (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=loader}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=dirs}))))))))
(root (FunctionDef (str{name}{val=reload}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=loader}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=loadname}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=dirs})))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))
(root (FunctionDef (str{name}{val=make_origin}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=display_name}))) (expr (Name (str{id}{val=loader}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=dirs})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=TEMPLATE_DEBUG}))) (expr (Name (str{id}{val=display_name})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=LoaderOrigin}))) (expr*{args} (expr (Name (str{id}{val=display_name}))) (expr (Name (str{id}{val=loader}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=dirs}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=None})))))
(root (FunctionDef (str{name}{val=find_template_loader}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=loader})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=loader}))) (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=tuple}))) (expr (Name (str{id}{val=list}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=loader}))) (expr (Name (str{id}{val=args}))))))) (expr{value} (Tuple (expr*{elts} (expr (Subscript (expr{value} (Name (str{id}{val=loader}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (expr (Subscript (expr{value} (Name (str{id}{val=loader}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=1}))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=args})))) (expr{value} (List (epsilon)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=loader}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=string_types})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=TemplateLoader})))) (expr{value} (Call (expr{func} (Name (str{id}{val=import_string}))) (expr*{args} (expr (Name (str{id}{val=loader}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=TemplateLoader}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=func})))) (expr{value} (Call (expr{func} (Name (str{id}{val=TemplateLoader}))) (expr{starargs} (Name (str{id}{val=args})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=args}))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ImproperlyConfigured}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=Error importing template source loader %s - can't pass arguments to function-based loader.}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=loader}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=func})))) (expr{value} (Name (str{id}{val=TemplateLoader})))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=func}))) (str{attr}{val=is_usable}))))) (stmt*{body} (stmt (Pass)))))
(root (Import (alias*{names} (alias (str{name}{val=warnings})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=warnings}))) (str{attr}{val=warn}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=Your TEMPLATE_LOADERS setting includes %r, but your Python installation doesn't support that type of template loading. Consider removing that line from TEMPLATE_LOADERS.}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=loader}))))))))))
(root (Return (expr{value} (Name (str{id}{val=None})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=func})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ImproperlyConfigured}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=find_template}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=dirs})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Global (str*{names} (str{val=template_source_loaders}))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=template_source_loaders}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=loaders})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=loader_name}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=TEMPLATE_LOADERS}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=loader})))) (expr{value} (Call (expr{func} (Name (str{id}{val=find_template_loader}))) (expr*{args} (expr (Name (str{id}{val=loader_name}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=loader}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=loaders}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=loader}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=template_source_loaders})))) (expr{value} (Call (expr{func} (Name (str{id}{val=tuple}))) (expr*{args} (expr (Name (str{id}{val=loaders}))))))))
(root (For (expr{target} (Name (str{id}{val=loader}))) (expr{iter} (Name (str{id}{val=template_source_loaders}))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=source}))) (expr (Name (str{id}{val=display_name}))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=loader}))) (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=dirs}))))))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=source}))) (expr (Call (expr{func} (Name (str{id}{val=make_origin}))) (expr*{args} (expr (Name (str{id}{val=display_name}))) (expr (Name (str{id}{val=loader}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=dirs})))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=TemplateDoesNotExist}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateDoesNotExist}))) (expr*{args} (expr (Name (str{id}{val=name}))))))))
(root (FunctionDef (str{name}{val=get_template}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=template_name}))) (expr (Name (str{id}{val=dirs})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=template}))) (expr (Name (str{id}{val=origin}))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=find_template}))) (expr*{args} (expr (Name (str{id}{val=template_name}))) (expr (Name (str{id}{val=dirs}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=template}))) (expr (Str (str{s}{val=_STR:0_})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=template})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_template_from_string}))) (expr*{args} (expr (Name (str{id}{val=template}))) (expr (Name (str{id}{val=origin}))) (expr (Name (str{id}{val=template_name}))))))))
(root (Return (expr{value} (Name (str{id}{val=template})))))
(root (FunctionDef (str{name}{val=get_template_from_string}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=source}))) (expr (Name (str{id}{val=origin}))) (expr (Name (str{id}{val=name})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=Template}))) (expr*{args} (expr (Name (str{id}{val=source}))) (expr (Name (str{id}{val=origin}))) (expr (Name (str{id}{val=name}))))))))
(root (FunctionDef (str{name}{val=render_to_string}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=template_name}))) (expr (Name (str{id}{val=dictionary}))) (expr (Name (str{id}{val=context_instance}))) (expr (Name (str{id}{val=dirs})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=template_name}))) (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=list}))) (expr (Name (str{id}{val=tuple}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=t})))) (expr{value} (Call (expr{func} (Name (str{id}{val=select_template}))) (expr*{args} (expr (Name (str{id}{val=template_name}))) (expr (Name (str{id}{val=dirs}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=t})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_template}))) (expr*{args} (expr (Name (str{id}{val=template_name}))) (expr (Name (str{id}{val=dirs}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=context_instance}))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=t}))) (str{attr}{val=render}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=Context}))) (expr*{args} (expr (Name (str{id}{val=dictionary})))))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=dictionary}))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=t}))) (str{attr}{val=render}))) (expr*{args} (expr (Name (str{id}{val=context_instance}))))))))
(root (With (expr{context_expr} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=context_instance}))) (str{attr}{val=push}))) (expr*{args} (expr (Name (str{id}{val=dictionary})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=t}))) (str{attr}{val=render}))) (expr*{args} (expr (Name (str{id}{val=context_instance}))))))))
(root (FunctionDef (str{name}{val=select_template}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=template_name_list}))) (expr (Name (str{id}{val=dirs})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=template_name_list}))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateDoesNotExist}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=not_found})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=template_name}))) (expr{iter} (Name (str{id}{val=template_name_list}))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=get_template}))) (expr*{args} (expr (Name (str{id}{val=template_name}))) (expr (Name (str{id}{val=dirs}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=TemplateDoesNotExist}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=args}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=not_found})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=not_found}))) (str{attr}{val=append}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=args}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))))))))
(root (Continue))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateDoesNotExist}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=_STR:0_}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=not_found})))))))))))
(root (ImportFrom (str{module}{val=collections}) (alias*{names} (alias (str{name}{val=defaultdict}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.template.base}) (alias*{names} (alias (str{name}{val=TemplateSyntaxError})) (alias (str{name}{val=Library})) (alias (str{name}{val=Node})) (alias (str{name}{val=TextNode})) (alias (str{name}{val=token_kwargs})) (alias (str{name}{val=Variable}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.template.loader}) (alias*{names} (alias (str{name}{val=get_template}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.safestring}) (alias*{names} (alias (str{name}{val=mark_safe}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=register})))) (expr{value} (Call (expr{func} (Name (str{id}{val=Library})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=BLOCK_CONTEXT_KEY})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (ClassDef (str{name}{val=ExtendsError}) (expr*{bases} (expr (Name (str{id}{val=Exception})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (ClassDef (str{name}{val=BlockContext}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=blocks})))) (expr{value} (Call (expr{func} (Name (str{id}{val=defaultdict}))) (expr*{args} (expr (Name (str{id}{val=list}))))))))
(root (FunctionDef (str{name}{val=add_blocks}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=blocks})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=block})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=iteritems}))) (expr*{args} (expr (Name (str{id}{val=blocks})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=blocks}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=name}))))))) (str{attr}{val=insert}))) (expr*{args} (expr (Num (int{n}{val=0}))) (expr (Name (str{id}{val=block}))))))))
(root (FunctionDef (str{name}{val=pop}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=blocks}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=name}))))))) (str{attr}{val=pop})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=IndexError}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Name (str{id}{val=None})))))
(root (FunctionDef (str{name}{val=push}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=block})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=blocks}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=name}))))))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=block}))))))))
(root (FunctionDef (str{name}{val=get_block}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Subscript (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=blocks}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=name}))))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=-1})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=IndexError}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Name (str{id}{val=None})))))
(root (ClassDef (str{name}{val=BlockNode}) (expr*{bases} (expr (Name (str{id}{val=Node})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=nodelist}))) (expr (Name (str{id}{val=parent})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=name}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=nodelist}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=parent}))))))) (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=nodelist}))) (expr (Name (str{id}{val=parent}))))))))
(root (FunctionDef (str{name}{val=__repr__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=name}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=nodelist}))))))))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=block_context})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=context}))) (str{attr}{val=render_context}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=BLOCK_CONTEXT_KEY}))))))))
(root (With (expr{context_expr} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=context}))) (str{attr}{val=push}))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=block_context}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=context}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Name (str{id}{val=self})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=nodelist}))) (str{attr}{val=render}))) (expr*{args} (expr (Name (str{id}{val=context}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=push}))) (expr (Name (str{id}{val=block})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=block_context}))) (str{attr}{val=pop}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=name}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=block}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=block})))) (expr{value} (Name (str{id}{val=self})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=block})))) (expr{value} (Call (expr{func} (Call (expr{func} (Name (str{id}{val=type}))) (expr*{args} (expr (Name (str{id}{val=self})))))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=block}))) (str{attr}{val=name}))) (expr (Attribute (expr{value} (Name (str{id}{val=block}))) (str{attr}{val=nodelist}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=block}))) (str{attr}{val=context})))) (expr{value} (Name (str{id}{val=context})))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=context}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Name (str{id}{val=block})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=block}))) (str{attr}{val=nodelist}))) (str{attr}{val=render}))) (expr*{args} (expr (Name (str{id}{val=context}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=push}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=block_context}))) (str{attr}{val=push}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=name}))) (expr (Name (str{id}{val=push}))))))))
(root (Return (expr{value} (Name (str{id}{val=result})))))
(root (FunctionDef (str{name}{val=super}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=render_context})))) (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=context}))) (str{attr}{val=render_context})))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=BLOCK_CONTEXT_KEY}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=render_context})))))) (expr (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=render_context}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=BLOCK_CONTEXT_KEY}))))))) (str{attr}{val=get_block}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=name})))))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=mark_safe}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=render}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=context})))))))))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (ClassDef (str{name}{val=ExtendsNode}) (expr*{bases} (expr (Name (str{id}{val=Node})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=must_be_first})))) (expr{value} (Name (str{id}{val=True})))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=nodelist}))) (expr (Name (str{id}{val=parent_name}))) (expr (Name (str{id}{val=template_dirs})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=nodelist})))) (expr{value} (Name (str{id}{val=nodelist})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=parent_name})))) (expr{value} (Name (str{id}{val=parent_name})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=template_dirs})))) (expr{value} (Name (str{id}{val=template_dirs})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=blocks})))) (expr{value} (Call (expr{func} (Name (str{id}{val=dict}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=n}))) (str{attr}{val=name}))) (expr (Name (str{id}{val=n})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=n}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=nodelist}))) (str{attr}{val=get_nodes_by_type}))) (expr*{args} (expr (Name (str{id}{val=BlockNode})))))))))))))))
(root (FunctionDef (str{name}{val=__repr__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=parent_name}))) (str{attr}{val=token})))))))
(root (FunctionDef (str{name}{val=get_parent}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=parent})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=parent_name}))) (str{attr}{val=resolve}))) (expr*{args} (expr (Name (str{id}{val=context}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=parent}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=error_msg})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=parent})))))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=parent_name}))) (str{attr}{val=filters}))) (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=parent_name}))) (str{attr}{val=var}))) (expr (Name (str{id}{val=Variable}))))))))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=error_msg}))) (operator{op} (Add)) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=parent_name}))) (str{attr}{val=token})))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (Name (str{id}{val=error_msg}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=parent}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=parent})))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=get_template}))) (expr*{args} (expr (Name (str{id}{val=parent}))))))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=compiled_parent})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get_parent}))) (expr*{args} (expr (Name (str{id}{val=context}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=BLOCK_CONTEXT_KEY}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=context}))) (str{attr}{val=render_context})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=context}))) (str{attr}{val=render_context}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=BLOCK_CONTEXT_KEY})))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=BlockContext})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=block_context})))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=context}))) (str{attr}{val=render_context}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=BLOCK_CONTEXT_KEY})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=block_context}))) (str{attr}{val=add_blocks}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=blocks}))))))))
(root (For (expr{target} (Name (str{id}{val=node}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=compiled_parent}))) (str{attr}{val=nodelist}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=node}))) (expr (Name (str{id}{val=TextNode})))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=node}))) (expr (Name (str{id}{val=ExtendsNode})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=blocks})))) (expr{value} (Call (expr{func} (Name (str{id}{val=dict}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=n}))) (str{attr}{val=name}))) (expr (Name (str{id}{val=n})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=n}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=compiled_parent}))) (str{attr}{val=nodelist}))) (str{attr}{val=get_nodes_by_type}))) (expr*{args} (expr (Name (str{id}{val=BlockNode})))))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=block_context}))) (str{attr}{val=add_blocks}))) (expr*{args} (expr (Name (str{id}{val=blocks}))))))))
(root (Break))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=compiled_parent}))) (str{attr}{val=_render}))) (expr*{args} (expr (Name (str{id}{val=context}))))))))
(root (ClassDef (str{name}{val=IncludeNode}) (expr*{bases} (expr (Name (str{id}{val=Node})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=template})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=template})))) (expr{value} (Name (str{id}{val=template})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=extra_context})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=kwargs}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Dict (epsilon))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=isolated_context})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=kwargs}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=False}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=IncludeNode}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=template})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=template}))) (str{attr}{val=resolve}))) (expr*{args} (expr (Name (str{id}{val=context}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=callable}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=template}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=template})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_template}))) (expr*{args} (expr (Name (str{id}{val=template}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=values})))) (expr{value} (DictComp (expr{key} (Name (str{id}{val=name}))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=var}))) (str{attr}{val=resolve}))) (expr*{args} (expr (Name (str{id}{val=context})))))) (comprehension*{generators} (comprehension (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=var})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=iteritems}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=extra_context}))))))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=isolated_context}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=template}))) (str{attr}{val=render}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=context}))) (str{attr}{val=new}))) (expr*{args} (expr (Name (str{id}{val=values})))))))))))
(root (With (expr{context_expr} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=context}))) (str{attr}{val=push}))) (expr{kwargs} (Name (str{id}{val=values}))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=template}))) (str{attr}{val=render}))) (expr*{args} (expr (Name (str{id}{val=context}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=Exception}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=TEMPLATE_DEBUG}))) (stmt*{body} (stmt (Pass)))))
(root (Raise (epsilon)))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=tag}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))))
(root (FunctionDef (str{name}{val=do_block}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=parser}))) (expr (Name (str{id}{val=token})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=bits})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=contents}))) (str{attr}{val=split})))))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=bits})))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Num (int{n}{val=2})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=block_name})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=block_name}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=__loaded_blocks})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (expr (Name (str{id}{val=block_name})))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=__loaded_blocks}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=block_name}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=AttributeError}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=__loaded_blocks})))) (expr{value} (List (expr*{elts} (expr (Name (str{id}{val=block_name}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=nodelist})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=parse}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=endblock})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=next_token})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=acceptable_endblocks})))) (expr{value} (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (BinOp (expr{left} (Str (str{s}{val=_STR:1_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=block_name}))))))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=endblock}))) (str{attr}{val=contents}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=acceptable_endblocks})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=invalid_block_tag}))) (expr*{args} (expr (Name (str{id}{val=endblock}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=acceptable_endblocks}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=BlockNode}))) (expr*{args} (expr (Name (str{id}{val=block_name}))) (expr (Name (str{id}{val=nodelist}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=tag}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))))
(root (FunctionDef (str{name}{val=do_extends}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=parser}))) (expr (Name (str{id}{val=token})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=bits})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=split_contents})))))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=bits})))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Num (int{n}{val=2})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=parent_name})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=compile_filter}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=nodelist})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=parse})))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=nodelist}))) (str{attr}{val=get_nodes_by_type}))) (expr*{args} (expr (Name (str{id}{val=ExtendsNode})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=ExtendsNode}))) (expr*{args} (expr (Name (str{id}{val=nodelist}))) (expr (Name (str{id}{val=parent_name}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=register}))) (str{attr}{val=tag}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))))
(root (FunctionDef (str{name}{val=do_include}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=parser}))) (expr (Name (str{id}{val=token})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=bits})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=split_contents})))))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=bits})))))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Num (int{n}{val=2})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=options})))) (expr{value} (Dict (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=remaining_bits})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=2})))))))))
(root (While (expr{test} (Name (str{id}{val=remaining_bits}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=option})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=remaining_bits}))) (str{attr}{val=pop}))) (expr*{args} (expr (Num (int{n}{val=0}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=option}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=options})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=The %r option was specified more than once.}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=option}))))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=option}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:1_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=token_kwargs}))) (expr*{args} (expr (Name (str{id}{val=remaining_bits}))) (expr (Name (str{id}{val=parser})))) (keyword*{keywords} (keyword (str{arg}{val=support_legacy}) (expr{value} (Name (str{id}{val=False})))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=value}))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val="with" in %r tag needs at least one keyword argument.}))) (operator{op} (Mod)) (expr{right} (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Name (str{id}{val=option}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Name (str{id}{val=True})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateSyntaxError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (expr (Name (str{id}{val=option})))))))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=options}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=option})))))))) (expr{value} (Name (str{id}{val=value})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=isolated_context})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=False}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=namemap})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=options}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=with}))) (expr (Dict (epsilon))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=IncludeNode}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=compile_filter}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=bits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))))))) (keyword*{keywords} (keyword (str{arg}{val=extra_context}) (expr{value} (Name (str{id}{val=namemap})))) (keyword (str{arg}{val=isolated_context}) (expr{value} (Name (str{id}{val=isolated_context})))))))))
(root (Import (alias*{names} (alias (str{name}{val=os})))))
(root (Import (alias*{names} (alias (str{name}{val=sys})))))
(root (ImportFrom (str{module}{val=django.apps}) (alias*{names} (alias (str{name}{val=apps}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.template.base}) (alias*{names} (alias (str{name}{val=TemplateDoesNotExist}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.template.loader}) (alias*{names} (alias (str{name}{val=BaseLoader}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils._os}) (alias*{names} (alias (str{name}{val=safe_join}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (FunctionDef (str{name}{val=calculate_app_template_dirs}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=PY2}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=fs_encoding})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=getfilesystemencoding}))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=getdefaultencoding}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=app_template_dirs})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=app_config}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=apps}))) (str{attr}{val=get_app_configs}))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=app_config}))) (str{attr}{val=path}))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=template_dir})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=app_config}))) (str{attr}{val=path}))) (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=isdir}))) (expr*{args} (expr (Name (str{id}{val=template_dir})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=PY2}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=template_dir})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=template_dir}))) (str{attr}{val=decode}))) (expr*{args} (expr (Name (str{id}{val=fs_encoding}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=app_template_dirs}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=template_dir}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=tuple}))) (expr*{args} (expr (Name (str{id}{val=app_template_dirs}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=app_template_dirs})))) (expr{value} (Call (expr{func} (Name (str{id}{val=calculate_app_template_dirs})))))))
(root (ClassDef (str{name}{val=Loader}) (expr*{bases} (expr (Name (str{id}{val=BaseLoader})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=is_usable})))) (expr{value} (Name (str{id}{val=True})))))
(root (FunctionDef (str{name}{val=get_template_sources}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=template_name}))) (expr (Name (str{id}{val=template_dirs})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=template_dirs}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=template_dirs})))) (expr{value} (Name (str{id}{val=app_template_dirs})))))
(root (For (expr{target} (Name (str{id}{val=template_dir}))) (expr{iter} (Name (str{id}{val=template_dirs}))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Yield (expr{value} (Call (expr{func} (Name (str{id}{val=safe_join}))) (expr*{args} (expr (Name (str{id}{val=template_dir}))) (expr (Name (str{id}{val=template_name}))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=UnicodeDecodeError}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (epsilon)))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ValueError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (FunctionDef (str{name}{val=load_template_source}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=template_name}))) (expr (Name (str{id}{val=template_dirs})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=filepath}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get_template_sources}))) (expr*{args} (expr (Name (str{id}{val=template_name}))) (expr (Name (str{id}{val=template_dirs})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (With (expr{context_expr} (Call (expr{func} (Name (str{id}{val=open}))) (expr*{args} (expr (Name (str{id}{val=filepath}))) (expr (Str (str{s}{val=rb})))))) (expr{optional_vars} (Name (str{id}{val=fp}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=fp}))) (str{attr}{val=read}))))) (str{attr}{val=decode}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=FILE_CHARSET})))))) (expr (Name (str{id}{val=filepath}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=IOError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateDoesNotExist}))) (expr*{args} (expr (Name (str{id}{val=template_name}))))))))
(root (Import (alias*{names} (alias (str{name}{val=hashlib})))))
(root (ImportFrom (str{module}{val=django.template.base}) (alias*{names} (alias (str{name}{val=TemplateDoesNotExist}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.template.loader}) (alias*{names} (alias (str{name}{val=BaseLoader})) (alias (str{name}{val=get_template_from_string})) (alias (str{name}{val=find_template_loader})) (alias (str{name}{val=make_origin}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=force_bytes}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=Loader}) (expr*{bases} (expr (Name (str{id}{val=BaseLoader})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=is_usable})))) (expr{value} (Name (str{id}{val=True})))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=loaders})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=template_cache})))) (expr{value} (Dict (epsilon)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=find_template_cache})))) (expr{value} (Dict (epsilon)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_loaders})))) (expr{value} (Name (str{id}{val=loaders})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_cached_loaders})))) (expr{value} (List (epsilon)))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=loaders}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_cached_loaders}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cached_loaders})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=loader}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_loaders}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=cached_loaders}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=find_template_loader}))) (expr*{args} (expr (Name (str{id}{val=loader})))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_cached_loaders})))) (expr{value} (Name (str{id}{val=cached_loaders})))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_cached_loaders})))))
(root (FunctionDef (str{name}{val=cache_key}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=template_name}))) (expr (Name (str{id}{val=template_dirs})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=template_dirs}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=-}))) (str{attr}{val=join}))) (expr*{args} (expr (List (expr*{elts} (expr (Name (str{id}{val=template_name}))) (expr (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=hashlib}))) (str{attr}{val=sha1}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=force_bytes}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=_STR:0_}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=template_dirs})))))))))))) (str{attr}{val=hexdigest})))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=template_name})))))
(root (FunctionDef (str{name}{val=find_template}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=dirs})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=key})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=cache_key}))) (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=dirs}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=find_template_cache}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=KeyError}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Name (str{id}{val=None})))))
(root (For (expr{target} (Name (str{id}{val=loader}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=loaders}))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=template}))) (expr (Name (str{id}{val=display_name}))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=loader}))) (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=dirs}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=TemplateDoesNotExist}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=template}))) (expr (Call (expr{func} (Name (str{id}{val=make_origin}))) (expr*{args} (expr (Name (str{id}{val=display_name}))) (expr (Name (str{id}{val=loader}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=dirs})))))))))))
(root (Break))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=find_template_cache}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key})))))))) (expr{value} (Name (str{id}{val=result})))))
(root (If (expr{test} (Name (str{id}{val=result}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=result})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=template_cache}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key})))))))) (expr{value} (Name (str{id}{val=TemplateDoesNotExist})))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateDoesNotExist}))) (expr*{args} (expr (Name (str{id}{val=name}))))))))
(root (FunctionDef (str{name}{val=load_template}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=template_name}))) (expr (Name (str{id}{val=template_dirs})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=key})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=cache_key}))) (expr*{args} (expr (Name (str{id}{val=template_name}))) (expr (Name (str{id}{val=template_dirs}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=template_tuple})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=template_cache}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=key}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=template_tuple}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=TemplateDoesNotExist})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Name (str{id}{val=TemplateDoesNotExist})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Name (str{id}{val=template_tuple}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=template}))) (expr (Name (str{id}{val=origin}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=find_template}))) (expr*{args} (expr (Name (str{id}{val=template_name}))) (expr (Name (str{id}{val=template_dirs}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=template}))) (expr (Str (str{s}{val=_STR:0_})))))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=template})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_template_from_string}))) (expr*{args} (expr (Name (str{id}{val=template}))) (expr (Name (str{id}{val=origin}))) (expr (Name (str{id}{val=template_name}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=TemplateDoesNotExist}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=template_cache}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key})))))))) (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=template}))) (expr (Name (str{id}{val=origin}))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=template_cache}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key})))))))) (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=template}))) (expr (Name (str{id}{val=None}))))))))
(root (Return (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=template_cache}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key})))))))))
(root (FunctionDef (str{name}{val=reset}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=template_cache}))) (str{attr}{val=clear})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=find_template_cache}))) (str{attr}{val=clear})))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (ImportFrom (str{module}{val=pkg_resources}) (alias*{names} (alias (str{name}{val=resource_string}))) (int{level}{val=0})))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ImportError}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=resource_string})))) (expr{value} (Name (str{id}{val=None})))))
(root (ImportFrom (str{module}{val=django.apps}) (alias*{names} (alias (str{name}{val=apps}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.template.base}) (alias*{names} (alias (str{name}{val=TemplateDoesNotExist}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.template.loader}) (alias*{names} (alias (str{name}{val=BaseLoader}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=Loader}) (expr*{bases} (expr (Name (str{id}{val=BaseLoader})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=is_usable})))) (expr{value} (Compare (expr{left} (Name (str{id}{val=resource_string}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None}))))))))
(root (FunctionDef (str{name}{val=load_template_source}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=template_name}))) (expr (Name (str{id}{val=template_dirs})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=resource_string}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=pkg_name})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=template_name})))))))
(root (For (expr{target} (Name (str{id}{val=app_config}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=apps}))) (str{attr}{val=get_app_configs}))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=resource})))) (expr{value} (Call (expr{func} (Name (str{id}{val=resource_string}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=app_config}))) (str{attr}{val=name}))) (expr (Name (str{id}{val=pkg_name}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=Exception}))) (stmt*{body} (stmt (Pass)))))))
(root (Continue))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=PY2}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=resource})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=resource}))) (str{attr}{val=decode}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=FILE_CHARSET}))))))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=resource}))) (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=app_config}))) (str{attr}{val=name}))) (expr (Name (str{id}{val=pkg_name})))))))))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateDoesNotExist}))) (expr*{args} (expr (Name (str{id}{val=template_name}))))))))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.template.base}) (alias*{names} (alias (str{name}{val=TemplateDoesNotExist}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.template.loader}) (alias*{names} (alias (str{name}{val=BaseLoader}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils._os}) (alias*{names} (alias (str{name}{val=safe_join}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=Loader}) (expr*{bases} (expr (Name (str{id}{val=BaseLoader})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=is_usable})))) (expr{value} (Name (str{id}{val=True})))))
(root (FunctionDef (str{name}{val=get_template_sources}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=template_name}))) (expr (Name (str{id}{val=template_dirs})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=template_dirs}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=template_dirs})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=TEMPLATE_DIRS})))))
(root (For (expr{target} (Name (str{id}{val=template_dir}))) (expr{iter} (Name (str{id}{val=template_dirs}))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Yield (expr{value} (Call (expr{func} (Name (str{id}{val=safe_join}))) (expr*{args} (expr (Name (str{id}{val=template_dir}))) (expr (Name (str{id}{val=template_name}))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=UnicodeDecodeError}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (epsilon)))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ValueError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (FunctionDef (str{name}{val=load_template_source}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=template_name}))) (expr (Name (str{id}{val=template_dirs})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=tried})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=filepath}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=get_template_sources}))) (expr*{args} (expr (Name (str{id}{val=template_name}))) (expr (Name (str{id}{val=template_dirs})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (With (expr{context_expr} (Call (expr{func} (Name (str{id}{val=open}))) (expr*{args} (expr (Name (str{id}{val=filepath}))) (expr (Str (str{s}{val=rb})))))) (expr{optional_vars} (Name (str{id}{val=fp}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=fp}))) (str{attr}{val=read}))))) (str{attr}{val=decode}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=FILE_CHARSET})))))) (expr (Name (str{id}{val=filepath}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=IOError}))) (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=tried}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=filepath}))))))))
(root (If (expr{test} (Name (str{id}{val=tried}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=error_msg})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=tried})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=error_msg})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TemplateDoesNotExist}))) (expr*{args} (expr (Name (str{id}{val=error_msg}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=load_template_source}))) (str{attr}{val=is_usable})))) (expr{value} (Name (str{id}{val=True})))))
(root (ImportFrom (str{module}{val=django.http}) (alias*{names} (alias (str{name}{val=HttpResponse}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.template}) (alias*{names} (alias (str{name}{val=loader})) (alias (str{name}{val=Context})) (alias (str{name}{val=RequestContext}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=ContentNotRenderedError}) (expr*{bases} (expr (Name (str{id}{val=Exception})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (ClassDef (str{name}{val=SimpleTemplateResponse}) (expr*{bases} (expr (Name (str{id}{val=HttpResponse})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=rendering_attrs})))) (expr{value} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))))))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=template}))) (expr (Name (str{id}{val=context}))) (expr (Name (str{id}{val=content_type}))) (expr (Name (str{id}{val=status})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=template_name})))) (expr{value} (Name (str{id}{val=template})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=context_data})))) (expr{value} (Name (str{id}{val=context})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_post_render_callbacks})))) (expr{value} (List (epsilon)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=SimpleTemplateResponse}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Str (str{s}{val=}))) (expr (Name (str{id}{val=content_type}))) (expr (Name (str{id}{val=status}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_is_rendered})))) (expr{value} (Name (str{id}{val=False})))))
(root (FunctionDef (str{name}{val=__getstate__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=obj_dict})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=SimpleTemplateResponse}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__getstate__})))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_is_rendered}))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ContentNotRenderedError}))) (expr*{args} (expr (Str (str{s}{val=The response content must be rendered before it can be pickled.}))))))))
(root (For (expr{target} (Name (str{id}{val=attr}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=rendering_attrs}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=attr}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=obj_dict})))))) (stmt*{body} (stmt (Pass)))))
(root (Delete (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=obj_dict}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=attr}))))))))))
(root (Return (expr{value} (Name (str{id}{val=obj_dict})))))
(root (FunctionDef (str{name}{val=resolve_template}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=template})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=template}))) (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=list}))) (expr (Name (str{id}{val=tuple}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=loader}))) (str{attr}{val=select_template}))) (expr*{args} (expr (Name (str{id}{val=template}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=template}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=string_types})))))) (stmt*{body} (stmt (Pass))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=loader}))) (str{attr}{val=get_template}))) (expr*{args} (expr (Name (str{id}{val=template}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=template})))))
(root (FunctionDef (str{name}{val=resolve_context}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=context}))) (expr (Name (str{id}{val=Context})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=context})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=Context}))) (expr*{args} (expr (Name (str{id}{val=context}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=rendered_content}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=template})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=resolve_template}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=template_name}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=context})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=resolve_context}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=context_data}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=content})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=template}))) (str{attr}{val=render}))) (expr*{args} (expr (Name (str{id}{val=context}))))))))
(root (Return (expr{value} (Name (str{id}{val=content})))))
(root (FunctionDef (str{name}{val=add_post_render_callback}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=callback})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_is_rendered}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=callback}))) (expr*{args} (expr (Name (str{id}{val=self}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_post_render_callbacks}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=callback}))))))))
(root (FunctionDef (str{name}{val=render}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=retval})))) (expr{value} (Name (str{id}{val=self})))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_is_rendered}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=content})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=rendered_content})))))
(root (For (expr{target} (Name (str{id}{val=post_callback}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_post_render_callbacks}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=newretval})))) (expr{value} (Call (expr{func} (Name (str{id}{val=post_callback}))) (expr*{args} (expr (Name (str{id}{val=retval}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=newretval}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=retval})))) (expr{value} (Name (str{id}{val=newretval})))))
(root (Return (expr{value} (Name (str{id}{val=retval})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=is_rendered}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_is_rendered})))))
(root (FunctionDef (str{name}{val=__iter__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_is_rendered}))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ContentNotRenderedError}))) (expr*{args} (expr (Str (str{s}{val=The response content must be rendered before it can be iterated over.}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=SimpleTemplateResponse}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__iter__})))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=property}))))))
(root (FunctionDef (str{name}{val=content}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_is_rendered}))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ContentNotRenderedError}))) (expr*{args} (expr (Str (str{s}{val=The response content must be rendered before it can be accessed.}))))))))
(root (Return (expr{value} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=SimpleTemplateResponse}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=content})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Attribute (expr{value} (Name (str{id}{val=content}))) (str{attr}{val=setter}))))))
(root (FunctionDef (str{name}{val=content}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=HttpResponse}))) (str{attr}{val=content}))) (str{attr}{val=fset}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_is_rendered})))) (expr{value} (Name (str{id}{val=True})))))
(root (ClassDef (str{name}{val=TemplateResponse}) (expr*{bases} (expr (Name (str{id}{val=SimpleTemplateResponse})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=rendering_attrs})))) (expr{value} (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=SimpleTemplateResponse}))) (str{attr}{val=rendering_attrs}))) (operator{op} (Add)) (expr{right} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))))))))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=request}))) (expr (Name (str{id}{val=template}))) (expr (Name (str{id}{val=context}))) (expr (Name (str{id}{val=content_type}))) (expr (Name (str{id}{val=status}))) (expr (Name (str{id}{val=current_app})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_request})))) (expr{value} (Name (str{id}{val=request})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_current_app})))) (expr{value} (Name (str{id}{val=current_app})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=TemplateResponse}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=template}))) (expr (Name (str{id}{val=context}))) (expr (Name (str{id}{val=content_type}))) (expr (Name (str{id}{val=status}))))))))
(root (FunctionDef (str{name}{val=resolve_context}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=context}))) (expr (Name (str{id}{val=Context})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=context})))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=RequestContext}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_request}))) (expr (Name (str{id}{val=context})))) (keyword*{keywords} (keyword (str{arg}{val=current_app}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_current_app})))))))))
(root (ClassDef (str{name}{val=TokenBase}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=id})))) (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=first}))) (expr (Name (str{id}{val=second})))) (expr{value} (Name (str{id}{val=None})))))
(root (FunctionDef (str{name}{val=nud}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=parser})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=error_class}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=id}))))))))))
(root (FunctionDef (str{name}{val=led}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=left}))) (expr (Name (str{id}{val=parser})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=error_class}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=id}))))))))))
(root (FunctionDef (str{name}{val=display}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=id})))))
(root (FunctionDef (str{name}{val=__repr__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=out})))) (expr{value} (ListComp (expr{elt} (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Name (str{id}{val=x})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=x}))) (expr{iter} (List (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=id}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=first}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=second})))))) (expr*{ifs} (expr (Compare (expr{left} (Name (str{id}{val=x}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))))))))))
(root (Return (expr{value} (BinOp (expr{left} (BinOp (expr{left} (Str (str{s}{val=(}))) (operator{op} (Add)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val= }))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=out})))))))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=)})))))))
(root (FunctionDef (str{name}{val=infix}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=bp}))) (expr (Name (str{id}{val=func})))))) (stmt*{body} (stmt (Pass)))))
(root (ClassDef (str{name}{val=Operator}) (expr*{bases} (expr (Name (str{id}{val=TokenBase})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=lbp})))) (expr{value} (Name (str{id}{val=bp})))))
(root (FunctionDef (str{name}{val=led}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=left}))) (expr (Name (str{id}{val=parser})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=first})))) (expr{value} (Name (str{id}{val=left})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=second})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=expression}))) (expr*{args} (expr (Name (str{id}{val=bp}))))))))
(root (Return (expr{value} (Name (str{id}{val=self})))))
(root (FunctionDef (str{name}{val=eval}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=func}))) (expr*{args} (expr (Name (str{id}{val=context}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=first}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=second}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=Exception}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (Return (expr{value} (Name (str{id}{val=Operator})))))
(root (FunctionDef (str{name}{val=prefix}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=bp}))) (expr (Name (str{id}{val=func})))))) (stmt*{body} (stmt (Pass)))))
(root (ClassDef (str{name}{val=Operator}) (expr*{bases} (expr (Name (str{id}{val=TokenBase})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=lbp})))) (expr{value} (Name (str{id}{val=bp})))))
(root (FunctionDef (str{name}{val=nud}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=parser})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=first})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=expression}))) (expr*{args} (expr (Name (str{id}{val=bp}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=second})))) (expr{value} (Name (str{id}{val=None})))))
(root (Return (expr{value} (Name (str{id}{val=self})))))
(root (FunctionDef (str{name}{val=eval}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=func}))) (expr*{args} (expr (Name (str{id}{val=context}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=first}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=Exception}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (Return (expr{value} (Name (str{id}{val=Operator})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=OPERATORS})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=or}))) (expr (Str (str{s}{val=and}))) (expr (Str (str{s}{val=not}))) (expr (Str (str{s}{val=in}))) (expr (Str (str{s}{val=not in}))) (expr (Str (str{s}{val==}))) (expr (Str (str{s}{val===}))) (expr (Str (str{s}{val=!=}))) (expr (Str (str{s}{val=>}))) (expr (Str (str{s}{val=>=}))) (expr (Str (str{s}{val=<}))) (expr (Str (str{s}{val=<=})))) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=infix}))) (expr*{args} (expr (Num (int{n}{val=6}))) (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=context}))) (expr (Name (str{id}{val=x}))) (expr (Name (str{id}{val=y})))))) (expr{body} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=x}))) (str{attr}{val=eval}))) (expr*{args} (expr (Name (str{id}{val=context})))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=y}))) (str{attr}{val=eval}))) (expr*{args} (expr (Name (str{id}{val=context})))))))))))))) (expr (Call (expr{func} (Name (str{id}{val=infix}))) (expr*{args} (expr (Num (int{n}{val=7}))) (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=context}))) (expr (Name (str{id}{val=x}))) (expr (Name (str{id}{val=y})))))) (expr{body} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=x}))) (str{attr}{val=eval}))) (expr*{args} (expr (Name (str{id}{val=context})))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=y}))) (str{attr}{val=eval}))) (expr*{args} (expr (Name (str{id}{val=context})))))))))))))) (expr (Call (expr{func} (Name (str{id}{val=prefix}))) (expr*{args} (expr (Num (int{n}{val=8}))) (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=context}))) (expr (Name (str{id}{val=x})))))) (expr{body} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=x}))) (str{attr}{val=eval}))) (expr*{args} (expr (Name (str{id}{val=context}))))))))))))) (expr (Call (expr{func} (Name (str{id}{val=infix}))) (expr*{args} (expr (Num (int{n}{val=9}))) (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=context}))) (expr (Name (str{id}{val=x}))) (expr (Name (str{id}{val=y})))))) (expr{body} (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=x}))) (str{attr}{val=eval}))) (expr*{args} (expr (Name (str{id}{val=context})))))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=y}))) (str{attr}{val=eval}))) (expr*{args} (expr (Name (str{id}{val=context})))))))))))))) (expr (Call (expr{func} (Name (str{id}{val=infix}))) (expr*{args} (expr (Num (int{n}{val=9}))) (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=context}))) (expr (Name (str{id}{val=x}))) (expr (Name (str{id}{val=y})))))) (expr{body} (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=x}))) (str{attr}{val=eval}))) (expr*{args} (expr (Name (str{id}{val=context})))))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=y}))) (str{attr}{val=eval}))) (expr*{args} (expr (Name (str{id}{val=context})))))))))))))) (expr (Call (expr{func} (Name (str{id}{val=infix}))) (expr*{args} (expr (Num (int{n}{val=10}))) (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=context}))) (expr (Name (str{id}{val=x}))) (expr (Name (str{id}{val=y})))))) (expr{body} (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=x}))) (str{attr}{val=eval}))) (expr*{args} (expr (Name (str{id}{val=context})))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=y}))) (str{attr}{val=eval}))) (expr*{args} (expr (Name (str{id}{val=context})))))))))))))) (expr (Call (expr{func} (Name (str{id}{val=infix}))) (expr*{args} (expr (Num (int{n}{val=10}))) (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=context}))) (expr (Name (str{id}{val=x}))) (expr (Name (str{id}{val=y})))))) (expr{body} (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=x}))) (str{attr}{val=eval}))) (expr*{args} (expr (Name (str{id}{val=context})))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=y}))) (str{attr}{val=eval}))) (expr*{args} (expr (Name (str{id}{val=context})))))))))))))) (expr (Call (expr{func} (Name (str{id}{val=infix}))) (expr*{args} (expr (Num (int{n}{val=10}))) (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=context}))) (expr (Name (str{id}{val=x}))) (expr (Name (str{id}{val=y})))))) (expr{body} (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=x}))) (str{attr}{val=eval}))) (expr*{args} (expr (Name (str{id}{val=context})))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=y}))) (str{attr}{val=eval}))) (expr*{args} (expr (Name (str{id}{val=context})))))))))))))) (expr (Call (expr{func} (Name (str{id}{val=infix}))) (expr*{args} (expr (Num (int{n}{val=10}))) (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=context}))) (expr (Name (str{id}{val=x}))) (expr (Name (str{id}{val=y})))))) (expr{body} (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=x}))) (str{attr}{val=eval}))) (expr*{args} (expr (Name (str{id}{val=context})))))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=y}))) (str{attr}{val=eval}))) (expr*{args} (expr (Name (str{id}{val=context})))))))))))))) (expr (Call (expr{func} (Name (str{id}{val=infix}))) (expr*{args} (expr (Num (int{n}{val=10}))) (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=context}))) (expr (Name (str{id}{val=x}))) (expr (Name (str{id}{val=y})))))) (expr{body} (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=x}))) (str{attr}{val=eval}))) (expr*{args} (expr (Name (str{id}{val=context})))))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=y}))) (str{attr}{val=eval}))) (expr*{args} (expr (Name (str{id}{val=context})))))))))))))) (expr (Call (expr{func} (Name (str{id}{val=infix}))) (expr*{args} (expr (Num (int{n}{val=10}))) (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=context}))) (expr (Name (str{id}{val=x}))) (expr (Name (str{id}{val=y})))))) (expr{body} (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=x}))) (str{attr}{val=eval}))) (expr*{args} (expr (Name (str{id}{val=context})))))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=y}))) (str{attr}{val=eval}))) (expr*{args} (expr (Name (str{id}{val=context})))))))))))))) (expr (Call (expr{func} (Name (str{id}{val=infix}))) (expr*{args} (expr (Num (int{n}{val=10}))) (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=context}))) (expr (Name (str{id}{val=x}))) (expr (Name (str{id}{val=y})))))) (expr{body} (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=x}))) (str{attr}{val=eval}))) (expr*{args} (expr (Name (str{id}{val=context})))))) (cmpop*{ops} (cmpop (LtE))) (expr*{comparators} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=y}))) (str{attr}{val=eval}))) (expr*{args} (expr (Name (str{id}{val=context})))))))))))))))))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=op})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=OPERATORS}))) (str{attr}{val=items}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=op}))) (str{attr}{val=id})))) (expr{value} (Name (str{id}{val=key})))))
(root (ClassDef (str{name}{val=Literal}) (expr*{bases} (expr (Name (str{id}{val=TokenBase})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=id})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=lbp})))) (expr{value} (Num (int{n}{val=0})))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=value})))) (expr{value} (Name (str{id}{val=value})))))
(root (FunctionDef (str{name}{val=display}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=repr}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=value}))))))))
(root (FunctionDef (str{name}{val=nud}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=parser})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=self})))))
(root (FunctionDef (str{name}{val=eval}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=context})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=value})))))
(root (FunctionDef (str{name}{val=__repr__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=id}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=value}))))))))))
(root (ClassDef (str{name}{val=EndToken}) (expr*{bases} (expr (Name (str{id}{val=TokenBase})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=lbp})))) (expr{value} (Num (int{n}{val=0})))))
(root (FunctionDef (str{name}{val=nud}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=parser})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parser}))) (str{attr}{val=error_class}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=EndToken})))) (expr{value} (Call (expr{func} (Name (str{id}{val=EndToken})))))))
(root (ClassDef (str{name}{val=IfParser}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=error_class})))) (expr{value} (Name (str{id}{val=ValueError})))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=tokens})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=l})))) (expr{value} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=tokens}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=mapped_tokens})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=i})))) (expr{value} (Num (int{n}{val=0})))))
(root (While (expr{test} (Compare (expr{left} (Name (str{id}{val=i}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Name (str{id}{val=l})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=token})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=tokens}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=i})))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=token}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (expr (Compare (expr{left} (BinOp (expr{left} (Name (str{id}{val=i}))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=1}))))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Name (str{id}{val=l})))))) (expr (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=tokens}))) (slice{slice} (Index (expr{value} (BinOp (expr{left} (Name (str{id}{val=i}))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=1}))))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=in}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=token})))) (expr{value} (Str (str{s}{val=_STR:1_})))))
(root (AugAssign (expr{target} (Name (str{id}{val=i}))) (operator{op} (Add)) (expr{value} (Num (int{n}{val=1})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=mapped_tokens}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=translate_token}))) (expr*{args} (expr (Name (str{id}{val=token})))))))))))
(root (AugAssign (expr{target} (Name (str{id}{val=i}))) (operator{op} (Add)) (expr{value} (Num (int{n}{val=1})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=tokens})))) (expr{value} (Name (str{id}{val=mapped_tokens})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=pos})))) (expr{value} (Num (int{n}{val=0})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=current_token})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=next_token})))))))
(root (FunctionDef (str{name}{val=translate_token}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=token})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=op})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=OPERATORS}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=token})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=KeyError}))) (expr (Name (str{id}{val=TypeError})))))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=create_var}))) (expr*{args} (expr (Name (str{id}{val=token}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=op})))))))
(root (FunctionDef (str{name}{val=next_token}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=pos}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=tokens}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=EndToken})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=retval})))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=tokens}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=pos})))))))))
(root (AugAssign (expr{target} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=pos}))) (operator{op} (Add)) (expr{value} (Num (int{n}{val=1})))))
(root (Return (expr{value} (Name (str{id}{val=retval})))))
(root (FunctionDef (str{name}{val=parse}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=retval})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=expression})))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=current_token}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=EndToken})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=error_class}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=Unused '%s' at end of if expression.}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=current_token}))) (str{attr}{val=display}))))))))))))
(root (Return (expr{value} (Name (str{id}{val=retval})))))
(root (FunctionDef (str{name}{val=expression}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=rbp})))) (expr*{defaults} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=t})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=current_token})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=current_token})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=next_token})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=left})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=t}))) (str{attr}{val=nud}))) (expr*{args} (expr (Name (str{id}{val=self}))))))))
(root (While (expr{test} (Compare (expr{left} (Name (str{id}{val=rbp}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=current_token}))) (str{attr}{val=lbp})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=t})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=current_token})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=current_token})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=next_token})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=left})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=t}))) (str{attr}{val=led}))) (expr*{args} (expr (Name (str{id}{val=left}))) (expr (Name (str{id}{val=self}))))))))
(root (Return (expr{value} (Name (str{id}{val=left})))))
(root (FunctionDef (str{name}{val=create_var}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=Literal}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=lib2to3}) (alias*{names} (alias (str{name}{val=fixer_base}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=lib2to3.fixer_util}) (alias*{names} (alias (str{name}{val=find_indentation})) (alias (str{name}{val=Name})) (alias (str{name}{val=syms})) (alias (str{name}{val=touch_import}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=lib2to3.pgen2}) (alias*{names} (alias (str{name}{val=token}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=lib2to3.pytree}) (alias*{names} (alias (str{name}{val=Leaf})) (alias (str{name}{val=Node}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=FixUnicode}) (expr*{bases} (expr (Attribute (expr{value} (Name (str{id}{val=fixer_base}))) (str{attr}{val=BaseFix})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=BM_compatible})))) (expr{value} (Name (str{id}{val=True})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=PATTERN})))) (expr{value} (Str (str{s}{val=     classdef< 'class' any+ ':'               suite< any*                      funcdef< 'def' unifunc='__unicode__'                               parameters< '(' NAME ')' > any+ >                      any* > >     })))))
(root (FunctionDef (str{name}{val=transform}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=node}))) (expr (Name (str{id}{val=results})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=unifunc})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=results}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=strfunc})))) (expr{value} (Call (expr{func} (Name (str{id}{val=Name}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=prefix}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=unifunc}))) (str{attr}{val=prefix})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=unifunc}))) (str{attr}{val=replace}))) (expr*{args} (expr (Name (str{id}{val=strfunc}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=klass})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=node}))) (str{attr}{val=clone})))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=klass}))) (str{attr}{val=prefix})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=\n}))) (operator{op} (Add)) (expr{right} (Call (expr{func} (Name (str{id}{val=find_indentation}))) (expr*{args} (expr (Name (str{id}{val=node}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=decorator})))) (expr{value} (Call (expr{func} (Name (str{id}{val=Node}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=syms}))) (str{attr}{val=decorator}))) (expr (List (expr*{elts} (expr (Call (expr{func} (Name (str{id}{val=Leaf}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=token}))) (str{attr}{val=AT}))) (expr (Str (str{s}{val=@})))))) (expr (Call (expr{func} (Name (str{id}{val=Name}))) (expr*{args} (expr (Str (str{s}{val=python_2_unicode_compatible}))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=decorated})))) (expr{value} (Call (expr{func} (Name (str{id}{val=Node}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=syms}))) (str{attr}{val=decorated}))) (expr (List (expr*{elts} (expr (Name (str{id}{val=decorator}))) (expr (Name (str{id}{val=klass}))))))) (keyword*{keywords} (keyword (str{arg}{val=prefix}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=node}))) (str{attr}{val=prefix})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=node}))) (str{attr}{val=replace}))) (expr*{args} (expr (Name (str{id}{val=decorated}))))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=touch_import}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Name (str{id}{val=decorated}))))))))
(root (Import (alias*{names} (alias (str{name}{val=os})))))
(root (Import (alias*{names} (alias (str{name}{val=stat})))))
(root (Import (alias*{names} (alias (str{name}{val=sys})))))
(root (Import (alias*{names} (alias (str{name}{val=tempfile})))))
(root (ImportFrom (str{module}{val=os.path}) (alias*{names} (alias (str{name}{val=join})) (alias (str{name}{val=normcase})) (alias (str{name}{val=normpath})) (alias (str{name}{val=abspath})) (alias (str{name}{val=isabs})) (alias (str{name}{val=sep})) (alias (str{name}{val=dirname}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=force_text}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=WindowsError})))) (expr{value} (Name (str{id}{val=WindowsError})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=NameError}))) (stmt*{body} (stmt (Pass)))))))
(root (ClassDef (str{name}{val=WindowsError}) (expr*{bases} (expr (Name (str{id}{val=Exception})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=PY2}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=fs_encoding})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=getfilesystemencoding}))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=getdefaultencoding}))))))))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=PY3}))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=name}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=abspathu})))) (expr{value} (Name (str{id}{val=abspath})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=abspathu}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=path})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isabs}))) (expr*{args} (expr (Name (str{id}{val=path})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=path})))) (expr{value} (Call (expr{func} (Name (str{id}{val=join}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=getcwdu}))))) (expr (Name (str{id}{val=path}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=normpath}))) (expr*{args} (expr (Name (str{id}{val=path}))))))))
(root (FunctionDef (str{name}{val=upath}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=path})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=PY2}))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=path}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=path}))) (str{attr}{val=decode}))) (expr*{args} (expr (Name (str{id}{val=fs_encoding}))))))))
(root (Return (expr{value} (Name (str{id}{val=path})))))
(root (FunctionDef (str{name}{val=npath}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=path})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=PY2}))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=path}))) (expr (Name (str{id}{val=bytes}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=path}))) (str{attr}{val=encode}))) (expr*{args} (expr (Name (str{id}{val=fs_encoding}))))))))
(root (Return (expr{value} (Name (str{id}{val=path})))))
(root (FunctionDef (str{name}{val=safe_join}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=base})))) (str{vararg}{val=paths}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=base})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=base}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=paths})))) (expr{value} (ListComp (expr{elt} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=p})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=p}))) (expr{iter} (Name (str{id}{val=paths})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=final_path})))) (expr{value} (Call (expr{func} (Name (str{id}{val=abspathu}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=join}))) (expr*{args} (expr (Name (str{id}{val=base})))) (expr{starargs} (Name (str{id}{val=paths}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=base_path})))) (expr{value} (Call (expr{func} (Name (str{id}{val=abspathu}))) (expr*{args} (expr (Name (str{id}{val=base}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=normcase}))) (expr*{args} (expr (Name (str{id}{val=final_path})))))) (str{attr}{val=startswith}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=normcase}))) (expr*{args} (expr (BinOp (expr{left} (Name (str{id}{val=base_path}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=sep}))))))))))))) (expr (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=normcase}))) (expr*{args} (expr (Name (str{id}{val=final_path})))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Call (expr{func} (Name (str{id}{val=normcase}))) (expr*{args} (expr (Name (str{id}{val=base_path}))))))))) (expr (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=dirname}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=normcase}))) (expr*{args} (expr (Name (str{id}{val=base_path}))))))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Call (expr{func} (Name (str{id}{val=normcase}))) (expr*{args} (expr (Name (str{id}{val=base_path})))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=The joined path (%s) is located outside of the base path component (%s)}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=final_path}))) (expr (Name (str{id}{val=base_path})))))))))))))
(root (Return (expr{value} (Name (str{id}{val=final_path})))))
(root (FunctionDef (str{name}{val=rmtree_errorhandler}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=func}))) (expr (Name (str{id}{val=path}))) (expr (Name (str{id}{val=exc_info})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=exctype}))) (expr (Name (str{id}{val=value}))))))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=exc_info}))) (slice{slice} (Slice (expr{upper} (Num (int{n}{val=2})))))))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=exctype}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=WindowsError})))))) (expr (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Name (str{id}{val=value})))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (epsilon)))
(root (If (expr{test} (Compare (expr{left} (BinOp (expr{left} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=stat}))) (expr*{args} (expr (Name (str{id}{val=path})))))) (str{attr}{val=st_mode}))) (operator{op} (BitAnd)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=stat}))) (str{attr}{val=S_IREAD}))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=stat}))) (str{attr}{val=S_IREAD})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (epsilon)))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=chmod}))) (expr*{args} (expr (Name (str{id}{val=path}))) (expr (Attribute (expr{value} (Name (str{id}{val=stat}))) (str{attr}{val=S_IWRITE}))))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=func}))) (expr*{args} (expr (Name (str{id}{val=path}))))))))
(root (FunctionDef (str{name}{val=symlinks_supported}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=tmpdir})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=tempfile}))) (str{attr}{val=mkdtemp})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=original_path})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=tmpdir}))) (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=symlink_path})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=tmpdir}))) (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=makedirs}))) (expr*{args} (expr (Name (str{id}{val=original_path}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=symlink}))) (expr*{args} (expr (Name (str{id}{val=original_path}))) (expr (Name (str{id}{val=symlink_path}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=supported})))) (expr{value} (Name (str{id}{val=True})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=OSError}))) (expr (Name (str{id}{val=NotImplementedError}))) (expr (Name (str{id}{val=AttributeError})))))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=supported})))) (expr{value} (Name (str{id}{val=False})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=remove}))) (expr*{args} (expr (Name (str{id}{val=symlink_path}))))))))
(root (TryFinally (stmt*{body} (stmt (Pass))) (stmt*{finalbody} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=rmdir}))) (expr*{args} (expr (Name (str{id}{val=original_path}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=rmdir}))) (expr*{args} (expr (Name (str{id}{val=tmpdir}))))))))
(root (Return (expr{value} (Name (str{id}{val=supported})))))
(root (Import (alias*{names} (alias (str{name}{val=os})))))
(root (Import (alias*{names} (alias (str{name}{val=shutil})))))
(root (Import (alias*{names} (alias (str{name}{val=tarfile})))))
(root (Import (alias*{names} (alias (str{name}{val=zipfile})))))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=ArchiveException}) (expr*{bases} (expr (Name (str{id}{val=Exception})))) (stmt*{body} (stmt (Pass)))))
(root (ClassDef (str{name}{val=UnrecognizedArchiveFormat}) (expr*{bases} (expr (Name (str{id}{val=ArchiveException})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=extract}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=path}))) (expr (Name (str{id}{val=to_path})))) (expr*{defaults} (expr (Str (str{s}{val=})))))) (stmt*{body} (stmt (Pass)))))
(root (With (expr{context_expr} (Call (expr{func} (Name (str{id}{val=Archive}))) (expr*{args} (expr (Name (str{id}{val=path})))))) (expr{optional_vars} (Name (str{id}{val=archive}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=archive}))) (str{attr}{val=extract}))) (expr*{args} (expr (Name (str{id}{val=to_path}))))))))
(root (ClassDef (str{name}{val=Archive}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=file})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_archive})))) (expr{value} (Call (expr{func} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_archive_cls}))) (expr*{args} (expr (Name (str{id}{val=file})))))) (expr*{args} (expr (Name (str{id}{val=file}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=staticmethod}))))))
(root (FunctionDef (str{name}{val=_archive_cls}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=file})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cls})))) (expr{value} (Name (str{id}{val=None})))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=file}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=string_types})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=filename})))) (expr{value} (Name (str{id}{val=file})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=filename})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=file}))) (str{attr}{val=name})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=AttributeError}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=UnrecognizedArchiveFormat}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=base}))) (expr (Name (str{id}{val=tail_ext}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=splitext}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=filename}))) (str{attr}{val=lower}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cls})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=extension_map}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=tail_ext}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=cls}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=base}))) (expr (Name (str{id}{val=ext}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=splitext}))) (expr*{args} (expr (Name (str{id}{val=base}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cls})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=extension_map}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=ext}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=cls}))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=UnrecognizedArchiveFormat}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=filename}))))))))))
(root (Return (expr{value} (Name (str{id}{val=cls})))))
(root (FunctionDef (str{name}{val=__enter__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=self})))))
(root (FunctionDef (str{name}{val=__exit__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=exc_type}))) (expr (Name (str{id}{val=exc_value}))) (expr (Name (str{id}{val=traceback})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=close})))))))
(root (FunctionDef (str{name}{val=extract}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=to_path})))) (expr*{defaults} (expr (Str (str{s}{val=})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_archive}))) (str{attr}{val=extract}))) (expr*{args} (expr (Name (str{id}{val=to_path}))))))))
(root (FunctionDef (str{name}{val=list}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_archive}))) (str{attr}{val=list})))))))
(root (FunctionDef (str{name}{val=close}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_archive}))) (str{attr}{val=close})))))))
(root (ClassDef (str{name}{val=BaseArchive}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=split_leading_dir}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=path})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=path})))) (expr{value} (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Name (str{id}{val=path}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=path})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=path}))) (str{attr}{val=lstrip}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (str{attr}{val=lstrip}))) (expr*{args} (expr (Str (str{s}{val=\}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=path})))))) (expr (BoolOp (boolop{op} (Or)) (expr*{values} (expr (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Str (str{s}{val=\}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=path})))))) (expr (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=path}))) (str{attr}{val=find}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=path}))) (str{attr}{val=find}))) (expr*{args} (expr (Str (str{s}{val=\})))))))))))) (expr (Compare (expr{left} (Str (str{s}{val=\}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=path})))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=path}))) (str{attr}{val=split}))) (expr*{args} (expr (Str (str{s}{val=/}))) (expr (Num (int{n}{val=1}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Str (str{s}{val=\}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=path})))))) (stmt*{body} (stmt (Pass))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=path}))) (str{attr}{val=split}))) (expr*{args} (expr (Str (str{s}{val=\}))) (expr (Num (int{n}{val=1}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=path}))) (expr (Str (str{s}{val=}))))))))
(root (FunctionDef (str{name}{val=has_leading_dir}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=paths})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=common_prefix})))) (expr{value} (Name (str{id}{val=None})))))
(root (For (expr{target} (Name (str{id}{val=path}))) (expr{iter} (Name (str{id}{val=paths}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=prefix}))) (expr (Name (str{id}{val=rest}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=split_leading_dir}))) (expr*{args} (expr (Name (str{id}{val=path}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=prefix}))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Name (str{id}{val=common_prefix}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=common_prefix})))) (expr{value} (Name (str{id}{val=prefix})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Name (str{id}{val=prefix}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Name (str{id}{val=common_prefix})))))) (stmt*{body} (stmt (Pass))))))))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (Return (expr{value} (Name (str{id}{val=True})))))
(root (FunctionDef (str{name}{val=extract}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=NotImplementedError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=list}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=NotImplementedError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (ClassDef (str{name}{val=TarArchive}) (expr*{bases} (expr (Name (str{id}{val=BaseArchive})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=file})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_archive})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=tarfile}))) (str{attr}{val=open}))) (expr*{args} (expr (Name (str{id}{val=file}))))))))
(root (FunctionDef (str{name}{val=list}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_archive}))) (str{attr}{val=list}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (FunctionDef (str{name}{val=extract}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=to_path})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=members})))) (expr{value} (ListComp (expr{elt} (Name (str{id}{val=member}))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=member}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_archive}))) (str{attr}{val=getmembers}))))) (expr*{ifs} (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=member}))) (str{attr}{val=name}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Str (str{s}{val=pax_global_header})))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=leading})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=has_leading_dir}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Attribute (expr{value} (Name (str{id}{val=x}))) (str{attr}{val=name}))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=x}))) (expr{iter} (Name (str{id}{val=members}))))))))))))
(root (For (expr{target} (Name (str{id}{val=member}))) (expr{iter} (Name (str{id}{val=members}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=name})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=member}))) (str{attr}{val=name})))))
(root (If (expr{test} (Name (str{id}{val=leading}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=name})))) (expr{value} (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=split_leading_dir}))) (expr*{args} (expr (Name (str{id}{val=name})))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=filename})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=to_path}))) (expr (Name (str{id}{val=name}))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=member}))) (str{attr}{val=isdir}))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=filename}))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=exists}))) (expr*{args} (expr (Name (str{id}{val=filename}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=makedirs}))) (expr*{args} (expr (Name (str{id}{val=filename}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=extracted})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_archive}))) (str{attr}{val=extractfile}))) (expr*{args} (expr (Name (str{id}{val=member}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=KeyError}))) (expr (Name (str{id}{val=AttributeError})))))) (expr{name} (Name (str{id}{val=exc}))) (stmt*{body} (stmt (Pass)))))))
(root (Print (expr*{values} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=name}))) (expr (Attribute (expr{value} (Name (str{id}{val=member}))) (str{attr}{val=name}))) (expr (Name (str{id}{val=exc}))))))))) (bool{nl}{val=True})))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=dirname})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=dirname}))) (expr*{args} (expr (Name (str{id}{val=filename}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=dirname}))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=exists}))) (expr*{args} (expr (Name (str{id}{val=dirname}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=makedirs}))) (expr*{args} (expr (Name (str{id}{val=dirname}))))))))
(root (With (expr{context_expr} (Call (expr{func} (Name (str{id}{val=open}))) (expr*{args} (expr (Name (str{id}{val=filename}))) (expr (Str (str{s}{val=wb})))))) (expr{optional_vars} (Name (str{id}{val=outfile}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=shutil}))) (str{attr}{val=copyfileobj}))) (expr*{args} (expr (Name (str{id}{val=extracted}))) (expr (Name (str{id}{val=outfile}))))))))
(root (TryFinally (stmt*{body} (stmt (Pass))) (stmt*{finalbody} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=extracted}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=extracted}))) (str{attr}{val=close})))))))
(root (FunctionDef (str{name}{val=close}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_archive}))) (str{attr}{val=close})))))))
(root (ClassDef (str{name}{val=ZipArchive}) (expr*{bases} (expr (Name (str{id}{val=BaseArchive})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=file})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_archive})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=zipfile}))) (str{attr}{val=ZipFile}))) (expr*{args} (expr (Name (str{id}{val=file}))))))))
(root (FunctionDef (str{name}{val=list}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_archive}))) (str{attr}{val=printdir}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (FunctionDef (str{name}{val=extract}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=to_path})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=namelist})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_archive}))) (str{attr}{val=namelist})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=leading})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=has_leading_dir}))) (expr*{args} (expr (Name (str{id}{val=namelist}))))))))
(root (For (expr{target} (Name (str{id}{val=name}))) (expr{iter} (Name (str{id}{val=namelist}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=data})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_archive}))) (str{attr}{val=read}))) (expr*{args} (expr (Name (str{id}{val=name}))))))))
(root (If (expr{test} (Name (str{id}{val=leading}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=name})))) (expr{value} (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=split_leading_dir}))) (expr*{args} (expr (Name (str{id}{val=name})))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=filename})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=to_path}))) (expr (Name (str{id}{val=name}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=dirname})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=dirname}))) (expr*{args} (expr (Name (str{id}{val=filename}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=dirname}))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=exists}))) (expr*{args} (expr (Name (str{id}{val=dirname}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=makedirs}))) (expr*{args} (expr (Name (str{id}{val=dirname}))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=filename}))) (str{attr}{val=endswith}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=\}))))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=exists}))) (expr*{args} (expr (Name (str{id}{val=filename})))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=makedirs}))) (expr*{args} (expr (Name (str{id}{val=filename}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (With (expr{context_expr} (Call (expr{func} (Name (str{id}{val=open}))) (expr*{args} (expr (Name (str{id}{val=filename}))) (expr (Str (str{s}{val=wb})))))) (expr{optional_vars} (Name (str{id}{val=outfile}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=outfile}))) (str{attr}{val=write}))) (expr*{args} (expr (Name (str{id}{val=data}))))))))
(root (FunctionDef (str{name}{val=close}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_archive}))) (str{attr}{val=close})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=extension_map})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=.tgz}))) (expr (Str (str{s}{val=.tz2}))) (expr (Str (str{s}{val=.zip})))) (expr*{values} (expr (Name (str{id}{val=TarArchive}))) (expr (Name (str{id}{val=TarArchive}))) (expr (Name (str{id}{val=TarArchive}))) (expr (Name (str{id}{val=TarArchive}))) (expr (Name (str{id}{val=TarArchive}))) (expr (Name (str{id}{val=ZipArchive}))))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=absolute_import}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=os})))))
(root (Import (alias*{names} (alias (str{name}{val=signal})))))
(root (Import (alias*{names} (alias (str{name}{val=sys})))))
(root (Import (alias*{names} (alias (str{name}{val=time})))))
(root (Import (alias*{names} (alias (str{name}{val=traceback})))))
(root (ImportFrom (str{module}{val=django.apps}) (alias*{names} (alias (str{name}{val=apps}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.signals}) (alias*{names} (alias (str{name}{val=request_finished}))) (int{level}{val=0})))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (ImportFrom (str{module}{val=django.utils.six.moves}) (alias*{names} (alias (str{name}{val=_thread}) (str{asname}{val=thread}))) (int{level}{val=0})))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ImportError}))) (stmt*{body} (stmt (Pass)))))))
(root (ImportFrom (str{module}{val=django.utils.six.moves}) (alias*{names} (alias (str{name}{val=_dummy_thread}) (str{asname}{val=thread}))) (int{level}{val=0})))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Import (alias*{names} (alias (str{name}{val=threading})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ImportError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Import (alias*{names} (alias (str{name}{val=termios})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ImportError}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=termios})))) (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=USE_INOTIFY})))) (expr{value} (Name (str{id}{val=False})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Import (alias*{names} (alias (str{name}{val=pyinotify})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=fd})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=pyinotify}))) (str{attr}{val=INotifyWrapper}))) (str{attr}{val=create}))))) (str{attr}{val=inotify_init})))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=fd}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=USE_INOTIFY})))) (expr{value} (Name (str{id}{val=True})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=close}))) (expr*{args} (expr (Name (str{id}{val=fd}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ImportError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=RUN_RELOADER})))) (expr{value} (Name (str{id}{val=True})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=FILE_MODIFIED})))) (expr{value} (Num (int{n}{val=1})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=I18N_MODIFIED})))) (expr{value} (Num (int{n}{val=2})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_mtimes})))) (expr{value} (Dict (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_win})))) (expr{value} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=platform}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_error_files})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_cached_modules})))) (expr{value} (Call (expr{func} (Name (str{id}{val=set})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_cached_filenames})))) (expr{value} (List (epsilon)))))
(root (FunctionDef (str{name}{val=gen_filenames}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=only_new})))) (expr*{defaults} (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (Global (str*{names} (str{val=_cached_modules}) (str{val=_cached_filenames}))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=module_values})))) (expr{value} (Call (expr{func} (Name (str{id}{val=set}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=modules}))) (str{attr}{val=values}))))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=_cached_modules}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=module_values})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=only_new}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (List (epsilon)))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=_cached_filenames})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=new_modules})))) (expr{value} (BinOp (expr{left} (Name (str{id}{val=module_values}))) (operator{op} (Sub)) (expr{right} (Name (str{id}{val=_cached_modules})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=new_filenames})))) (expr{value} (ListComp (expr{elt} (Attribute (expr{value} (Name (str{id}{val=filename}))) (str{attr}{val=__file__}))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=filename}))) (expr{iter} (Name (str{id}{val=new_modules}))) (expr*{ifs} (expr (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=filename}))) (expr (Str (str{s}{val=_STR:0_})))))))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=_cached_filenames}))))) (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=USE_I18N})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=basedirs})))) (expr{value} (List (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=dirname}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=dirname}))) (expr*{args} (expr (Name (str{id}{val=__file__}))))))))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_})))))) (expr (Str (str{s}{val=_STR:1_}))))))))
(root (For (expr{target} (Name (str{id}{val=app_config}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=reversed}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=apps}))) (str{attr}{val=get_app_configs}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=basedirs}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=app_config}))) (str{attr}{val=path}))) (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=basedirs}))) (str{attr}{val=extend}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=LOCALE_PATHS}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=basedirs})))) (expr{value} (ListComp (expr{elt} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=abspath}))) (expr*{args} (expr (Name (str{id}{val=basedir})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=basedir}))) (expr{iter} (Name (str{id}{val=basedirs}))) (expr*{ifs} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=isdir}))) (expr*{args} (expr (Name (str{id}{val=basedir})))))))))))))
(root (For (expr{target} (Name (str{id}{val=basedir}))) (expr{iter} (Name (str{id}{val=basedirs}))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=dirpath}))) (expr (Name (str{id}{val=dirnames}))) (expr (Name (str{id}{val=locale_filenames})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=walk}))) (expr*{args} (expr (Name (str{id}{val=basedir})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=filename}))) (expr{iter} (Name (str{id}{val=locale_filenames}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=filename}))) (str{attr}{val=endswith}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=new_filenames}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=dirpath}))) (expr (Name (str{id}{val=filename})))))))))))
(root (If (expr{test} (Name (str{id}{val=only_new}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=filelist})))) (expr{value} (Name (str{id}{val=new_filenames})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=filelist})))) (expr{value} (BinOp (expr{left} (BinOp (expr{left} (Name (str{id}{val=_cached_filenames}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=new_filenames}))))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=_error_files})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=filenames})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=filename}))) (expr{iter} (Name (str{id}{val=filelist}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=filename}))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=filename}))) (str{attr}{val=endswith}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=filename}))) (str{attr}{val=endswith}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=filename})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=filename}))) (slice{slice} (Slice (expr{upper} (Num (int{n}{val=-1})))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=filename}))) (str{attr}{val=endswith}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=filename})))) (expr{value} (BinOp (expr{left} (Subscript (expr{value} (Name (str{id}{val=filename}))) (slice{slice} (Slice (expr{upper} (Num (int{n}{val=-9}))))))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=_STR:0_})))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=exists}))) (expr*{args} (expr (Name (str{id}{val=filename})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=filenames}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=filename}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_cached_modules})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=_cached_modules}))) (str{attr}{val=union}))) (expr*{args} (expr (Name (str{id}{val=new_modules}))))))))
(root (AugAssign (expr{target} (Name (str{id}{val=_cached_filenames}))) (operator{op} (Add)) (expr{value} (Name (str{id}{val=new_filenames})))))
(root (Return (expr{value} (Name (str{id}{val=filenames})))))
(root (FunctionDef (str{name}{val=reset_translations}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (Import (alias*{names} (alias (str{name}{val=gettext})))))
(root (ImportFrom (str{module}{val=django.utils.translation}) (alias*{names} (alias (str{name}{val=trans_real}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=gettext}))) (str{attr}{val=_translations})))) (expr{value} (Dict (epsilon)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=trans_real}))) (str{attr}{val=_translations})))) (expr{value} (Dict (epsilon)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=trans_real}))) (str{attr}{val=_default})))) (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=trans_real}))) (str{attr}{val=_active})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=threading}))) (str{attr}{val=local})))))))
(root (FunctionDef (str{name}{val=inotify_code_changed}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (ClassDef (str{name}{val=EventHandler}) (expr*{bases} (expr (Attribute (expr{value} (Name (str{id}{val=pyinotify}))) (str{attr}{val=ProcessEvent})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=modified_code})))) (expr{value} (Name (str{id}{val=None})))))
(root (FunctionDef (str{name}{val=process_default}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=event})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=event}))) (str{attr}{val=path}))) (str{attr}{val=endswith}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=EventHandler}))) (str{attr}{val=modified_code})))) (expr{value} (Name (str{id}{val=I18N_MODIFIED})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=EventHandler}))) (str{attr}{val=modified_code})))) (expr{value} (Name (str{id}{val=FILE_MODIFIED})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=wm})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=pyinotify}))) (str{attr}{val=WatchManager})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=notifier})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=pyinotify}))) (str{attr}{val=Notifier}))) (expr*{args} (expr (Name (str{id}{val=wm}))) (expr (Call (expr{func} (Name (str{id}{val=EventHandler}))))))))))
(root (FunctionDef (str{name}{val=update_watch}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=sender})))) (str{kwarg}{val=kwargs}) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=sender}))) (expr (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=sender}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=False}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (epsilon)))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=mask})))) (expr{value} (BinOp (expr{left} (BinOp (expr{left} (BinOp (expr{left} (BinOp (expr{left} (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=pyinotify}))) (str{attr}{val=IN_MODIFY}))) (operator{op} (BitOr)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=pyinotify}))) (str{attr}{val=IN_DELETE}))))) (operator{op} (BitOr)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=pyinotify}))) (str{attr}{val=IN_ATTRIB}))))) (operator{op} (BitOr)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=pyinotify}))) (str{attr}{val=IN_MOVED_FROM}))))) (operator{op} (BitOr)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=pyinotify}))) (str{attr}{val=IN_MOVED_TO}))))) (operator{op} (BitOr)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=pyinotify}))) (str{attr}{val=IN_CREATE})))))))
(root (For (expr{target} (Name (str{id}{val=path}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=gen_filenames}))) (keyword*{keywords} (keyword (str{arg}{val=only_new}) (expr{value} (Name (str{id}{val=True}))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=wm}))) (str{attr}{val=add_watch}))) (expr*{args} (expr (Name (str{id}{val=path}))) (expr (Name (str{id}{val=mask}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=request_finished}))) (str{attr}{val=connect}))) (expr*{args} (expr (Name (str{id}{val=update_watch}))))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=update_watch})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=notifier}))) (str{attr}{val=check_events}))) (keyword*{keywords} (keyword (str{arg}{val=timeout}) (expr{value} (Name (str{id}{val=None})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=notifier}))) (str{attr}{val=read_events})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=notifier}))) (str{attr}{val=process_events})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=notifier}))) (str{attr}{val=stop})))))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=EventHandler}))) (str{attr}{val=modified_code})))))
(root (FunctionDef (str{name}{val=code_changed}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (Global (str*{names} (str{val=_mtimes}) (str{val=_win}))))
(root (For (expr{target} (Name (str{id}{val=filename}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=gen_filenames}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=stat})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=stat}))) (expr*{args} (expr (Name (str{id}{val=filename}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=mtime})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=stat}))) (str{attr}{val=st_mtime})))))
(root (If (expr{test} (Name (str{id}{val=_win}))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=mtime}))) (operator{op} (Sub)) (expr{value} (Attribute (expr{value} (Name (str{id}{val=stat}))) (str{attr}{val=st_ctime})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=filename}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=_mtimes})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=_mtimes}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=filename})))))))) (expr{value} (Name (str{id}{val=mtime})))))
(root (Continue))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=mtime}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Subscript (expr{value} (Name (str{id}{val=_mtimes}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=filename})))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_mtimes})))) (expr{value} (Dict (epsilon)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Delete (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=_error_files}))) (slice{slice} (Index (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=_error_files}))) (str{attr}{val=index}))) (expr*{args} (expr (Name (str{id}{val=filename})))))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ValueError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (Return (expr{value} (IfExp (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=filename}))) (str{attr}{val=endswith}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (expr{body} (Name (str{id}{val=I18N_MODIFIED}))) (expr{orelse} (Name (str{id}{val=FILE_MODIFIED})))))))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (FunctionDef (str{name}{val=check_errors}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=fn})))))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=wrapper}) (arguments{args} (arguments (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=fn}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=ImportError}))) (expr (Name (str{id}{val=IndentationError}))) (expr (Name (str{id}{val=NameError}))) (expr (Name (str{id}{val=SyntaxError}))) (expr (Name (str{id}{val=TypeError}))) (expr (Name (str{id}{val=AttributeError})))))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=et}))) (expr (Name (str{id}{val=ev}))) (expr (Name (str{id}{val=tb}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=exc_info})))))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=ev}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None})))))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=filename})))) (expr{value} (Subscript (expr{value} (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=traceback}))) (str{attr}{val=extract_tb}))) (expr*{args} (expr (Name (str{id}{val=tb})))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=-1}))))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=filename})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=ev}))) (str{attr}{val=filename})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=filename}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=_error_files})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=_error_files}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=filename}))))))))
(root (Raise (epsilon)))
(root (Return (expr{value} (Name (str{id}{val=wrapper})))))
(root (FunctionDef (str{name}{val=ensure_echo_on}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=termios}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=fd})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=stdin})))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=fd}))) (str{attr}{val=isatty}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=attr_list})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=termios}))) (str{attr}{val=tcgetattr}))) (expr*{args} (expr (Name (str{id}{val=fd}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (BinOp (expr{left} (Subscript (expr{value} (Name (str{id}{val=attr_list}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=3}))))))) (operator{op} (BitAnd)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=termios}))) (str{attr}{val=ECHO}))))))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Subscript (expr{value} (Name (str{id}{val=attr_list}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=3}))))))) (operator{op} (BitOr)) (expr{value} (Attribute (expr{value} (Name (str{id}{val=termios}))) (str{attr}{val=ECHO})))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=signal}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=old_handler})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=signal}))) (str{attr}{val=signal}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=signal}))) (str{attr}{val=SIGTTOU}))) (expr (Attribute (expr{value} (Name (str{id}{val=signal}))) (str{attr}{val=SIG_IGN}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=old_handler})))) (expr{value} (Name (str{id}{val=None})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=termios}))) (str{attr}{val=tcsetattr}))) (expr*{args} (expr (Name (str{id}{val=fd}))) (expr (Attribute (expr{value} (Name (str{id}{val=termios}))) (str{attr}{val=TCSANOW}))) (expr (Name (str{id}{val=attr_list}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=old_handler}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=signal}))) (str{attr}{val=signal}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=signal}))) (str{attr}{val=SIGTTOU}))) (expr (Name (str{id}{val=old_handler}))))))))
(root (FunctionDef (str{name}{val=reloader_thread}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=ensure_echo_on})))))))
(root (If (expr{test} (Name (str{id}{val=USE_INOTIFY}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=fn})))) (expr{value} (Name (str{id}{val=inotify_code_changed})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=fn})))) (expr{value} (Name (str{id}{val=code_changed})))))
(root (While (expr{test} (Name (str{id}{val=RUN_RELOADER}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=change})))) (expr{value} (Call (expr{func} (Name (str{id}{val=fn})))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=change}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=FILE_MODIFIED})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=exit}))) (expr*{args} (expr (Num (int{n}{val=3}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Name (str{id}{val=change}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=I18N_MODIFIED})))))) (stmt*{body} (stmt (Pass))))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=reset_translations})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=time}))) (str{attr}{val=sleep}))) (expr*{args} (expr (Num (int{n}{val=1}))))))))
(root (FunctionDef (str{name}{val=restart_with_reloader}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (While (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=args})))) (expr{value} (BinOp (expr{left} (BinOp (expr{left} (List (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=executable})))))) (operator{op} (Add)) (expr{right} (ListComp (expr{elt} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=o}))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=o}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=warnoptions}))))))))) (operator{op} (Add)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=argv})))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=platform}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=args})))) (expr{value} (ListComp (expr{elt} (BinOp (expr{left} (Str (str{s}{val="%s"}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=arg}))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=arg}))) (expr{iter} (Name (str{id}{val=args})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=new_environ})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=environ}))) (str{attr}{val=copy})))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=new_environ}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Str (str{s}{val=_STR:1_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=exit_code})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=spawnve}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=P_WAIT}))) (expr (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=executable}))) (expr (Name (str{id}{val=args}))) (expr (Name (str{id}{val=new_environ}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=exit_code}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Num (int{n}{val=3})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=exit_code})))))
(root (FunctionDef (str{name}{val=python_reloader}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=main_func}))) (expr (Name (str{id}{val=args}))) (expr (Name (str{id}{val=kwargs})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=environ}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:1_})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=thread}))) (str{attr}{val=start_new_thread}))) (expr*{args} (expr (Name (str{id}{val=main_func}))) (expr (Name (str{id}{val=args}))) (expr (Name (str{id}{val=kwargs}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=reloader_thread})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=KeyboardInterrupt}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=exit_code})))) (expr{value} (Call (expr{func} (Name (str{id}{val=restart_with_reloader})))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=exit_code}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=kill}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=getpid}))))) (expr (UnaryOp (unaryop{op} (USub)) (expr{operand} (Name (str{id}{val=exit_code}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=exit}))) (expr*{args} (expr (Name (str{id}{val=exit_code}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=KeyboardInterrupt}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (FunctionDef (str{name}{val=jython_reloader}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=main_func}))) (expr (Name (str{id}{val=args}))) (expr (Name (str{id}{val=kwargs})))))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=_systemrestart}) (alias*{names} (alias (str{name}{val=SystemRestart}))) (int{level}{val=0})))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=thread}))) (str{attr}{val=start_new_thread}))) (expr*{args} (expr (Name (str{id}{val=main_func}))) (expr (Name (str{id}{val=args}))))))))
(root (While (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=code_changed}))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Name (str{id}{val=SystemRestart})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=time}))) (str{attr}{val=sleep}))) (expr*{args} (expr (Num (int{n}{val=1}))))))))
(root (FunctionDef (str{name}{val=main}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=main_func}))) (expr (Name (str{id}{val=args}))) (expr (Name (str{id}{val=kwargs})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=args}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=args})))) (expr{value} (Tuple (epsilon)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=kwargs}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=kwargs})))) (expr{value} (Dict (epsilon)))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=platform}))) (str{attr}{val=startswith}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=reloader})))) (expr{value} (Name (str{id}{val=jython_reloader})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=reloader})))) (expr{value} (Name (str{id}{val=python_reloader})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=wrapped_main_func})))) (expr{value} (Call (expr{func} (Name (str{id}{val=check_errors}))) (expr*{args} (expr (Name (str{id}{val=main_func}))))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=reloader}))) (expr*{args} (expr (Name (str{id}{val=wrapped_main_func}))) (expr (Name (str{id}{val=args}))) (expr (Name (str{id}{val=kwargs}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=BASE2_ALPHABET})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=BASE16_ALPHABET})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=BASE56_ALPHABET})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=BASE36_ALPHABET})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=BASE62_ALPHABET})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=BASE64_ALPHABET})))) (expr{value} (BinOp (expr{left} (Name (str{id}{val=BASE62_ALPHABET}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=_STR:0_})))))))
(root (ClassDef (str{name}{val=BaseConverter}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=decimal_digits})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=digits}))) (expr (Name (str{id}{val=sign})))) (expr*{defaults} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=sign})))) (expr{value} (Name (str{id}{val=sign})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=digits})))) (expr{value} (Name (str{id}{val=digits})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=sign}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=digits})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=__repr__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=digits})))))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=digits}))))))))))
(root (FunctionDef (str{name}{val=encode}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=i})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=neg}))) (expr (Name (str{id}{val=value}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=convert}))) (expr*{args} (expr (Name (str{id}{val=i}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=decimal_digits}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=digits}))) (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Name (str{id}{val=neg}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=sign}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=value})))))))
(root (Return (expr{value} (Name (str{id}{val=value})))))
(root (FunctionDef (str{name}{val=decode}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=s})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=neg}))) (expr (Name (str{id}{val=value}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=convert}))) (expr*{args} (expr (Name (str{id}{val=s}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=digits}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=decimal_digits}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=sign}))))))))
(root (If (expr{test} (Name (str{id}{val=neg}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=value})))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (FunctionDef (str{name}{val=convert}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=number}))) (expr (Name (str{id}{val=from_digits}))) (expr (Name (str{id}{val=to_digits}))) (expr (Name (str{id}{val=sign})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Name (str{id}{val=number})))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=sign})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=number})))) (expr{value} (Subscript (expr{value} (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Name (str{id}{val=number})))))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=1})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=neg})))) (expr{value} (Num (int{n}{val=1})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=neg})))) (expr{value} (Num (int{n}{val=0})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=x})))) (expr{value} (Num (int{n}{val=0})))))
(root (For (expr{target} (Name (str{id}{val=digit}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Name (str{id}{val=number})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=x})))) (expr{value} (BinOp (expr{left} (BinOp (expr{left} (Name (str{id}{val=x}))) (operator{op} (Mult)) (expr{right} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=from_digits})))))))) (operator{op} (Add)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=from_digits}))) (str{attr}{val=index}))) (expr*{args} (expr (Name (str{id}{val=digit}))))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=x}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=res})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=to_digits}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=res})))) (expr{value} (Str (str{s}{val=})))))
(root (While (expr{test} (Compare (expr{left} (Name (str{id}{val=x}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=digit})))) (expr{value} (BinOp (expr{left} (Name (str{id}{val=x}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=to_digits}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=res})))) (expr{value} (BinOp (expr{left} (Subscript (expr{value} (Name (str{id}{val=to_digits}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=digit}))))))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=res})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=x})))) (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (BinOp (expr{left} (Name (str{id}{val=x}))) (operator{op} (FloorDiv)) (expr{right} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=to_digits})))))))))))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=neg}))) (expr (Name (str{id}{val=res}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=base2})))) (expr{value} (Call (expr{func} (Name (str{id}{val=BaseConverter}))) (expr*{args} (expr (Name (str{id}{val=BASE2_ALPHABET}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=base16})))) (expr{value} (Call (expr{func} (Name (str{id}{val=BaseConverter}))) (expr*{args} (expr (Name (str{id}{val=BASE16_ALPHABET}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=base36})))) (expr{value} (Call (expr{func} (Name (str{id}{val=BaseConverter}))) (expr*{args} (expr (Name (str{id}{val=BASE36_ALPHABET}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=base56})))) (expr{value} (Call (expr{func} (Name (str{id}{val=BaseConverter}))) (expr*{args} (expr (Name (str{id}{val=BASE56_ALPHABET}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=base62})))) (expr{value} (Call (expr{func} (Name (str{id}{val=BaseConverter}))) (expr*{args} (expr (Name (str{id}{val=BASE62_ALPHABET}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=base64})))) (expr{value} (Call (expr{func} (Name (str{id}{val=BaseConverter}))) (expr*{args} (expr (Name (str{id}{val=BASE64_ALPHABET})))) (keyword*{keywords} (keyword (str{arg}{val=sign}) (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=hashlib})))))
(root (Import (alias*{names} (alias (str{name}{val=re})))))
(root (Import (alias*{names} (alias (str{name}{val=time})))))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.cache}) (alias*{names} (alias (str{name}{val=caches}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=iri_to_uri})) (alias (str{name}{val=force_bytes})) (alias (str{name}{val=force_text}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.http}) (alias*{names} (alias (str{name}{val=http_date}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.timezone}) (alias*{names} (alias (str{name}{val=get_current_timezone_name}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.translation}) (alias*{names} (alias (str{name}{val=get_language}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cc_delim_re})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=patch_cache_control}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=response})))) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=dictitem}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=s})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=t})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=s}))) (str{attr}{val=split}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Num (int{n}{val=1}))))))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=t})))))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=t}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (str{attr}{val=lower}))))) (expr (Subscript (expr{value} (Name (str{id}{val=t}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=t}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (str{attr}{val=lower}))))) (expr (Name (str{id}{val=True}))))))))
(root (FunctionDef (str{name}{val=dictvalue}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=t})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=t}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=True})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Subscript (expr{value} (Name (str{id}{val=t}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=%s=%s}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Subscript (expr{value} (Name (str{id}{val=t}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (expr (Subscript (expr{value} (Name (str{id}{val=t}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=response}))) (str{attr}{val=has_header}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cc})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=cc_delim_re}))) (str{attr}{val=split}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=response}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cc})))) (expr{value} (Call (expr{func} (Name (str{id}{val=dict}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Call (expr{func} (Name (str{id}{val=dictitem}))) (expr*{args} (expr (Name (str{id}{val=el})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=el}))) (expr{iter} (Name (str{id}{val=cc}))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cc})))) (expr{value} (Dict (epsilon)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=cc})))))) (expr (Compare (expr{left} (Str (str{s}{val=_STR:1_}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=kwargs}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=kwargs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=max_age})))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=min}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=cc}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))))) (expr (Subscript (expr{value} (Name (str{id}{val=kwargs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=max_age}))))))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Str (str{s}{val=_STR:2_}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=cc})))))) (expr (Compare (expr{left} (Str (str{s}{val=_STR:3_}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=kwargs}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Delete (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=cc}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=cc})))))) (expr (Compare (expr{left} (Str (str{s}{val=_STR:1_}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=kwargs}))))))))) (stmt*{body} (stmt (Pass))))))))
(root (Delete (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=cc}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Name (str{id}{val=v})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=kwargs}))) (str{attr}{val=items}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=cc}))) (slice{slice} (Index (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=k}))) (str{attr}{val=replace}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))))))))))) (expr{value} (Name (str{id}{val=v})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cc})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=, }))) (str{attr}{val=join}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Call (expr{func} (Name (str{id}{val=dictvalue}))) (expr*{args} (expr (Name (str{id}{val=el})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=el}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=cc}))) (str{attr}{val=items}))))))))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=response}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Name (str{id}{val=cc})))))
(root (FunctionDef (str{name}{val=get_max_age}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=response})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=response}))) (str{attr}{val=has_header}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (epsilon)))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cc})))) (expr{value} (Call (expr{func} (Name (str{id}{val=dict}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Call (expr{func} (Name (str{id}{val=_to_tuple}))) (expr*{args} (expr (Name (str{id}{val=el})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=el}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=cc_delim_re}))) (str{attr}{val=split}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=response}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=Cache-Control})))))))))))))))))))
(root (If (expr{test} (Compare (expr{left} (Str (str{s}{val=_STR:1_}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=cc})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=cc}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=ValueError}))) (expr (Name (str{id}{val=TypeError})))))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (FunctionDef (str{name}{val=_set_response_etag}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=response})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=response}))) (str{attr}{val=streaming}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=response}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=ETag})))))))) (expr{value} (BinOp (expr{left} (Str (str{s}{val="%s"}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=hashlib}))) (str{attr}{val=md5}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=response}))) (str{attr}{val=content})))))) (str{attr}{val=hexdigest})))))))))
(root (Return (expr{value} (Name (str{id}{val=response})))))
(root (FunctionDef (str{name}{val=patch_response_headers}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=response}))) (expr (Name (str{id}{val=cache_timeout})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=cache_timeout}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cache_timeout})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=CACHE_MIDDLEWARE_SECONDS})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=cache_timeout}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cache_timeout})))) (expr{value} (Num (int{n}{val=0})))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=USE_ETAGS}))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=response}))) (str{attr}{val=has_header}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=response}))) (expr (Str (str{s}{val=_STR:0_})))))) (expr (Call (expr{func} (Name (str{id}{val=callable}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=response}))) (str{attr}{val=render}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=response}))) (str{attr}{val=add_post_render_callback}))) (expr*{args} (expr (Name (str{id}{val=_set_response_etag}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=response})))) (expr{value} (Call (expr{func} (Name (str{id}{val=_set_response_etag}))) (expr*{args} (expr (Name (str{id}{val=response}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=response}))) (str{attr}{val=has_header}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=response}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=Last-Modified})))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=http_date})))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=response}))) (str{attr}{val=has_header}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=response}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=Expires})))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=http_date}))) (expr*{args} (expr (BinOp (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=time}))) (str{attr}{val=time}))))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=cache_timeout}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=patch_cache_control}))) (expr*{args} (expr (Name (str{id}{val=response})))) (keyword*{keywords} (keyword (str{arg}{val=max_age}) (expr{value} (Name (str{id}{val=cache_timeout})))))))))
(root (FunctionDef (str{name}{val=add_never_cache_headers}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=response})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=patch_response_headers}))) (expr*{args} (expr (Name (str{id}{val=response})))) (keyword*{keywords} (keyword (str{arg}{val=cache_timeout}) (expr{value} (Num (int{n}{val=-1})))))))))
(root (FunctionDef (str{name}{val=patch_vary_headers}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=response}))) (expr (Name (str{id}{val=newheaders})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Str (str{s}{val=     Adds (or updates) the "Vary" header in the given HttpResponse object.     newheaders is a list of header names that should be in "Vary". Existing     headers in "Vary" aren't removed.     })))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=response}))) (str{attr}{val=has_header}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=vary_headers})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=cc_delim_re}))) (str{attr}{val=split}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=response}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=vary_headers})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=existing_headers})))) (expr{value} (Call (expr{func} (Name (str{id}{val=set}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=header}))) (str{attr}{val=lower}))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=header}))) (expr{iter} (Name (str{id}{val=vary_headers}))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=additional_headers})))) (expr{value} (ListComp (expr{elt} (Name (str{id}{val=newheader}))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=newheader}))) (expr{iter} (Name (str{id}{val=newheaders}))) (expr*{ifs} (expr (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=newheader}))) (str{attr}{val=lower}))))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=existing_headers})))))))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=response}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=Vary})))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=, }))) (str{attr}{val=join}))) (expr*{args} (expr (BinOp (expr{left} (Name (str{id}{val=vary_headers}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=additional_headers}))))))))))
(root (FunctionDef (str{name}{val=has_vary_header}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=response}))) (expr (Name (str{id}{val=header_query})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=response}))) (str{attr}{val=has_header}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=vary_headers})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=cc_delim_re}))) (str{attr}{val=split}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=response}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=existing_headers})))) (expr{value} (Call (expr{func} (Name (str{id}{val=set}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=header}))) (str{attr}{val=lower}))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=header}))) (expr{iter} (Name (str{id}{val=vary_headers}))))))))))))
(root (Return (expr{value} (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=header_query}))) (str{attr}{val=lower}))))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=existing_headers}))))))))
(root (FunctionDef (str{name}{val=_i18n_cache_key_suffix}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=request}))) (expr (Name (str{id}{val=cache_key})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=USE_I18N}))) (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=USE_L10N})))))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=cache_key}))) (operator{op} (Add)) (expr{value} (BinOp (expr{left} (Str (str{s}{val=.%s}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=request}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Call (expr{func} (Name (str{id}{val=get_language}))))))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=USE_TZ}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=tz_name})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=get_current_timezone_name})))))) (keyword*{keywords} (keyword (str{arg}{val=errors}) (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (AugAssign (expr{target} (Name (str{id}{val=cache_key}))) (operator{op} (Add)) (expr{value} (BinOp (expr{left} (Str (str{s}{val=.%s}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=tz_name}))) (str{attr}{val=encode}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_})))))) (str{attr}{val=decode}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (str{attr}{val=replace}))) (expr*{args} (expr (Str (str{s}{val= }))) (expr (Str (str{s}{val=_}))))))))))
(root (Return (expr{value} (Name (str{id}{val=cache_key})))))
(root (FunctionDef (str{name}{val=_generate_cache_key}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=request}))) (expr (Name (str{id}{val=method}))) (expr (Name (str{id}{val=headerlist}))) (expr (Name (str{id}{val=key_prefix})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ctx})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=hashlib}))) (str{attr}{val=md5})))))))
(root (For (expr{target} (Name (str{id}{val=header}))) (expr{iter} (Name (str{id}{val=headerlist}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=request}))) (str{attr}{val=META}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=header}))) (expr (Name (str{id}{val=None}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=ctx}))) (str{attr}{val=update}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=force_bytes}))) (expr*{args} (expr (Name (str{id}{val=value})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=url})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=hashlib}))) (str{attr}{val=md5}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=force_bytes}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=iri_to_uri}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=request}))) (str{attr}{val=build_absolute_uri}))))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cache_key})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=key_prefix}))) (expr (Name (str{id}{val=method}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=url}))) (str{attr}{val=hexdigest}))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=ctx}))) (str{attr}{val=hexdigest}))))))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=_i18n_cache_key_suffix}))) (expr*{args} (expr (Name (str{id}{val=request}))) (expr (Name (str{id}{val=cache_key}))))))))
(root (FunctionDef (str{name}{val=_generate_cache_header_key}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=key_prefix}))) (expr (Name (str{id}{val=request})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=url})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=hashlib}))) (str{attr}{val=md5}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=force_bytes}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=iri_to_uri}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=request}))) (str{attr}{val=build_absolute_uri}))))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cache_key})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=key_prefix}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=url}))) (str{attr}{val=hexdigest}))))))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=_i18n_cache_key_suffix}))) (expr*{args} (expr (Name (str{id}{val=request}))) (expr (Name (str{id}{val=cache_key}))))))))
(root (FunctionDef (str{name}{val=get_cache_key}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=request}))) (expr (Name (str{id}{val=key_prefix}))) (expr (Name (str{id}{val=method}))) (expr (Name (str{id}{val=cache})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=key_prefix}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=key_prefix})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=CACHE_MIDDLEWARE_KEY_PREFIX})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cache_key})))) (expr{value} (Call (expr{func} (Name (str{id}{val=_generate_cache_header_key}))) (expr*{args} (expr (Name (str{id}{val=key_prefix}))) (expr (Name (str{id}{val=request}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=cache}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cache})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=caches}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=CACHE_MIDDLEWARE_ALIAS})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=headerlist})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=cache}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=cache_key}))) (expr (Name (str{id}{val=None}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=headerlist}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=_generate_cache_key}))) (expr*{args} (expr (Name (str{id}{val=request}))) (expr (Name (str{id}{val=method}))) (expr (Name (str{id}{val=headerlist}))) (expr (Name (str{id}{val=key_prefix}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=None})))))
(root (FunctionDef (str{name}{val=learn_cache_key}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=request}))) (expr (Name (str{id}{val=response}))) (expr (Name (str{id}{val=cache_timeout}))) (expr (Name (str{id}{val=key_prefix}))) (expr (Name (str{id}{val=cache})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=key_prefix}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=key_prefix})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=CACHE_MIDDLEWARE_KEY_PREFIX})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=cache_timeout}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cache_timeout})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=CACHE_MIDDLEWARE_SECONDS})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cache_key})))) (expr{value} (Call (expr{func} (Name (str{id}{val=_generate_cache_header_key}))) (expr*{args} (expr (Name (str{id}{val=key_prefix}))) (expr (Name (str{id}{val=request}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=cache}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cache})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=caches}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=CACHE_MIDDLEWARE_ALIAS})))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=response}))) (str{attr}{val=has_header}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=is_accept_language_redundant})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=USE_I18N}))) (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=USE_L10N}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=headerlist})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=header}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=cc_delim_re}))) (str{attr}{val=split}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=response}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=header})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=header}))) (str{attr}{val=upper}))))) (str{attr}{val=replace}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=header}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (expr (Name (str{id}{val=is_accept_language_redundant})))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=headerlist}))) (str{attr}{val=append}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=header}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=headerlist}))) (str{attr}{val=sort})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=cache}))) (str{attr}{val=set}))) (expr*{args} (expr (Name (str{id}{val=cache_key}))) (expr (Name (str{id}{val=headerlist}))) (expr (Name (str{id}{val=cache_timeout}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=_generate_cache_key}))) (expr*{args} (expr (Name (str{id}{val=request}))) (expr (Attribute (expr{value} (Name (str{id}{val=request}))) (str{attr}{val=method}))) (expr (Name (str{id}{val=headerlist}))) (expr (Name (str{id}{val=key_prefix}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=cache}))) (str{attr}{val=set}))) (expr*{args} (expr (Name (str{id}{val=cache_key}))) (expr (List (epsilon))) (expr (Name (str{id}{val=cache_timeout}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=_generate_cache_key}))) (expr*{args} (expr (Name (str{id}{val=request}))) (expr (Attribute (expr{value} (Name (str{id}{val=request}))) (str{attr}{val=method}))) (expr (List (epsilon))) (expr (Name (str{id}{val=key_prefix}))))))))
(root (FunctionDef (str{name}{val=_to_tuple}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=s})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=t})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=s}))) (str{attr}{val=split}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Num (int{n}{val=1}))))))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=t})))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=2})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=t}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (str{attr}{val=lower}))))) (expr (Subscript (expr{value} (Name (str{id}{val=t}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))))))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=t}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (str{attr}{val=lower}))))) (expr (Name (str{id}{val=True}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__all__})))) (expr{value} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=LUHN_ODD_LOOKUP})))) (expr{value} (Tuple (expr*{elts} (expr (Num (int{n}{val=0}))) (expr (Num (int{n}{val=2}))) (expr (Num (int{n}{val=4}))) (expr (Num (int{n}{val=6}))) (expr (Num (int{n}{val=8}))) (expr (Num (int{n}{val=1}))) (expr (Num (int{n}{val=3}))) (expr (Num (int{n}{val=5}))) (expr (Num (int{n}{val=7}))) (expr (Num (int{n}{val=9}))))))))
(root (FunctionDef (str{name}{val=luhn}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=candidate})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=candidate}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=string_types})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=candidate})))) (expr{value} (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Name (str{id}{val=candidate}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=evens})))) (expr{value} (Call (expr{func} (Name (str{id}{val=sum}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=c})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=c}))) (expr{iter} (Subscript (expr{value} (Name (str{id}{val=candidate}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=-1}))) (expr{step} (Num (int{n}{val=-2}))))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=odds})))) (expr{value} (Call (expr{func} (Name (str{id}{val=sum}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Subscript (expr{value} (Name (str{id}{val=LUHN_ODD_LOOKUP}))) (slice{slice} (Index (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=c})))))))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=c}))) (expr{iter} (Subscript (expr{value} (Name (str{id}{val=candidate}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=-2}))) (expr{step} (Num (int{n}{val=-2}))))))))))))))))
(root (Return (expr{value} (Compare (expr{left} (BinOp (expr{left} (BinOp (expr{left} (Name (str{id}{val=evens}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=odds}))))) (operator{op} (Mod)) (expr{right} (Num (int{n}{val=10}))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=0}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ValueError}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=hmac})))))
(root (Import (alias*{names} (alias (str{name}{val=struct})))))
(root (Import (alias*{names} (alias (str{name}{val=hashlib})))))
(root (Import (alias*{names} (alias (str{name}{val=binascii})))))
(root (Import (alias*{names} (alias (str{name}{val=time})))))
(root (Import (alias*{names} (alias (str{name}{val=random})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=random})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=random}))) (str{attr}{val=SystemRandom})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=using_sysrandom})))) (expr{value} (Name (str{id}{val=True})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=NotImplementedError}))) (stmt*{body} (stmt (Pass)))))))
(root (Import (alias*{names} (alias (str{name}{val=warnings})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=warnings}))) (str{attr}{val=warn}))) (expr*{args} (expr (Str (str{s}{val=A secure pseudo-random number generator is not available on your system. Falling back to Mersenne Twister.}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=using_sysrandom})))) (expr{value} (Name (str{id}{val=False})))))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=force_bytes}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.six.moves}) (alias*{names} (alias (str{name}{val=xrange}))) (int{level}{val=0})))
(root (FunctionDef (str{name}{val=salted_hmac}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=key_salt}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=secret})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=secret}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=secret})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=SECRET_KEY})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=key_salt})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_bytes}))) (expr*{args} (expr (Name (str{id}{val=key_salt}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=secret})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_bytes}))) (expr*{args} (expr (Name (str{id}{val=secret}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=key})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=hashlib}))) (str{attr}{val=sha1}))) (expr*{args} (expr (BinOp (expr{left} (Name (str{id}{val=key_salt}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=secret})))))))) (str{attr}{val=digest})))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=hmac}))) (str{attr}{val=new}))) (expr*{args} (expr (Name (str{id}{val=key})))) (keyword*{keywords} (keyword (str{arg}{val=msg}) (expr{value} (Call (expr{func} (Name (str{id}{val=force_bytes}))) (expr*{args} (expr (Name (str{id}{val=value}))))))) (keyword (str{arg}{val=digestmod}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=hashlib}))) (str{attr}{val=sha1})))))))))
(root (FunctionDef (str{name}{val=get_random_string}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=length}))) (expr (Name (str{id}{val=allowed_chars})))) (expr*{defaults} (expr (Num (int{n}{val=12}))) (expr (Str (str{s}{val=abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=using_sysrandom}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=random}))) (str{attr}{val=seed}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=hashlib}))) (str{attr}{val=sha256}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=random}))) (str{attr}{val=getstate}))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=time}))) (str{attr}{val=time}))))) (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=SECRET_KEY})))))))) (str{attr}{val=encode}))) (expr*{args} (expr (Str (str{s}{val=utf-8}))))))))) (str{attr}{val=digest}))))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=}))) (str{attr}{val=join}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=random}))) (str{attr}{val=choice}))) (expr*{args} (expr (Name (str{id}{val=allowed_chars})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=i}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=range}))) (expr*{args} (expr (Name (str{id}{val=length})))))))))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=hmac}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=constant_time_compare}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=val1}))) (expr (Name (str{id}{val=val2})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=hmac}))) (str{attr}{val=compare_digest}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=force_bytes}))) (expr*{args} (expr (Name (str{id}{val=val1})))))) (expr (Call (expr{func} (Name (str{id}{val=force_bytes}))) (expr*{args} (expr (Name (str{id}{val=val2})))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=constant_time_compare}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=val1}))) (expr (Name (str{id}{val=val2})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=val1})))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=val2}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Num (int{n}{val=0})))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=PY3}))) (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=val1}))) (expr (Name (str{id}{val=bytes})))))) (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=val2}))) (expr (Name (str{id}{val=bytes}))))))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=x}))) (expr (Name (str{id}{val=y})))))) (expr{iter} (Call (expr{func} (Name (str{id}{val=zip}))) (expr*{args} (expr (Name (str{id}{val=val1}))) (expr (Name (str{id}{val=val2})))))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=result}))) (operator{op} (BitOr)) (expr{value} (BinOp (expr{left} (Name (str{id}{val=x}))) (operator{op} (BitXor)) (expr{right} (Name (str{id}{val=y})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=x}))) (expr (Name (str{id}{val=y})))))) (expr{iter} (Call (expr{func} (Name (str{id}{val=zip}))) (expr*{args} (expr (Name (str{id}{val=val1}))) (expr (Name (str{id}{val=val2})))))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=result}))) (operator{op} (BitOr)) (expr{value} (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=ord}))) (expr*{args} (expr (Name (str{id}{val=x})))))) (operator{op} (BitXor)) (expr{right} (Call (expr{func} (Name (str{id}{val=ord}))) (expr*{args} (expr (Name (str{id}{val=y}))))))))))
(root (Return (expr{value} (Compare (expr{left} (Name (str{id}{val=result}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=0}))))))))
(root (FunctionDef (str{name}{val=_bin_to_long}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=x})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=binascii}))) (str{attr}{val=hexlify}))) (expr*{args} (expr (Name (str{id}{val=x})))))) (expr (Num (int{n}{val=16}))))))))
(root (FunctionDef (str{name}{val=_long_to_bin}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=x}))) (expr (Name (str{id}{val=hex_format_string})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=binascii}))) (str{attr}{val=unhexlify}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (BinOp (expr{left} (Name (str{id}{val=hex_format_string}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=x}))))) (str{attr}{val=encode}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=hashlib}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=pbkdf2}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=password}))) (expr (Name (str{id}{val=salt}))) (expr (Name (str{id}{val=iterations}))) (expr (Name (str{id}{val=dklen}))) (expr (Name (str{id}{val=digest})))) (expr*{defaults} (expr (Num (int{n}{val=0}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=digest}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=digest})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=hashlib}))) (str{attr}{val=sha256})))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=dklen}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=dklen})))) (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=password})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_bytes}))) (expr*{args} (expr (Name (str{id}{val=password}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=salt})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_bytes}))) (expr*{args} (expr (Name (str{id}{val=salt}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=hashlib}))) (str{attr}{val=pbkdf2_hmac}))) (expr*{args} (expr (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=digest}))))) (str{attr}{val=name}))) (expr (Name (str{id}{val=password}))) (expr (Name (str{id}{val=salt}))) (expr (Name (str{id}{val=iterations}))) (expr (Name (str{id}{val=dklen}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=pbkdf2}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=password}))) (expr (Name (str{id}{val=salt}))) (expr (Name (str{id}{val=iterations}))) (expr (Name (str{id}{val=dklen}))) (expr (Name (str{id}{val=digest})))) (expr*{defaults} (expr (Num (int{n}{val=0}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assert (expr{test} (Compare (expr{left} (Name (str{id}{val=iterations}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=0}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=digest}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=digest})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=hashlib}))) (str{attr}{val=sha256})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=password})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_bytes}))) (expr*{args} (expr (Name (str{id}{val=password}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=salt})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_bytes}))) (expr*{args} (expr (Name (str{id}{val=salt}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=hlen})))) (expr{value} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=digest}))))) (str{attr}{val=digest_size})))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=dklen}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=dklen})))) (expr{value} (Name (str{id}{val=hlen})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=dklen}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (BinOp (expr{left} (BinOp (expr{left} (BinOp (expr{left} (Num (int{n}{val=2}))) (operator{op} (Pow)) (expr{right} (Num (int{n}{val=32}))))) (operator{op} (Sub)) (expr{right} (Num (int{n}{val=1}))))) (operator{op} (Mult)) (expr{right} (Name (str{id}{val=hlen})))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=OverflowError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=l})))) (expr{value} (UnaryOp (unaryop{op} (USub)) (expr{operand} (BinOp (expr{left} (UnaryOp (unaryop{op} (USub)) (expr{operand} (Name (str{id}{val=dklen}))))) (operator{op} (FloorDiv)) (expr{right} (Name (str{id}{val=hlen})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=r})))) (expr{value} (BinOp (expr{left} (Name (str{id}{val=dklen}))) (operator{op} (Sub)) (expr{right} (BinOp (expr{left} (BinOp (expr{left} (Name (str{id}{val=l}))) (operator{op} (Sub)) (expr{right} (Num (int{n}{val=1}))))) (operator{op} (Mult)) (expr{right} (Name (str{id}{val=hlen})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=hex_format_string})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (BinOp (expr{left} (Name (str{id}{val=hlen}))) (operator{op} (Mult)) (expr{right} (Num (int{n}{val=2})))))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=inner}))) (expr (Name (str{id}{val=outer}))))))) (expr{value} (Tuple (expr*{elts} (expr (Call (expr{func} (Name (str{id}{val=digest}))))) (expr (Call (expr{func} (Name (str{id}{val=digest}))))))))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=password})))))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=inner}))) (str{attr}{val=block_size})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=password})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=digest}))) (expr*{args} (expr (Name (str{id}{val=password})))))) (str{attr}{val=digest})))))))
(root (AugAssign (expr{target} (Name (str{id}{val=password}))) (operator{op} (Add)) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mult)) (expr{right} (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=inner}))) (str{attr}{val=block_size}))) (operator{op} (Sub)) (expr{right} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=password}))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=inner}))) (str{attr}{val=update}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=password}))) (str{attr}{val=translate}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=hmac}))) (str{attr}{val=trans_36})))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=outer}))) (str{attr}{val=update}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=password}))) (str{attr}{val=translate}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=hmac}))) (str{attr}{val=trans_5C})))))))))))
(root (FunctionDef (str{name}{val=F}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=i})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=u})))) (expr{value} (BinOp (expr{left} (Name (str{id}{val=salt}))) (operator{op} (Add)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=struct}))) (str{attr}{val=pack}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=i}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Num (int{n}{val=0})))))
(root (For (expr{target} (Name (str{id}{val=j}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=xrange}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=iterations}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=dig1}))) (expr (Name (str{id}{val=dig2}))))))) (expr{value} (Tuple (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=inner}))) (str{attr}{val=copy}))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=outer}))) (str{attr}{val=copy}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=dig1}))) (str{attr}{val=update}))) (expr*{args} (expr (Name (str{id}{val=u}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=dig2}))) (str{attr}{val=update}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=dig1}))) (str{attr}{val=digest}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=u})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=dig2}))) (str{attr}{val=digest})))))))
(root (AugAssign (expr{target} (Name (str{id}{val=result}))) (operator{op} (BitXor)) (expr{value} (Call (expr{func} (Name (str{id}{val=_bin_to_long}))) (expr*{args} (expr (Name (str{id}{val=u}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=_long_to_bin}))) (expr*{args} (expr (Name (str{id}{val=result}))) (expr (Name (str{id}{val=hex_format_string}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=T})))) (expr{value} (ListComp (expr{elt} (Call (expr{func} (Name (str{id}{val=F}))) (expr*{args} (expr (Name (str{id}{val=x})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=x}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=range}))) (expr*{args} (expr (Num (int{n}{val=1}))) (expr (Name (str{id}{val=l}))))))))))))
(root (Return (expr{value} (BinOp (expr{left} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=T})))))) (operator{op} (Add)) (expr{right} (Subscript (expr{value} (Call (expr{func} (Name (str{id}{val=F}))) (expr*{args} (expr (Name (str{id}{val=l})))))) (slice{slice} (Slice (expr{upper} (Name (str{id}{val=r})))))))))))
(root (Import (alias*{names} (alias (str{name}{val=os})))))
(root (Import (alias*{names} (alias (str{name}{val=sys})))))
(root (ImportFrom (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=1})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=buffering})))) (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=PY3}))))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=name}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=become_daemon}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=our_home_dir}))) (expr (Name (str{id}{val=out_log}))) (expr (Name (str{id}{val=err_log}))) (expr (Name (str{id}{val=umask})))) (expr*{defaults} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Num (int{n}{val=18})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=fork}))))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=exit}))) (expr*{args} (expr (Num (int{n}{val=0}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=OSError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=stderr}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=errno}))) (expr (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=strerror})))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=exit}))) (expr*{args} (expr (Num (int{n}{val=1}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=setsid})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=chdir}))) (expr*{args} (expr (Name (str{id}{val=our_home_dir}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=umask}))) (expr*{args} (expr (Name (str{id}{val=umask}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=fork}))))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=_exit}))) (expr*{args} (expr (Num (int{n}{val=0}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=OSError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=stderr}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=errno}))) (expr (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=strerror})))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=_exit}))) (expr*{args} (expr (Num (int{n}{val=1}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=si})))) (expr{value} (Call (expr{func} (Name (str{id}{val=open}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=r}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=so})))) (expr{value} (Call (expr{func} (Name (str{id}{val=open}))) (expr*{args} (expr (Name (str{id}{val=out_log}))) (expr (Str (str{s}{val=a+}))) (expr (Name (str{id}{val=buffering}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=se})))) (expr{value} (Call (expr{func} (Name (str{id}{val=open}))) (expr*{args} (expr (Name (str{id}{val=err_log}))) (expr (Str (str{s}{val=a+}))) (expr (Name (str{id}{val=buffering}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=dup2}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=si}))) (str{attr}{val=fileno}))))) (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=stdin}))) (str{attr}{val=fileno}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=dup2}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=so}))) (str{attr}{val=fileno}))))) (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=stdout}))) (str{attr}{val=fileno}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=dup2}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=se}))) (str{attr}{val=fileno}))))) (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=stderr}))) (str{attr}{val=fileno}))))))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=stdout}))) (expr (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=stderr}))))))) (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=so}))) (expr (Name (str{id}{val=se}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=become_daemon}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=our_home_dir}))) (expr (Name (str{id}{val=out_log}))) (expr (Name (str{id}{val=err_log}))) (expr (Name (str{id}{val=umask})))) (expr*{defaults} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Num (int{n}{val=18})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=chdir}))) (expr*{args} (expr (Name (str{id}{val=our_home_dir}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=umask}))) (expr*{args} (expr (Name (str{id}{val=umask}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=stdin}))) (str{attr}{val=close})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=stdout}))) (str{attr}{val=close})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=stderr}))) (str{attr}{val=close})))))))
(root (If (expr{test} (Name (str{id}{val=err_log}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=stderr})))) (expr{value} (Call (expr{func} (Name (str{id}{val=open}))) (expr*{args} (expr (Name (str{id}{val=err_log}))) (expr (Str (str{s}{val=a}))) (expr (Name (str{id}{val=buffering}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=stderr})))) (expr{value} (Call (expr{func} (Name (str{id}{val=NullDevice})))))))
(root (If (expr{test} (Name (str{id}{val=out_log}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=stdout})))) (expr{value} (Call (expr{func} (Name (str{id}{val=open}))) (expr*{args} (expr (Name (str{id}{val=out_log}))) (expr (Str (str{s}{val=a}))) (expr (Name (str{id}{val=buffering}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=stdout})))) (expr{value} (Call (expr{func} (Name (str{id}{val=NullDevice})))))))
(root (ClassDef (str{name}{val=NullDevice}) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=write}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=s})))))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (Import (alias*{names} (alias (str{name}{val=copy})))))
(root (Import (alias*{names} (alias (str{name}{val=warnings})))))
(root (ImportFrom (str{module}{val=collections}) (alias*{names} (alias (str{name}{val=OrderedDict}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.deprecation}) (alias*{names} (alias (str{name}{val=RemovedInDjango19Warning}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=MergeDict}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=dicts}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=warnings}))) (str{attr}{val=warn}))) (expr*{args} (expr (Str (str{s}{val=`MergeDict` is deprecated, use `dict.update()` instead.}))) (expr (Name (str{id}{val=RemovedInDjango19Warning}))) (expr (Num (int{n}{val=2}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=dicts})))) (expr{value} (Name (str{id}{val=dicts})))))
(root (FunctionDef (str{name}{val=__bool__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=any}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=dicts}))))))))
(root (FunctionDef (str{name}{val=__nonzero__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=type}))) (expr*{args} (expr (Name (str{id}{val=self})))))) (str{attr}{val=__bool__}))) (expr*{args} (expr (Name (str{id}{val=self}))))))))
(root (FunctionDef (str{name}{val=__getitem__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=dict_}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=dicts}))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Subscript (expr{value} (Name (str{id}{val=dict_}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=KeyError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=KeyError}))) (expr*{args} (expr (Name (str{id}{val=key}))))))))
(root (FunctionDef (str{name}{val=__copy__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__class__}))) (expr{starargs} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=dicts})))))))
(root (FunctionDef (str{name}{val=get}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=default})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Subscript (expr{value} (Name (str{id}{val=self}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=KeyError}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Name (str{id}{val=default})))))
(root (FunctionDef (str{name}{val=getlist}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=dict_}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=dicts}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=key}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=dict_})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=dict_}))) (str{attr}{val=getlist}))) (expr*{args} (expr (Name (str{id}{val=key}))))))))
(root (Return (expr{value} (List (epsilon)))))
(root (FunctionDef (str{name}{val=_iteritems}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=seen})))) (expr{value} (Call (expr{func} (Name (str{id}{val=set})))))))
(root (For (expr{target} (Name (str{id}{val=dict_}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=dicts}))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=item}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=iteritems}))) (expr*{args} (expr (Name (str{id}{val=dict_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=k})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=k}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=seen})))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=seen}))) (str{attr}{val=add}))) (expr*{args} (expr (Name (str{id}{val=k}))))))))
(root (Expr (expr{value} (Yield (expr{value} (Name (str{id}{val=item})))))))
(root (FunctionDef (str{name}{val=_iterkeys}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Name (str{id}{val=v})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_iteritems}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Yield (expr{value} (Name (str{id}{val=k})))))))
(root (FunctionDef (str{name}{val=_itervalues}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Name (str{id}{val=v})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_iteritems}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Yield (expr{value} (Name (str{id}{val=v})))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=PY3}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=items})))) (expr{value} (Name (str{id}{val=_iteritems})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=keys})))) (expr{value} (Name (str{id}{val=_iterkeys})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=values})))) (expr{value} (Name (str{id}{val=_itervalues})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=iteritems})))) (expr{value} (Name (str{id}{val=_iteritems})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=iterkeys})))) (expr{value} (Name (str{id}{val=_iterkeys})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=itervalues})))) (expr{value} (Name (str{id}{val=_itervalues})))))
(root (FunctionDef (str{name}{val=items}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=iteritems}))))))))))
(root (FunctionDef (str{name}{val=keys}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=iterkeys}))))))))))
(root (FunctionDef (str{name}{val=values}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=itervalues}))))))))))
(root (FunctionDef (str{name}{val=has_key}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=dict_}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=dicts}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=key}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=dict_})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=True})))))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__contains__})))) (expr{value} (Name (str{id}{val=has_key})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__iter__})))) (expr{value} (Name (str{id}{val=_iterkeys})))))
(root (FunctionDef (str{name}{val=copy}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__copy__})))))))
(root (FunctionDef (str{name}{val=__str__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=dict}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=items})))))))))))))
(root (FunctionDef (str{name}{val=__repr__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=dictreprs})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=_STR:0_}))) (str{attr}{val=join}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Call (expr{func} (Name (str{id}{val=repr}))) (expr*{args} (expr (Name (str{id}{val=d})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=d}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=dicts}))))))))))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__class__}))) (str{attr}{val=__name__}))) (expr (Name (str{id}{val=dictreprs}))))))))))
(root (ClassDef (str{name}{val=SortedDict}) (expr*{bases} (expr (Name (str{id}{val=dict})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__new__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=cls})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=instance})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=SortedDict}))) (expr (Name (str{id}{val=cls})))))) (str{attr}{val=__new__}))) (expr*{args} (expr (Name (str{id}{val=cls})))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=instance}))) (str{attr}{val=keyOrder})))) (expr{value} (List (epsilon)))))
(root (Return (expr{value} (Name (str{id}{val=instance})))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=data})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=warnings}))) (str{attr}{val=warn}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=RemovedInDjango19Warning})))) (keyword*{keywords} (keyword (str{arg}{val=stacklevel}) (expr{value} (Num (int{n}{val=2})))))))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=data}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=data}))) (expr (Name (str{id}{val=dict}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=data})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=data}))) (expr (List (epsilon))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=SortedDict}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=data}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=keyOrder})))) (expr{value} (IfExp (expr{test} (Name (str{id}{val=data}))) (expr{body} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Name (str{id}{val=data})))))) (expr{orelse} (List (epsilon)))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=SortedDict}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=super_set})))) (expr{value} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=SortedDict}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__setitem__})))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value})))))) (expr{iter} (Name (str{id}{val=data}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=key}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=keyOrder}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=key}))))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=super_set}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value}))))))))
(root (FunctionDef (str{name}{val=__deepcopy__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=memo})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__class__}))) (expr*{args} (expr (ListComp (expr{elt} (Tuple (expr*{elts} (expr (Name (str{id}{val=key}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=copy}))) (str{attr}{val=deepcopy}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=memo}))))))))) (comprehension*{generators} (comprehension (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=items}))))))))))))))
(root (FunctionDef (str{name}{val=__copy__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=copy})))))))
(root (FunctionDef (str{name}{val=__setitem__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=key}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=keyOrder}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=key}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=SortedDict}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__setitem__}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value}))))))))
(root (FunctionDef (str{name}{val=__delitem__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=SortedDict}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__delitem__}))) (expr*{args} (expr (Name (str{id}{val=key}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=keyOrder}))) (str{attr}{val=remove}))) (expr*{args} (expr (Name (str{id}{val=key}))))))))
(root (FunctionDef (str{name}{val=__iter__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=iter}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=keyOrder}))))))))
(root (FunctionDef (str{name}{val=__reversed__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=reversed}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=keyOrder}))))))))
(root (FunctionDef (str{name}{val=pop}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=k})))) (str{vararg}{val=args}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=SortedDict}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=pop}))) (expr*{args} (expr (Name (str{id}{val=k})))) (expr{starargs} (Name (str{id}{val=args})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=keyOrder}))) (str{attr}{val=remove}))) (expr*{args} (expr (Name (str{id}{val=k}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ValueError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (Return (expr{value} (Name (str{id}{val=result})))))
(root (FunctionDef (str{name}{val=popitem}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=SortedDict}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=popitem})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=keyOrder}))) (str{attr}{val=remove}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=result}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))))))))
(root (Return (expr{value} (Name (str{id}{val=result})))))
(root (FunctionDef (str{name}{val=_iteritems}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=key}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=keyOrder}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Yield (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=key}))) (expr (Subscript (expr{value} (Name (str{id}{val=self}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key}))))))))))))))
(root (FunctionDef (str{name}{val=_iterkeys}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=key}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=keyOrder}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Yield (expr{value} (Name (str{id}{val=key})))))))
(root (FunctionDef (str{name}{val=_itervalues}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=key}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=keyOrder}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Yield (expr{value} (Subscript (expr{value} (Name (str{id}{val=self}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key})))))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=PY3}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=items})))) (expr{value} (Name (str{id}{val=_iteritems})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=keys})))) (expr{value} (Name (str{id}{val=_iterkeys})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=values})))) (expr{value} (Name (str{id}{val=_itervalues})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=iteritems})))) (expr{value} (Name (str{id}{val=_iteritems})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=iterkeys})))) (expr{value} (Name (str{id}{val=_iterkeys})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=itervalues})))) (expr{value} (Name (str{id}{val=_itervalues})))))
(root (FunctionDef (str{name}{val=items}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (ListComp (expr{elt} (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Subscript (expr{value} (Name (str{id}{val=self}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=k})))))))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=k}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=keyOrder})))))))))
(root (FunctionDef (str{name}{val=keys}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=keyOrder}))) (slice{slice} (Slice (epsilon)))))))
(root (FunctionDef (str{name}{val=values}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (ListComp (expr{elt} (Subscript (expr{value} (Name (str{id}{val=self}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=k}))))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=k}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=keyOrder})))))))))
(root (FunctionDef (str{name}{val=update}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=dict_})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Name (str{id}{val=v})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=iteritems}))) (expr*{args} (expr (Name (str{id}{val=dict_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=self}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=k})))))))) (expr{value} (Name (str{id}{val=v})))))
(root (FunctionDef (str{name}{val=setdefault}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=default})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=key}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=keyOrder}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=key}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=SortedDict}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=setdefault}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=default}))))))))
(root (FunctionDef (str{name}{val=copy}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__class__}))) (expr*{args} (expr (Name (str{id}{val=self}))))))))
(root (FunctionDef (str{name}{val=__repr__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val={%s}}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=, }))) (str{attr}{val=join}))) (expr*{args} (expr (GeneratorExp (expr{elt} (BinOp (expr{left} (Str (str{s}{val=%r: %r}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Name (str{id}{val=v})))))))) (comprehension*{generators} (comprehension (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Name (str{id}{val=v})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=iteritems}))) (expr*{args} (expr (Name (str{id}{val=self})))))))))))))))))
(root (FunctionDef (str{name}{val=clear}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=SortedDict}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=clear})))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=keyOrder})))) (expr{value} (List (epsilon)))))
(root (ClassDef (str{name}{val=OrderedSet}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=iterable})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=dict})))) (expr{value} (Call (expr{func} (Name (str{id}{val=OrderedDict}))) (expr*{args} (expr (IfExp (expr{test} (Name (str{id}{val=iterable}))) (expr{body} (GeneratorExp (expr{elt} (Tuple (expr*{elts} (expr (Name (str{id}{val=x}))) (expr (Name (str{id}{val=None})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=x}))) (expr{iter} (Name (str{id}{val=iterable}))))))) (expr{orelse} (List (epsilon))))))))))
(root (FunctionDef (str{name}{val=add}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=item})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=dict}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=item})))))))) (expr{value} (Name (str{id}{val=None})))))
(root (FunctionDef (str{name}{val=remove}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=item})))))) (stmt*{body} (stmt (Pass)))))
(root (Delete (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=dict}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=item}))))))))))
(root (FunctionDef (str{name}{val=discard}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=item})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=remove}))) (expr*{args} (expr (Name (str{id}{val=item}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=KeyError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (FunctionDef (str{name}{val=__iter__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=iter}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=dict}))) (str{attr}{val=keys}))))))))))
(root (FunctionDef (str{name}{val=__contains__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=item})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Compare (expr{left} (Name (str{id}{val=item}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=dict}))))))))
(root (FunctionDef (str{name}{val=__nonzero__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=bool}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=dict}))))))))
(root (ClassDef (str{name}{val=MultiValueDictKeyError}) (expr*{bases} (expr (Name (str{id}{val=KeyError})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (ClassDef (str{name}{val=MultiValueDict}) (expr*{bases} (expr (Name (str{id}{val=dict})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key_to_list_mapping})))) (expr*{defaults} (expr (Tuple (epsilon)))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=MultiValueDict}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=key_to_list_mapping}))))))))
(root (FunctionDef (str{name}{val=__repr__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__class__}))) (str{attr}{val=__name__}))) (expr (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=MultiValueDict}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__repr__}))))))))))))
(root (FunctionDef (str{name}{val=__getitem__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=list_})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=MultiValueDict}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__getitem__}))) (expr*{args} (expr (Name (str{id}{val=key}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=KeyError}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=MultiValueDictKeyError}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=repr}))) (expr*{args} (expr (Name (str{id}{val=key})))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Subscript (expr{value} (Name (str{id}{val=list_}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=-1})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=IndexError}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (List (epsilon)))))
(root (FunctionDef (str{name}{val=__setitem__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=MultiValueDict}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__setitem__}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (List (expr*{elts} (expr (Name (str{id}{val=value})))))))))))
(root (FunctionDef (str{name}{val=__copy__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__class__}))) (expr*{args} (expr (ListComp (expr{elt} (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Subscript (expr{value} (Name (str{id}{val=v}))) (slice{slice} (Slice (epsilon)))))))) (comprehension*{generators} (comprehension (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Name (str{id}{val=v})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=lists}))))))))))))))
(root (FunctionDef (str{name}{val=__deepcopy__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=memo})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=memo}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=memo})))) (expr{value} (Dict (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__class__})))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=memo}))) (slice{slice} (Index (expr{value} (Call (expr{func} (Name (str{id}{val=id}))) (expr*{args} (expr (Name (str{id}{val=self}))))))))))) (expr{value} (Name (str{id}{val=result})))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=dict}))) (str{attr}{val=items}))) (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=dict}))) (str{attr}{val=__setitem__}))) (expr*{args} (expr (Name (str{id}{val=result}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=copy}))) (str{attr}{val=deepcopy}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=memo})))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=copy}))) (str{attr}{val=deepcopy}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=memo})))))))))))
(root (Return (expr{value} (Name (str{id}{val=result})))))
(root (FunctionDef (str{name}{val=__getstate__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=obj_dict})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__dict__}))) (str{attr}{val=copy})))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=obj_dict}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=dict}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=getlist}))) (expr*{args} (expr (Name (str{id}{val=k}))))))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=k}))) (expr{iter} (Name (str{id}{val=self}))))))))))))
(root (Return (expr{value} (Name (str{id}{val=obj_dict})))))
(root (FunctionDef (str{name}{val=__setstate__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=obj_dict})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=data})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=obj_dict}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Dict (epsilon))))))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Name (str{id}{val=v})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=data}))) (str{attr}{val=items}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=setlist}))) (expr*{args} (expr (Name (str{id}{val=k}))) (expr (Name (str{id}{val=v}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__dict__}))) (str{attr}{val=update}))) (expr*{args} (expr (Name (str{id}{val=obj_dict}))))))))
(root (FunctionDef (str{name}{val=get}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=default})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=val})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=self}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=KeyError}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Name (str{id}{val=default})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=val}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (List (epsilon)))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=default})))))
(root (Return (expr{value} (Name (str{id}{val=val})))))
(root (FunctionDef (str{name}{val=getlist}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=default})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=MultiValueDict}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__getitem__}))) (expr*{args} (expr (Name (str{id}{val=key}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=KeyError}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=default}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (List (epsilon)))))
(root (Return (expr{value} (Name (str{id}{val=default})))))
(root (FunctionDef (str{name}{val=setlist}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=list_})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=MultiValueDict}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__setitem__}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=list_}))))))))
(root (FunctionDef (str{name}{val=setdefault}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=default})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=key}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=self}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key})))))))) (expr{value} (Name (str{id}{val=default})))))
(root (Return (expr{value} (Subscript (expr{value} (Name (str{id}{val=self}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key})))))))))
(root (FunctionDef (str{name}{val=setlistdefault}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=default_list})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=key}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=default_list}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=default_list})))) (expr{value} (List (epsilon)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=setlist}))) (expr*{args} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=default_list}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=getlist}))) (expr*{args} (expr (Name (str{id}{val=key}))))))))
(root (FunctionDef (str{name}{val=appendlist}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=setlistdefault}))) (expr*{args} (expr (Name (str{id}{val=key})))))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (FunctionDef (str{name}{val=_iteritems}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=key}))) (expr{iter} (Name (str{id}{val=self}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Yield (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=key}))) (expr (Subscript (expr{value} (Name (str{id}{val=self}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key}))))))))))))))
(root (FunctionDef (str{name}{val=_iterlists}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=iteritems}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=MultiValueDict}))) (expr (Name (str{id}{val=self})))))))))))
(root (FunctionDef (str{name}{val=_itervalues}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=key}))) (expr{iter} (Name (str{id}{val=self}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Yield (expr{value} (Subscript (expr{value} (Name (str{id}{val=self}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key})))))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=PY3}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=items})))) (expr{value} (Name (str{id}{val=_iteritems})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=lists})))) (expr{value} (Name (str{id}{val=_iterlists})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=values})))) (expr{value} (Name (str{id}{val=_itervalues})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=iteritems})))) (expr{value} (Name (str{id}{val=_iteritems})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=iterlists})))) (expr{value} (Name (str{id}{val=_iterlists})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=itervalues})))) (expr{value} (Name (str{id}{val=_itervalues})))))
(root (FunctionDef (str{name}{val=items}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=iteritems}))))))))))
(root (FunctionDef (str{name}{val=lists}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=iterlists}))))))))))
(root (FunctionDef (str{name}{val=values}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=itervalues}))))))))))
(root (FunctionDef (str{name}{val=copy}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=copy}))) (str{attr}{val=copy}))) (expr*{args} (expr (Name (str{id}{val=self}))))))))
(root (FunctionDef (str{name}{val=update}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=args})))))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TypeError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=args})))))))))))))
(root (If (expr{test} (Name (str{id}{val=args}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=other_dict})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=args}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=other_dict}))) (expr (Name (str{id}{val=MultiValueDict})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value_list})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=other_dict}))) (str{attr}{val=lists}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=setlistdefault}))) (expr*{args} (expr (Name (str{id}{val=key})))))) (str{attr}{val=extend}))) (expr*{args} (expr (Name (str{id}{val=value_list}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=other_dict}))) (str{attr}{val=items}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=setlistdefault}))) (expr*{args} (expr (Name (str{id}{val=key})))))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=TypeError}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=value})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=iteritems}))) (expr*{args} (expr (Name (str{id}{val=kwargs})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=setlistdefault}))) (expr*{args} (expr (Name (str{id}{val=key})))))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (FunctionDef (str{name}{val=dict}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=dict}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Tuple (expr*{elts} (expr (Name (str{id}{val=key}))) (expr (Subscript (expr{value} (Name (str{id}{val=self}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key})))))))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=key}))) (expr{iter} (Name (str{id}{val=self}))))))))))))
(root (ClassDef (str{name}{val=ImmutableList}) (expr*{bases} (expr (Name (str{id}{val=tuple})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__new__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=cls})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=kwargs})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=warning})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=kwargs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (Delete (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=kwargs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=warning})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=self})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=tuple}))) (str{attr}{val=__new__}))) (expr*{args} (expr (Name (str{id}{val=cls})))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=warning})))) (expr{value} (Name (str{id}{val=warning})))))
(root (Return (expr{value} (Name (str{id}{val=self})))))
(root (FunctionDef (str{name}{val=complain}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=wargs}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=warning}))) (expr (Name (str{id}{val=Exception})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=warning})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=AttributeError}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=warning}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__delitem__})))) (expr{value} (Name (str{id}{val=complain})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__delslice__})))) (expr{value} (Name (str{id}{val=complain})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__iadd__})))) (expr{value} (Name (str{id}{val=complain})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__imul__})))) (expr{value} (Name (str{id}{val=complain})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__setitem__})))) (expr{value} (Name (str{id}{val=complain})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__setslice__})))) (expr{value} (Name (str{id}{val=complain})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=append})))) (expr{value} (Name (str{id}{val=complain})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=extend})))) (expr{value} (Name (str{id}{val=complain})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=insert})))) (expr{value} (Name (str{id}{val=complain})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=pop})))) (expr{value} (Name (str{id}{val=complain})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=remove})))) (expr{value} (Name (str{id}{val=complain})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=sort})))) (expr{value} (Name (str{id}{val=complain})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=reverse})))) (expr{value} (Name (str{id}{val=complain})))))
(root (ClassDef (str{name}{val=DictWrapper}) (expr*{bases} (expr (Name (str{id}{val=dict})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=data}))) (expr (Name (str{id}{val=func}))) (expr (Name (str{id}{val=prefix})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=DictWrapper}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=data}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=func})))) (expr{value} (Name (str{id}{val=func})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=prefix})))) (expr{value} (Name (str{id}{val=prefix})))))
(root (FunctionDef (str{name}{val=__getitem__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=key}))) (str{attr}{val=startswith}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=prefix})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=use_func})))) (expr{value} (Name (str{id}{val=True})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=key})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=key}))) (slice{slice} (Slice (expr{lower} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=prefix}))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=use_func})))) (expr{value} (Name (str{id}{val=False})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=DictWrapper}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__getitem__}))) (expr*{args} (expr (Name (str{id}{val=key}))))))))
(root (If (expr{test} (Name (str{id}{val=use_func}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=func}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (Return (expr{value} (Name (str{id}{val=value})))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=re})))))
(root (Import (alias*{names} (alias (str{name}{val=time})))))
(root (Import (alias*{names} (alias (str{name}{val=calendar})))))
(root (Import (alias*{names} (alias (str{name}{val=datetime})))))
(root (ImportFrom (str{module}{val=django.utils.dates}) (alias*{names} (alias (str{name}{val=MONTHS})) (alias (str{name}{val=MONTHS_3})) (alias (str{name}{val=MONTHS_ALT})) (alias (str{name}{val=MONTHS_AP})) (alias (str{name}{val=WEEKDAYS})) (alias (str{name}{val=WEEKDAYS_ABBR}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.translation}) (alias*{names} (alias (str{name}{val=ugettext}) (str{asname}{val=_}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=force_text}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.timezone}) (alias*{names} (alias (str{name}{val=get_default_timezone})) (alias (str{name}{val=is_aware})) (alias (str{name}{val=is_naive}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=re_formatchars})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=re_escaped})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (ClassDef (str{name}{val=Formatter}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=format}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=formatstr})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=pieces})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=i}))) (expr (Name (str{id}{val=piece})))))) (expr{iter} (Call (expr{func} (Name (str{id}{val=enumerate}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re_formatchars}))) (str{attr}{val=split}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=formatstr})))))))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BinOp (expr{left} (Name (str{id}{val=i}))) (operator{op} (Mod)) (expr{right} (Num (int{n}{val=2}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=pieces}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Call (expr{func} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=piece}))))))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Name (str{id}{val=piece}))) (stmt*{body} (stmt (Pass))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=pieces}))) (str{attr}{val=append}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re_escaped}))) (str{attr}{val=sub}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=piece})))))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=pieces}))))))))
(root (ClassDef (str{name}{val=TimeFormat}) (expr*{bases} (expr (Name (str{id}{val=Formatter})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=obj})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data})))) (expr{value} (Name (str{id}{val=obj})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=timezone})))) (expr{value} (Name (str{id}{val=None})))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=obj}))) (expr (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=datetime})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=is_naive}))) (expr*{args} (expr (Name (str{id}{val=obj})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=timezone})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_default_timezone})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=timezone})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=obj}))) (str{attr}{val=tzinfo})))))
(root (FunctionDef (str{name}{val=a}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=hour}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=11})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=A}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=hour}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=11})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=B}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=NotImplementedError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=e}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=timezone}))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (expr (Str (str{s}{val=_STR:0_})))))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=tzinfo})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=tzinfo}))) (str{attr}{val=tzname}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data})))))) (expr (Str (str{s}{val=}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=NotImplementedError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (FunctionDef (str{name}{val=f}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=minute}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=g})))))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=g}))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=i}))))))))))))
(root (FunctionDef (str{name}{val=g}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=hour}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Num (int{n}{val=12})))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=hour}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=12})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=hour}))) (operator{op} (Sub)) (expr{right} (Num (int{n}{val=12})))))))
(root (Return (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=hour})))))
(root (FunctionDef (str{name}{val=G}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=hour})))))
(root (FunctionDef (str{name}{val=h}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=g})))))))))
(root (FunctionDef (str{name}{val=H}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=G})))))))))
(root (FunctionDef (str{name}{val=i}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=minute})))))))
(root (FunctionDef (str{name}{val=O}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=timezone}))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=seconds})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=Z})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=sign})))) (expr{value} (IfExp (expr{test} (Compare (expr{left} (Name (str{id}{val=seconds}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (expr{body} (Str (str{s}{val=_STR:0_}))) (expr{orelse} (Str (str{s}{val=_STR:1_})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=seconds})))) (expr{value} (Call (expr{func} (Name (str{id}{val=abs}))) (expr*{args} (expr (Name (str{id}{val=seconds}))))))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=sign}))) (expr (BinOp (expr{left} (Name (str{id}{val=seconds}))) (operator{op} (FloorDiv)) (expr{right} (Num (int{n}{val=3600}))))) (expr (BinOp (expr{left} (BinOp (expr{left} (Name (str{id}{val=seconds}))) (operator{op} (FloorDiv)) (expr{right} (Num (int{n}{val=60}))))) (operator{op} (Mod)) (expr{right} (Num (int{n}{val=60}))))))))))))
(root (FunctionDef (str{name}{val=P}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=minute}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (expr (Compare (expr{left} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=hour}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=0}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=minute}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (expr (Compare (expr{left} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=hour}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=12}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=%s %s}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=f}))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=a}))))))))))))
(root (FunctionDef (str{name}{val=s}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=second})))))))
(root (FunctionDef (str{name}{val=T}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=timezone}))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=name})))) (expr{value} (IfExp (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=timezone}))) (expr{body} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=timezone}))) (str{attr}{val=tzname}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data})))))) (expr{orelse} (Name (str{id}{val=None})))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=name}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=name})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=format}))) (expr*{args} (expr (Str (str{s}{val=O}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))) (expr*{args} (expr (Name (str{id}{val=name}))))))))
(root (FunctionDef (str{name}{val=u}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=microsecond})))))))
(root (FunctionDef (str{name}{val=Z}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=timezone}))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=offset})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=timezone}))) (str{attr}{val=utcoffset}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))))))))
(root (Return (expr{value} (BinOp (expr{left} (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=offset}))) (str{attr}{val=days}))) (operator{op} (Mult)) (expr{right} (Num (int{n}{val=86400}))))) (operator{op} (Add)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=offset}))) (str{attr}{val=seconds})))))))
(root (ClassDef (str{name}{val=DateFormat}) (expr*{bases} (expr (Name (str{id}{val=TimeFormat})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=year_days})))) (expr{value} (List (expr*{elts} (expr (Name (str{id}{val=None}))) (expr (Num (int{n}{val=0}))) (expr (Num (int{n}{val=31}))) (expr (Num (int{n}{val=59}))) (expr (Num (int{n}{val=90}))) (expr (Num (int{n}{val=120}))) (expr (Num (int{n}{val=151}))) (expr (Num (int{n}{val=181}))) (expr (Num (int{n}{val=212}))) (expr (Num (int{n}{val=243}))) (expr (Num (int{n}{val=273}))) (expr (Num (int{n}{val=304}))) (expr (Num (int{n}{val=334}))))))))
(root (FunctionDef (str{name}{val=b}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Subscript (expr{value} (Name (str{id}{val=MONTHS_3}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=month})))))))))
(root (FunctionDef (str{name}{val=c}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=isoformat})))))))
(root (FunctionDef (str{name}{val=d}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=day})))))))
(root (FunctionDef (str{name}{val=D}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Subscript (expr{value} (Name (str{id}{val=WEEKDAYS_ABBR}))) (slice{slice} (Index (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=weekday})))))))))))
(root (FunctionDef (str{name}{val=E}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Subscript (expr{value} (Name (str{id}{val=MONTHS_ALT}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=month})))))))))
(root (FunctionDef (str{name}{val=F}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Subscript (expr{value} (Name (str{id}{val=MONTHS}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=month})))))))))
(root (FunctionDef (str{name}{val=I}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=timezone}))) (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=timezone}))) (str{attr}{val=dst}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (FunctionDef (str{name}{val=j}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=day})))))
(root (FunctionDef (str{name}{val=l}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Subscript (expr{value} (Name (str{id}{val=WEEKDAYS}))) (slice{slice} (Index (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=weekday})))))))))))
(root (FunctionDef (str{name}{val=L}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=calendar}))) (str{attr}{val=isleap}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=year}))))))))
(root (FunctionDef (str{name}{val=m}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=month})))))))
(root (FunctionDef (str{name}{val=M}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=MONTHS_3}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=month}))))))) (str{attr}{val=title})))))))
(root (FunctionDef (str{name}{val=n}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=month})))))
(root (FunctionDef (str{name}{val=N}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Subscript (expr{value} (Name (str{id}{val=MONTHS_AP}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=month})))))))))
(root (FunctionDef (str{name}{val=o}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=isocalendar}))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))
(root (FunctionDef (str{name}{val=r}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=format}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=S}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=day}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Tuple (expr*{elts} (expr (Num (int{n}{val=11}))) (expr (Num (int{n}{val=12}))) (expr (Num (int{n}{val=13}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=last})))) (expr{value} (BinOp (expr{left} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=day}))) (operator{op} (Mod)) (expr{right} (Num (int{n}{val=10})))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=last}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=last}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=2})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=last}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=3})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Return (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (FunctionDef (str{name}{val=t}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=%02d}))) (operator{op} (Mod)) (expr{right} (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=calendar}))) (str{attr}{val=monthrange}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=year}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=month})))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1})))))))))))
(root (FunctionDef (str{name}{val=U}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (expr (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=datetime})))))) (expr (Call (expr{func} (Name (str{id}{val=is_aware}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=calendar}))) (str{attr}{val=timegm}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=utctimetuple})))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=time}))) (str{attr}{val=mktime}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=timetuple})))))))))))))
(root (FunctionDef (str{name}{val=w}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (BinOp (expr{left} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=weekday}))))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=1}))))) (operator{op} (Mod)) (expr{right} (Num (int{n}{val=7})))))))
(root (FunctionDef (str{name}{val=W}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=week_number})))) (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=jan1_weekday})))) (expr{value} (BinOp (expr{left} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=replace}))) (keyword*{keywords} (keyword (str{arg}{val=month}) (expr{value} (Num (int{n}{val=1})))) (keyword (str{arg}{val=day}) (expr{value} (Num (int{n}{val=1}))))))) (str{attr}{val=weekday}))))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=1})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=weekday})))) (expr{value} (BinOp (expr{left} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=weekday}))))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=1})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=day_of_year})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=z})))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=day_of_year}))) (cmpop*{ops} (cmpop (LtE))) (expr*{comparators} (expr (BinOp (expr{left} (Num (int{n}{val=8}))) (operator{op} (Sub)) (expr{right} (Name (str{id}{val=jan1_weekday})))))))) (expr (Compare (expr{left} (Name (str{id}{val=jan1_weekday}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=4}))))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=jan1_weekday}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=5})))))) (expr (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=jan1_weekday}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=6})))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=calendar}))) (str{attr}{val=isleap}))) (expr*{args} (expr (BinOp (expr{left} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=year}))) (operator{op} (Sub)) (expr{right} (Num (int{n}{val=1})))))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=week_number})))) (expr{value} (Num (int{n}{val=53})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=week_number})))) (expr{value} (Num (int{n}{val=52})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=calendar}))) (str{attr}{val=isleap}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=year})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=i})))) (expr{value} (Num (int{n}{val=366})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=i})))) (expr{value} (Num (int{n}{val=365})))))
(root (If (expr{test} (Compare (expr{left} (BinOp (expr{left} (Name (str{id}{val=i}))) (operator{op} (Sub)) (expr{right} (Name (str{id}{val=day_of_year}))))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (BinOp (expr{left} (Num (int{n}{val=4}))) (operator{op} (Sub)) (expr{right} (Name (str{id}{val=weekday})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=week_number})))) (expr{value} (Num (int{n}{val=1})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=j})))) (expr{value} (BinOp (expr{left} (BinOp (expr{left} (Name (str{id}{val=day_of_year}))) (operator{op} (Add)) (expr{right} (BinOp (expr{left} (Num (int{n}{val=7}))) (operator{op} (Sub)) (expr{right} (Name (str{id}{val=weekday}))))))) (operator{op} (Add)) (expr{right} (BinOp (expr{left} (Name (str{id}{val=jan1_weekday}))) (operator{op} (Sub)) (expr{right} (Num (int{n}{val=1})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=week_number})))) (expr{value} (BinOp (expr{left} (Name (str{id}{val=j}))) (operator{op} (FloorDiv)) (expr{right} (Num (int{n}{val=7})))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=jan1_weekday}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=4})))))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=week_number}))) (operator{op} (Sub)) (expr{value} (Num (int{n}{val=1})))))
(root (Return (expr{value} (Name (str{id}{val=week_number})))))
(root (FunctionDef (str{name}{val=y}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=year})))))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=2})))))))))
(root (FunctionDef (str{name}{val=Y}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=year})))))
(root (FunctionDef (str{name}{val=z}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=doy})))) (expr{value} (BinOp (expr{left} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=year_days}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=month}))))))) (operator{op} (Add)) (expr{right} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=day})))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=L}))))) (expr (Compare (expr{left} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=data}))) (str{attr}{val=month}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=2}))))))))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=doy}))) (operator{op} (Add)) (expr{value} (Num (int{n}{val=1})))))
(root (Return (expr{value} (Name (str{id}{val=doy})))))
(root (FunctionDef (str{name}{val=format}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=format_string})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=df})))) (expr{value} (Call (expr{func} (Name (str{id}{val=DateFormat}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=df}))) (str{attr}{val=format}))) (expr*{args} (expr (Name (str{id}{val=format_string}))))))))
(root (FunctionDef (str{name}{val=time_format}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=format_string})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=tf})))) (expr{value} (Call (expr{func} (Name (str{id}{val=TimeFormat}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=tf}))) (str{attr}{val=format}))) (expr*{args} (expr (Name (str{id}{val=format_string}))))))))
(root (Import (alias*{names} (alias (str{name}{val=datetime})))))
(root (Import (alias*{names} (alias (str{name}{val=re})))))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.timezone}) (alias*{names} (alias (str{name}{val=utc})) (alias (str{name}{val=get_fixed_timezone}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=date_re})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=time_re})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=(?P<hour>\d{1,2}):(?P<minute>\d{1,2})(?::(?P<second>\d{1,2})(?:\.(?P<microsecond>\d{1,6})\d{0,6})?)?}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=datetime_re})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=(?P<year>\d{4})-(?P<month>\d{1,2})-(?P<day>\d{1,2})[T ](?P<hour>\d{1,2}):(?P<minute>\d{1,2})(?::(?P<second>\d{1,2})(?:\.(?P<microsecond>\d{1,6})\d{0,6})?)?(?P<tzinfo>Z|[+-]\d{2}(?::?\d{2})?)?$}))))))))
(root (FunctionDef (str{name}{val=parse_date}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=match})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=date_re}))) (str{attr}{val=match}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (If (expr{test} (Name (str{id}{val=match}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=kw})))) (expr{value} (Call (expr{func} (Name (str{id}{val=dict}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=v}))))))))) (comprehension*{generators} (comprehension (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Name (str{id}{val=v})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=iteritems}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=match}))) (str{attr}{val=groupdict})))))))))))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=date}))) (expr{kwargs} (Name (str{id}{val=kw})))))))
(root (FunctionDef (str{name}{val=parse_time}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=match})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=time_re}))) (str{attr}{val=match}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (If (expr{test} (Name (str{id}{val=match}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=kw})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=match}))) (str{attr}{val=groupdict})))))))
(root (If (expr{test} (Subscript (expr{value} (Name (str{id}{val=kw}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=kw}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=kw}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (str{attr}{val=ljust}))) (expr*{args} (expr (Num (int{n}{val=6}))) (expr (Str (str{s}{val=_STR:1_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=kw})))) (expr{value} (Call (expr{func} (Name (str{id}{val=dict}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=v}))))))))) (comprehension*{generators} (comprehension (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Name (str{id}{val=v})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=iteritems}))) (expr*{args} (expr (Name (str{id}{val=kw})))))) (expr*{ifs} (expr (Compare (expr{left} (Name (str{id}{val=v}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None}))))))))))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=time}))) (expr{kwargs} (Name (str{id}{val=kw})))))))
(root (FunctionDef (str{name}{val=parse_datetime}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=match})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=datetime_re}))) (str{attr}{val=match}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (If (expr{test} (Name (str{id}{val=match}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=kw})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=match}))) (str{attr}{val=groupdict})))))))
(root (If (expr{test} (Subscript (expr{value} (Name (str{id}{val=kw}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=kw}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=kw}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (str{attr}{val=ljust}))) (expr*{args} (expr (Num (int{n}{val=6}))) (expr (Str (str{s}{val=_STR:1_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=tzinfo})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=kw}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=tzinfo}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=tzinfo})))) (expr{value} (Name (str{id}{val=utc})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Name (str{id}{val=tzinfo}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=offset_mins})))) (expr{value} (IfExp (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=tzinfo})))))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=3})))))) (expr{body} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=tzinfo}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=-2})))))))))) (expr{orelse} (Num (int{n}{val=0})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=offset})))) (expr{value} (BinOp (expr{left} (BinOp (expr{left} (Num (int{n}{val=60}))) (operator{op} (Mult)) (expr{right} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=tzinfo}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=1}))) (expr{upper} (Num (int{n}{val=3})))))))))))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=offset_mins})))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=tzinfo}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=offset})))) (expr{value} (UnaryOp (unaryop{op} (USub)) (expr{operand} (Name (str{id}{val=offset})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=tzinfo})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_fixed_timezone}))) (expr*{args} (expr (Name (str{id}{val=offset}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=kw})))) (expr{value} (Call (expr{func} (Name (str{id}{val=dict}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=v}))))))))) (comprehension*{generators} (comprehension (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Name (str{id}{val=v})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=iteritems}))) (expr*{args} (expr (Name (str{id}{val=kw})))))) (expr*{ifs} (expr (Compare (expr{left} (Name (str{id}{val=v}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None}))))))))))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=kw}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Name (str{id}{val=tzinfo})))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=datetime}))) (expr{kwargs} (Name (str{id}{val=kw})))))))
(root (ImportFrom (str{module}{val=django.utils.translation}) (alias*{names} (alias (str{name}{val=ugettext_lazy}) (str{asname}{val=_})) (alias (str{name}{val=pgettext_lazy}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=WEEKDAYS})))) (expr{value} (Dict (expr*{keys} (expr (Num (int{n}{val=0}))) (expr (Num (int{n}{val=1}))) (expr (Num (int{n}{val=2}))) (expr (Num (int{n}{val=3}))) (expr (Num (int{n}{val=4}))) (expr (Num (int{n}{val=5}))) (expr (Num (int{n}{val=6})))) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=Tuesday})))))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=Wednesday})))))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=Thursday})))))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=Friday})))))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=Saturday})))))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=Sunday})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=WEEKDAYS_ABBR})))) (expr{value} (Dict (expr*{keys} (expr (Num (int{n}{val=0}))) (expr (Num (int{n}{val=1}))) (expr (Num (int{n}{val=2}))) (expr (Num (int{n}{val=3}))) (expr (Num (int{n}{val=4}))) (expr (Num (int{n}{val=5}))) (expr (Num (int{n}{val=6})))) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=_STR:6_})))))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=Tue})))))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=Wed})))))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=Thu})))))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=Fri})))))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=Sat})))))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=Sun})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=WEEKDAYS_REV})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:6_}))) (expr (Str (str{s}{val=_STR:7_}))) (expr (Str (str{s}{val=_STR:8_}))) (expr (Str (str{s}{val=_STR:9_}))) (expr (Str (str{s}{val=_STR:10_}))) (expr (Str (str{s}{val=_STR:11_}))) (expr (Str (str{s}{val=_STR:12_})))) (expr*{values} (expr (Num (int{n}{val=0}))) (expr (Num (int{n}{val=1}))) (expr (Num (int{n}{val=2}))) (expr (Num (int{n}{val=3}))) (expr (Num (int{n}{val=4}))) (expr (Num (int{n}{val=5}))) (expr (Num (int{n}{val=6}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=MONTHS})))) (expr{value} (Dict (expr*{keys} (expr (Num (int{n}{val=1}))) (expr (Num (int{n}{val=2}))) (expr (Num (int{n}{val=3}))) (expr (Num (int{n}{val=4}))) (expr (Num (int{n}{val=5}))) (expr (Num (int{n}{val=6}))) (expr (Num (int{n}{val=7}))) (expr (Num (int{n}{val=8}))) (expr (Num (int{n}{val=9}))) (expr (Num (int{n}{val=10}))) (expr (Num (int{n}{val=11}))) (expr (Num (int{n}{val=12})))) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=February})))))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=March})))))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=April})))))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=May})))))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=June})))))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=July})))))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=August})))))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=September})))))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=October})))))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=November})))))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=December})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=MONTHS_3})))) (expr{value} (Dict (expr*{keys} (expr (Num (int{n}{val=1}))) (expr (Num (int{n}{val=2}))) (expr (Num (int{n}{val=3}))) (expr (Num (int{n}{val=4}))) (expr (Num (int{n}{val=5}))) (expr (Num (int{n}{val=6}))) (expr (Num (int{n}{val=7}))) (expr (Num (int{n}{val=8}))) (expr (Num (int{n}{val=9}))) (expr (Num (int{n}{val=10}))) (expr (Num (int{n}{val=11}))) (expr (Num (int{n}{val=12})))) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=_STR:11_})))))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=feb})))))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=mar})))))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=apr})))))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=may})))))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=jun})))))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=jul})))))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=aug})))))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=sep})))))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=oct})))))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=nov})))))) (expr (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=dec})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=MONTHS_3_REV})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:11_}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=_STR:3_}))) (expr (Str (str{s}{val=_STR:4_}))) (expr (Str (str{s}{val=_STR:5_}))) (expr (Str (str{s}{val=_STR:6_}))) (expr (Str (str{s}{val=_STR:7_}))) (expr (Str (str{s}{val=_STR:8_}))) (expr (Str (str{s}{val=_STR:9_}))) (expr (Str (str{s}{val=_STR:10_})))) (expr*{values} (expr (Num (int{n}{val=1}))) (expr (Num (int{n}{val=2}))) (expr (Num (int{n}{val=3}))) (expr (Num (int{n}{val=4}))) (expr (Num (int{n}{val=5}))) (expr (Num (int{n}{val=6}))) (expr (Num (int{n}{val=7}))) (expr (Num (int{n}{val=8}))) (expr (Num (int{n}{val=9}))) (expr (Num (int{n}{val=10}))) (expr (Num (int{n}{val=11}))) (expr (Num (int{n}{val=12}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=MONTHS_AP})))) (expr{value} (Dict (expr*{keys} (expr (Num (int{n}{val=1}))) (expr (Num (int{n}{val=2}))) (expr (Num (int{n}{val=3}))) (expr (Num (int{n}{val=4}))) (expr (Num (int{n}{val=5}))) (expr (Num (int{n}{val=6}))) (expr (Num (int{n}{val=7}))) (expr (Num (int{n}{val=8}))) (expr (Num (int{n}{val=9}))) (expr (Num (int{n}{val=10}))) (expr (Num (int{n}{val=11}))) (expr (Num (int{n}{val=12})))) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=pgettext_lazy}))) (expr*{args} (expr (Str (str{s}{val=_STR:6_}))) (expr (Str (str{s}{val=_STR:7_})))))) (expr (Call (expr{func} (Name (str{id}{val=pgettext_lazy}))) (expr*{args} (expr (Str (str{s}{val=_STR:6_}))) (expr (Str (str{s}{val=Feb.})))))) (expr (Call (expr{func} (Name (str{id}{val=pgettext_lazy}))) (expr*{args} (expr (Str (str{s}{val=_STR:6_}))) (expr (Str (str{s}{val=March})))))) (expr (Call (expr{func} (Name (str{id}{val=pgettext_lazy}))) (expr*{args} (expr (Str (str{s}{val=_STR:6_}))) (expr (Str (str{s}{val=April})))))) (expr (Call (expr{func} (Name (str{id}{val=pgettext_lazy}))) (expr*{args} (expr (Str (str{s}{val=_STR:6_}))) (expr (Str (str{s}{val=May})))))) (expr (Call (expr{func} (Name (str{id}{val=pgettext_lazy}))) (expr*{args} (expr (Str (str{s}{val=_STR:6_}))) (expr (Str (str{s}{val=June})))))) (expr (Call (expr{func} (Name (str{id}{val=pgettext_lazy}))) (expr*{args} (expr (Str (str{s}{val=_STR:6_}))) (expr (Str (str{s}{val=July})))))) (expr (Call (expr{func} (Name (str{id}{val=pgettext_lazy}))) (expr*{args} (expr (Str (str{s}{val=_STR:6_}))) (expr (Str (str{s}{val=Aug.})))))) (expr (Call (expr{func} (Name (str{id}{val=pgettext_lazy}))) (expr*{args} (expr (Str (str{s}{val=_STR:6_}))) (expr (Str (str{s}{val=Sept.})))))) (expr (Call (expr{func} (Name (str{id}{val=pgettext_lazy}))) (expr*{args} (expr (Str (str{s}{val=_STR:6_}))) (expr (Str (str{s}{val=Oct.})))))) (expr (Call (expr{func} (Name (str{id}{val=pgettext_lazy}))) (expr*{args} (expr (Str (str{s}{val=_STR:6_}))) (expr (Str (str{s}{val=Nov.})))))) (expr (Call (expr{func} (Name (str{id}{val=pgettext_lazy}))) (expr*{args} (expr (Str (str{s}{val=_STR:6_}))) (expr (Str (str{s}{val=Dec.})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=MONTHS_ALT})))) (expr{value} (Dict (expr*{keys} (expr (Num (int{n}{val=1}))) (expr (Num (int{n}{val=2}))) (expr (Num (int{n}{val=3}))) (expr (Num (int{n}{val=4}))) (expr (Num (int{n}{val=5}))) (expr (Num (int{n}{val=6}))) (expr (Num (int{n}{val=7}))) (expr (Num (int{n}{val=8}))) (expr (Num (int{n}{val=9}))) (expr (Num (int{n}{val=10}))) (expr (Num (int{n}{val=11}))) (expr (Num (int{n}{val=12})))) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=pgettext_lazy}))) (expr*{args} (expr (Str (str{s}{val=_STR:12_}))) (expr (Str (str{s}{val=_STR:13_})))))) (expr (Call (expr{func} (Name (str{id}{val=pgettext_lazy}))) (expr*{args} (expr (Str (str{s}{val=_STR:12_}))) (expr (Str (str{s}{val=February})))))) (expr (Call (expr{func} (Name (str{id}{val=pgettext_lazy}))) (expr*{args} (expr (Str (str{s}{val=_STR:12_}))) (expr (Str (str{s}{val=_STR:2_})))))) (expr (Call (expr{func} (Name (str{id}{val=pgettext_lazy}))) (expr*{args} (expr (Str (str{s}{val=_STR:12_}))) (expr (Str (str{s}{val=_STR:3_})))))) (expr (Call (expr{func} (Name (str{id}{val=pgettext_lazy}))) (expr*{args} (expr (Str (str{s}{val=_STR:12_}))) (expr (Str (str{s}{val=_STR:4_})))))) (expr (Call (expr{func} (Name (str{id}{val=pgettext_lazy}))) (expr*{args} (expr (Str (str{s}{val=_STR:12_}))) (expr (Str (str{s}{val=_STR:5_})))))) (expr (Call (expr{func} (Name (str{id}{val=pgettext_lazy}))) (expr*{args} (expr (Str (str{s}{val=_STR:12_}))) (expr (Str (str{s}{val=_STR:6_})))))) (expr (Call (expr{func} (Name (str{id}{val=pgettext_lazy}))) (expr*{args} (expr (Str (str{s}{val=_STR:12_}))) (expr (Str (str{s}{val=August})))))) (expr (Call (expr{func} (Name (str{id}{val=pgettext_lazy}))) (expr*{args} (expr (Str (str{s}{val=_STR:12_}))) (expr (Str (str{s}{val=September})))))) (expr (Call (expr{func} (Name (str{id}{val=pgettext_lazy}))) (expr*{args} (expr (Str (str{s}{val=_STR:12_}))) (expr (Str (str{s}{val=October})))))) (expr (Call (expr{func} (Name (str{id}{val=pgettext_lazy}))) (expr*{args} (expr (Str (str{s}{val=_STR:12_}))) (expr (Str (str{s}{val=November})))))) (expr (Call (expr{func} (Name (str{id}{val=pgettext_lazy}))) (expr*{args} (expr (Str (str{s}{val=_STR:12_}))) (expr (Str (str{s}{val=December})))))))))))
(root (ImportFrom (str{module}{val=datetime}) (alias*{names} (alias (str{name}{val=date}) (str{asname}{val=real_date})) (alias (str{name}{val=datetime}) (str{asname}{val=real_datetime}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=re})))))
(root (Import (alias*{names} (alias (str{name}{val=time})))))
(root (ClassDef (str{name}{val=date}) (expr*{bases} (expr (Name (str{id}{val=real_date})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=strftime}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=fmt})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=strftime}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=fmt}))))))))
(root (ClassDef (str{name}{val=datetime}) (expr*{bases} (expr (Name (str{id}{val=real_datetime})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=strftime}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=fmt})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=strftime}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=fmt}))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=classmethod}))))))
(root (FunctionDef (str{name}{val=combine}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=cls}))) (expr (Name (str{id}{val=date}))) (expr (Name (str{id}{val=time})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=cls}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=date}))) (str{attr}{val=year}))) (expr (Attribute (expr{value} (Name (str{id}{val=date}))) (str{attr}{val=month}))) (expr (Attribute (expr{value} (Name (str{id}{val=date}))) (str{attr}{val=day}))) (expr (Attribute (expr{value} (Name (str{id}{val=time}))) (str{attr}{val=hour}))) (expr (Attribute (expr{value} (Name (str{id}{val=time}))) (str{attr}{val=minute}))) (expr (Attribute (expr{value} (Name (str{id}{val=time}))) (str{attr}{val=second}))) (expr (Attribute (expr{value} (Name (str{id}{val=time}))) (str{attr}{val=microsecond}))) (expr (Attribute (expr{value} (Name (str{id}{val=time}))) (str{attr}{val=tzinfo}))))))))
(root (FunctionDef (str{name}{val=date}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=date}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=year}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=month}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=day}))))))))
(root (FunctionDef (str{name}{val=new_date}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=d})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=date}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=d}))) (str{attr}{val=year}))) (expr (Attribute (expr{value} (Name (str{id}{val=d}))) (str{attr}{val=month}))) (expr (Attribute (expr{value} (Name (str{id}{val=d}))) (str{attr}{val=day}))))))))
(root (FunctionDef (str{name}{val=new_datetime}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=d})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=kw})))) (expr{value} (List (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=d}))) (str{attr}{val=year}))) (expr (Attribute (expr{value} (Name (str{id}{val=d}))) (str{attr}{val=month}))) (expr (Attribute (expr{value} (Name (str{id}{val=d}))) (str{attr}{val=day}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=d}))) (expr (Name (str{id}{val=real_datetime})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=kw}))) (str{attr}{val=extend}))) (expr*{args} (expr (List (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=d}))) (str{attr}{val=hour}))) (expr (Attribute (expr{value} (Name (str{id}{val=d}))) (str{attr}{val=minute}))) (expr (Attribute (expr{value} (Name (str{id}{val=d}))) (str{attr}{val=second}))) (expr (Attribute (expr{value} (Name (str{id}{val=d}))) (str{attr}{val=microsecond}))) (expr (Attribute (expr{value} (Name (str{id}{val=d}))) (str{attr}{val=tzinfo})))))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=datetime}))) (expr{starargs} (Name (str{id}{val=kw})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_illegal_formatting})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=_findall}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=text}))) (expr (Name (str{id}{val=substr})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=sites})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=i})))) (expr{value} (Num (int{n}{val=0})))))
(root (While (expr{test} (Num (int{n}{val=1}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=j})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=text}))) (str{attr}{val=find}))) (expr*{args} (expr (Name (str{id}{val=substr}))) (expr (Name (str{id}{val=i}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=j}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=-1})))))) (stmt*{body} (stmt (Pass)))))
(root (Break))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sites}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=j}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=i})))) (expr{value} (BinOp (expr{left} (Name (str{id}{val=j}))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=1})))))))
(root (Return (expr{value} (Name (str{id}{val=sites})))))
(root (FunctionDef (str{name}{val=strftime}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=dt}))) (expr (Name (str{id}{val=fmt})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=dt}))) (str{attr}{val=year}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Num (int{n}{val=1900})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=type}))) (expr*{args} (expr (Name (str{id}{val=dt})))))) (expr (Name (str{id}{val=dt})))))) (str{attr}{val=strftime}))) (expr*{args} (expr (Name (str{id}{val=fmt}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=illegal_formatting})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=_illegal_formatting}))) (str{attr}{val=search}))) (expr*{args} (expr (Name (str{id}{val=fmt}))))))))
(root (If (expr{test} (Name (str{id}{val=illegal_formatting}))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TypeError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=strftime of dates before 1900 does not handle}))) (operator{op} (Add)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=illegal_formatting}))) (str{attr}{val=group}))) (expr*{args} (expr (Num (int{n}{val=0})))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=year})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=dt}))) (str{attr}{val=year})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=delta})))) (expr{value} (BinOp (expr{left} (Num (int{n}{val=2000}))) (operator{op} (Sub)) (expr{right} (Name (str{id}{val=year})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=off})))) (expr{value} (BinOp (expr{left} (Num (int{n}{val=6}))) (operator{op} (Mult)) (expr{right} (BinOp (expr{left} (BinOp (expr{left} (Name (str{id}{val=delta}))) (operator{op} (FloorDiv)) (expr{right} (Num (int{n}{val=100}))))) (operator{op} (Add)) (expr{right} (BinOp (expr{left} (Name (str{id}{val=delta}))) (operator{op} (FloorDiv)) (expr{right} (Num (int{n}{val=400})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=year})))) (expr{value} (BinOp (expr{left} (Name (str{id}{val=year}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=off})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=year})))) (expr{value} (BinOp (expr{left} (Name (str{id}{val=year}))) (operator{op} (Add)) (expr{right} (BinOp (expr{left} (BinOp (expr{left} (BinOp (expr{left} (Num (int{n}{val=2000}))) (operator{op} (Sub)) (expr{right} (Name (str{id}{val=year}))))) (operator{op} (FloorDiv)) (expr{right} (Num (int{n}{val=28}))))) (operator{op} (Mult)) (expr{right} (Num (int{n}{val=28})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=timetuple})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=dt}))) (str{attr}{val=timetuple})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=s1})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=time}))) (str{attr}{val=strftime}))) (expr*{args} (expr (Name (str{id}{val=fmt}))) (expr (BinOp (expr{left} (Tuple (expr*{elts} (expr (Name (str{id}{val=year})))))) (operator{op} (Add)) (expr{right} (Subscript (expr{value} (Name (str{id}{val=timetuple}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=1}))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=sites1})))) (expr{value} (Call (expr{func} (Name (str{id}{val=_findall}))) (expr*{args} (expr (Name (str{id}{val=s1}))) (expr (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Name (str{id}{val=year})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=s2})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=time}))) (str{attr}{val=strftime}))) (expr*{args} (expr (Name (str{id}{val=fmt}))) (expr (BinOp (expr{left} (Tuple (expr*{elts} (expr (BinOp (expr{left} (Name (str{id}{val=year}))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=28})))))))) (operator{op} (Add)) (expr{right} (Subscript (expr{value} (Name (str{id}{val=timetuple}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=1}))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=sites2})))) (expr{value} (Call (expr{func} (Name (str{id}{val=_findall}))) (expr*{args} (expr (Name (str{id}{val=s2}))) (expr (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (BinOp (expr{left} (Name (str{id}{val=year}))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=28})))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=sites})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=site}))) (expr{iter} (Name (str{id}{val=sites1}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=site}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=sites2})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sites}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=site}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=s})))) (expr{value} (Name (str{id}{val=s1})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=syear})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=dt}))) (str{attr}{val=year}))))))))))
(root (For (expr{target} (Name (str{id}{val=site}))) (expr{iter} (Name (str{id}{val=sites}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=s})))) (expr{value} (BinOp (expr{left} (BinOp (expr{left} (Subscript (expr{value} (Name (str{id}{val=s}))) (slice{slice} (Slice (expr{upper} (Name (str{id}{val=site}))))))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=syear}))))) (operator{op} (Add)) (expr{right} (Subscript (expr{value} (Name (str{id}{val=s}))) (slice{slice} (Slice (expr{lower} (BinOp (expr{left} (Name (str{id}{val=site}))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=4})))))))))))))
(root (Return (expr{value} (Name (str{id}{val=s})))))
(root (FunctionDef (str{name}{val=deconstructible}) (arguments{args} (arguments (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=path})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=kwargs}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))))))))
(root (FunctionDef (str{name}{val=decorator}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=klass})))))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__new__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=cls})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=obj})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=klass}))) (expr (Name (str{id}{val=cls})))))) (str{attr}{val=__new__}))) (expr*{args} (expr (Name (str{id}{val=cls}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=obj}))) (str{attr}{val=_constructor_args})))) (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=args}))) (expr (Name (str{id}{val=kwargs}))))))))
(root (Return (expr{value} (Name (str{id}{val=obj})))))
(root (FunctionDef (str{name}{val=deconstruct}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=obj})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=path}))) (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=obj}))) (str{attr}{val=__class__}))) (str{attr}{val=__module__}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=obj}))) (str{attr}{val=__class__}))) (str{attr}{val=__name__}))))))))))) (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=obj}))) (str{attr}{val=_constructor_args}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=obj}))) (str{attr}{val=_constructor_args}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=klass}))) (str{attr}{val=__new__})))) (expr{value} (Call (expr{func} (Name (str{id}{val=staticmethod}))) (expr*{args} (expr (Name (str{id}{val=__new__}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=klass}))) (str{attr}{val=deconstruct})))) (expr{value} (Name (str{id}{val=deconstruct})))))
(root (Return (expr{value} (Name (str{id}{val=klass})))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=args}))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=decorator})))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=decorator}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (ImportFrom (str{module}{val=functools}) (alias*{names} (alias (str{name}{val=wraps})) (alias (str{name}{val=update_wrapper})) (alias (str{name}{val=WRAPPER_ASSIGNMENTS}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=classonlymethod}) (expr*{bases} (expr (Name (str{id}{val=classmethod})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__get__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=instance}))) (expr (Name (str{id}{val=owner})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=instance}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=AttributeError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=classonlymethod}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__get__}))) (expr*{args} (expr (Name (str{id}{val=instance}))) (expr (Name (str{id}{val=owner}))))))))
(root (FunctionDef (str{name}{val=method_decorator}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=decorator})))))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=_dec}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=func})))))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=_wrapper}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=decorator}))))))
(root (FunctionDef (str{name}{val=bound_func}) (arguments{args} (arguments (str{vararg}{val=args2}) (str{kwarg}{val=kwargs2}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=func}))) (str{attr}{val=__get__}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Call (expr{func} (Name (str{id}{val=type}))) (expr*{args} (expr (Name (str{id}{val=self}))))))))) (expr{starargs} (Name (str{id}{val=args2}))) (expr{kwargs} (Name (str{id}{val=kwargs2})))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=bound_func}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=decorator}))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=update_wrapper}))) (expr*{args} (expr (Name (str{id}{val=_wrapper}))) (expr (Name (str{id}{val=dummy}))))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=update_wrapper}))) (expr*{args} (expr (Name (str{id}{val=_wrapper}))) (expr (Name (str{id}{val=func}))))))))
(root (Return (expr{value} (Name (str{id}{val=_wrapper})))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=update_wrapper}))) (expr*{args} (expr (Name (str{id}{val=_dec}))) (expr (Name (str{id}{val=decorator})))) (keyword*{keywords} (keyword (str{arg}{val=assigned}) (expr{value} (Call (expr{func} (Name (str{id}{val=available_attrs}))) (expr*{args} (expr (Name (str{id}{val=decorator}))))))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=decorator}))) (expr (Str (str{s}{val=__name__})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=_dec}))) (str{attr}{val=__name__})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=decorator}))) (str{attr}{val=__name__})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=_dec}))) (str{attr}{val=__name__})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=decorator}))) (str{attr}{val=__class__}))) (str{attr}{val=__name__})))))))
(root (Return (expr{value} (Name (str{id}{val=_dec})))))
(root (FunctionDef (str{name}{val=decorator_from_middleware_with_args}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=middleware_class})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=make_middleware_decorator}))) (expr*{args} (expr (Name (str{id}{val=middleware_class}))))))))
(root (FunctionDef (str{name}{val=decorator_from_middleware}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=middleware_class})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Call (expr{func} (Name (str{id}{val=make_middleware_decorator}))) (expr*{args} (expr (Name (str{id}{val=middleware_class}))))))))))
(root (FunctionDef (str{name}{val=available_attrs}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=fn})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=PY3}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=WRAPPER_ASSIGNMENTS})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=tuple}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Name (str{id}{val=a}))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=a}))) (expr{iter} (Name (str{id}{val=WRAPPER_ASSIGNMENTS}))) (expr*{ifs} (expr (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=fn}))) (expr (Name (str{id}{val=a}))))))))))))))))
(root (FunctionDef (str{name}{val=make_middleware_decorator}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=middleware_class})))))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=_make_decorator}) (arguments{args} (arguments (str{vararg}{val=m_args}) (str{kwarg}{val=m_kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=middleware})))) (expr{value} (Call (expr{func} (Name (str{id}{val=middleware_class}))) (expr{starargs} (Name (str{id}{val=m_args}))) (expr{kwargs} (Name (str{id}{val=m_kwargs})))))))
(root (FunctionDef (str{name}{val=_decorator}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=view_func})))))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Name (str{id}{val=wraps}))) (expr*{args} (expr (Name (str{id}{val=view_func})))) (keyword*{keywords} (keyword (str{arg}{val=assigned}) (expr{value} (Call (expr{func} (Name (str{id}{val=available_attrs}))) (expr*{args} (expr (Name (str{id}{val=view_func})))))))))))))
(root (FunctionDef (str{name}{val=_wrapped_view}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=request})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=middleware}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=middleware}))) (str{attr}{val=process_request}))) (expr*{args} (expr (Name (str{id}{val=request}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=result}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=result})))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=middleware}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=middleware}))) (str{attr}{val=process_view}))) (expr*{args} (expr (Name (str{id}{val=request}))) (expr (Name (str{id}{val=view_func}))) (expr (Name (str{id}{val=args}))) (expr (Name (str{id}{val=kwargs}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=result}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=result})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=response})))) (expr{value} (Call (expr{func} (Name (str{id}{val=view_func}))) (expr*{args} (expr (Name (str{id}{val=request})))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=Exception}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=middleware}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=middleware}))) (str{attr}{val=process_exception}))) (expr*{args} (expr (Name (str{id}{val=request}))) (expr (Name (str{id}{val=e}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=result}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=result})))))
(root (Raise (epsilon)))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=response}))) (expr (Str (str{s}{val=_STR:0_})))))) (expr (Call (expr{func} (Name (str{id}{val=callable}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=response}))) (str{attr}{val=render}))))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=middleware}))) (expr (Str (str{s}{val=process_template_response})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=response})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=middleware}))) (str{attr}{val=process_template_response}))) (expr*{args} (expr (Name (str{id}{val=request}))) (expr (Name (str{id}{val=response}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=middleware}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=callback})))) (expr{value} (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=response})))))) (expr{body} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=middleware}))) (str{attr}{val=process_response}))) (expr*{args} (expr (Name (str{id}{val=request}))) (expr (Name (str{id}{val=response}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=response}))) (str{attr}{val=add_post_render_callback}))) (expr*{args} (expr (Name (str{id}{val=callback}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=middleware}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=middleware}))) (str{attr}{val=process_response}))) (expr*{args} (expr (Name (str{id}{val=request}))) (expr (Name (str{id}{val=response}))))))))
(root (Return (expr{value} (Name (str{id}{val=response})))))
(root (Return (expr{value} (Name (str{id}{val=_wrapped_view})))))
(root (Return (expr{value} (Name (str{id}{val=_decorator})))))
(root (Return (expr{value} (Name (str{id}{val=_make_decorator})))))
(root (Import (alias*{names} (alias (str{name}{val=inspect})))))
(root (Import (alias*{names} (alias (str{name}{val=warnings})))))
(root (ClassDef (str{name}{val=RemovedInDjango20Warning}) (expr*{bases} (expr (Name (str{id}{val=PendingDeprecationWarning})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (ClassDef (str{name}{val=RemovedInDjango19Warning}) (expr*{bases} (expr (Name (str{id}{val=DeprecationWarning})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=RemovedInNextVersionWarning})))) (expr{value} (Name (str{id}{val=RemovedInDjango19Warning})))))
(root (ClassDef (str{name}{val=warn_about_renamed_method}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=class_name}))) (expr (Name (str{id}{val=old_method_name}))) (expr (Name (str{id}{val=new_method_name}))) (expr (Name (str{id}{val=deprecation_warning})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=class_name})))) (expr{value} (Name (str{id}{val=class_name})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=old_method_name})))) (expr{value} (Name (str{id}{val=old_method_name})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=new_method_name})))) (expr{value} (Name (str{id}{val=new_method_name})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=deprecation_warning})))) (expr{value} (Name (str{id}{val=deprecation_warning})))))
(root (FunctionDef (str{name}{val=__call__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=f})))))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=wrapped}) (arguments{args} (arguments (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=warnings}))) (str{attr}{val=warn}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=class_name}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=old_method_name}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=new_method_name})))))))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=deprecation_warning}))) (expr (Num (int{n}{val=2}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=f}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (Return (expr{value} (Name (str{id}{val=wrapped})))))
(root (ClassDef (str{name}{val=RenameMethodsBase}) (expr*{bases} (expr (Name (str{id}{val=type})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=renamed_methods})))) (expr{value} (Tuple (epsilon)))))
(root (FunctionDef (str{name}{val=__new__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=cls}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=bases}))) (expr (Name (str{id}{val=attrs})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=new_class})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=RenameMethodsBase}))) (expr (Name (str{id}{val=cls})))))) (str{attr}{val=__new__}))) (expr*{args} (expr (Name (str{id}{val=cls}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=bases}))) (expr (Name (str{id}{val=attrs}))))))))
(root (For (expr{target} (Name (str{id}{val=base}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=inspect}))) (str{attr}{val=getmro}))) (expr*{args} (expr (Name (str{id}{val=new_class})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=class_name})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=base}))) (str{attr}{val=__name__})))))
(root (For (expr{target} (Name (str{id}{val=renamed_method}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=cls}))) (str{attr}{val=renamed_methods}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=old_method_name})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=renamed_method}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=old_method})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=base}))) (str{attr}{val=__dict__}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=old_method_name}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=new_method_name})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=renamed_method}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=new_method})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=base}))) (str{attr}{val=__dict__}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=new_method_name}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=deprecation_warning})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=renamed_method}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=2})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=wrapper})))) (expr{value} (Call (expr{func} (Name (str{id}{val=warn_about_renamed_method}))) (expr*{args} (expr (Name (str{id}{val=class_name})))) (expr{starargs} (Name (str{id}{val=renamed_method})))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=new_method}))))) (expr (Name (str{id}{val=old_method})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=warnings}))) (str{attr}{val=warn}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=class_name}))) (expr (Name (str{id}{val=old_method_name}))) (expr (Name (str{id}{val=new_method_name})))))))) (expr (Name (str{id}{val=deprecation_warning}))) (expr (Num (int{n}{val=2}))))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=setattr}))) (expr*{args} (expr (Name (str{id}{val=base}))) (expr (Name (str{id}{val=new_method_name}))) (expr (Name (str{id}{val=old_method}))))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=setattr}))) (expr*{args} (expr (Name (str{id}{val=base}))) (expr (Name (str{id}{val=old_method_name}))) (expr (Call (expr{func} (Name (str{id}{val=wrapper}))) (expr*{args} (expr (Name (str{id}{val=old_method})))))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=old_method}))))) (expr (Name (str{id}{val=new_method})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=setattr}))) (expr*{args} (expr (Name (str{id}{val=base}))) (expr (Name (str{id}{val=old_method_name}))) (expr (Call (expr{func} (Name (str{id}{val=wrapper}))) (expr*{args} (expr (Name (str{id}{val=new_method})))))))))))
(root (Return (expr{value} (Name (str{id}{val=new_class})))))
(root (Import (alias*{names} (alias (str{name}{val=warnings})))))
(root (ImportFrom (str{module}{val=django.utils.deprecation}) (alias*{names} (alias (str{name}{val=RemovedInDjango19Warning}))) (int{level}{val=0})))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=warnings}))) (str{attr}{val=warn}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=RemovedInDjango19Warning})))) (keyword*{keywords} (keyword (str{arg}{val=stacklevel}) (expr{value} (Num (int{n}{val=2})))))))))
(root (Import (alias*{names} (alias (str{name}{val=logging.handlers})))))
(root (Import (alias*{names} (alias (str{name}{val=re})))))
(root (Import (alias*{names} (alias (str{name}{val=sys})))))
(root (Import (alias*{names} (alias (str{name}{val=types})))))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=IDENTIFIER})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=I}))))))))
(root (FunctionDef (str{name}{val=valid_ident}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=s})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=m})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=IDENTIFIER}))) (str{attr}{val=match}))) (expr*{args} (expr (Name (str{id}{val=s}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=m}))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=s}))))))))))
(root (Return (expr{value} (Name (str{id}{val=True})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (ImportFrom (str{module}{val=logging}) (alias*{names} (alias (str{name}{val=_checkLevel}))) (int{level}{val=0})))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ImportError}))) (stmt*{body} (stmt (Pass)))))))
(root (FunctionDef (str{name}{val=_checkLevel}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=level})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=level}))) (expr (Name (str{id}{val=int})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=rv})))) (expr{value} (Name (str{id}{val=level})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Name (str{id}{val=level})))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=level})))))) (stmt*{body} (stmt (Pass))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=level}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=logging}))) (str{attr}{val=_levelNames})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=level}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=rv})))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=logging}))) (str{attr}{val=_levelNames}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=level})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TypeError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=Level not an integer or a valid string: %r}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=level}))))))))))
(root (Return (expr{value} (Name (str{id}{val=rv})))))
(root (ClassDef (str{name}{val=ConvertingDict}) (expr*{bases} (expr (Name (str{id}{val=dict})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__getitem__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=dict}))) (str{attr}{val=__getitem__}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=configurator}))) (str{attr}{val=convert}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=result})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=self}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key})))))))) (expr{value} (Name (str{id}{val=result})))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=type}))) (expr*{args} (expr (Name (str{id}{val=result})))))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=ConvertingDict}))) (expr (Name (str{id}{val=ConvertingList}))) (expr (Name (str{id}{val=ConvertingTuple}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=result}))) (str{attr}{val=parent})))) (expr{value} (Name (str{id}{val=self})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=result}))) (str{attr}{val=key})))) (expr{value} (Name (str{id}{val=key})))))
(root (Return (expr{value} (Name (str{id}{val=result})))))
(root (FunctionDef (str{name}{val=get}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=default})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=dict}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=default}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=configurator}))) (str{attr}{val=convert}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=result})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=self}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key})))))))) (expr{value} (Name (str{id}{val=result})))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=type}))) (expr*{args} (expr (Name (str{id}{val=result})))))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=ConvertingDict}))) (expr (Name (str{id}{val=ConvertingList}))) (expr (Name (str{id}{val=ConvertingTuple}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=result}))) (str{attr}{val=parent})))) (expr{value} (Name (str{id}{val=self})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=result}))) (str{attr}{val=key})))) (expr{value} (Name (str{id}{val=key})))))
(root (Return (expr{value} (Name (str{id}{val=result})))))
(root (FunctionDef (str{name}{val=pop}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=default})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=dict}))) (str{attr}{val=pop}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))) (expr (Name (str{id}{val=default}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=configurator}))) (str{attr}{val=convert}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=result})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=type}))) (expr*{args} (expr (Name (str{id}{val=result})))))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=ConvertingDict}))) (expr (Name (str{id}{val=ConvertingList}))) (expr (Name (str{id}{val=ConvertingTuple}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=result}))) (str{attr}{val=parent})))) (expr{value} (Name (str{id}{val=self})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=result}))) (str{attr}{val=key})))) (expr{value} (Name (str{id}{val=key})))))
(root (Return (expr{value} (Name (str{id}{val=result})))))
(root (ClassDef (str{name}{val=ConvertingList}) (expr*{bases} (expr (Name (str{id}{val=list})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__getitem__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=list}))) (str{attr}{val=__getitem__}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=configurator}))) (str{attr}{val=convert}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=result})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=self}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=key})))))))) (expr{value} (Name (str{id}{val=result})))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=type}))) (expr*{args} (expr (Name (str{id}{val=result})))))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=ConvertingDict}))) (expr (Name (str{id}{val=ConvertingList}))) (expr (Name (str{id}{val=ConvertingTuple}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=result}))) (str{attr}{val=parent})))) (expr{value} (Name (str{id}{val=self})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=result}))) (str{attr}{val=key})))) (expr{value} (Name (str{id}{val=key})))))
(root (Return (expr{value} (Name (str{id}{val=result})))))
(root (FunctionDef (str{name}{val=pop}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=idx})))) (expr*{defaults} (expr (Num (int{n}{val=-1})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=list}))) (str{attr}{val=pop}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=idx}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=configurator}))) (str{attr}{val=convert}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=result})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=type}))) (expr*{args} (expr (Name (str{id}{val=result})))))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=ConvertingDict}))) (expr (Name (str{id}{val=ConvertingList}))) (expr (Name (str{id}{val=ConvertingTuple}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=result}))) (str{attr}{val=parent})))) (expr{value} (Name (str{id}{val=self})))))
(root (Return (expr{value} (Name (str{id}{val=result})))))
(root (ClassDef (str{name}{val=ConvertingTuple}) (expr*{bases} (expr (Name (str{id}{val=tuple})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__getitem__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=tuple}))) (str{attr}{val=__getitem__}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=key}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=configurator}))) (str{attr}{val=convert}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=value}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=result})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=type}))) (expr*{args} (expr (Name (str{id}{val=result})))))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=ConvertingDict}))) (expr (Name (str{id}{val=ConvertingList}))) (expr (Name (str{id}{val=ConvertingTuple}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=result}))) (str{attr}{val=parent})))) (expr{value} (Name (str{id}{val=self})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=result}))) (str{attr}{val=key})))) (expr{value} (Name (str{id}{val=key})))))
(root (Return (expr{value} (Name (str{id}{val=result})))))
(root (ClassDef (str{name}{val=BaseConfigurator}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=CONVERT_PATTERN})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=WORD_PATTERN})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=DOT_PATTERN})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=INDEX_PATTERN})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=DIGIT_PATTERN})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value_converters})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:3_})))) (expr*{values} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:2_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=importer})))) (expr{value} (Name (str{id}{val=__import__})))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=config})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=config})))) (expr{value} (Call (expr{func} (Name (str{id}{val=ConvertingDict}))) (expr*{args} (expr (Name (str{id}{val=config}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=config}))) (str{attr}{val=configurator})))) (expr{value} (Name (str{id}{val=self})))))
(root (FunctionDef (str{name}{val=resolve}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=s})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=name})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=s}))) (str{attr}{val=split}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=used})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=name}))) (str{attr}{val=pop}))) (expr*{args} (expr (Num (int{n}{val=0}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=found})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=importer}))) (expr*{args} (expr (Name (str{id}{val=used}))))))))
(root (For (expr{target} (Name (str{id}{val=frag}))) (expr{iter} (Name (str{id}{val=name}))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=used}))) (operator{op} (Add)) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=frag})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=found})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=found}))) (expr (Name (str{id}{val=frag}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=AttributeError}))) (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=importer}))) (expr*{args} (expr (Name (str{id}{val=used}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=found})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=found}))) (expr (Name (str{id}{val=frag}))))))))
(root (Return (expr{value} (Name (str{id}{val=found})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ImportError}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=e}))) (expr (Name (str{id}{val=tb}))))))) (expr{value} (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=exc_info}))))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=1})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=v})))) (expr{value} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=s}))) (expr (Name (str{id}{val=e})))))))))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=v}))) (str{attr}{val=__cause__}))) (expr (Attribute (expr{value} (Name (str{id}{val=v}))) (str{attr}{val=__traceback__}))))))) (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=e}))) (expr (Name (str{id}{val=tb}))))))))
(root (Raise (expr{type} (Name (str{id}{val=v})))))
(root (FunctionDef (str{name}{val=ext_convert}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=resolve}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (FunctionDef (str{name}{val=cfg_convert}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=rest})))) (expr{value} (Name (str{id}{val=value})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=m})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=WORD_PATTERN}))) (str{attr}{val=match}))) (expr*{args} (expr (Name (str{id}{val=rest}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=m}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=value}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=rest})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=rest}))) (slice{slice} (Slice (expr{lower} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=m}))) (str{attr}{val=end})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=d})))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=config}))) (slice{slice} (Index (expr{value} (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=m}))) (str{attr}{val=groups}))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))))))
(root (While (expr{test} (Name (str{id}{val=rest}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=m})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=DOT_PATTERN}))) (str{attr}{val=match}))) (expr*{args} (expr (Name (str{id}{val=rest}))))))))
(root (If (expr{test} (Name (str{id}{val=m}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=d})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=d}))) (slice{slice} (Index (expr{value} (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=m}))) (str{attr}{val=groups}))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=m})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=INDEX_PATTERN}))) (str{attr}{val=match}))) (expr*{args} (expr (Name (str{id}{val=rest}))))))))
(root (If (expr{test} (Name (str{id}{val=m}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=idx})))) (expr{value} (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=m}))) (str{attr}{val=groups}))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=DIGIT_PATTERN}))) (str{attr}{val=match}))) (expr*{args} (expr (Name (str{id}{val=idx})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=d})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=d}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=idx})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=n})))) (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=idx}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=d})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=d}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=n})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=TypeError}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=d})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=d}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=idx})))))))))
(root (If (expr{test} (Name (str{id}{val=m}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=rest})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=rest}))) (slice{slice} (Slice (expr{lower} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=m}))) (str{attr}{val=end})))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=Unable to convert %r at %r}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=rest})))))))))))))
(root (Return (expr{value} (Name (str{id}{val=d})))))
(root (FunctionDef (str{name}{val=convert}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=ConvertingDict})))))))) (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=dict}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=ConvertingDict}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=configurator})))) (expr{value} (Name (str{id}{val=self})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=ConvertingList})))))))) (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=list}))))))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=ConvertingList}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=configurator})))) (expr{value} (Name (str{id}{val=self})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=ConvertingTuple})))))))) (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=tuple}))))))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=ConvertingTuple}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=configurator})))) (expr{value} (Name (str{id}{val=self})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=string_types})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=m})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=CONVERT_PATTERN}))) (str{attr}{val=match}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (If (expr{test} (Name (str{id}{val=m}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=d})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=m}))) (str{attr}{val=groupdict})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=prefix})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=d}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=converter})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=value_converters}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=prefix}))) (expr (Name (str{id}{val=None}))))))))
(root (If (expr{test} (Name (str{id}{val=converter}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=suffix})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=d}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=converter})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=converter}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=converter}))) (expr*{args} (expr (Name (str{id}{val=suffix}))))))))
(root (Return (expr{value} (Name (str{id}{val=value})))))
(root (FunctionDef (str{name}{val=configure_custom}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=config})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=c})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=config}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=c}))) (expr (Str (str{s}{val=_STR:0_})))))))) (expr (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=types}))) (expr (Str (str{s}{val=_STR:1_})))))) (expr (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=type}))) (expr*{args} (expr (Name (str{id}{val=c})))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=types}))) (str{attr}{val=ClassType}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=c})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=resolve}))) (expr*{args} (expr (Name (str{id}{val=c}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=props})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=config}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=kwargs})))) (expr{value} (Call (expr{func} (Name (str{id}{val=dict}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Subscript (expr{value} (Name (str{id}{val=config}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=k})))))))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=k}))) (expr{iter} (Name (str{id}{val=config}))) (expr*{ifs} (expr (Call (expr{func} (Name (str{id}{val=valid_ident}))) (expr*{args} (expr (Name (str{id}{val=k}))))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Name (str{id}{val=c}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (If (expr{test} (Name (str{id}{val=props}))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=value})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=props}))) (str{attr}{val=items}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=setattr}))) (expr*{args} (expr (Name (str{id}{val=result}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=value}))))))))
(root (Return (expr{value} (Name (str{id}{val=result})))))
(root (FunctionDef (str{name}{val=as_tuple}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=list})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=tuple}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (Return (expr{value} (Name (str{id}{val=value})))))
(root (ClassDef (str{name}{val=DictConfigurator}) (expr*{bases} (expr (Name (str{id}{val=BaseConfigurator})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=configure}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=config})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=config})))))
(root (If (expr{test} (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=config})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=config}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Subscript (expr{value} (Name (str{id}{val=config}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:1_}))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=incremental})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=config}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=False}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=EMPTY_DICT})))) (expr{value} (Dict (epsilon)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=logging}))) (str{attr}{val=_acquireLock})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Name (str{id}{val=incremental}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=handlers})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=config}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=EMPTY_DICT}))))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=version_info}))) (slice{slice} (Slice (expr{upper} (Num (int{n}{val=2}))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Tuple (expr*{elts} (expr (Num (int{n}{val=2}))) (expr (Num (int{n}{val=7}))))))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=name}))) (expr{iter} (Name (str{id}{val=handlers}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=name}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=logging}))) (str{attr}{val=_handlers})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=No handler found with name %r}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=name}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=handler})))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=logging}))) (str{attr}{val=_handlers}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=name})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=handler_config})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=handlers}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=name})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=level})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler_config}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))))))))
(root (If (expr{test} (Name (str{id}{val=level}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=setLevel}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=_checkLevel}))) (expr*{args} (expr (Name (str{id}{val=level})))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=StandardError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=Unable to configure handler %r: %s}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=e})))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=loggers})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=config}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=EMPTY_DICT}))))))))
(root (For (expr{target} (Name (str{id}{val=name}))) (expr{iter} (Name (str{id}{val=loggers}))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=configure_logger}))) (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Subscript (expr{value} (Name (str{id}{val=loggers}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=name}))))))) (expr (Name (str{id}{val=True}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=StandardError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=Unable to configure logger %r: %s}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=e})))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=root})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=config}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))))))))
(root (If (expr{test} (Name (str{id}{val=root}))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=configure_root}))) (expr*{args} (expr (Name (str{id}{val=root}))) (expr (Name (str{id}{val=True}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=StandardError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=Unable to configure root logger: %s}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=e}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=disable_existing})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=config}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=True}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=logging}))) (str{attr}{val=_handlers}))) (str{attr}{val=clear})))))))
(root (Delete (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=logging}))) (str{attr}{val=_handlerList}))) (slice{slice} (Slice (epsilon))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=formatters})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=config}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=EMPTY_DICT}))))))))
(root (For (expr{target} (Name (str{id}{val=name}))) (expr{iter} (Name (str{id}{val=formatters}))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=formatters}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=name})))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=configure_formatter}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=formatters}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=name}))))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=StandardError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=Unable to configure formatter %r: %s}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=e})))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=filters})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=config}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=EMPTY_DICT}))))))))
(root (For (expr{target} (Name (str{id}{val=name}))) (expr{iter} (Name (str{id}{val=filters}))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=filters}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=name})))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=configure_filter}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=filters}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=name}))))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=StandardError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=Unable to configure filter %r: %s}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=e})))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=handlers})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=config}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=EMPTY_DICT}))))))))
(root (For (expr{target} (Name (str{id}{val=name}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=sorted}))) (expr*{args} (expr (Name (str{id}{val=handlers})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=handler})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=configure_handler}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=handlers}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=name}))))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=name})))) (expr{value} (Name (str{id}{val=name})))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=handlers}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=name})))))))) (expr{value} (Name (str{id}{val=handler})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=StandardError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=Unable to configure handler %r: %s}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=e})))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=root})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=logging}))) (str{attr}{val=root})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=existing})))) (expr{value} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=root}))) (str{attr}{val=manager}))) (str{attr}{val=loggerDict}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=existing}))) (str{attr}{val=sort})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=child_loggers})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=loggers})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=config}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=EMPTY_DICT}))))))))
(root (For (expr{target} (Name (str{id}{val=name}))) (expr{iter} (Name (str{id}{val=loggers}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=name}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=existing})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=i})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=existing}))) (str{attr}{val=index}))) (expr*{args} (expr (Name (str{id}{val=name}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=prefixed})))) (expr{value} (BinOp (expr{left} (Name (str{id}{val=name}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=.})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=pflen})))) (expr{value} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=prefixed}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=num_existing})))) (expr{value} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=existing}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=i})))) (expr{value} (BinOp (expr{left} (Name (str{id}{val=i}))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=1})))))))
(root (While (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=i}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Name (str{id}{val=num_existing})))))) (expr (Compare (expr{left} (Subscript (expr{value} (Subscript (expr{value} (Name (str{id}{val=existing}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=i}))))))) (slice{slice} (Slice (expr{upper} (Name (str{id}{val=pflen}))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=prefixed}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=child_loggers}))) (str{attr}{val=append}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=existing}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=i}))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=i})))) (expr{value} (BinOp (expr{left} (Name (str{id}{val=i}))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=1})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=existing}))) (str{attr}{val=remove}))) (expr*{args} (expr (Name (str{id}{val=name}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=configure_logger}))) (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Subscript (expr{value} (Name (str{id}{val=loggers}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=name}))))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=StandardError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=Unable to configure logger %r: %s}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=e})))))))))))))
(root (For (expr{target} (Name (str{id}{val=log}))) (expr{iter} (Name (str{id}{val=existing}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=logger})))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=root}))) (str{attr}{val=manager}))) (str{attr}{val=loggerDict}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=log})))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=log}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=child_loggers})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=logger}))) (str{attr}{val=level})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=logging}))) (str{attr}{val=NOTSET})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=logger}))) (str{attr}{val=handlers})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=logger}))) (str{attr}{val=propagate})))) (expr{value} (Name (str{id}{val=True})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Name (str{id}{val=disable_existing}))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=logger}))) (str{attr}{val=disabled})))) (expr{value} (Name (str{id}{val=True})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=root})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=config}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))))))))
(root (If (expr{test} (Name (str{id}{val=root}))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=configure_root}))) (expr*{args} (expr (Name (str{id}{val=root}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=StandardError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=Unable to configure root logger: %s}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=e}))))))))))
(root (TryFinally (stmt*{body} (stmt (Pass))) (stmt*{finalbody} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=logging}))) (str{attr}{val=_releaseLock})))))))
(root (FunctionDef (str{name}{val=configure_formatter}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=config})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=config})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=factory})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=config}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=configure_custom}))) (expr*{args} (expr (Name (str{id}{val=config}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=TypeError}))) (expr{name} (Name (str{id}{val=te}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Name (str{id}{val=te}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (epsilon)))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=config}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:1_})))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=config}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=config}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Name (str{id}{val=factory})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=configure_custom}))) (expr*{args} (expr (Name (str{id}{val=config}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=fmt})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=config}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=dfmt})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=config}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=logging}))) (str{attr}{val=Formatter}))) (expr*{args} (expr (Name (str{id}{val=fmt}))) (expr (Name (str{id}{val=dfmt}))))))))
(root (Return (expr{value} (Name (str{id}{val=result})))))
(root (FunctionDef (str{name}{val=configure_filter}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=config})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=config})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=configure_custom}))) (expr*{args} (expr (Name (str{id}{val=config}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=name})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=config}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=logging}))) (str{attr}{val=Filter}))) (expr*{args} (expr (Name (str{id}{val=name}))))))))
(root (Return (expr{value} (Name (str{id}{val=result})))))
(root (FunctionDef (str{name}{val=add_filters}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=filterer}))) (expr (Name (str{id}{val=filters})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=f}))) (expr{iter} (Name (str{id}{val=filters}))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=filterer}))) (str{attr}{val=addFilter}))) (expr*{args} (expr (Subscript (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=config}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (slice{slice} (Index (expr{value} (Name (str{id}{val=f}))))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=StandardError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=f}))) (expr (Name (str{id}{val=e})))))))))))))
(root (FunctionDef (str{name}{val=configure_handler}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=config})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=formatter})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=config}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))))))))
(root (If (expr{test} (Name (str{id}{val=formatter}))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=formatter})))) (expr{value} (Subscript (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=config}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (slice{slice} (Index (expr{value} (Name (str{id}{val=formatter})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=StandardError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=Unable to set formatter %r: %s}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=formatter}))) (expr (Name (str{id}{val=e})))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=level})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=config}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=filters})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=config}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=filters}))) (expr (Name (str{id}{val=None}))))))))
(root (If (expr{test} (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=config})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=c})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=config}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=c}))) (expr (Str (str{s}{val=_STR:0_})))))))) (expr (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=types}))) (expr (Str (str{s}{val=_STR:1_})))))) (expr (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=type}))) (expr*{args} (expr (Name (str{id}{val=c})))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=types}))) (str{attr}{val=ClassType}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=c})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=resolve}))) (expr*{args} (expr (Name (str{id}{val=c}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=factory})))) (expr{value} (Name (str{id}{val=c})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=klass})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=resolve}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=config}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=issubclass}))) (expr*{args} (expr (Name (str{id}{val=klass}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=logging}))) (str{attr}{val=handlers}))) (str{attr}{val=MemoryHandler})))))) (expr (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=config}))))))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=config}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Subscript (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=config}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=handlers}))))))) (slice{slice} (Index (expr{value} (Subscript (expr{value} (Name (str{id}{val=config}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=StandardError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=Unable to set target handler %r: %s}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Subscript (expr{value} (Name (str{id}{val=config}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=target}))))))) (expr (Name (str{id}{val=e})))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=issubclass}))) (expr*{args} (expr (Name (str{id}{val=klass}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=logging}))) (str{attr}{val=handlers}))) (str{attr}{val=SMTPHandler})))))) (expr (Compare (expr{left} (Str (str{s}{val=_STR:1_}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=config}))))))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=config}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=as_tuple}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=config}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=issubclass}))) (expr*{args} (expr (Name (str{id}{val=klass}))) (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=logging}))) (str{attr}{val=handlers}))) (str{attr}{val=SysLogHandler})))))) (expr (Compare (expr{left} (Str (str{s}{val=_STR:1_}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=config}))))))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=config}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=as_tuple}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=config}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=factory})))) (expr{value} (Name (str{id}{val=klass})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=kwargs})))) (expr{value} (Call (expr{func} (Name (str{id}{val=dict}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Subscript (expr{value} (Name (str{id}{val=config}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=k})))))))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=k}))) (expr{iter} (Name (str{id}{val=config}))) (expr*{ifs} (expr (Call (expr{func} (Name (str{id}{val=valid_ident}))) (expr*{args} (expr (Name (str{id}{val=k}))))))))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Name (str{id}{val=factory}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=TypeError}))) (expr{name} (Name (str{id}{val=te}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Name (str{id}{val=te}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (epsilon)))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=kwargs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:1_})))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=kwargs}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Name (str{id}{val=factory}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (If (expr{test} (Name (str{id}{val=formatter}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=result}))) (str{attr}{val=setFormatter}))) (expr*{args} (expr (Name (str{id}{val=formatter}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=level}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=result}))) (str{attr}{val=setLevel}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=_checkLevel}))) (expr*{args} (expr (Name (str{id}{val=level})))))))))))
(root (If (expr{test} (Name (str{id}{val=filters}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=add_filters}))) (expr*{args} (expr (Name (str{id}{val=result}))) (expr (Name (str{id}{val=filters}))))))))
(root (Return (expr{value} (Name (str{id}{val=result})))))
(root (FunctionDef (str{name}{val=add_handlers}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=logger}))) (expr (Name (str{id}{val=handlers})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=h}))) (expr{iter} (Name (str{id}{val=handlers}))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=logger}))) (str{attr}{val=addHandler}))) (expr*{args} (expr (Subscript (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=config}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (slice{slice} (Index (expr{value} (Name (str{id}{val=h}))))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=StandardError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=h}))) (expr (Name (str{id}{val=e})))))))))))))
(root (FunctionDef (str{name}{val=common_logger_config}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=logger}))) (expr (Name (str{id}{val=config}))) (expr (Name (str{id}{val=incremental})))) (expr*{defaults} (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=level})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=config}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=level}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=logger}))) (str{attr}{val=setLevel}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=_checkLevel}))) (expr*{args} (expr (Name (str{id}{val=level})))))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=incremental}))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=h}))) (expr{iter} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=logger}))) (str{attr}{val=handlers}))) (slice{slice} (Slice (epsilon))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=logger}))) (str{attr}{val=removeHandler}))) (expr*{args} (expr (Name (str{id}{val=h}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=handlers})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=config}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))))))))
(root (If (expr{test} (Name (str{id}{val=handlers}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=add_handlers}))) (expr*{args} (expr (Name (str{id}{val=logger}))) (expr (Name (str{id}{val=handlers}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=filters})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=config}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))))))))
(root (If (expr{test} (Name (str{id}{val=filters}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=add_filters}))) (expr*{args} (expr (Name (str{id}{val=logger}))) (expr (Name (str{id}{val=filters}))))))))
(root (FunctionDef (str{name}{val=configure_logger}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=config}))) (expr (Name (str{id}{val=incremental})))) (expr*{defaults} (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=logger})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=logging}))) (str{attr}{val=getLogger}))) (expr*{args} (expr (Name (str{id}{val=name}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=common_logger_config}))) (expr*{args} (expr (Name (str{id}{val=logger}))) (expr (Name (str{id}{val=config}))) (expr (Name (str{id}{val=incremental}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=propagate})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=config}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=propagate}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=logger}))) (str{attr}{val=propagate})))) (expr{value} (Name (str{id}{val=propagate})))))
(root (FunctionDef (str{name}{val=configure_root}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=config}))) (expr (Name (str{id}{val=incremental})))) (expr*{defaults} (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=root})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=logging}))) (str{attr}{val=getLogger})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=common_logger_config}))) (expr*{args} (expr (Name (str{id}{val=root}))) (expr (Name (str{id}{val=config}))) (expr (Name (str{id}{val=incremental}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=dictConfigClass})))) (expr{value} (Name (str{id}{val=DictConfigurator})))))
(root (FunctionDef (str{name}{val=dictConfig}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=config})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=dictConfigClass}))) (expr*{args} (expr (Name (str{id}{val=config})))))) (str{attr}{val=configure})))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=codecs})))))
(root (Import (alias*{names} (alias (str{name}{val=datetime})))))
(root (ImportFrom (str{module}{val=decimal}) (alias*{names} (alias (str{name}{val=Decimal}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=locale})))))
(root (ImportFrom (str{module}{val=django.utils.functional}) (alias*{names} (alias (str{name}{val=Promise}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.six.moves.urllib.parse}) (alias*{names} (alias (str{name}{val=quote}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=DjangoUnicodeDecodeError}) (expr*{bases} (expr (Name (str{id}{val=UnicodeDecodeError})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=obj})))) (str{vararg}{val=args}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=obj})))) (expr{value} (Name (str{id}{val=obj})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=UnicodeDecodeError}))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=self})))) (expr{starargs} (Name (str{id}{val=args})))))))
(root (FunctionDef (str{name}{val=__str__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=original})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=UnicodeDecodeError}))) (str{attr}{val=__str__}))) (expr*{args} (expr (Name (str{id}{val=self}))))))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=original}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=obj}))) (expr (Call (expr{func} (Name (str{id}{val=type}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=obj})))))))))))))
(root (FunctionDef (str{name}{val=python_2_unicode_compatible}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=klass})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=PY2}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=klass}))) (str{attr}{val=__dict__})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=@python_2_unicode_compatible cannot be applied to %s because it doesn't define __str__().}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=klass}))) (str{attr}{val=__name__}))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=klass}))) (str{attr}{val=__unicode__})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=klass}))) (str{attr}{val=__str__})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=klass}))) (str{attr}{val=__str__})))) (expr{value} (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (expr{body} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__unicode__}))))) (str{attr}{val=encode}))) (expr*{args} (expr (Str (str{s}{val=utf-8}))))))))))
(root (Return (expr{value} (Name (str{id}{val=klass})))))
(root (FunctionDef (str{name}{val=smart_text}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=s}))) (expr (Name (str{id}{val=encoding}))) (expr (Name (str{id}{val=strings_only}))) (expr (Name (str{id}{val=errors})))) (expr*{defaults} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=False}))) (expr (Str (str{s}{val=_STR:1_})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=s}))) (expr (Name (str{id}{val=Promise})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=s})))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=s}))) (expr (Name (str{id}{val=encoding}))) (expr (Name (str{id}{val=strings_only}))) (expr (Name (str{id}{val=errors}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_PROTECTED_TYPES})))) (expr{value} (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=integer_types}))) (operator{op} (Add)) (expr{right} (Tuple (expr*{elts} (expr (Call (expr{func} (Name (str{id}{val=type}))) (expr*{args} (expr (Name (str{id}{val=None})))))) (expr (Name (str{id}{val=float}))) (expr (Name (str{id}{val=Decimal}))) (expr (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=datetime}))) (expr (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=date}))) (expr (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=time}))))))))))
(root (FunctionDef (str{name}{val=is_protected_type}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=obj})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=obj}))) (expr (Name (str{id}{val=_PROTECTED_TYPES}))))))))
(root (FunctionDef (str{name}{val=force_text}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=s}))) (expr (Name (str{id}{val=encoding}))) (expr (Name (str{id}{val=strings_only}))) (expr (Name (str{id}{val=errors})))) (expr*{defaults} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=False}))) (expr (Str (str{s}{val=_STR:1_})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=s}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=s})))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=strings_only}))) (expr (Call (expr{func} (Name (str{id}{val=is_protected_type}))) (expr*{args} (expr (Name (str{id}{val=s}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=s})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=s}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=string_types})))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=PY3}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=s}))) (expr (Name (str{id}{val=bytes})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=s})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))) (expr*{args} (expr (Name (str{id}{val=s}))) (expr (Name (str{id}{val=encoding}))) (expr (Name (str{id}{val=errors}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=s})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))) (expr*{args} (expr (Name (str{id}{val=s}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=s}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=s})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))) (expr*{args} (expr (Name (str{id}{val=s}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=s})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=bytes}))) (expr*{args} (expr (Name (str{id}{val=s})))))) (expr (Name (str{id}{val=encoding}))) (expr (Name (str{id}{val=errors}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=s})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=s}))) (str{attr}{val=decode}))) (expr*{args} (expr (Name (str{id}{val=encoding}))) (expr (Name (str{id}{val=errors}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=UnicodeDecodeError}))) (expr{name} (Name (str{id}{val=e}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=s}))) (expr (Name (str{id}{val=Exception})))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=DjangoUnicodeDecodeError}))) (expr*{args} (expr (Name (str{id}{val=s})))) (expr{starargs} (Attribute (expr{value} (Name (str{id}{val=e}))) (str{attr}{val=args})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=s})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val= }))) (str{attr}{val=join}))) (expr*{args} (expr (ListComp (expr{elt} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=arg}))) (expr (Name (str{id}{val=encoding}))) (expr (Name (str{id}{val=strings_only}))) (expr (Name (str{id}{val=errors})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=arg}))) (expr{iter} (Name (str{id}{val=s}))))))))))))
(root (Return (expr{value} (Name (str{id}{val=s})))))
(root (FunctionDef (str{name}{val=smart_bytes}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=s}))) (expr (Name (str{id}{val=encoding}))) (expr (Name (str{id}{val=strings_only}))) (expr (Name (str{id}{val=errors})))) (expr*{defaults} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=False}))) (expr (Str (str{s}{val=_STR:1_})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=s}))) (expr (Name (str{id}{val=Promise})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=s})))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=force_bytes}))) (expr*{args} (expr (Name (str{id}{val=s}))) (expr (Name (str{id}{val=encoding}))) (expr (Name (str{id}{val=strings_only}))) (expr (Name (str{id}{val=errors}))))))))
(root (FunctionDef (str{name}{val=force_bytes}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=s}))) (expr (Name (str{id}{val=encoding}))) (expr (Name (str{id}{val=strings_only}))) (expr (Name (str{id}{val=errors})))) (expr*{defaults} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=False}))) (expr (Str (str{s}{val=_STR:1_})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=s}))) (expr (Name (str{id}{val=bytes})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=encoding}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=s})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=s}))) (str{attr}{val=decode}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=errors})))))) (str{attr}{val=encode}))) (expr*{args} (expr (Name (str{id}{val=encoding}))) (expr (Name (str{id}{val=errors}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=strings_only}))) (expr (Call (expr{func} (Name (str{id}{val=is_protected_type}))) (expr*{args} (expr (Name (str{id}{val=s}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=s})))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=s}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=memoryview})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=bytes}))) (expr*{args} (expr (Name (str{id}{val=s}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=s}))) (expr (Name (str{id}{val=Promise})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))) (expr*{args} (expr (Name (str{id}{val=s})))))) (str{attr}{val=encode}))) (expr*{args} (expr (Name (str{id}{val=encoding}))) (expr (Name (str{id}{val=errors}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=s}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=string_types})))))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=PY3}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))) (expr*{args} (expr (Name (str{id}{val=s})))))) (str{attr}{val=encode}))) (expr*{args} (expr (Name (str{id}{val=encoding}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=bytes}))) (expr*{args} (expr (Name (str{id}{val=s}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=UnicodeEncodeError}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=s}))) (expr (Name (str{id}{val=Exception})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val= }))) (str{attr}{val=join}))) (expr*{args} (expr (ListComp (expr{elt} (Call (expr{func} (Name (str{id}{val=force_bytes}))) (expr*{args} (expr (Name (str{id}{val=arg}))) (expr (Name (str{id}{val=encoding}))) (expr (Name (str{id}{val=strings_only}))) (expr (Name (str{id}{val=errors})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=arg}))) (expr{iter} (Name (str{id}{val=s}))))))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))) (expr*{args} (expr (Name (str{id}{val=s})))))) (str{attr}{val=encode}))) (expr*{args} (expr (Name (str{id}{val=encoding}))) (expr (Name (str{id}{val=errors}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=s}))) (str{attr}{val=encode}))) (expr*{args} (expr (Name (str{id}{val=encoding}))) (expr (Name (str{id}{val=errors}))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=PY3}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=smart_str})))) (expr{value} (Name (str{id}{val=smart_text})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=force_str})))) (expr{value} (Name (str{id}{val=force_text})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=smart_str})))) (expr{value} (Name (str{id}{val=smart_bytes})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=force_str})))) (expr{value} (Name (str{id}{val=force_bytes})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=smart_unicode})))) (expr{value} (Name (str{id}{val=smart_text})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=force_unicode})))) (expr{value} (Name (str{id}{val=force_text})))))
(root (FunctionDef (str{name}{val=iri_to_uri}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=iri})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=iri}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=iri})))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=quote}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=force_bytes}))) (expr*{args} (expr (Name (str{id}{val=iri}))))))) (keyword*{keywords} (keyword (str{arg}{val=safe}) (expr{value} (Str (str{s}{val=/#%[]=:;$&()+,!?*@'~})))))))))
(root (FunctionDef (str{name}{val=filepath_to_uri}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=path})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=path}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=path})))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=quote}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=force_bytes}))) (expr*{args} (expr (Name (str{id}{val=path})))))) (str{attr}{val=replace}))) (expr*{args} (expr (Str (str{s}{val=\}))) (expr (Str (str{s}{val=/}))))))) (keyword*{keywords} (keyword (str{arg}{val=safe}) (expr{value} (Str (str{s}{val=/~!*()'})))))))))
(root (FunctionDef (str{name}{val=get_system_encoding}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=encoding})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=locale}))) (str{attr}{val=getdefaultlocale}))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))) (expr (Str (str{s}{val=ascii}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=codecs}))) (str{attr}{val=lookup}))) (expr*{args} (expr (Name (str{id}{val=encoding}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=Exception}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=encoding})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Return (expr{value} (Name (str{id}{val=encoding})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=DEFAULT_LOCALE_ENCODING})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_system_encoding})))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=datetime})))))
(root (ImportFrom (str{module}{val=django.utils.xmlutils}) (alias*{names} (alias (str{name}{val=SimplerXMLGenerator}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=force_text})) (alias (str{name}{val=iri_to_uri}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=datetime_safe}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.six}) (alias*{names} (alias (str{name}{val=StringIO}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.six.moves.urllib.parse}) (alias*{names} (alias (str{name}{val=urlparse}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.timezone}) (alias*{names} (alias (str{name}{val=is_aware}))) (int{level}{val=0})))
(root (FunctionDef (str{name}{val=rfc2822_date}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=date})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=months})))) (expr{value} (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=_STR:3_}))) (expr (Str (str{s}{val=_STR:4_}))) (expr (Str (str{s}{val=_STR:5_}))) (expr (Str (str{s}{val=_STR:6_}))) (expr (Str (str{s}{val=_STR:7_}))) (expr (Str (str{s}{val=_STR:8_}))) (expr (Str (str{s}{val=_STR:9_}))) (expr (Str (str{s}{val=_STR:10_}))) (expr (Str (str{s}{val=_STR:11_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=days})))) (expr{value} (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=_STR:3_}))) (expr (Str (str{s}{val=_STR:4_}))) (expr (Str (str{s}{val=_STR:5_}))) (expr (Str (str{s}{val=_STR:6_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=date})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=datetime_safe}))) (str{attr}{val=new_datetime}))) (expr*{args} (expr (Name (str{id}{val=date}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=dow})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=days}))) (slice{slice} (Index (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=date}))) (str{attr}{val=weekday})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=month})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=months}))) (slice{slice} (Index (expr{value} (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=date}))) (str{attr}{val=month}))) (operator{op} (Sub)) (expr{right} (Num (int{n}{val=1})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=time_str})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=date}))) (str{attr}{val=strftime}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=dow}))) (expr (Name (str{id}{val=month})))))))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=PY2}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=time_str})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=time_str}))) (str{attr}{val=decode}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=is_aware}))) (expr*{args} (expr (Name (str{id}{val=date})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=offset})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=date}))) (str{attr}{val=tzinfo}))) (str{attr}{val=utcoffset}))) (expr*{args} (expr (Name (str{id}{val=date}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=timezone})))) (expr{value} (BinOp (expr{left} (BinOp (expr{left} (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=offset}))) (str{attr}{val=days}))) (operator{op} (Mult)) (expr{right} (Num (int{n}{val=24}))))) (operator{op} (Mult)) (expr{right} (Num (int{n}{val=60}))))) (operator{op} (Add)) (expr{right} (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=offset}))) (str{attr}{val=seconds}))) (operator{op} (FloorDiv)) (expr{right} (Num (int{n}{val=60})))))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=hour}))) (expr (Name (str{id}{val=minute}))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=divmod}))) (expr*{args} (expr (Name (str{id}{val=timezone}))) (expr (Num (int{n}{val=60}))))))))
(root (Return (expr{value} (BinOp (expr{left} (Name (str{id}{val=time_str}))) (operator{op} (Add)) (expr{right} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=hour}))) (expr (Name (str{id}{val=minute}))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Name (str{id}{val=time_str}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=_STR:0_})))))))
(root (FunctionDef (str{name}{val=rfc3339_date}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=date})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=date})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=datetime_safe}))) (str{attr}{val=new_datetime}))) (expr*{args} (expr (Name (str{id}{val=date}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=time_str})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=date}))) (str{attr}{val=strftime}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=PY2}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=time_str})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=time_str}))) (str{attr}{val=decode}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=is_aware}))) (expr*{args} (expr (Name (str{id}{val=date})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=offset})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=date}))) (str{attr}{val=tzinfo}))) (str{attr}{val=utcoffset}))) (expr*{args} (expr (Name (str{id}{val=date}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=timezone})))) (expr{value} (BinOp (expr{left} (BinOp (expr{left} (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=offset}))) (str{attr}{val=days}))) (operator{op} (Mult)) (expr{right} (Num (int{n}{val=24}))))) (operator{op} (Mult)) (expr{right} (Num (int{n}{val=60}))))) (operator{op} (Add)) (expr{right} (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=offset}))) (str{attr}{val=seconds}))) (operator{op} (FloorDiv)) (expr{right} (Num (int{n}{val=60})))))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=hour}))) (expr (Name (str{id}{val=minute}))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=divmod}))) (expr*{args} (expr (Name (str{id}{val=timezone}))) (expr (Num (int{n}{val=60}))))))))
(root (Return (expr{value} (BinOp (expr{left} (Name (str{id}{val=time_str}))) (operator{op} (Add)) (expr{right} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=hour}))) (expr (Name (str{id}{val=minute}))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Name (str{id}{val=time_str}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=_STR:0_})))))))
(root (FunctionDef (str{name}{val=get_tag_uri}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=url}))) (expr (Name (str{id}{val=date})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=bits})))) (expr{value} (Call (expr{func} (Name (str{id}{val=urlparse}))) (expr*{args} (expr (Name (str{id}{val=url}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=d})))) (expr{value} (Str (str{s}{val=})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=date}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=d})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=,%s}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=datetime_safe}))) (str{attr}{val=new_datetime}))) (expr*{args} (expr (Name (str{id}{val=date})))))) (str{attr}{val=strftime}))) (expr*{args} (expr (Str (str{s}{val=%Y-%m-%d}))))))))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:2_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=bits}))) (str{attr}{val=hostname}))) (expr (Name (str{id}{val=d}))) (expr (Attribute (expr{value} (Name (str{id}{val=bits}))) (str{attr}{val=path}))) (expr (Attribute (expr{value} (Name (str{id}{val=bits}))) (str{attr}{val=fragment}))))))))))
(root (ClassDef (str{name}{val=SyndicationFeed}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=title}))) (expr (Name (str{id}{val=link}))) (expr (Name (str{id}{val=description}))) (expr (Name (str{id}{val=language}))) (expr (Name (str{id}{val=author_email}))) (expr (Name (str{id}{val=author_name}))) (expr (Name (str{id}{val=author_link}))) (expr (Name (str{id}{val=subtitle}))) (expr (Name (str{id}{val=categories}))) (expr (Name (str{id}{val=feed_url}))) (expr (Name (str{id}{val=feed_copyright}))) (expr (Name (str{id}{val=feed_guid}))) (expr (Name (str{id}{val=ttl})))) (str{kwarg}{val=kwargs}) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=to_unicode})))) (expr{value} (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=s})))))) (expr{body} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=s})))) (keyword*{keywords} (keyword (str{arg}{val=strings_only}) (expr{value} (Name (str{id}{val=True})))))))))))
(root (If (expr{test} (Name (str{id}{val=categories}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=categories})))) (expr{value} (ListComp (expr{elt} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=c})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=c}))) (expr{iter} (Name (str{id}{val=categories})))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=ttl}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ttl})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=ttl}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=feed})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=link}))) (expr (Str (str{s}{val=description}))) (expr (Str (str{s}{val=language}))) (expr (Str (str{s}{val=author_email}))) (expr (Str (str{s}{val=author_name}))) (expr (Str (str{s}{val=author_link}))) (expr (Str (str{s}{val=subtitle}))) (expr (Str (str{s}{val=categories}))) (expr (Str (str{s}{val=feed_url}))) (expr (Str (str{s}{val=feed_copyright}))) (expr (Str (str{s}{val=id}))) (expr (Str (str{s}{val=ttl})))) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=to_unicode}))) (expr*{args} (expr (Name (str{id}{val=title})))))) (expr (Call (expr{func} (Name (str{id}{val=iri_to_uri}))) (expr*{args} (expr (Name (str{id}{val=link})))))) (expr (Call (expr{func} (Name (str{id}{val=to_unicode}))) (expr*{args} (expr (Name (str{id}{val=description})))))) (expr (Call (expr{func} (Name (str{id}{val=to_unicode}))) (expr*{args} (expr (Name (str{id}{val=language})))))) (expr (Call (expr{func} (Name (str{id}{val=to_unicode}))) (expr*{args} (expr (Name (str{id}{val=author_email})))))) (expr (Call (expr{func} (Name (str{id}{val=to_unicode}))) (expr*{args} (expr (Name (str{id}{val=author_name})))))) (expr (Call (expr{func} (Name (str{id}{val=iri_to_uri}))) (expr*{args} (expr (Name (str{id}{val=author_link})))))) (expr (Call (expr{func} (Name (str{id}{val=to_unicode}))) (expr*{args} (expr (Name (str{id}{val=subtitle})))))) (expr (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=categories}))) (expr (Tuple (epsilon)))))) (expr (Call (expr{func} (Name (str{id}{val=iri_to_uri}))) (expr*{args} (expr (Name (str{id}{val=feed_url})))))) (expr (Call (expr{func} (Name (str{id}{val=to_unicode}))) (expr*{args} (expr (Name (str{id}{val=feed_copyright})))))) (expr (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=feed_guid}))) (expr (Name (str{id}{val=link})))))) (expr (Name (str{id}{val=ttl}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=feed}))) (str{attr}{val=update}))) (expr*{args} (expr (Name (str{id}{val=kwargs}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=items})))) (expr{value} (List (epsilon)))))
(root (FunctionDef (str{name}{val=add_item}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=title}))) (expr (Name (str{id}{val=link}))) (expr (Name (str{id}{val=description}))) (expr (Name (str{id}{val=author_email}))) (expr (Name (str{id}{val=author_name}))) (expr (Name (str{id}{val=author_link}))) (expr (Name (str{id}{val=pubdate}))) (expr (Name (str{id}{val=comments}))) (expr (Name (str{id}{val=unique_id}))) (expr (Name (str{id}{val=unique_id_is_permalink}))) (expr (Name (str{id}{val=enclosure}))) (expr (Name (str{id}{val=categories}))) (expr (Name (str{id}{val=item_copyright}))) (expr (Name (str{id}{val=ttl}))) (expr (Name (str{id}{val=updateddate})))) (str{kwarg}{val=kwargs}) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Tuple (epsilon))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=to_unicode})))) (expr{value} (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=s})))))) (expr{body} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=s})))) (keyword*{keywords} (keyword (str{arg}{val=strings_only}) (expr{value} (Name (str{id}{val=True})))))))))))
(root (If (expr{test} (Name (str{id}{val=categories}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=categories})))) (expr{value} (ListComp (expr{elt} (Name (str{id}{val=c}))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=c}))) (expr{iter} (Name (str{id}{val=categories})))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=ttl}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ttl})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=ttl}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=item})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=link}))) (expr (Str (str{s}{val=description}))) (expr (Str (str{s}{val=author_email}))) (expr (Str (str{s}{val=author_name}))) (expr (Str (str{s}{val=author_link}))) (expr (Str (str{s}{val=pubdate}))) (expr (Str (str{s}{val=updateddate}))) (expr (Str (str{s}{val=comments}))) (expr (Str (str{s}{val=unique_id}))) (expr (Str (str{s}{val=unique_id_is_permalink}))) (expr (Str (str{s}{val=enclosure}))) (expr (Str (str{s}{val=categories}))) (expr (Str (str{s}{val=item_copyright}))) (expr (Str (str{s}{val=ttl})))) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=to_unicode}))) (expr*{args} (expr (Name (str{id}{val=title})))))) (expr (Call (expr{func} (Name (str{id}{val=iri_to_uri}))) (expr*{args} (expr (Name (str{id}{val=link})))))) (expr (Call (expr{func} (Name (str{id}{val=to_unicode}))) (expr*{args} (expr (Name (str{id}{val=description})))))) (expr (Call (expr{func} (Name (str{id}{val=to_unicode}))) (expr*{args} (expr (Name (str{id}{val=author_email})))))) (expr (Call (expr{func} (Name (str{id}{val=to_unicode}))) (expr*{args} (expr (Name (str{id}{val=author_name})))))) (expr (Call (expr{func} (Name (str{id}{val=iri_to_uri}))) (expr*{args} (expr (Name (str{id}{val=author_link})))))) (expr (Name (str{id}{val=pubdate}))) (expr (Name (str{id}{val=updateddate}))) (expr (Call (expr{func} (Name (str{id}{val=to_unicode}))) (expr*{args} (expr (Name (str{id}{val=comments})))))) (expr (Call (expr{func} (Name (str{id}{val=to_unicode}))) (expr*{args} (expr (Name (str{id}{val=unique_id})))))) (expr (Name (str{id}{val=unique_id_is_permalink}))) (expr (Name (str{id}{val=enclosure}))) (expr (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=categories}))) (expr (Tuple (epsilon)))))) (expr (Call (expr{func} (Name (str{id}{val=to_unicode}))) (expr*{args} (expr (Name (str{id}{val=item_copyright})))))) (expr (Name (str{id}{val=ttl}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=item}))) (str{attr}{val=update}))) (expr*{args} (expr (Name (str{id}{val=kwargs}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=items}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=item}))))))))
(root (FunctionDef (str{name}{val=num_items}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=items}))))))))
(root (FunctionDef (str{name}{val=root_attributes}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Dict (epsilon)))))
(root (FunctionDef (str{name}{val=add_root_elements}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=handler})))))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (FunctionDef (str{name}{val=item_attributes}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=item})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Dict (epsilon)))))
(root (FunctionDef (str{name}{val=add_item_elements}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=handler}))) (expr (Name (str{id}{val=item})))))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (FunctionDef (str{name}{val=write}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=outfile}))) (expr (Name (str{id}{val=encoding})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=NotImplementedError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=writeString}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=encoding})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=s})))) (expr{value} (Call (expr{func} (Name (str{id}{val=StringIO})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=write}))) (expr*{args} (expr (Name (str{id}{val=s}))) (expr (Name (str{id}{val=encoding}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=s}))) (str{attr}{val=getvalue})))))))
(root (FunctionDef (str{name}{val=latest_post_date}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=latest_date})))) (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=date_keys})))) (expr{value} (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))))))))
(root (For (expr{target} (Name (str{id}{val=item}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=items}))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=date_key}))) (expr{iter} (Name (str{id}{val=date_keys}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=item_date})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=item}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=date_key}))))))))
(root (If (expr{test} (Name (str{id}{val=item_date}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=latest_date}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Compare (expr{left} (Name (str{id}{val=item_date}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Name (str{id}{val=latest_date}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=latest_date})))) (expr{value} (Name (str{id}{val=item_date})))))
(root (Return (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=latest_date}))) (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=datetime}))) (str{attr}{val=now}))))))))))
(root (ClassDef (str{name}{val=Enclosure}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=url}))) (expr (Name (str{id}{val=length}))) (expr (Name (str{id}{val=mime_type})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=length}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=mime_type}))))))) (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=length}))) (expr (Name (str{id}{val=mime_type}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=url})))) (expr{value} (Call (expr{func} (Name (str{id}{val=iri_to_uri}))) (expr*{args} (expr (Name (str{id}{val=url}))))))))
(root (ClassDef (str{name}{val=RssFeed}) (expr*{bases} (expr (Name (str{id}{val=SyndicationFeed})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=mime_type})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (FunctionDef (str{name}{val=write}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=outfile}))) (expr (Name (str{id}{val=encoding})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=handler})))) (expr{value} (Call (expr{func} (Name (str{id}{val=SimplerXMLGenerator}))) (expr*{args} (expr (Name (str{id}{val=outfile}))) (expr (Name (str{id}{val=encoding}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=startDocument})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=startElement}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=rss_attributes}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=startElement}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=root_attributes}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=add_root_elements}))) (expr*{args} (expr (Name (str{id}{val=handler}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=write_items}))) (expr*{args} (expr (Name (str{id}{val=handler}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=endChannelElement}))) (expr*{args} (expr (Name (str{id}{val=handler}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=endElement}))) (expr*{args} (expr (Str (str{s}{val=rss}))))))))
(root (FunctionDef (str{name}{val=rss_attributes}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:2_})))) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_version}))) (expr (Str (str{s}{val=_STR:1_}))))))))
(root (FunctionDef (str{name}{val=write_items}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=handler})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=item}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=items}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=startElement}))) (expr*{args} (expr (Str (str{s}{val=item}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=item_attributes}))) (expr*{args} (expr (Name (str{id}{val=item})))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=add_item_elements}))) (expr*{args} (expr (Name (str{id}{val=handler}))) (expr (Name (str{id}{val=item}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=endElement}))) (expr*{args} (expr (Str (str{s}{val=item}))))))))
(root (FunctionDef (str{name}{val=add_root_elements}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=handler})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=title}))) (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=feed}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=link}))) (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=feed}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=description}))) (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=feed}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=feed}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=atom:link}))) (expr (Name (str{id}{val=None}))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=rel}))) (expr (Str (str{s}{val=href})))) (expr*{values} (expr (Str (str{s}{val=self}))) (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=feed}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=feed_url})))))))))))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=feed}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:2_}))))))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=language}))) (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=feed}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))))))))
(root (For (expr{target} (Name (str{id}{val=cat}))) (expr{iter} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=feed}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=cat}))))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=feed}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=copyright}))) (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=feed}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:1_}))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=lastBuildDate}))) (expr (Call (expr{func} (Name (str{id}{val=rfc2822_date}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=latest_post_date})))))))))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=feed}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=ttl}))) (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=feed}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))))))))
(root (FunctionDef (str{name}{val=endChannelElement}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=handler})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=endElement}))) (expr*{args} (expr (Str (str{s}{val=channel}))))))))
(root (ClassDef (str{name}{val=RssUserland091Feed}) (expr*{bases} (expr (Name (str{id}{val=RssFeed})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_version})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (FunctionDef (str{name}{val=add_item_elements}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=handler}))) (expr (Name (str{id}{val=item})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=title}))) (expr (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=link}))) (expr (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=description}))) (expr (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))))))))
(root (ClassDef (str{name}{val=Rss201rev2Feed}) (expr*{bases} (expr (Name (str{id}{val=RssFeed})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_version})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (FunctionDef (str{name}{val=add_item_elements}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=handler}))) (expr (Name (str{id}{val=item})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=title}))) (expr (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=link}))) (expr (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=description}))) (expr (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (expr (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:1_})))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (BinOp (expr{left} (Str (str{s}{val=_STR:1_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=author_email}))))))) (expr (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=author_name})))))))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:2_}))))))) (stmt*{body} (stmt (Pass))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=author}))) (expr (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=author_email}))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (stmt*{body} (stmt (Pass))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=dc:creator}))) (expr (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=author_name}))))))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=xmlns:dc})))) (expr*{values} (expr (Str (str{s}{val=http://purl.org/dc/elements/1.1/})))))))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:3_}))))))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=pubDate}))) (expr (Call (expr{func} (Name (str{id}{val=rfc2822_date}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=pubdate})))))))))))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:1_}))))))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=comments}))) (expr (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=guid_attrs})))) (expr{value} (Dict (epsilon)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=item}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (expr (Name (str{id}{val=bool})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=guid_attrs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=isPermaLink})))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))))) (str{attr}{val=lower})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=guid}))) (expr (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:2_}))))))) (expr (Name (str{id}{val=guid_attrs}))))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=ttl}))) (expr (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=enclosure}))) (expr (Str (str{s}{val=}))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=url}))) (expr (Str (str{s}{val=length}))) (expr (Str (str{s}{val=type})))) (expr*{values} (expr (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=enclosure}))))))) (str{attr}{val=url}))) (expr (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=enclosure}))))))) (str{attr}{val=length}))) (expr (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=enclosure}))))))) (str{attr}{val=mime_type})))))))))))
(root (For (expr{target} (Name (str{id}{val=cat}))) (expr{iter} (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:4_}))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=category}))) (expr (Name (str{id}{val=cat}))))))))
(root (ClassDef (str{name}{val=Atom1Feed}) (expr*{bases} (expr (Name (str{id}{val=SyndicationFeed})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=mime_type})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ns})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (FunctionDef (str{name}{val=write}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=outfile}))) (expr (Name (str{id}{val=encoding})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=handler})))) (expr{value} (Call (expr{func} (Name (str{id}{val=SimplerXMLGenerator}))) (expr*{args} (expr (Name (str{id}{val=outfile}))) (expr (Name (str{id}{val=encoding}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=startDocument})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=startElement}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=root_attributes}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=add_root_elements}))) (expr*{args} (expr (Name (str{id}{val=handler}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=write_items}))) (expr*{args} (expr (Name (str{id}{val=handler}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=endElement}))) (expr*{args} (expr (Str (str{s}{val=feed}))))))))
(root (FunctionDef (str{name}{val=root_attributes}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=feed}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=xmlns}))) (expr (Str (str{s}{val=_STR:1_})))) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=ns}))) (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=feed}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:0_})))) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=ns}))))))))
(root (FunctionDef (str{name}{val=add_root_elements}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=handler})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=title}))) (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=feed}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=link}))) (expr (Str (str{s}{val=}))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=rel}))) (expr (Str (str{s}{val=href})))) (expr*{values} (expr (Str (str{s}{val=alternate}))) (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=feed}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))))))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=feed}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:4_}))))))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=link}))) (expr (Str (str{s}{val=}))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=rel}))) (expr (Str (str{s}{val=href})))) (expr*{values} (expr (Str (str{s}{val=self}))) (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=feed}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=feed_url})))))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=id}))) (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=feed}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=id}))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=updated}))) (expr (Call (expr{func} (Name (str{id}{val=rfc3339_date}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=latest_post_date})))))))))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=feed}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=startElement}))) (expr*{args} (expr (Str (str{s}{val=author}))) (expr (Dict (epsilon))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=name}))) (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=feed}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:1_}))))))))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=feed}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=email}))) (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=feed}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:1_}))))))))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=feed}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=uri}))) (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=feed}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:1_}))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=endElement}))) (expr*{args} (expr (Str (str{s}{val=author}))))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=feed}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=subtitle}))) (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=feed}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))))))))
(root (For (expr{target} (Name (str{id}{val=cat}))) (expr{iter} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=feed}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=category}))) (expr (Str (str{s}{val=}))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=term})))) (expr*{values} (expr (Name (str{id}{val=cat})))))))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=feed}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:1_}))))))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=rights}))) (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=feed}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:1_}))))))))))))
(root (FunctionDef (str{name}{val=write_items}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=handler})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=item}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=items}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=startElement}))) (expr*{args} (expr (Str (str{s}{val=entry}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=item_attributes}))) (expr*{args} (expr (Name (str{id}{val=item})))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=add_item_elements}))) (expr*{args} (expr (Name (str{id}{val=handler}))) (expr (Name (str{id}{val=item}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=endElement}))) (expr*{args} (expr (Str (str{s}{val=entry}))))))))
(root (FunctionDef (str{name}{val=add_item_elements}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=handler}))) (expr (Name (str{id}{val=item})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=title}))) (expr (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=link}))) (expr (Str (str{s}{val=}))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=href}))) (expr (Str (str{s}{val=rel})))) (expr*{values} (expr (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (expr (Str (str{s}{val=alternate})))))))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:4_}))))))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Call (expr{func} (Name (str{id}{val=rfc3339_date}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=pubdate})))))))))))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:1_}))))))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Call (expr{func} (Name (str{id}{val=rfc3339_date}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=updateddate})))))))))))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:1_}))))))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=startElement}))) (expr*{args} (expr (Str (str{s}{val=author}))) (expr (Dict (epsilon))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=name}))) (expr (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:1_}))))))))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=email}))) (expr (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:1_}))))))))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=uri}))) (expr (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:1_}))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=endElement}))) (expr*{args} (expr (Str (str{s}{val=author}))))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=unique_id})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=unique_id})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_tag_uri}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (expr (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:1_}))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=id}))) (expr (Name (str{id}{val=unique_id}))))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=summary}))) (expr (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:1_}))))))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=type})))) (expr*{values} (expr (Str (str{s}{val=html})))))))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:2_}))))))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=link}))) (expr (Str (str{s}{val=}))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=rel}))) (expr (Str (str{s}{val=href}))) (expr (Str (str{s}{val=length}))) (expr (Str (str{s}{val=type})))) (expr*{values} (expr (Str (str{s}{val=enclosure}))) (expr (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=enclosure}))))))) (str{attr}{val=url}))) (expr (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=enclosure}))))))) (str{attr}{val=length}))) (expr (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=enclosure}))))))) (str{attr}{val=mime_type})))))))))))
(root (For (expr{target} (Name (str{id}{val=cat}))) (expr{iter} (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:5_}))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=category}))) (expr (Str (str{s}{val=}))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=term})))) (expr*{values} (expr (Name (str{id}{val=cat})))))))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:1_}))))))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=handler}))) (str{attr}{val=addQuickElement}))) (expr*{args} (expr (Str (str{s}{val=rights}))) (expr (Subscript (expr{value} (Name (str{id}{val=item}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:1_}))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=DefaultFeed})))) (expr{value} (Name (str{id}{val=Rss201rev2Feed})))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=absolute_import}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=decimal})))))
(root (Import (alias*{names} (alias (str{name}{val=datetime})))))
(root (ImportFrom (str{module}{val=importlib}) (alias*{names} (alias (str{name}{val=import_module}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=unicodedata})))))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=dateformat})) (alias (str{name}{val=numberformat})) (alias (str{name}{val=datetime_safe}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=force_str}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.functional}) (alias*{names} (alias (str{name}{val=lazy}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.safestring}) (alias*{names} (alias (str{name}{val=mark_safe}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.translation}) (alias*{names} (alias (str{name}{val=get_language})) (alias (str{name}{val=to_locale})) (alias (str{name}{val=check_for_language}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_format_cache})))) (expr{value} (Dict (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_format_modules_cache})))) (expr{value} (Dict (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ISO_INPUT_FORMATS})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=TIME_INPUT_FORMATS}))) (expr (Str (str{s}{val=DATETIME_INPUT_FORMATS})))) (expr*{values} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_})))))) (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=%H:%M:%S}))) (expr (Str (str{s}{val=%H:%M:%S.%f}))) (expr (Str (str{s}{val=%H:%M})))))) (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=%Y-%m-%d %H:%M:%S}))) (expr (Str (str{s}{val=%Y-%m-%d %H:%M:%S.%f}))) (expr (Str (str{s}{val=%Y-%m-%d %H:%M}))) (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (FunctionDef (str{name}{val=reset_format_cache}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (Global (str*{names} (str{val=_format_cache}) (str{val=_format_modules_cache}))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_format_cache})))) (expr{value} (Dict (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_format_modules_cache})))) (expr{value} (Dict (epsilon)))))
(root (FunctionDef (str{name}{val=iter_format_modules}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=lang}))) (expr (Name (str{id}{val=format_module_path})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=check_for_language}))) (expr*{args} (expr (Name (str{id}{val=lang})))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (epsilon)))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=format_module_path}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=format_module_path})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=FORMAT_MODULE_PATH})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=format_locations})))) (expr{value} (List (epsilon)))))
(root (If (expr{test} (Name (str{id}{val=format_module_path}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=format_module_path}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=string_types})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=format_module_path})))) (expr{value} (List (expr*{elts} (expr (Name (str{id}{val=format_module_path}))))))))
(root (For (expr{target} (Name (str{id}{val=path}))) (expr{iter} (Name (str{id}{val=format_module_path}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=format_locations}))) (str{attr}{val=append}))) (expr*{args} (expr (BinOp (expr{left} (Name (str{id}{val=path}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=_STR:0_}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=format_locations}))) (str{attr}{val=append}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=locale})))) (expr{value} (Call (expr{func} (Name (str{id}{val=to_locale}))) (expr*{args} (expr (Name (str{id}{val=lang}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=locales})))) (expr{value} (List (expr*{elts} (expr (Name (str{id}{val=locale}))))))))
(root (If (expr{test} (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=locale})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=locales}))) (str{attr}{val=append}))) (expr*{args} (expr (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=locale}))) (str{attr}{val=split}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))))))))
(root (For (expr{target} (Name (str{id}{val=location}))) (expr{iter} (Name (str{id}{val=format_locations}))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=loc}))) (expr{iter} (Name (str{id}{val=locales}))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Yield (expr{value} (Call (expr{func} (Name (str{id}{val=import_module}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (BinOp (expr{left} (Name (str{id}{val=location}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=loc}))))))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ImportError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (FunctionDef (str{name}{val=get_format_modules}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=lang}))) (expr (Name (str{id}{val=reverse})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=lang}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=lang})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_language})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=modules})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=_format_modules_cache}))) (str{attr}{val=setdefault}))) (expr*{args} (expr (Name (str{id}{val=lang}))) (expr (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=iter_format_modules}))) (expr*{args} (expr (Name (str{id}{val=lang}))) (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=FORMAT_MODULE_PATH}))))))))))))))
(root (If (expr{test} (Name (str{id}{val=reverse}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=reversed}))) (expr*{args} (expr (Name (str{id}{val=modules})))))))))))
(root (Return (expr{value} (Name (str{id}{val=modules})))))
(root (FunctionDef (str{name}{val=get_format}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=format_type}))) (expr (Name (str{id}{val=lang}))) (expr (Name (str{id}{val=use_l10n})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=format_type})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_str}))) (expr*{args} (expr (Name (str{id}{val=format_type}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=use_l10n}))) (expr (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=use_l10n}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=USE_L10N}))))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=lang}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=lang})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_language})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cache_key})))) (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=format_type}))) (expr (Name (str{id}{val=lang}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cached})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=_format_cache}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=cache_key})))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=cached}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=cached})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=settings}))) (expr (Name (str{id}{val=format_type}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=KeyError}))) (stmt*{body} (stmt (Pass)))))))
(root (For (expr{target} (Name (str{id}{val=module}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=get_format_modules}))) (expr*{args} (expr (Name (str{id}{val=lang})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=val})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=module}))) (expr (Name (str{id}{val=format_type}))))))))
(root (For (expr{target} (Name (str{id}{val=iso_input}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=ISO_INPUT_FORMATS}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=format_type}))) (expr (Tuple (epsilon)))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=iso_input}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=val})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=val}))) (expr (Name (str{id}{val=tuple})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=val})))) (expr{value} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Name (str{id}{val=val}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=val}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=iso_input}))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=_format_cache}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=cache_key})))))))) (expr{value} (Name (str{id}{val=val})))))
(root (Return (expr{value} (Name (str{id}{val=val})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=AttributeError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=_format_cache}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=cache_key})))))))) (expr{value} (Name (str{id}{val=None})))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=settings}))) (expr (Name (str{id}{val=format_type}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=get_format_lazy})))) (expr{value} (Call (expr{func} (Name (str{id}{val=lazy}))) (expr*{args} (expr (Name (str{id}{val=get_format}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))) (expr (Name (str{id}{val=list}))) (expr (Name (str{id}{val=tuple}))))))))
(root (FunctionDef (str{name}{val=date_format}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=format}))) (expr (Name (str{id}{val=use_l10n})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=dateformat}))) (str{attr}{val=format}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Call (expr{func} (Name (str{id}{val=get_format}))) (expr*{args} (expr (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=format}))) (expr (Str (str{s}{val=DATE_FORMAT}))))))) (keyword*{keywords} (keyword (str{arg}{val=use_l10n}) (expr{value} (Name (str{id}{val=use_l10n}))))))))))))
(root (FunctionDef (str{name}{val=time_format}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=format}))) (expr (Name (str{id}{val=use_l10n})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=dateformat}))) (str{attr}{val=time_format}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Call (expr{func} (Name (str{id}{val=get_format}))) (expr*{args} (expr (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=format}))) (expr (Str (str{s}{val=TIME_FORMAT}))))))) (keyword*{keywords} (keyword (str{arg}{val=use_l10n}) (expr{value} (Name (str{id}{val=use_l10n}))))))))))))
(root (FunctionDef (str{name}{val=number_format}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=decimal_pos}))) (expr (Name (str{id}{val=use_l10n}))) (expr (Name (str{id}{val=force_grouping})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=use_l10n}))) (expr (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=use_l10n}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=USE_L10N}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=lang})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_language})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=lang})))) (expr{value} (Name (str{id}{val=None})))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=numberformat}))) (str{attr}{val=format}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Call (expr{func} (Name (str{id}{val=get_format}))) (expr*{args} (expr (Str (str{s}{val=DECIMAL_SEPARATOR}))) (expr (Name (str{id}{val=lang})))) (keyword*{keywords} (keyword (str{arg}{val=use_l10n}) (expr{value} (Name (str{id}{val=use_l10n}))))))) (expr (Name (str{id}{val=decimal_pos}))) (expr (Call (expr{func} (Name (str{id}{val=get_format}))) (expr*{args} (expr (Str (str{s}{val=NUMBER_GROUPING}))) (expr (Name (str{id}{val=lang})))) (keyword*{keywords} (keyword (str{arg}{val=use_l10n}) (expr{value} (Name (str{id}{val=use_l10n}))))))) (expr (Call (expr{func} (Name (str{id}{val=get_format}))) (expr*{args} (expr (Str (str{s}{val=THOUSAND_SEPARATOR}))) (expr (Name (str{id}{val=lang})))) (keyword*{keywords} (keyword (str{arg}{val=use_l10n}) (expr{value} (Name (str{id}{val=use_l10n})))))))) (keyword*{keywords} (keyword (str{arg}{val=force_grouping}) (expr{value} (Name (str{id}{val=force_grouping})))))))))
(root (FunctionDef (str{name}{val=localize}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=use_l10n})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=bool})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=mark_safe}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))) (expr*{args} (expr (Name (str{id}{val=value})))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (BinOp (expr{left} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=decimal}))) (str{attr}{val=Decimal}))) (expr (Name (str{id}{val=float})))))) (operator{op} (Add)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=integer_types})))))))) (stmt*{body} (stmt (Pass))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=number_format}))) (expr*{args} (expr (Name (str{id}{val=value})))) (keyword*{keywords} (keyword (str{arg}{val=use_l10n}) (expr{value} (Name (str{id}{val=use_l10n})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=datetime})))))) (stmt*{body} (stmt (Pass))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=date_format}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=use_l10n}) (expr{value} (Name (str{id}{val=use_l10n})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=date})))))) (stmt*{body} (stmt (Pass))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=date_format}))) (expr*{args} (expr (Name (str{id}{val=value})))) (keyword*{keywords} (keyword (str{arg}{val=use_l10n}) (expr{value} (Name (str{id}{val=use_l10n})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=time})))))) (stmt*{body} (stmt (Pass))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=time_format}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=use_l10n}) (expr{value} (Name (str{id}{val=use_l10n})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=value})))))
(root (FunctionDef (str{name}{val=localize_input}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=default})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (BinOp (expr{left} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=decimal}))) (str{attr}{val=Decimal}))) (expr (Name (str{id}{val=float})))))) (operator{op} (Add)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=integer_types})))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=number_format}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=datetime})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=datetime_safe}))) (str{attr}{val=new_datetime}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=format})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_str}))) (expr*{args} (expr (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=default}))) (expr (Subscript (expr{value} (Call (expr{func} (Name (str{id}{val=get_format}))) (expr*{args} (expr (Str (str{s}{val=DATETIME_INPUT_FORMATS})))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=strftime}))) (expr*{args} (expr (Name (str{id}{val=format}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=date})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=datetime_safe}))) (str{attr}{val=new_date}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=format})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_str}))) (expr*{args} (expr (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=default}))) (expr (Subscript (expr{value} (Call (expr{func} (Name (str{id}{val=get_format}))) (expr*{args} (expr (Str (str{s}{val=DATE_INPUT_FORMATS})))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=strftime}))) (expr*{args} (expr (Name (str{id}{val=format}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=time})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=format})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_str}))) (expr*{args} (expr (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=default}))) (expr (Subscript (expr{value} (Call (expr{func} (Name (str{id}{val=get_format}))) (expr*{args} (expr (Str (str{s}{val=TIME_INPUT_FORMATS})))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=strftime}))) (expr*{args} (expr (Name (str{id}{val=format}))))))))
(root (Return (expr{value} (Name (str{id}{val=value})))))
(root (FunctionDef (str{name}{val=sanitize_separators}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=USE_L10N}))) (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=string_types}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=parts})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=decimal_separator})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_format}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=decimal_separator}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=decimals}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=split}))) (expr*{args} (expr (Name (str{id}{val=decimal_separator}))) (expr (Num (int{n}{val=1}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parts}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=decimals}))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=USE_THOUSAND_SEPARATOR}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=thousand_sep})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_format}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (For (expr{target} (Name (str{id}{val=replacement}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=set}))) (expr*{args} (expr (List (expr*{elts} (expr (Name (str{id}{val=thousand_sep}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=unicodedata}))) (str{attr}{val=normalize}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=thousand_sep})))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=replace}))) (expr*{args} (expr (Name (str{id}{val=replacement}))) (expr (Str (str{s}{val=}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=parts}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=_STR:0_}))) (str{attr}{val=join}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=reversed}))) (expr*{args} (expr (Name (str{id}{val=parts})))))))))))
(root (Return (expr{value} (Name (str{id}{val=value})))))
(root (Import (alias*{names} (alias (str{name}{val=copy})))))
(root (Import (alias*{names} (alias (str{name}{val=operator})))))
(root (ImportFrom (str{module}{val=functools}) (alias*{names} (alias (str{name}{val=wraps}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=sys})))))
(root (Import (alias*{names} (alias (str{name}{val=warnings})))))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.deprecation}) (alias*{names} (alias (str{name}{val=RemovedInDjango19Warning}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.six.moves}) (alias*{names} (alias (str{name}{val=copyreg}))) (int{level}{val=0})))
(root (FunctionDef (str{name}{val=curry}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=_curried_func})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=_curried}) (arguments{args} (arguments (str{vararg}{val=moreargs}) (str{kwarg}{val=morekwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=_curried_func}))) (expr{starargs} (BinOp (expr{left} (Name (str{id}{val=args}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=moreargs}))))) (expr{kwargs} (Call (expr{func} (Name (str{id}{val=dict}))) (expr*{args} (expr (Name (str{id}{val=kwargs})))) (expr{kwargs} (Name (str{id}{val=morekwargs})))))))))
(root (Return (expr{value} (Name (str{id}{val=_curried})))))
(root (FunctionDef (str{name}{val=memoize}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=func}))) (expr (Name (str{id}{val=cache}))) (expr (Name (str{id}{val=num_args})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=warnings}))) (str{attr}{val=warn}))) (expr*{args} (expr (Str (str{s}{val=memoize wrapper is deprecated and will be removed in Django 1.9. Use django.utils.lru_cache instead.}))) (expr (Name (str{id}{val=RemovedInDjango19Warning})))) (keyword*{keywords} (keyword (str{arg}{val=stacklevel}) (expr{value} (Num (int{n}{val=2})))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Name (str{id}{val=wraps}))) (expr*{args} (expr (Name (str{id}{val=func})))))))))
(root (FunctionDef (str{name}{val=wrapper}) (arguments{args} (arguments (str{vararg}{val=args}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=mem_args})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=args}))) (slice{slice} (Slice (expr{upper} (Name (str{id}{val=num_args})))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=mem_args}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=cache})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Subscript (expr{value} (Name (str{id}{val=cache}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=mem_args})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Name (str{id}{val=func}))) (expr{starargs} (Name (str{id}{val=args})))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=cache}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=mem_args})))))))) (expr{value} (Name (str{id}{val=result})))))
(root (Return (expr{value} (Name (str{id}{val=result})))))
(root (Return (expr{value} (Name (str{id}{val=wrapper})))))
(root (ClassDef (str{name}{val=cached_property}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=func}))) (expr (Name (str{id}{val=name})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=func})))) (expr{value} (Name (str{id}{val=func})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=name})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=name}))) (expr (Attribute (expr{value} (Name (str{id}{val=func}))) (str{attr}{val=__name__}))))))))
(root (FunctionDef (str{name}{val=__get__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=instance}))) (expr (Name (str{id}{val=type})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=instance}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=self})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=res}))) (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=instance}))) (str{attr}{val=__dict__}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=name})))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=func}))) (expr*{args} (expr (Name (str{id}{val=instance}))))))))
(root (Return (expr{value} (Name (str{id}{val=res})))))
(root (ClassDef (str{name}{val=Promise}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (FunctionDef (str{name}{val=lazy}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=func})))) (str{vararg}{val=resultclasses}))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=total_ordering}))))))
(root (ClassDef (str{name}{val=__proxy__}) (expr*{bases} (expr (Name (str{id}{val=Promise})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__dispatch})))) (expr{value} (Name (str{id}{val=None})))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=args}))) (expr (Name (str{id}{val=kw})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__args})))) (expr{value} (Name (str{id}{val=args})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__kw})))) (expr{value} (Name (str{id}{val=kw})))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__dispatch}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__prepare_class__})))))))
(root (FunctionDef (str{name}{val=__reduce__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=_lazy_proxy_unpickle}))) (expr (BinOp (expr{left} (Tuple (expr*{elts} (expr (Name (str{id}{val=func}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__args}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__kw})))))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=resultclasses}))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=classmethod}))))))
(root (FunctionDef (str{name}{val=__prepare_class__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=cls})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=cls}))) (str{attr}{val=__dispatch})))) (expr{value} (Dict (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=resultclass}))) (expr{iter} (Name (str{id}{val=resultclasses}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=cls}))) (str{attr}{val=__dispatch}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=resultclass})))))))) (expr{value} (Dict (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=type_}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=reversed}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=resultclass}))) (str{attr}{val=mro})))))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Name (str{id}{val=v})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=type_}))) (str{attr}{val=__dict__}))) (str{attr}{val=items}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=meth})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=cls}))) (str{attr}{val=__promise__}))) (expr*{args} (expr (Name (str{id}{val=resultclass}))) (expr (Name (str{id}{val=k}))) (expr (Name (str{id}{val=v}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=cls}))) (expr (Name (str{id}{val=k})))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=setattr}))) (expr*{args} (expr (Name (str{id}{val=cls}))) (expr (Name (str{id}{val=k}))) (expr (Name (str{id}{val=meth}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=cls}))) (str{attr}{val=_delegate_bytes})))) (expr{value} (Compare (expr{left} (Name (str{id}{val=bytes}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=resultclasses}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=cls}))) (str{attr}{val=_delegate_text})))) (expr{value} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=resultclasses}))))))))
(root (Assert (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=cls}))) (str{attr}{val=_delegate_bytes}))) (expr (Attribute (expr{value} (Name (str{id}{val=cls}))) (str{attr}{val=_delegate_text})))))))) (expr{msg} (Str (str{s}{val=_STR:0_})))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=cls}))) (str{attr}{val=_delegate_text}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=PY3}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=cls}))) (str{attr}{val=__str__})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=cls}))) (str{attr}{val=__text_cast})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=cls}))) (str{attr}{val=__unicode__})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=cls}))) (str{attr}{val=__text_cast})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=cls}))) (str{attr}{val=_delegate_bytes}))) (stmt*{body} (stmt (Pass))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=PY3}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=cls}))) (str{attr}{val=__bytes__})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=cls}))) (str{attr}{val=__bytes_cast})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=cls}))) (str{attr}{val=__str__})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=cls}))) (str{attr}{val=__bytes_cast})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=classmethod}))))))
(root (FunctionDef (str{name}{val=__promise__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=cls}))) (expr (Name (str{id}{val=klass}))) (expr (Name (str{id}{val=funcname}))) (expr (Name (str{id}{val=method})))))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__wrapper__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=kw}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=res})))) (expr{value} (Call (expr{func} (Name (str{id}{val=func}))) (expr{starargs} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__args}))) (expr{kwargs} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__kw})))))))
(root (For (expr{target} (Name (str{id}{val=t}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=type}))) (expr*{args} (expr (Name (str{id}{val=res})))))) (str{attr}{val=mro}))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=t}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__dispatch})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Subscript (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__dispatch}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=t}))))))) (slice{slice} (Index (expr{value} (Name (str{id}{val=funcname}))))))) (expr*{args} (expr (Name (str{id}{val=res})))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kw})))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TypeError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=klass}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=cls}))) (str{attr}{val=__dispatch})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=cls}))) (str{attr}{val=__dispatch}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=klass})))))))) (expr{value} (Dict (epsilon)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=cls}))) (str{attr}{val=__dispatch}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=klass}))))))) (slice{slice} (Index (expr{value} (Name (str{id}{val=funcname})))))))) (expr{value} (Name (str{id}{val=method})))))
(root (Return (expr{value} (Name (str{id}{val=__wrapper__})))))
(root (FunctionDef (str{name}{val=__text_cast}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=func}))) (expr{starargs} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__args}))) (expr{kwargs} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__kw})))))))
(root (FunctionDef (str{name}{val=__bytes_cast}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=bytes}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=func}))) (expr{starargs} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__args}))) (expr{kwargs} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__kw}))))))))))
(root (FunctionDef (str{name}{val=__cast}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_delegate_bytes}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__bytes_cast})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_delegate_text}))) (stmt*{body} (stmt (Pass))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__text_cast})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=func}))) (expr{starargs} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__args}))) (expr{kwargs} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__kw})))))))
(root (FunctionDef (str{name}{val=__ne__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=other})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=other}))) (expr (Name (str{id}{val=Promise})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=other})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=other}))) (str{attr}{val=__cast})))))))
(root (Return (expr{value} (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__cast}))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Name (str{id}{val=other}))))))))
(root (FunctionDef (str{name}{val=__eq__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=other})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=other}))) (expr (Name (str{id}{val=Promise})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=other})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=other}))) (str{attr}{val=__cast})))))))
(root (Return (expr{value} (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__cast}))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=other}))))))))
(root (FunctionDef (str{name}{val=__lt__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=other})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=other}))) (expr (Name (str{id}{val=Promise})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=other})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=other}))) (str{attr}{val=__cast})))))))
(root (Return (expr{value} (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__cast}))))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Name (str{id}{val=other}))))))))
(root (FunctionDef (str{name}{val=__hash__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=hash}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__cast}))))))))))
(root (FunctionDef (str{name}{val=__mod__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=rhs})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_delegate_bytes}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=PY2})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=bytes}))) (expr*{args} (expr (Name (str{id}{val=self})))))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=rhs})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_delegate_text}))) (stmt*{body} (stmt (Pass))))))))
(root (Return (expr{value} (BinOp (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))) (expr*{args} (expr (Name (str{id}{val=self})))))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=rhs})))))))
(root (Return (expr{value} (BinOp (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__cast}))))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=rhs})))))))
(root (FunctionDef (str{name}{val=__deepcopy__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=memo})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=memo}))) (slice{slice} (Index (expr{value} (Call (expr{func} (Name (str{id}{val=id}))) (expr*{args} (expr (Name (str{id}{val=self}))))))))))) (expr{value} (Name (str{id}{val=self})))))
(root (Return (expr{value} (Name (str{id}{val=self})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Name (str{id}{val=wraps}))) (expr*{args} (expr (Name (str{id}{val=func})))))))))
(root (FunctionDef (str{name}{val=__wrapper__}) (arguments{args} (arguments (str{vararg}{val=args}) (str{kwarg}{val=kw}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=__proxy__}))) (expr*{args} (expr (Name (str{id}{val=args}))) (expr (Name (str{id}{val=kw}))))))))
(root (Return (expr{value} (Name (str{id}{val=__wrapper__})))))
(root (FunctionDef (str{name}{val=_lazy_proxy_unpickle}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=func}))) (expr (Name (str{id}{val=args}))) (expr (Name (str{id}{val=kwargs})))) (str{vararg}{val=resultclasses}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Call (expr{func} (Name (str{id}{val=lazy}))) (expr*{args} (expr (Name (str{id}{val=func})))) (expr{starargs} (Name (str{id}{val=resultclasses}))))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (FunctionDef (str{name}{val=allow_lazy}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=func})))) (str{vararg}{val=resultclasses}))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Name (str{id}{val=wraps}))) (expr*{args} (expr (Name (str{id}{val=func})))))))))
(root (FunctionDef (str{name}{val=wrapper}) (arguments{args} (arguments (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=arg}))) (expr{iter} (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Name (str{id}{val=args})))))) (operator{op} (Add)) (expr{right} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=itervalues}))) (expr*{args} (expr (Name (str{id}{val=kwargs}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=arg}))) (expr (Name (str{id}{val=Promise})))))) (stmt*{body} (stmt (Pass)))))
(root (Break))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=func}))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (Return (expr{value} (Call (expr{func} (Call (expr{func} (Name (str{id}{val=lazy}))) (expr*{args} (expr (Name (str{id}{val=func})))) (expr{starargs} (Name (str{id}{val=resultclasses}))))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (Return (expr{value} (Name (str{id}{val=wrapper})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=empty})))) (expr{value} (Call (expr{func} (Name (str{id}{val=object})))))))
(root (FunctionDef (str{name}{val=new_method_proxy}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=func})))))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=inner}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_wrapped}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=empty})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_setup})))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=func}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_wrapped})))) (expr{starargs} (Name (str{id}{val=args})))))))
(root (Return (expr{value} (Name (str{id}{val=inner})))))
(root (ClassDef (str{name}{val=LazyObject}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_wrapped})))) (expr{value} (Name (str{id}{val=None})))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_wrapped})))) (expr{value} (Name (str{id}{val=empty})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__getattr__})))) (expr{value} (Call (expr{func} (Name (str{id}{val=new_method_proxy}))) (expr*{args} (expr (Name (str{id}{val=getattr}))))))))
(root (FunctionDef (str{name}{val=__setattr__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=name}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__dict__}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Name (str{id}{val=value})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_wrapped}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=empty})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_setup})))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=setattr}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_wrapped}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=value}))))))))
(root (FunctionDef (str{name}{val=__delattr__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=name}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TypeError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_wrapped}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=empty})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_setup})))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=delattr}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_wrapped}))) (expr (Name (str{id}{val=name}))))))))
(root (FunctionDef (str{name}{val=_setup}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=NotImplementedError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=__getstate__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_wrapped}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=empty})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_setup})))))))
(root (Return (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_wrapped}))) (str{attr}{val=__dict__})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=classmethod}))))))
(root (FunctionDef (str{name}{val=__newobj__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=cls})))) (str{vararg}{val=args}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=cls}))) (str{attr}{val=__new__}))) (expr*{args} (expr (Name (str{id}{val=cls})))) (expr{starargs} (Name (str{id}{val=args})))))))
(root (FunctionDef (str{name}{val=__reduce_ex__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=proto})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=proto}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Num (int{n}{val=2})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__newobj__}))) (expr (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__class__})))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__getstate__}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=copyreg}))) (str{attr}{val=_reconstructor}))) (expr (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__class__}))) (expr (Name (str{id}{val=object}))) (expr (Name (str{id}{val=None})))))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__getstate__}))))))))))
(root (FunctionDef (str{name}{val=__deepcopy__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=memo})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_wrapped}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=empty})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Call (expr{func} (Name (str{id}{val=type}))) (expr*{args} (expr (Name (str{id}{val=self}))))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=memo}))) (slice{slice} (Index (expr{value} (Call (expr{func} (Name (str{id}{val=id}))) (expr*{args} (expr (Name (str{id}{val=self}))))))))))) (expr{value} (Name (str{id}{val=result})))))
(root (Return (expr{value} (Name (str{id}{val=result})))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=copy}))) (str{attr}{val=deepcopy}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_wrapped}))) (expr (Name (str{id}{val=memo}))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=PY3}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__bytes__})))) (expr{value} (Call (expr{func} (Name (str{id}{val=new_method_proxy}))) (expr*{args} (expr (Name (str{id}{val=bytes}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__str__})))) (expr{value} (Call (expr{func} (Name (str{id}{val=new_method_proxy}))) (expr*{args} (expr (Name (str{id}{val=str}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__bool__})))) (expr{value} (Call (expr{func} (Name (str{id}{val=new_method_proxy}))) (expr*{args} (expr (Name (str{id}{val=bool}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__str__})))) (expr{value} (Call (expr{func} (Name (str{id}{val=new_method_proxy}))) (expr*{args} (expr (Name (str{id}{val=str}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__unicode__})))) (expr{value} (Call (expr{func} (Name (str{id}{val=new_method_proxy}))) (expr*{args} (expr (Name (str{id}{val=unicode}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__nonzero__})))) (expr{value} (Call (expr{func} (Name (str{id}{val=new_method_proxy}))) (expr*{args} (expr (Name (str{id}{val=bool}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__dir__})))) (expr{value} (Call (expr{func} (Name (str{id}{val=new_method_proxy}))) (expr*{args} (expr (Name (str{id}{val=dir}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__class__})))) (expr{value} (Call (expr{func} (Name (str{id}{val=property}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=new_method_proxy}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=operator}))) (str{attr}{val=attrgetter}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__eq__})))) (expr{value} (Call (expr{func} (Name (str{id}{val=new_method_proxy}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=operator}))) (str{attr}{val=eq}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__ne__})))) (expr{value} (Call (expr{func} (Name (str{id}{val=new_method_proxy}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=operator}))) (str{attr}{val=ne}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__hash__})))) (expr{value} (Call (expr{func} (Name (str{id}{val=new_method_proxy}))) (expr*{args} (expr (Name (str{id}{val=hash}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__getitem__})))) (expr{value} (Call (expr{func} (Name (str{id}{val=new_method_proxy}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=operator}))) (str{attr}{val=getitem}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__setitem__})))) (expr{value} (Call (expr{func} (Name (str{id}{val=new_method_proxy}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=operator}))) (str{attr}{val=setitem}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__delitem__})))) (expr{value} (Call (expr{func} (Name (str{id}{val=new_method_proxy}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=operator}))) (str{attr}{val=delitem}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__len__})))) (expr{value} (Call (expr{func} (Name (str{id}{val=new_method_proxy}))) (expr*{args} (expr (Name (str{id}{val=len}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__contains__})))) (expr{value} (Call (expr{func} (Name (str{id}{val=new_method_proxy}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=operator}))) (str{attr}{val=contains}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_super})))) (expr{value} (Name (str{id}{val=super})))))
(root (ClassDef (str{name}{val=SimpleLazyObject}) (expr*{bases} (expr (Name (str{id}{val=LazyObject})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=func})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__dict__}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Name (str{id}{val=func})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=_super}))) (expr*{args} (expr (Name (str{id}{val=SimpleLazyObject}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__})))))))
(root (FunctionDef (str{name}{val=_setup}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_wrapped})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_setupfunc})))))))
(root (FunctionDef (str{name}{val=__repr__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_wrapped}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=empty})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=repr_attr})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_setupfunc})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=repr_attr})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_wrapped})))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=type}))) (expr*{args} (expr (Name (str{id}{val=self})))))) (str{attr}{val=__name__}))) (expr (Name (str{id}{val=repr_attr}))))))))))
(root (FunctionDef (str{name}{val=__deepcopy__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=memo})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_wrapped}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=empty})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Name (str{id}{val=SimpleLazyObject}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_setupfunc}))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=memo}))) (slice{slice} (Index (expr{value} (Call (expr{func} (Name (str{id}{val=id}))) (expr*{args} (expr (Name (str{id}{val=self}))))))))))) (expr{value} (Name (str{id}{val=result})))))
(root (Return (expr{value} (Name (str{id}{val=result})))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=copy}))) (str{attr}{val=deepcopy}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_wrapped}))) (expr (Name (str{id}{val=memo}))))))))
(root (ClassDef (str{name}{val=lazy_property}) (expr*{bases} (expr (Name (str{id}{val=property})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__new__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=cls}))) (expr (Name (str{id}{val=fget}))) (expr (Name (str{id}{val=fset}))) (expr (Name (str{id}{val=fdel}))) (expr (Name (str{id}{val=doc})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=fget}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Name (str{id}{val=wraps}))) (expr*{args} (expr (Name (str{id}{val=fget})))))))))
(root (FunctionDef (str{name}{val=fget}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=instance}))) (expr (Name (str{id}{val=instance_type}))) (expr (Name (str{id}{val=name})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Attribute (expr{value} (Name (str{id}{val=fget}))) (str{attr}{val=__name__})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=instance}))) (expr (Name (str{id}{val=name}))))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=fset}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Name (str{id}{val=wraps}))) (expr*{args} (expr (Name (str{id}{val=fset})))))))))
(root (FunctionDef (str{name}{val=fset}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=instance}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=name})))) (expr*{defaults} (expr (Attribute (expr{value} (Name (str{id}{val=fset}))) (str{attr}{val=__name__})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=instance}))) (expr (Name (str{id}{val=name})))))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=fdel}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Name (str{id}{val=wraps}))) (expr*{args} (expr (Name (str{id}{val=fdel})))))))))
(root (FunctionDef (str{name}{val=fdel}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=instance}))) (expr (Name (str{id}{val=name})))) (expr*{defaults} (expr (Attribute (expr{value} (Name (str{id}{val=fdel}))) (str{attr}{val=__name__})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=instance}))) (expr (Name (str{id}{val=name}))))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=property}))) (expr*{args} (expr (Name (str{id}{val=fget}))) (expr (Name (str{id}{val=fset}))) (expr (Name (str{id}{val=fdel}))) (expr (Name (str{id}{val=doc}))))))))
(root (FunctionDef (str{name}{val=partition}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=predicate}))) (expr (Name (str{id}{val=values})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=results})))) (expr{value} (Tuple (expr*{elts} (expr (List (epsilon))) (expr (List (epsilon))))))))
(root (For (expr{target} (Name (str{id}{val=item}))) (expr{iter} (Name (str{id}{val=values}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=results}))) (slice{slice} (Index (expr{value} (Call (expr{func} (Name (str{id}{val=predicate}))) (expr*{args} (expr (Name (str{id}{val=item})))))))))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=item}))))))))
(root (Return (expr{value} (Name (str{id}{val=results})))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=version_info}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Tuple (expr*{elts} (expr (Num (int{n}{val=2}))) (expr (Num (int{n}{val=7}))) (expr (Num (int{n}{val=2}))))))))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=functools}) (alias*{names} (alias (str{name}{val=total_ordering}))) (int{level}{val=0})))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=total_ordering}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=cls})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=convert})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=__lt__}))) (expr (Str (str{s}{val=__le__}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=__ge__})))) (expr*{values} (expr (List (expr*{elts} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=other})))))) (expr{body} (UnaryOp (unaryop{op} (Not)) (expr{operand} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=self}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Name (str{id}{val=other})))))) (expr (Compare (expr{left} (Name (str{id}{val=self}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=other})))))))))))))))) (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=__le__}))) (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=other})))))) (expr{body} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=self}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Name (str{id}{val=other})))))) (expr (Compare (expr{left} (Name (str{id}{val=self}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=other})))))))))))))) (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=__ge__}))) (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=other})))))) (expr{body} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Compare (expr{left} (Name (str{id}{val=self}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Name (str{id}{val=other})))))))))))))))) (expr (List (expr*{elts} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=__ge__}))) (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=other})))))) (expr{body} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Compare (expr{left} (Name (str{id}{val=self}))) (cmpop*{ops} (cmpop (LtE))) (expr*{comparators} (expr (Name (str{id}{val=other})))))))) (expr (Compare (expr{left} (Name (str{id}{val=self}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=other})))))))))))))) (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=__lt__}))) (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=other})))))) (expr{body} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=self}))) (cmpop*{ops} (cmpop (LtE))) (expr*{comparators} (expr (Name (str{id}{val=other})))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Compare (expr{left} (Name (str{id}{val=self}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=other})))))))))))))))) (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=other})))))) (expr{body} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Compare (expr{left} (Name (str{id}{val=self}))) (cmpop*{ops} (cmpop (LtE))) (expr*{comparators} (expr (Name (str{id}{val=other})))))))))))))))) (expr (List (expr*{elts} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=__lt__}))) (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=other})))))) (expr{body} (UnaryOp (unaryop{op} (Not)) (expr{operand} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=self}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Name (str{id}{val=other})))))) (expr (Compare (expr{left} (Name (str{id}{val=self}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=other})))))))))))))))) (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=__ge__}))) (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=other})))))) (expr{body} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=self}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Name (str{id}{val=other})))))) (expr (Compare (expr{left} (Name (str{id}{val=self}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=other})))))))))))))) (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=__le__}))) (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=other})))))) (expr{body} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Compare (expr{left} (Name (str{id}{val=self}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Name (str{id}{val=other})))))))))))))))) (expr (List (expr*{elts} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=__le__}))) (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=other})))))) (expr{body} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Compare (expr{left} (Name (str{id}{val=self}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Name (str{id}{val=other})))))))) (expr (Compare (expr{left} (Name (str{id}{val=self}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=other})))))))))))))) (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=other})))))) (expr{body} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=self}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Name (str{id}{val=other})))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Compare (expr{left} (Name (str{id}{val=self}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=other})))))))))))))))) (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=__lt__}))) (expr (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=other})))))) (expr{body} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Compare (expr{left} (Name (str{id}{val=self}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Name (str{id}{val=other})))))))))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=roots})))) (expr{value} (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=set}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=dir}))) (expr*{args} (expr (Name (str{id}{val=cls}))))))))) (operator{op} (BitAnd)) (expr{right} (Call (expr{func} (Name (str{id}{val=set}))) (expr*{args} (expr (Name (str{id}{val=convert}))))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=roots}))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=root})))) (expr{value} (Call (expr{func} (Name (str{id}{val=max}))) (expr*{args} (expr (Name (str{id}{val=roots}))))))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=opname}))) (expr (Name (str{id}{val=opfunc})))))) (expr{iter} (Subscript (expr{value} (Name (str{id}{val=convert}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=root}))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=opname}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=roots})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=opfunc}))) (str{attr}{val=__name__})))) (expr{value} (Name (str{id}{val=opname})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=opfunc}))) (str{attr}{val=__doc__})))) (expr{value} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=int}))) (expr (Name (str{id}{val=opname})))))) (str{attr}{val=__doc__})))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=setattr}))) (expr*{args} (expr (Name (str{id}{val=cls}))) (expr (Name (str{id}{val=opname}))) (expr (Name (str{id}{val=opfunc}))))))))
(root (Return (expr{value} (Name (str{id}{val=cls})))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=re})))))
(root (Import (alias*{names} (alias (str{name}{val=sys})))))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=force_text})) (alias (str{name}{val=force_str}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.functional}) (alias*{names} (alias (str{name}{val=allow_lazy}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.safestring}) (alias*{names} (alias (str{name}{val=SafeData})) (alias (str{name}{val=mark_safe}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.six.moves.urllib.parse}) (alias*{names} (alias (str{name}{val=quote})) (alias (str{name}{val=unquote})) (alias (str{name}{val=urlsplit})) (alias (str{name}{val=urlunsplit}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.text}) (alias*{names} (alias (str{name}{val=normalize_newlines}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=html_parser}) (alias*{names} (alias (str{name}{val=HTMLParser})) (alias (str{name}{val=HTMLParseError}))) (int{level}{val=1})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=TRAILING_PUNCTUATION})))) (expr{value} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=_STR:3_}))) (expr (Str (str{s}{val=_STR:4_}))) (expr (Str (str{s}{val=_STR:5_}))) (expr (Str (str{s}{val=_STR:6_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=WRAPPING_PUNCTUATION})))) (expr{value} (List (expr*{elts} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_})))))) (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=_STR:3_})))))) (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=[}))) (expr (Str (str{s}{val=]})))))) (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=&lt;}))) (expr (Str (str{s}{val=&gt;})))))) (expr (Tuple (expr*{elts} (expr (Str (str{s}{val="}))) (expr (Str (str{s}{val="})))))) (expr (Tuple (expr*{elts} (expr (Str (str{s}{val='}))) (expr (Str (str{s}{val='})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=DOTS})))) (expr{value} (List (expr*{elts} (expr (Str (str{s}{val=_STR:6_}))) (expr (Str (str{s}{val=_STR:7_}))) (expr (Str (str{s}{val=_STR:8_}))) (expr (Str (str{s}{val=_STR:9_}))) (expr (Str (str{s}{val=_STR:10_}))) (expr (Str (str{s}{val=_STR:11_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=unencoded_ampersands_re})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=word_split_re})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=simple_url_re})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=IGNORECASE}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=simple_url_2_re})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=IGNORECASE}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=simple_email_re})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=^\S+@\S+\.\S+$}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=link_target_attribute_re})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=html_gunk_re})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=(?:<br clear="all">|<i><\/i>|<b><\/b>|<em><\/em>|<strong><\/strong>|<\/?smallcaps>|<\/?uppercase>)}))) (expr (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=IGNORECASE}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=hard_coded_bullets_re})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:1_}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=|}))) (str{attr}{val=join}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=escape}))) (expr*{args} (expr (Name (str{id}{val=x})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=x}))) (expr{iter} (Name (str{id}{val=DOTS})))))))))))) (expr (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=DOTALL}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=trailing_empty_content_re})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_}))))))))
(root (FunctionDef (str{name}{val=escape}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=text})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=mark_safe}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=text})))))) (str{attr}{val=replace}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_})))))) (str{attr}{val=replace}))) (expr*{args} (expr (Str (str{s}{val=<}))) (expr (Str (str{s}{val=&lt;})))))) (str{attr}{val=replace}))) (expr*{args} (expr (Str (str{s}{val=>}))) (expr (Str (str{s}{val=&gt;})))))) (str{attr}{val=replace}))) (expr*{args} (expr (Str (str{s}{val="}))) (expr (Str (str{s}{val=&quot;})))))) (str{attr}{val=replace}))) (expr*{args} (expr (Str (str{s}{val='}))) (expr (Str (str{s}{val=&#39;})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=escape})))) (expr{value} (Call (expr{func} (Name (str{id}{val=allow_lazy}))) (expr*{args} (expr (Name (str{id}{val=escape}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_js_escapes})))) (expr{value} (Dict (expr*{keys} (expr (Call (expr{func} (Name (str{id}{val=ord}))) (expr*{args} (expr (Str (str{s}{val=\})))))) (expr (Call (expr{func} (Name (str{id}{val=ord}))) (expr*{args} (expr (Str (str{s}{val='})))))) (expr (Call (expr{func} (Name (str{id}{val=ord}))) (expr*{args} (expr (Str (str{s}{val="})))))) (expr (Call (expr{func} (Name (str{id}{val=ord}))) (expr*{args} (expr (Str (str{s}{val=>})))))) (expr (Call (expr{func} (Name (str{id}{val=ord}))) (expr*{args} (expr (Str (str{s}{val=<})))))) (expr (Call (expr{func} (Name (str{id}{val=ord}))) (expr*{args} (expr (Str (str{s}{val=&})))))) (expr (Call (expr{func} (Name (str{id}{val=ord}))) (expr*{args} (expr (Str (str{s}{val==})))))) (expr (Call (expr{func} (Name (str{id}{val=ord}))) (expr*{args} (expr (Str (str{s}{val=-})))))) (expr (Call (expr{func} (Name (str{id}{val=ord}))) (expr*{args} (expr (Str (str{s}{val=;})))))) (expr (Call (expr{func} (Name (str{id}{val=ord}))) (expr*{args} (expr (Str (str{s}{val=\u2028})))))) (expr (Call (expr{func} (Name (str{id}{val=ord}))) (expr*{args} (expr (Str (str{s}{val=\u2029}))))))) (expr*{values} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=\u0027}))) (expr (Str (str{s}{val=\u0022}))) (expr (Str (str{s}{val=\u003E}))) (expr (Str (str{s}{val=\u003C}))) (expr (Str (str{s}{val=\u0026}))) (expr (Str (str{s}{val=\u003D}))) (expr (Str (str{s}{val=\u002D}))) (expr (Str (str{s}{val=\u003B}))) (expr (Str (str{s}{val=\u2028}))) (expr (Str (str{s}{val=\u2029}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=_js_escapes}))) (str{attr}{val=update}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Tuple (expr*{elts} (expr (Call (expr{func} (Name (str{id}{val=ord}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=%c}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=z})))))))) (expr (BinOp (expr{left} (Str (str{s}{val=\u%04X}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=z})))))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=z}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=range}))) (expr*{args} (expr (Num (int{n}{val=32})))))))))))))))
(root (FunctionDef (str{name}{val=escapejs}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=mark_safe}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=value})))))) (str{attr}{val=translate}))) (expr*{args} (expr (Name (str{id}{val=_js_escapes})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=escapejs})))) (expr{value} (Call (expr{func} (Name (str{id}{val=allow_lazy}))) (expr*{args} (expr (Name (str{id}{val=escapejs}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))))))))
(root (FunctionDef (str{name}{val=conditional_escape}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=text})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=text}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=text}))) (str{attr}{val=__html__})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=escape}))) (expr*{args} (expr (Name (str{id}{val=text}))))))))
(root (FunctionDef (str{name}{val=format_html}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=format_string})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=args_safe})))) (expr{value} (Call (expr{func} (Name (str{id}{val=map}))) (expr*{args} (expr (Name (str{id}{val=conditional_escape}))) (expr (Name (str{id}{val=args}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=kwargs_safe})))) (expr{value} (Call (expr{func} (Name (str{id}{val=dict}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Call (expr{func} (Name (str{id}{val=conditional_escape}))) (expr*{args} (expr (Name (str{id}{val=v}))))))))) (comprehension*{generators} (comprehension (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Name (str{id}{val=v})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=iteritems}))) (expr*{args} (expr (Name (str{id}{val=kwargs})))))))))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=mark_safe}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=format_string}))) (str{attr}{val=format}))) (expr{starargs} (Name (str{id}{val=args_safe}))) (expr{kwargs} (Name (str{id}{val=kwargs_safe}))))))))))
(root (FunctionDef (str{name}{val=format_html_join}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=sep}))) (expr (Name (str{id}{val=format_string}))) (expr (Name (str{id}{val=args_generator})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=mark_safe}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=conditional_escape}))) (expr*{args} (expr (Name (str{id}{val=sep})))))) (str{attr}{val=join}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Call (expr{func} (Name (str{id}{val=format_html}))) (expr*{args} (expr (Name (str{id}{val=format_string})))) (expr{starargs} (Call (expr{func} (Name (str{id}{val=tuple}))) (expr*{args} (expr (Name (str{id}{val=args})))))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=args}))) (expr{iter} (Name (str{id}{val=args_generator})))))))))))))))
(root (FunctionDef (str{name}{val=linebreaks}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=autoescape})))) (expr*{defaults} (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=normalize_newlines}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=paras})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=split}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=value}))))))))
(root (If (expr{test} (Name (str{id}{val=autoescape}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=paras})))) (expr{value} (ListComp (expr{elt} (BinOp (expr{left} (Str (str{s}{val=<p>%s</p>}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=escape}))) (expr*{args} (expr (Name (str{id}{val=p})))))) (str{attr}{val=replace}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_})))))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=p}))) (expr{iter} (Name (str{id}{val=paras})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=paras})))) (expr{value} (ListComp (expr{elt} (BinOp (expr{left} (Str (str{s}{val=<p>%s</p>}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=p}))) (str{attr}{val=replace}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_})))))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=p}))) (expr{iter} (Name (str{id}{val=paras})))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=_STR:1_}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=paras}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=linebreaks})))) (expr{value} (Call (expr{func} (Name (str{id}{val=allow_lazy}))) (expr*{args} (expr (Name (str{id}{val=linebreaks}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))))))))
(root (ClassDef (str{name}{val=MLStripper}) (expr*{bases} (expr (Name (str{id}{val=HTMLParser})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=version_info}))) (slice{slice} (Slice (expr{upper} (Num (int{n}{val=2}))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Tuple (expr*{elts} (expr (Num (int{n}{val=3}))) (expr (Num (int{n}{val=2}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=HTMLParser}))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=self})))) (keyword*{keywords} (keyword (str{arg}{val=strict}) (expr{value} (Name (str{id}{val=False})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=HTMLParser}))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=self}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=reset})))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fed})))) (expr{value} (List (epsilon)))))
(root (FunctionDef (str{name}{val=handle_data}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=d})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fed}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=d}))))))))
(root (FunctionDef (str{name}{val=handle_entityref}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fed}))) (str{attr}{val=append}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=name}))))))))))
(root (FunctionDef (str{name}{val=handle_charref}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fed}))) (str{attr}{val=append}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=name}))))))))))
(root (FunctionDef (str{name}{val=get_data}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=}))) (str{attr}{val=join}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=fed}))))))))
(root (FunctionDef (str{name}{val=_strip_once}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=s})))) (expr{value} (Call (expr{func} (Name (str{id}{val=MLStripper})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=s}))) (str{attr}{val=feed}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=HTMLParseError}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Name (str{id}{val=value})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=s}))) (str{attr}{val=close})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=HTMLParseError}))) (expr (Name (str{id}{val=UnboundLocalError})))))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (BinOp (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=s}))) (str{attr}{val=get_data}))))) (operator{op} (Add)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=s}))) (str{attr}{val=rawdata})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=s}))) (str{attr}{val=get_data})))))))
