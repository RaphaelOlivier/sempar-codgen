Assign -> (expr*{targets}), (expr{value})
Attribute -> (expr{value}), (str{attr})
AugAssign -> (expr{target}), (operator{op}), (expr{value})
BinOp -> (expr{left}), (operator{op}), (expr{right})
BoolOp -> (boolop{op}), (expr*{values})
Call -> (expr{func})
Call -> (expr{func}), (expr*{args})
Call -> (expr{func}), (expr*{args}), (keyword*{keywords})
Call -> (expr{func}), (keyword*{keywords})
ClassDef -> (str{name}), (expr*{bases}), (stmt*{body})
Compare -> (expr{left}), (cmpop*{ops}), (expr*{comparators})
Expr -> (expr{value})
For -> (expr{target}), (expr{iter}), (stmt*{body})
FunctionDef -> (str{name}), (arguments{args}), (stmt*{body})
If -> (expr{test}), (stmt*{body})
If -> (expr{test}), (stmt*{body}), (stmt*{orelse})
ImportFrom -> (str{module}), (alias*{names}), (int{level})
Index -> (expr{value})
Lambda -> (arguments{args}), (expr{body})
List -> (epsilon)
List -> (expr*{elts})
ListComp -> (expr{elt}), (comprehension*{generators})
Name -> (str{id})
Num -> (int{n})
Return -> (expr{value})
Slice -> (epsilon)
Str -> (str{s})
Subscript -> (expr{value}), (slice{slice})
Tuple -> (expr*{elts})
UnaryOp -> (unaryop{op}), (expr{operand})
alias -> (str{name})
alias* -> (alias)
alias* -> (alias), (alias), (alias), (alias), (alias), (alias), (alias), (alias), (alias), (alias)
arguments -> (arguments)
arguments -> (expr*{args})
boolop -> (And)
boolop -> (Or)
cmpop -> (Eq)
cmpop -> (Gt)
cmpop -> (GtE)
cmpop -> (In)
cmpop -> (Is)
cmpop -> (IsNot)
cmpop -> (Lt)
cmpop -> (LtE)
cmpop -> (NotEq)
cmpop* -> (cmpop)
comprehension -> (expr{target}), (expr{iter}), (expr*{ifs})
comprehension* -> (comprehension)
expr -> (Attribute)
expr -> (BinOp)
expr -> (BoolOp)
expr -> (Call)
expr -> (Compare)
expr -> (Lambda)
expr -> (List)
expr -> (ListComp)
expr -> (Name)
expr -> (Num)
expr -> (Str)
expr -> (Subscript)
expr -> (Tuple)
expr -> (UnaryOp)
expr* -> (expr)
expr* -> (expr), (expr)
expr* -> (expr), (expr), (expr)
expr* -> (expr), (expr), (expr), (expr)
expr* -> (expr), (expr), (expr), (expr), (expr)
expr* -> (expr), (expr), (expr), (expr), (expr), (expr)
expr* -> (expr), (expr), (expr), (expr), (expr), (expr), (expr), (expr), (expr), (expr), (expr)
keyword -> (str{arg}), (expr{value})
keyword* -> (keyword)
keyword* -> (keyword), (keyword)
keyword* -> (keyword), (keyword), (keyword)
keyword* -> (keyword), (keyword), (keyword), (keyword)
operator -> (Add)
operator -> (Sub)
root -> (ClassDef)
slice -> (Index)
slice -> (Slice)
stmt -> (Assign)
stmt -> (AugAssign)
stmt -> (Break)
stmt -> (ClassDef)
stmt -> (Expr)
stmt -> (For)
stmt -> (FunctionDef)
stmt -> (If)
stmt -> (ImportFrom)
stmt -> (Return)
stmt* -> (stmt)
stmt* -> (stmt), (stmt)
stmt* -> (stmt), (stmt), (stmt)
stmt* -> (stmt), (stmt), (stmt), (stmt)
stmt* -> (stmt), (stmt), (stmt), (stmt), (stmt)
stmt* -> (stmt), (stmt), (stmt), (stmt), (stmt), (stmt)
stmt* -> (stmt), (stmt), (stmt), (stmt), (stmt), (stmt), (stmt)
stmt* -> (stmt), (stmt), (stmt), (stmt), (stmt), (stmt), (stmt), (stmt)
stmt* -> (stmt), (stmt), (stmt), (stmt), (stmt), (stmt), (stmt), (stmt), (stmt), (stmt), (stmt)
unaryop -> (Not)
