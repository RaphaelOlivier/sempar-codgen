**************************************************
example# 0
NAME_BEGIN Acidic Swamp Ooze NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Battlecry : Destroy your opponent 's weapon . DESC_END

class AcidicSwampOoze(MinionCard):
    def __init__(self):
        super().__init__("Acidic Swamp Ooze", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Destroy(), WeaponSelector(EnemyPlayer())))

    def create_minion(self, player):
        return Minion(3, 2)
**************************************************
**************************************************
example# 1
NAME_BEGIN Ancestral Healing NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 0 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Shaman PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Restore a minion to full Health and give it Taunt . DESC_END

class AncestralHealing(SpellCard):
    def __init__(self):
        super().__init__("Ancestral Healing", 0, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)

        self.target.heal(player.effective_heal_power(self.target.calculate_max_health()), self)
        self.target.taunt = True
**************************************************
**************************************************
example# 2
NAME_BEGIN Animal Companion NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Hunter PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Summon a random Beast Companion . DESC_END

class AnimalCompanion(SpellCard):
    def __init__(self):
        super().__init__("Animal Companion", 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON)

    def use(self, player, game):
        super().use(player, game)

        beast_list = [hearthbreaker.cards.minions.hunter.Huffer(), hearthbreaker.cards.minions.hunter.Misha(), hearthbreaker.cards.minions.hunter.Leokk()]
        card = game.random_choice(beast_list)
        card.summon(player, player.game, len(player.minions))

    def can_use(self, player, game):
        return super().can_use(player, game) and len(player.minions) < 7
**************************************************
**************************************************
example# 3
NAME_BEGIN Arcane Explosion NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Mage PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Deal $ 1 damage to all enemy minions . DESC_END

class ArcaneExplosion(SpellCard):
    def __init__(self):
        super().__init__("Arcane Explosion", 2, CHARACTER_CLASS.MAGE, CARD_RARITY.FREE)

    def use(self, player, game):
        super().use(player, game)
        for minion in copy.copy(game.other_player.minions):
            minion.damage(player.effective_spell_damage(1), self)
**************************************************
**************************************************
example# 4
NAME_BEGIN Arcane Intellect NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Mage PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Draw 2 cards . DESC_END

class ArcaneIntellect(SpellCard):
    def __init__(self):
        super().__init__("Arcane Intellect", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.FREE)

    def use(self, player, game):
        super().use(player, game)
        for c in range(0, 2):
            player.draw()
**************************************************
**************************************************
example# 5
NAME_BEGIN Arcane Missiles NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Mage PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Deal $ 3 damage randomly split among all enemies . DESC_END

class ArcaneMissiles(SpellCard):
    def __init__(self):
        super().__init__("Arcane Missiles", 1, CHARACTER_CLASS.MAGE, CARD_RARITY.FREE)

    def use(self, player, game):
        super().use(player, game)
        for i in range(0, player.effective_spell_damage(3)):
            targets = copy.copy(game.other_player.minions)
            targets.append(game.other_player.hero)
            target = game.random_choice(targets)
            target.damage(1, self)
**************************************************
**************************************************
example# 6
NAME_BEGIN Arcane Shot NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Hunter PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Deal $ 2 damage . DESC_END

class ArcaneShot(SpellCard):
    def __init__(self):
        super().__init__("Arcane Shot", 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(2), self)
**************************************************
**************************************************
example# 7
NAME_BEGIN Arcanite Reaper NAME_END ATK_BEGIN 5 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN 2 DUR_END TYPE_BEGIN Weapon TYPE_END PLAYER_CLS_BEGIN Warrior PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN NIL DESC_END

class ArcaniteReaper(WeaponCard):
    def __init__(self):
        super().__init__("Arcanite Reaper", 5, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON)

    def create_weapon(self, player):
        return Weapon(5, 2)
**************************************************
**************************************************
example# 8
NAME_BEGIN Assassinate NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Rogue PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Destroy an enemy minion . DESC_END

class Assassinate(SpellCard):
    def __init__(self):
        super().__init__("Assassinate", 5, CHARACTER_CLASS.ROGUE, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_enemy_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)

        self.target.die(self)
**************************************************
**************************************************
example# 9
NAME_BEGIN Backstab NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 0 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Rogue PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Deal $ 2 damage to an undamaged minion . DESC_END

class Backstab(SpellCard):
    def __init__(self):
        super().__init__("Backstab", 0, CHARACTER_CLASS.ROGUE, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_minion_spell_target, filter_func=lambda target: target.health == target.calculate_max_health() and target.spell_targetable())

    def use(self, player, game):
        super().use(player, game)

        self.target.damage(player.effective_spell_damage(2), self)
**************************************************
**************************************************
example# 10
NAME_BEGIN Blessing of Kings NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Paladin PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Give a minion +4/+4 . ( +4 Attack/+4 Health ) DESC_END

class BlessingOfKings(SpellCard):
    def __init__(self):
        super().__init__("Blessing of Kings", 4, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.change_attack(4)
        self.target.increase_health(4)
**************************************************
**************************************************
example# 11
NAME_BEGIN Blessing of Might NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Paladin PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Give a minion +3 Attack . DESC_END

class BlessingOfMight(SpellCard):
    def __init__(self):
        super().__init__("Blessing of Might", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.change_attack(3)
**************************************************
**************************************************
example# 12
NAME_BEGIN Bloodfen Raptor NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN NIL DESC_END

class BloodfenRaptor(MinionCard):
    def __init__(self):
        super().__init__("Bloodfen Raptor", 2, CHARACTER_CLASS.ALL, CARD_RARITY.FREE, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(3, 2)
**************************************************
**************************************************
example# 13
NAME_BEGIN Bloodlust NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Shaman PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Give your minions +3 Attack this turn . DESC_END

class Bloodlust(SpellCard):
    def __init__(self):
        super().__init__("Bloodlust", 5, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON)

    def use(self, player, game):
        super().use(player, game)

        for minion in player.minions:
            minion.change_temp_attack(3)
**************************************************
**************************************************
example# 14
NAME_BEGIN Bluegill Warrior NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Murloc RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Charge DESC_END

class BluegillWarrior(MinionCard):
    def __init__(self):
        super().__init__("Bluegill Warrior", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC)

    def create_minion(self, player):
        return Minion(2, 1, charge=True)
**************************************************
**************************************************
example# 15
NAME_BEGIN Boar NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN NIL DESC_END

class Boar(MinionCard):
    def __init__(self):
        super().__init__("Boar", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(1, 1)
**************************************************
**************************************************
example# 16
NAME_BEGIN Charge NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Warrior PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Give a friendly minion +2 Attack and Charge . DESC_END

class Charge(SpellCard):
    def __init__(self):
        super().__init__("Charge", 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_friendly_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)

        self.target.change_attack(2)
        self.target.add_buff(Buff(_Charge()))
**************************************************
**************************************************
example# 17
NAME_BEGIN Chillwind Yeti NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN NIL DESC_END

class ChillwindYeti(MinionCard):
    def __init__(self):
        super().__init__("Chillwind Yeti", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(4, 5)
**************************************************
**************************************************
example# 18
NAME_BEGIN Claw NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Give your hero +2 Attack this turn and 2 Armor . DESC_END

class Claw(SpellCard):
    def __init__(self):
        super().__init__("Claw", 1, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE)

    def use(self, player, game):
        super().use(player, game)
        player.hero.change_temp_attack(2)
        player.hero.increase_armor(2)
**************************************************
**************************************************
example# 19
NAME_BEGIN Cleave NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Warrior PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Deal $ 2 damage to two random enemy minions . DESC_END

class Cleave(SpellCard):
    def __init__(self):
        super().__init__("Cleave", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON)

    def use(self, player, game):
        super().use(player, game)

        minions = copy.copy(game.other_player.minions)

        for i in range(0, 2):
            minion = game.random_choice(minions)
            minions.remove(minion)
            minion.damage(player.effective_spell_damage(2), self)

    def can_use(self, player, game):
        return super().can_use(player, game) and len(game.other_player.minions) >= 2
**************************************************
**************************************************
example# 20
NAME_BEGIN Consecration NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Paladin PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Deal $ 2 damage to all enemies . DESC_END

class Consecration(SpellCard):
    def __init__(self):
        super().__init__("Consecration", 4, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)

    def use(self, player, game):
        super().use(player, game)
        for minion in copy.copy(game.other_player.minions):
            minion.damage(player.effective_spell_damage(2), self)
        game.other_player.hero.damage(player.effective_spell_damage(2), self)
**************************************************
**************************************************
example# 21
NAME_BEGIN Core Hound NAME_END ATK_BEGIN 9 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 7 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN NIL DESC_END

class CoreHound(MinionCard):
    def __init__(self):
        super().__init__("Core Hound", 7, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(9, 5)
**************************************************
**************************************************
example# 22
NAME_BEGIN Corruption NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Warlock PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Choose an enemy minion . At the start of your turn , destroy it . DESC_END

class Corruption(SpellCard):
    def __init__(self):
        super().__init__("Corruption", 1, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_enemy_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.add_effect(Effect(TurnStarted(player=EnemyPlayer()), ActionTag(Kill(), SelfSelector())))
**************************************************
**************************************************
example# 23
NAME_BEGIN Dalaran Mage NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Spell Damage +1 DESC_END

class DalaranMage(MinionCard):
    def __init__(self):
        super().__init__("Dalaran Mage", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(1, 4, spell_damage=1)
**************************************************
**************************************************
example# 24
NAME_BEGIN Divine Spirit NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Priest PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Double a minion 's Health . DESC_END

class DivineSpirit(SpellCard):
    def __init__(self):
        super().__init__("Divine Spirit", 2, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)

        self.target.increase_health(self.target.health)
**************************************************
**************************************************
example# 25
NAME_BEGIN Dragonling Mechanic NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Battlecry : Summon a 2/1 Mechanical Dragonling . DESC_END

class DragonlingMechanic(MinionCard):
    def __init__(self):
        super().__init__("Dragonling Mechanic", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Summon(MechanicalDragonling()), PlayerSelector()))

    def create_minion(self, player):
        return Minion(2, 4)
**************************************************
**************************************************
example# 26
NAME_BEGIN Drain Life NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Warlock PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Deal $ 2 damage . Restore # 2 Health to your hero . DESC_END

class DrainLife(SpellCard):
    def __init__(self):
        super().__init__("Drain Life", 3, CHARACTER_CLASS.WARLOCK, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(2), self)
        player.hero.heal(player.effective_heal_power(2), self)
**************************************************
**************************************************
example# 27
NAME_BEGIN Dread Infernal NAME_END ATK_BEGIN 6 ATK_END DEF_BEGIN 6 DEF_END COST_BEGIN 6 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Warlock PLAYER_CLS_END RACE_BEGIN Demon RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Battlecry : Deal 1 damage to ALL other characters . DESC_END

class DreadInfernal(MinionCard):
    def __init__(self):
        super().__init__("Dread Infernal", 6, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON, battlecry=Battlecry(Damage(1), CharacterSelector(players=BothPlayer())))

    def create_minion(self, player):
        return Minion(6, 6)
**************************************************
**************************************************
example# 28
NAME_BEGIN Elven Archer NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Battlecry : Deal 1 damage . DESC_END

class ElvenArcher(MinionCard):
    def __init__(self):
        super().__init__("Elven Archer", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Damage(1), CharacterSelector(players=BothPlayer(), picker=UserPicker())))

    def create_minion(self, player):
        return Minion(1, 1)
**************************************************
**************************************************
example# 29
NAME_BEGIN Excess Mana NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 0 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN Draw a card . ( You can only have 10 Mana in your tray . ) DESC_END

class ExcessMana(SpellCard):
    def __init__(self):
        super().__init__("Excess Mana", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, False)

    def use(self, player, game):
        super().use(player, game)
        player.draw()
**************************************************
**************************************************
example# 30
NAME_BEGIN Execute NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Warrior PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Destroy a damaged enemy minion . DESC_END

class Execute(SpellCard):
    def __init__(self):
        super().__init__("Execute", 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_enemy_minion_spell_target, filter_func=lambda target: target.health != target.calculate_max_health() and target.spell_targetable())

    def use(self, player, game):
        super().use(player, game)

        self.target.die(self)
**************************************************
**************************************************
example# 31
NAME_BEGIN Fan of Knives NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Rogue PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Deal $ 1 damage to all enemy minions . Draw a card . DESC_END

class FanOfKnives(SpellCard):
    def __init__(self):
        super().__init__("Fan of Knives", 3, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON)

    def use(self, player, game):
        super().use(player, game)

        for minion in copy.copy(game.other_player.minions):
            minion.damage(player.effective_spell_damage(1), self)

        player.draw()
**************************************************
**************************************************
example# 32
NAME_BEGIN Fireball NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Mage PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Deal $ 6 damage . DESC_END

class Fireball(SpellCard):
    def __init__(self):
        super().__init__("Fireball", 4, CHARACTER_CLASS.MAGE, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(6), self)
**************************************************
**************************************************
example# 33
NAME_BEGIN Flamestrike NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 7 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Mage PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Deal $ 4 damage to all enemy minions . DESC_END

class Flamestrike(SpellCard):
    def __init__(self):
        super().__init__("Flamestrike", 7, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON)

    def use(self, player, game):
        super().use(player, game)
        for minion in copy.copy(game.other_player.minions):
            minion.damage(player.effective_spell_damage(4), self)
**************************************************
**************************************************
example# 34
NAME_BEGIN Flametongue Totem NAME_END ATK_BEGIN 0 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Shaman PLAYER_CLS_END RACE_BEGIN Totem RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Adjacent minions have +2 Attack . DESC_END

class FlametongueTotem(MinionCard):
    def __init__(self):
        super().__init__("Flametongue Totem", 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, minion_type=MINION_TYPE.TOTEM)

    def create_minion(self, player):
        return Minion(0, 3, auras=[Aura(ChangeAttack(2), MinionSelector(Adjacent()))])
**************************************************
**************************************************
example# 35
NAME_BEGIN Frog NAME_END ATK_BEGIN 0 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 0 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Taunt DESC_END

class Frog(MinionCard):
    def __init__(self):
        super().__init__("Frog", 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, p):
        return Minion(0, 1, taunt=True)
**************************************************
**************************************************
example# 36
NAME_BEGIN Frost Nova NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Mage PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Freeze all enemy minions . DESC_END

class FrostNova(SpellCard):
    def __init__(self):
        super().__init__("Frost Nova", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON)

    def use(self, player, game):
        super().use(player, game)
        for minion in game.other_player.minions:
            minion.add_buff(Buff(Frozen()))
**************************************************
**************************************************
example# 37
NAME_BEGIN Frost Shock NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Shaman PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Deal $ 1 damage to an enemy character and Freeze it . DESC_END

class FrostShock(SpellCard):
    def __init__(self):
        super().__init__("Frost Shock", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_enemy_spell_target)

    def use(self, player, game):
        super().use(player, game)

        self.target.damage(player.effective_spell_damage(1), self)
        self.target.add_buff(Buff(Frozen()))
**************************************************
**************************************************
example# 38
NAME_BEGIN Frostbolt NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Mage PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Deal $ 3 damage to a character and Freeze it . DESC_END

class Frostbolt(SpellCard):
    def __init__(self):
        super().__init__("Frostbolt", 2, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(3), self)
        self.target.add_buff(Buff(Frozen()))
**************************************************
**************************************************
example# 39
NAME_BEGIN Frostwolf Grunt NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Taunt DESC_END

class FrostwolfGrunt(MinionCard):
    def __init__(self):
        super().__init__("Frostwolf Grunt", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(2, 2, taunt=True)
**************************************************
**************************************************
example# 40
NAME_BEGIN Goldshire Footman NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Taunt DESC_END

class GoldshireFootman(MinionCard):
    def __init__(self):
        super().__init__("Goldshire Footman", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(1, 2, taunt=True)
**************************************************
**************************************************
example# 41
NAME_BEGIN Grimscale Oracle NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Murloc RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN ALL other Murlocs have +1 Attack . DESC_END

class GrimscaleOracle(MinionCard):
    def __init__(self):
        super().__init__("Grimscale Oracle", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC)

    def create_minion(self, player):
        return Minion(1, 1, auras=[Aura(ChangeAttack(1), MinionSelector(IsType(MINION_TYPE.MURLOC), BothPlayer()))])
**************************************************
**************************************************
example# 42
NAME_BEGIN Guardian of Kings NAME_END ATK_BEGIN 5 ATK_END DEF_BEGIN 6 DEF_END COST_BEGIN 7 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Paladin PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Battlecry : Restore 6 Health to your hero . DESC_END

class GuardianOfKings(MinionCard):
    def __init__(self):
        super().__init__("Guardian of Kings", 7, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON, battlecry=Battlecry(Heal(6), HeroSelector()))

    def create_minion(self, player):
        return Minion(5, 6)
**************************************************
**************************************************
example# 43
NAME_BEGIN Gurubashi Berserker NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 7 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Whenever this minion takes damage , gain +3 Attack . DESC_END

class GurubashiBerserker(MinionCard):
    def __init__(self):
        super().__init__("Gurubashi Berserker", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(2, 7, effects=[
            Effect(CharacterDamaged(condition=MinionIsTarget()), ActionTag(Give(ChangeAttack(3)), SelfSelector()))])
**************************************************
**************************************************
example# 44
NAME_BEGIN Hammer of Wrath NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Paladin PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Deal $ 3 damage . NL Draw a card . DESC_END

class HammerOfWrath(SpellCard):
    def __init__(self):
        super().__init__("Hammer of Wrath", 4, CHARACTER_CLASS.PALADIN, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_spell_target)

    def use(self, player, game):
        super().use(player, game)

        self.target.damage(player.effective_spell_damage(3), self)
        player.draw()
**************************************************
**************************************************
example# 45
NAME_BEGIN Hand of Protection NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Paladin PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Give a minion Divine Shield . DESC_END

class HandOfProtection(SpellCard):
    def __init__(self):
        super().__init__("Hand of Protection", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)

        self.target.divine_shield = True
**************************************************
**************************************************
example# 46
NAME_BEGIN Healing Totem NAME_END ATK_BEGIN 0 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Shaman PLAYER_CLS_END RACE_BEGIN Totem RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN At the end of your turn , restore 1 Health to all friendly minions . DESC_END

class HealingTotem(MinionCard):
    def __init__(self):
        super().__init__("Healing Totem", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)

    def create_minion(self, player):
        return Minion(0, 2, effects=[Effect(TurnEnded(), ActionTag(Heal(1), MinionSelector(condition=None)))])
**************************************************
**************************************************
example# 47
NAME_BEGIN Healing Touch NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Restore # 8 Health . DESC_END

class HealingTouch(SpellCard):
    def __init__(self):
        super().__init__("Healing Touch", 3, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.heal(player.effective_heal_power(8), self)
**************************************************
**************************************************
example# 48
NAME_BEGIN Hex NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Shaman PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Transform a minion into a 0/1 Frog with Taunt . DESC_END

class Hex(SpellCard):
    def __init__(self):
        super().__init__("Hex", 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)

        frog = hearthbreaker.cards.minions.neutral.Frog()
        minion = frog.create_minion(None)
        minion.card = frog
        self.target.replace(minion)
**************************************************
**************************************************
example# 49
NAME_BEGIN Holy Light NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Paladin PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Restore # 6 Health . DESC_END

class HolyLight(SpellCard):
    def __init__(self):
        super().__init__("Holy Light", 2, CHARACTER_CLASS.PALADIN, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_spell_target)

    def use(self, player, game):
        super().use(player, game)

        self.target.heal(player.effective_heal_power(6), self)
**************************************************
**************************************************
example# 50
NAME_BEGIN Holy Nova NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Priest PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Deal $ 2 damage to all enemies . Restore # 2 Health to all friendly characters . DESC_END

class HolyNova(SpellCard):
    def __init__(self):
        super().__init__("Holy Nova", 5, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON)

    def use(self, player, game):
        super().use(player, game)

        for minion in copy.copy(game.other_player.minions):
            minion.damage(player.effective_spell_damage(2), self)

        for minion in player.minions:
            minion.heal(player.effective_heal_power(2), self)
**************************************************
**************************************************
example# 51
NAME_BEGIN Holy Smite NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Priest PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Deal $ 2 damage . DESC_END

class HolySmite(SpellCard):
    def __init__(self):
        super().__init__("Holy Smite", 1, CHARACTER_CLASS.PRIEST, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_spell_target)

    def use(self, player, game):
        super().use(player, game)

        self.target.damage(player.effective_spell_damage(2), self)
**************************************************
**************************************************
example# 52
NAME_BEGIN Houndmaster NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Hunter PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Battlecry : Give a friendly Beast +2/+2 and Taunt . DESC_END

class Houndmaster(MinionCard):
    def __init__(self):
        super().__init__("Houndmaster", 4, CHARACTER_CLASS.HUNTER, CARD_RARITY.FREE, minion_type=MINION_TYPE.NONE, battlecry=Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2)), Buff(Taunt())]), MinionSelector(IsType(MINION_TYPE.BEAST), picker=UserPicker())))

    def create_minion(self, player):
        return Minion(4, 3)
**************************************************
**************************************************
example# 53
NAME_BEGIN Huffer NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Hunter PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Charge DESC_END

class Huffer(MinionCard):
    def __init__(self):
        super().__init__("Huffer", 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(4, 2, charge=True)
**************************************************
**************************************************
example# 54
NAME_BEGIN Humility NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Paladin PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Change a minion 's Attack to 1 . DESC_END

class Humility(SpellCard):
    def __init__(self):
        super().__init__("Humility", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)

        self.target.change_attack(1 - self.target.calculate_attack())
**************************************************
**************************************************
example# 55
NAME_BEGIN Hunter 's Mark NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 0 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Hunter PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Change a minion 's Health to 1 . DESC_END

class HuntersMark(SpellCard):
    def __init__(self):
        super().__init__("Hunter's Mark", 0, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.set_health_to(1)
**************************************************
**************************************************
example# 56
NAME_BEGIN Ironforge Rifleman NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Battlecry : Deal 1 damage . DESC_END

class IronforgeRifleman(MinionCard):
    def __init__(self):
        super().__init__("Ironforge Rifleman", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.NONE, battlecry=Battlecry(Damage(1), CharacterSelector(players=BothPlayer(), picker=UserPicker())))

    def create_minion(self, player):
        return Minion(2, 2)
**************************************************
**************************************************
example# 57
NAME_BEGIN Ironfur Grizzly NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Taunt DESC_END

class IronfurGrizzly(MinionCard):
    def __init__(self):
        super().__init__("Ironfur Grizzly", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(3, 3, taunt=True)
**************************************************
**************************************************
example# 58
NAME_BEGIN Kill Command NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Hunter PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Deal $ 3 damage . If you have a Beast , deal $ 5 damage instead . DESC_END

class KillCommand(SpellCard):
    def __init__(self):
        super().__init__("Kill Command", 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target)

    def use(self, player, game):
        super().use(player, game)
        beasts = hearthbreaker.targeting.find_friendly_minion_battlecry_target(
            player.game, lambda x: x.card.minion_type is MINION_TYPE.BEAST)
        if beasts is None:
            self.target.damage(player.effective_spell_damage(3), self)
        else:
            self.target.damage(player.effective_spell_damage(5), self)
**************************************************
**************************************************
example# 59
NAME_BEGIN Kobold Geomancer NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Spell Damage +1 DESC_END

class KoboldGeomancer(MinionCard):
    def __init__(self):
        super().__init__("Kobold Geomancer", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(2, 2, spell_damage=1)
**************************************************
**************************************************
example# 60
NAME_BEGIN Kor'kron Elite NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Warrior PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Charge DESC_END

class KorkronElite(MinionCard):
    def __init__(self):
        super().__init__("Kor'kron Elite", 4, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(4, 3, charge=True)
**************************************************
**************************************************
example# 61
NAME_BEGIN Leokk NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Hunter PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Your other minions have +1 Attack . DESC_END

class Leokk(MinionCard):
    def __init__(self):
        super().__init__("Leokk", 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(2, 4, auras=[Aura(ChangeAttack(1), MinionSelector())])
**************************************************
**************************************************
example# 62
NAME_BEGIN Light 's Justice NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN 4 DUR_END TYPE_BEGIN Weapon TYPE_END PLAYER_CLS_BEGIN Paladin PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN NIL DESC_END

class LightsJustice(WeaponCard):
    def __init__(self):
        super().__init__("Light's Justice", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.FREE)

    def create_weapon(self, player):
        return Weapon(1, 4)
**************************************************
**************************************************
example# 63
NAME_BEGIN Lord of the Arena NAME_END ATK_BEGIN 6 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 6 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Taunt DESC_END

class LordOfTheArena(MinionCard):
    def __init__(self):
        super().__init__("Lord of the Arena", 6, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(6, 5, taunt=True)
**************************************************
**************************************************
example# 64
NAME_BEGIN Mechanical Dragonling NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN NIL DESC_END

class MechanicalDragonling(MinionCard):
    def __init__(self):
        super().__init__("Mechanical Dragonling", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.MECH)

    def create_minion(self, player):
        return Minion(2, 1)
**************************************************
**************************************************
example# 65
NAME_BEGIN Mind Blast NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Priest PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Deal $ 5 damage to the enemy hero . DESC_END

class MindBlast(SpellCard):
    def __init__(self):
        super().__init__("Mind Blast", 2, CHARACTER_CLASS.PRIEST, CARD_RARITY.FREE)

    def use(self, player, game):
        super().use(player, game)

        game.other_player.hero.damage(player.effective_spell_damage(5), self)
**************************************************
**************************************************
example# 66
NAME_BEGIN Mind Control NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 10 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Priest PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Take control of an enemy minion . DESC_END

class MindControl(SpellCard):
    def __init__(self):
        super().__init__("Mind Control", 10, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_enemy_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        new_minion = self.target.copy(player)
        self.target.remove_from_board()
        new_minion.add_to_board(len(player.minions))

    def can_use(self, player, game):
        return super().can_use(player, game) and len(player.minions) < 7
**************************************************
**************************************************
example# 67
NAME_BEGIN Mind Vision NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Priest PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Put a copy of a random card in your opponent 's hand into your hand . DESC_END

class MindVision(SpellCard):
    def __init__(self):
        super().__init__("Mind Vision", 1, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON)

    def use(self, player, game):
        super().use(player, game)

        if (len(game.other_player.hand) > 0):
            card = copy.deepcopy(game.random_choice(game.other_player.hand))
            player.hand.append(card)
            card.player = player
**************************************************
**************************************************
example# 68
NAME_BEGIN Mirror Image NAME_END ATK_BEGIN 0 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 0 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Mage PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Taunt DESC_END

class MirrorImage(SpellCard):
    def __init__(self):
        super().__init__("Mirror Image", 1, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON)

    def use(self, player, game):
        super().use(player, game)
        for i in range(0, 2):
            MirrorImageMinion().summon(player, game, len(player.minions))

    def can_use(self, player, game):
        return super().can_use(player, game) and len(player.minions) < 7
**************************************************
**************************************************
example# 69
NAME_BEGIN Mirror Image NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Mage PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Summon two 0/2 minions with Taunt . DESC_END

class MirrorImage(SpellCard):
    def __init__(self):
        super().__init__("Mirror Image", 1, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON)

    def use(self, player, game):
        super().use(player, game)
        for i in range(0, 2):
            MirrorImageMinion().summon(player, game, len(player.minions))

    def can_use(self, player, game):
        return super().can_use(player, game) and len(player.minions) < 7
**************************************************
**************************************************
example# 70
NAME_BEGIN Misha NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Hunter PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Taunt DESC_END

class Misha(MinionCard):
    def __init__(self):
        super().__init__("Misha", 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(4, 4, taunt=True)
**************************************************
**************************************************
example# 71
NAME_BEGIN Moonfire NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 0 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Deal $ 1 damage . DESC_END

class Moonfire(SpellCard):
    def __init__(self):
        super().__init__("Moonfire", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(1), self)
**************************************************
**************************************************
example# 72
NAME_BEGIN Murloc Raider NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Murloc RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN NIL DESC_END

class MurlocRaider(MinionCard):
    def __init__(self):
        super().__init__("Murloc Raider", 1, CHARACTER_CLASS.ALL, CARD_RARITY.FREE, minion_type=MINION_TYPE.MURLOC)

    def create_minion(self, player):
        return Minion(2, 1)
**************************************************
**************************************************
example# 73
NAME_BEGIN Murloc Scout NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 0 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Murloc RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN NIL DESC_END

class MurlocScout(MinionCard):
    def __init__(self):
        super().__init__("Murloc Scout", 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.MURLOC)

    def create_minion(self, player):
        return Minion(1, 1)
**************************************************
**************************************************
example# 74
NAME_BEGIN Murloc Tidehunter NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Murloc RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Battlecry : Summon a 1/1 Murloc Scout . DESC_END

class MurlocTidehunter(MinionCard):
    def __init__(self):
        super().__init__("Murloc Tidehunter", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC, battlecry=Battlecry(Summon(MurlocScout()), PlayerSelector()))

    def create_minion(self, player):
        return Minion(2, 1)
**************************************************
**************************************************
example# 75
NAME_BEGIN Nightblade NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Battlecry : Deal 3 damage to the enemy hero . DESC_END

class Nightblade(MinionCard):
    def __init__(self):
        super().__init__("Nightblade", 5, CHARACTER_CLASS.ALL, CARD_RARITY.FREE, battlecry=Battlecry(Damage(3), HeroSelector(EnemyPlayer())))

    def create_minion(self, player):
        return Minion(4, 4)
**************************************************
**************************************************
example# 76
NAME_BEGIN Northshire Cleric NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Priest PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Whenever a minion is healed , draw a card . DESC_END

class NorthshireCleric(MinionCard):
    def __init__(self):
        super().__init__("Northshire Cleric", 1, CHARACTER_CLASS.PRIEST, CARD_RARITY.FREE)

    def create_minion(self, player):
        return Minion(1, 3, effects=[Effect(CharacterHealed(condition=IsMinion(), player=BothPlayer()), ActionTag(Draw(), PlayerSelector()))])
**************************************************
**************************************************
example# 77
NAME_BEGIN Novice Engineer NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Battlecry : Draw a card . DESC_END

class NoviceEngineer(MinionCard):
    def __init__(self):
        super().__init__("Novice Engineer", 2, CHARACTER_CLASS.ALL, CARD_RARITY.FREE, battlecry=Battlecry(Draw(), PlayerSelector()))

    def create_minion(self, player):
        return Minion(1, 1)
**************************************************
**************************************************
example# 78
NAME_BEGIN Oasis Snapjaw NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 7 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN NIL DESC_END

class OasisSnapjaw(MinionCard):
    def __init__(self):
        super().__init__("Oasis Snapjaw", 4, CHARACTER_CLASS.ALL, CARD_RARITY.FREE, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(2, 7)
**************************************************
**************************************************
example# 79
NAME_BEGIN Ogre Magi NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Spell Damage +1 DESC_END

class OgreMagi(MinionCard):
    def __init__(self):
        super().__init__("Ogre Magi", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(4, 4, spell_damage=1)
**************************************************
**************************************************
example# 80
NAME_BEGIN Raid Leader NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Your other minions have +1 Attack . DESC_END

class RaidLeader(MinionCard):
    def __init__(self):
        super().__init__("Raid Leader", 3, CHARACTER_CLASS.ALL, CARD_RARITY.FREE)

    def create_minion(self, player):
        return Minion(2, 2, auras=[Aura(ChangeAttack(1), MinionSelector())])
**************************************************
**************************************************
example# 81
NAME_BEGIN Razorfen Hunter NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Battlecry : Summon a 1/1 Boar . DESC_END

class RazorfenHunter(MinionCard):
    def __init__(self):
        super().__init__("Razorfen Hunter", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Summon(Boar()), PlayerSelector()))

    def create_minion(self, player):
        return Minion(2, 3)
**************************************************
**************************************************
example# 82
NAME_BEGIN Reckless Rocketeer NAME_END ATK_BEGIN 5 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 6 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Charge DESC_END

class RecklessRocketeer(MinionCard):
    def __init__(self):
        super().__init__("Reckless Rocketeer", 6, CHARACTER_CLASS.ALL, CARD_RARITY.FREE)

    def create_minion(self, player):
        return Minion(5, 2, charge=True)
**************************************************
**************************************************
example# 83
NAME_BEGIN River Crocolisk NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN NIL DESC_END

class RiverCrocolisk(MinionCard):
    def __init__(self):
        super().__init__("River Crocolisk", 2, CHARACTER_CLASS.ALL, CARD_RARITY.FREE, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(2, 3)
**************************************************
**************************************************
example# 84
NAME_BEGIN Rockbiter Weapon NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Shaman PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Give a friendly character +3 Attack this turn . DESC_END

class RockbiterWeapon(SpellCard):
    def __init__(self):
        super().__init__("Rockbiter Weapon", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_friendly_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.change_temp_attack(3)
**************************************************
**************************************************
example# 85
NAME_BEGIN Sacrificial Pact NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 0 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Warlock PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Destroy a Demon . Restore # 5 Health to your hero . DESC_END

class SacrificialPact(SpellCard):
    def __init__(self):
        super().__init__("Sacrificial Pact", 0, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target, filter_func=lambda character: character.card.minion_type == MINION_TYPE.DEMON)

    def use(self, player, game):
        super().use(player, game)
        self.target.die(self)
        player.hero.heal(player.effective_heal_power(5), self)
**************************************************
**************************************************
example# 86
NAME_BEGIN Sap NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Rogue PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Return an enemy minion to your opponent 's hand . DESC_END

class Sap(SpellCard):
    def __init__(self):
        super().__init__("Sap", 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_enemy_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)

        self.target.bounce()
**************************************************
**************************************************
example# 87
NAME_BEGIN Savage Roar NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Give your characters +2 Attack this turn . DESC_END

class SavageRoar(SpellCard):
    def __init__(self):
        super().__init__("Savage Roar", 3, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON)

    def use(self, player, game):
        super().use(player, game)
        for minion in player.minions:
            minion.change_temp_attack(2)
        player.hero.change_temp_attack(2)
**************************************************
**************************************************
example# 88
NAME_BEGIN Shadow Bolt NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Warlock PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Deal $ 4 damage to a minion . DESC_END

class ShadowBolt(SpellCard):
    def __init__(self):
        super().__init__("Shadow Bolt", 3, CHARACTER_CLASS.WARLOCK, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(4), self)
**************************************************
**************************************************
example# 89
NAME_BEGIN Shadow Word : Death NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Priest PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Destroy a minion with an Attack of 5 or more . DESC_END

class ShadowWordDeath(SpellCard):
    def __init__(self):
        super().__init__("Shadow Word: Death", 3, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target, filter_func=lambda target: target.calculate_attack() >= 5 and target.spell_targetable())

    def use(self, player, game):
        super().use(player, game)

        self.target.die(self)
**************************************************
**************************************************
example# 90
NAME_BEGIN Shadow Word : Pain NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Priest PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Destroy a minion with 3 or less Attack . DESC_END

class ShadowWordPain(SpellCard):
    def __init__(self):
        super().__init__("Shadow Word: Pain", 2, CHARACTER_CLASS.PRIEST, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_minion_spell_target, filter_func=lambda target: target.calculate_attack() <= 3 and target.spell_targetable())

    def use(self, player, game):
        super().use(player, game)

        self.target.die(self)
**************************************************
**************************************************
example# 91
NAME_BEGIN Shattered Sun Cleric NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Battlecry : Give a friendly minion +1/+1 . DESC_END

class ShatteredSunCleric(MinionCard):
    def __init__(self):
        super().__init__("Shattered Sun Cleric", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), MinionSelector(picker=UserPicker())))

    def create_minion(self, player):
        return Minion(3, 2)
**************************************************
**************************************************
example# 92
NAME_BEGIN Sheep NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 0 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN NIL DESC_END

class Sheep(MinionCard):
    def __init__(self):
        super().__init__("Sheep", 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, MINION_TYPE.BEAST)

    def create_minion(self, p):
        return Minion(1, 1)
**************************************************
**************************************************
example# 93
NAME_BEGIN Shield Block NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Warrior PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Gain 5 Armor . NL Draw a card . DESC_END

class ShieldBlock(SpellCard):
    def __init__(self):
        super().__init__("Shield Block", 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON)

    def use(self, player, game):
        super().use(player, game)
        player.hero.increase_armor(5)
        player.draw()
**************************************************
**************************************************
example# 94
NAME_BEGIN Shiv NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Rogue PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Deal $ 1 damage . Draw a card . DESC_END

class Shiv(SpellCard):
    def __init__(self):
        super().__init__("Shiv", 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target)

    def use(self, player, game):
        super().use(player, game)

        self.target.damage(player.effective_spell_damage(1), self)
        player.draw()
**************************************************
**************************************************
example# 95
NAME_BEGIN Silver Hand Recruit NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Paladin PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN NIL DESC_END

class SilverHandRecruit(MinionCard):
    def __init__(self):
        super().__init__("Silver Hand Recruit", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.FREE, False)

    def create_minion(self, player):
        return Minion(1, 1)
**************************************************
**************************************************
example# 96
NAME_BEGIN Soulfire NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Warlock PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Deal $ 4 damage . Discard a random card . DESC_END

class Soulfire(SpellCard):
    def __init__(self):
        super().__init__("Soulfire", 1, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(4), self)
        player.discard()
**************************************************
**************************************************
example# 97
NAME_BEGIN Sprint NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 7 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Rogue PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Draw 4 cards . DESC_END

class Sprint(SpellCard):
    def __init__(self):
        super().__init__("Sprint", 7, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON)

    def use(self, player, game):
        super().use(player, game)

        for i in range(0, 4):
            player.draw()
**************************************************
**************************************************
example# 98
NAME_BEGIN Starfire NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 6 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Deal $ 5 damage . NL Draw a card . DESC_END

class Starfire(SpellCard):
    def __init__(self):
        super().__init__("Starfire", 6, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(5), self)
        player.draw()
**************************************************
**************************************************
example# 99
NAME_BEGIN Starving Buzzard NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Hunter PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Whenever you summon a Beast , draw a card . DESC_END

class StarvingBuzzard(MinionCard):
    def __init__(self):
        super().__init__("Starving Buzzard", 5, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(3, 2, effects=[Effect(MinionPlaced(IsType(MINION_TYPE.BEAST)), ActionTag(Draw(), PlayerSelector()))])
**************************************************
**************************************************
example# 100
NAME_BEGIN Stoneclaw Totem NAME_END ATK_BEGIN 0 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Shaman PLAYER_CLS_END RACE_BEGIN Totem RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Taunt DESC_END

class StoneclawTotem(MinionCard):
    def __init__(self):
        super().__init__("Stoneclaw Totem", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)

    def create_minion(self, player):
        return Minion(0, 2, taunt=True)
**************************************************
**************************************************
example# 101
NAME_BEGIN Stonetusk Boar NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Charge DESC_END

class StonetuskBoar(MinionCard):
    def __init__(self):
        super().__init__("Stonetusk Boar", 1, CHARACTER_CLASS.ALL, CARD_RARITY.FREE, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(1, 1, charge=True)
**************************************************
**************************************************
example# 102
NAME_BEGIN Stormpike Commando NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Battlecry : Deal 2 damage . DESC_END

class StormpikeCommando(MinionCard):
    def __init__(self):
        super().__init__("Stormpike Commando", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Damage(2), CharacterSelector(players=BothPlayer(), picker=UserPicker())))

    def create_minion(self, player):
        return Minion(4, 2)
**************************************************
**************************************************
example# 103
NAME_BEGIN Stormwind Champion NAME_END ATK_BEGIN 6 ATK_END DEF_BEGIN 6 DEF_END COST_BEGIN 7 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Your other minions have +1/+1 . DESC_END

class StormwindChampion(MinionCard):
    def __init__(self):
        super().__init__("Stormwind Champion", 7, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(6, 6, auras=[Aura(ChangeAttack(1), MinionSelector()), Aura(ChangeHealth(1), MinionSelector())])
**************************************************
**************************************************
example# 104
NAME_BEGIN Swipe NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Deal $ 4 damage to an enemy and $ 1 damage to all other enemies . DESC_END

class Swipe(SpellCard):
    def __init__(self):
        super().__init__("Swipe", 4, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_enemy_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(4, self)

        for minion in copy.copy(game.other_player.minions):
            if minion is not self.target:
                minion.damage(player.effective_spell_damage(1), self)

        if self.target is not game.other_player.hero:
            game.other_player.hero.damage(player.effective_spell_damage(1), self)
**************************************************
**************************************************
example# 105
NAME_BEGIN Timber Wolf NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Hunter PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Your other Beasts have +1 Attack . DESC_END

class TimberWolf(MinionCard):
    def __init__(self):
        super().__init__("Timber Wolf", 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.FREE, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(1, 1, auras=[Aura(ChangeAttack(1), MinionSelector(IsType(MINION_TYPE.BEAST)))])
**************************************************
**************************************************
example# 106
NAME_BEGIN Totemic Might NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 0 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Shaman PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Give your Totems +2 Health . DESC_END

class TotemicMight(SpellCard):
    def __init__(self):
        super().__init__("Totemic Might", 0, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON)

    def use(self, player, game):
        super().use(player, game)

        for minion in player.minions:
            if minion.card.minion_type == MINION_TYPE.TOTEM:
                minion.increase_health(2)
**************************************************
**************************************************
example# 107
NAME_BEGIN Tracking NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Hunter PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Look at the top three cards of your deck . Draw one and discard the others . DESC_END

class Tracking(SpellCard):
    def __init__(self):
        super().__init__("Tracking", 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.FREE)

    def use(self, player, game):
        super().use(player, game)
        cards = []
        for card_index in range(0, 3):
            if player.can_draw():
                cards.append(player.deck.draw(game))
        if len(cards) > 0:
            chosen_card = player.agent.choose_option(cards, player)
            player.hand.append(chosen_card)
            player.hand[-1].player = player
            player.trigger("card_drawn", chosen_card)
**************************************************
**************************************************
example# 108
NAME_BEGIN Truesilver Champion NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN 2 DUR_END TYPE_BEGIN Weapon TYPE_END PLAYER_CLS_BEGIN Paladin PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Whenever your hero attacks , restore 2 Health to it . DESC_END

class TruesilverChampion(WeaponCard):
    def __init__(self):
        super().__init__("Truesilver Champion", 4, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)

    def create_weapon(self, player):
        return Weapon(4, 2, effects=[Effect(CharacterAttack(IsHero()), ActionTag(Heal(2), HeroSelector()))])
**************************************************
**************************************************
example# 109
NAME_BEGIN Tundra Rhino NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Hunter PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Your Beasts have Charge . DESC_END

class TundraRhino(MinionCard):
    def __init__(self):
        super().__init__("Tundra Rhino", 5, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(2, 5, charge=True, auras=[Aura(Charge(), MinionSelector(IsType(MINION_TYPE.BEAST)))])
**************************************************
**************************************************
example# 110
NAME_BEGIN Vanish NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 6 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Rogue PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Return all minions to their owner 's hand . DESC_END

class Vanish(SpellCard):
    def __init__(self):
        super().__init__("Vanish", 6, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON)

    def use(self, player, game):
        super().use(player, game)

        targets = copy.copy(game.other_player.minions)
        targets.extend(player.minions)

        for minion in sorted(targets, key=lambda m: m.born):
            minion.bounce()
**************************************************
**************************************************
example# 111
NAME_BEGIN Voidwalker NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Warlock PLAYER_CLS_END RACE_BEGIN Demon RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Taunt DESC_END

class Voidwalker(MinionCard):
    def __init__(self):
        super().__init__("Voidwalker", 1, CHARACTER_CLASS.WARLOCK, CARD_RARITY.FREE, minion_type=MINION_TYPE.DEMON)

    def create_minion(self, player):
        return Minion(1, 3, taunt=True)
**************************************************
**************************************************
example# 112
NAME_BEGIN Warsong Commander NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Warrior PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Whenever you summon a minion with 3 or less Attack , give it Charge . DESC_END

class WarsongCommander(MinionCard):
    def __init__(self):
        super().__init__("Warsong Commander", 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.FREE)

    def create_minion(self, player):
        return Minion(2, 3, effects=[Effect(MinionPlaced(AttackLessThanOrEqualTo(3)), ActionTag(Give(Charge()), TargetSelector()))])
**************************************************
**************************************************
example# 113
NAME_BEGIN Water Elemental NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 6 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Mage PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Freeze any character damaged by this minion . DESC_END

class WaterElemental(MinionCard):
    def __init__(self):
        super().__init__("Water Elemental", 4, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(3, 6, effects=[Effect(DidDamage(), ActionTag(Give(Frozen()), TargetSelector()))])
**************************************************
**************************************************
example# 114
NAME_BEGIN Whirlwind NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Warrior PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Deal $ 1 damage to ALL minions . DESC_END

class Whirlwind(SpellCard):
    def __init__(self):
        super().__init__("Whirlwind", 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON)

    def use(self, player, game):
        super().use(player, game)
        targets = copy.copy(game.other_player.minions)
        targets.extend(game.current_player.minions)
        for minion in targets:
            minion.damage(player.effective_spell_damage(1), self)
**************************************************
**************************************************
example# 115
NAME_BEGIN Wicked Knife NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN 2 DUR_END TYPE_BEGIN Weapon TYPE_END PLAYER_CLS_BEGIN Rogue PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN NIL DESC_END

class WickedKnife(WeaponCard):
    def __init__(self):
        super().__init__("Wicked Knife", 1, CHARACTER_CLASS.ROGUE, CARD_RARITY.FREE, False)

    def create_weapon(self, player):
        return Weapon(1, 2)
**************************************************
**************************************************
example# 116
NAME_BEGIN Wild Growth NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Gain an empty Mana Crystal . DESC_END

class WildGrowth(SpellCard):
    def __init__(self):
        super().__init__("Wild Growth", 2, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE)

    def use(self, player, game):
        super().use(player, game)
        if player.max_mana < 10:
            player.max_mana += 1
        else:
            player.hand.append(ExcessMana())
            player.hand[-1].player = player
**************************************************
**************************************************
example# 117
NAME_BEGIN Windfury NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Shaman PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Give a minion Windfury . DESC_END

class Windfury(SpellCard):
    def __init__(self):
        super().__init__("Windfury", 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)

        self.target.add_buff(Buff(_Windfury()))
**************************************************
**************************************************
example# 118
NAME_BEGIN Windspeaker NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Shaman PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Battlecry : Give a friendly minion Windfury . DESC_END

class Windspeaker(MinionCard):
    def __init__(self):
        super().__init__("Windspeaker", 4, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, battlecry=Battlecry(Give(Windfury()), MinionSelector(picker=UserPicker())))

    def create_minion(self, player):
        return Minion(3, 3)
**************************************************
**************************************************
example# 119
NAME_BEGIN Wolfrider NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Charge DESC_END

class Wolfrider(MinionCard):
    def __init__(self):
        super().__init__("Wolfrider", 3, CHARACTER_CLASS.ALL, CARD_RARITY.FREE)

    def create_minion(self, player):
        return Minion(3, 1, charge=True)
**************************************************
**************************************************
example# 120
NAME_BEGIN Alexstrasza 's Champion NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Warrior PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Battlecry : If you 're holding a Dragon , gain +1 Attack and Charge . DESC_END

class AlexstraszasChampion(MinionCard):
    def __init__(self):
        super().__init__("Alexstrasza's Champion", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.RARE, battlecry=(Battlecry(Give([Buff(ChangeAttack(1)), Buff(Charge())]), SelfSelector(), GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.DRAGON))), value=0))))

    def create_minion(self, player):
        return Minion(2, 3)
**************************************************
**************************************************
example# 121
NAME_BEGIN Ancestral Knowledge NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Shaman PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Draw 2 cards . Overload : ( 2 ) DESC_END

class AncestralKnowledge(SpellCard):
    def __init__(self):
        super().__init__("Ancestral Knowledge", 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, overload=2)

    def use(self, player, game):
        super().use(player, game)
        for c in range(0, 2):
            player.draw()
**************************************************
**************************************************
example# 122
NAME_BEGIN Anub'arak NAME_END ATK_BEGIN 8 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 9 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Rogue PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Deathrattle : Return this to your hand and summon a 4/4 Nerubian . DESC_END

class Anubarak(MinionCard):
    def __init__(self):
        super().__init__("Anub'arak", 9, CHARACTER_CLASS.ROGUE, CARD_RARITY.LEGENDARY)

    def create_minion(self, player):
        return Minion(8, 4, deathrattle=[Deathrattle(Bounce(), SelfSelector()), Deathrattle(Summon(Nerubian()), PlayerSelector())])
**************************************************
**************************************************
example# 123
NAME_BEGIN Arcane Blast NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Mage PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Deal $ 2 damage to a minion . This spell gets double bonus from Spell Damage . DESC_END

class ArcaneBlast(SpellCard):
    def __init__(self):
        super().__init__("Arcane Blast", 1, CHARACTER_CLASS.MAGE, CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(2 + player.spell_damage), self)
**************************************************
**************************************************
example# 124
NAME_BEGIN Argent Horserider NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Charge NL Divine Shield DESC_END

class ArgentHorserider(MinionCard):
    def __init__(self):
        super().__init__("Argent Horserider", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(2, 1, charge=True, divine_shield=True)
**************************************************
**************************************************
example# 125
NAME_BEGIN Argent Lance NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN 2 DUR_END TYPE_BEGIN Weapon TYPE_END PLAYER_CLS_BEGIN Paladin PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Battlecry : Reveal a minion in each deck . If yours costs more , +1 Durability . DESC_END

class ArgentLance(WeaponCard):
    def __init__(self):
        super().__init__("Argent Lance", 2, CHARACTER_CLASS.PALADIN, CARD_RARITY.RARE, battlecry=Battlecry(Joust(IncreaseDurability()), SelfSelector()))

    def create_weapon(self, player):
        return Weapon(2, 2)
**************************************************
**************************************************
example# 126
NAME_BEGIN Argent Watchman NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Ca n't attack . NL Inspire : Can attack as normal this turn . DESC_END

class ArgentWatchman(MinionCard):
    def __init__(self):
        super().__init__("Argent Watchman", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)

    def create_minion(self, player):
        return Minion(2, 4, buffs=[Buff(CantAttack())], effects=[Effect(UsedPower(), ActionTag(Give(BuffUntil(CanAttack(), TurnEnded())), SelfSelector()))])
**************************************************
**************************************************
example# 127
NAME_BEGIN Armored Warhorse NAME_END ATK_BEGIN 5 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Battlecry : Reveal a minion in each deck . If yours costs more , gain Charge . DESC_END

class ArmoredWarhorse(MinionCard):
    def __init__(self):
        super().__init__("Armored Warhorse", 4, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.BEAST, battlecry=Battlecry(Joust(Give(Buff(Charge()))), SelfSelector()))

    def create_minion(self, player):
        return Minion(5, 3)
**************************************************
**************************************************
example# 128
NAME_BEGIN Healing Totem NAME_END ATK_BEGIN 0 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 0 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Shaman PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN At the end of your turn , restore 1 Health to all friendly minions . DESC_END

class HealingTotem(MinionCard):
    def __init__(self):
        super().__init__("Healing Totem", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)

    def create_minion(self, player):
        return Minion(0, 2, effects=[Effect(TurnEnded(), ActionTag(Heal(1), MinionSelector(condition=None)))])
**************************************************
**************************************************
example# 129
NAME_BEGIN Nerubian NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Rogue PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN NIL DESC_END

class Nerubian(MinionCard):
    def __init__(self):
        super().__init__("Nerubian", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, False)

    def create_minion(self, p):
        return Minion(4, 4)
**************************************************
**************************************************
example# 130
NAME_BEGIN Searing Totem NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 0 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Shaman PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN NIL DESC_END

class SearingTotem(MinionCard):
    def __init__(self):
        super().__init__("Searing Totem", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)

    def create_minion(self, player):
        return Minion(1, 1)
**************************************************
**************************************************
example# 131
NAME_BEGIN Stoneclaw Totem NAME_END ATK_BEGIN 0 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 0 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Shaman PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN Taunt DESC_END

class StoneclawTotem(MinionCard):
    def __init__(self):
        super().__init__("Stoneclaw Totem", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)

    def create_minion(self, player):
        return Minion(0, 2, taunt=True)
**************************************************
**************************************************
example# 132
NAME_BEGIN Tournament Medic NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 8 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Inspire : Restore 2 Health to your hero . DESC_END

class TournamentMedic(MinionCard):
    def __init__(self):
        super().__init__("Tournament Medic", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(1, 8, effects=[Effect(UsedPower(), ActionTag(Heal(2), HeroSelector()))])
**************************************************
**************************************************
example# 133
NAME_BEGIN Wrath of Air Totem NAME_END ATK_BEGIN 0 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 0 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Shaman PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN Spell Damage +1 DESC_END

class WrathOfAirTotem(MinionCard):
    def __init__(self):
        super().__init__("Wrath of Air Totem", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)

    def create_minion(self, player):
        return Minion(0, 2, spell_damage=1)
**************************************************
**************************************************
example# 134
NAME_BEGIN Ancestor 's Call NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Shaman PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Put a random minion from each player 's hand into the battlefield . DESC_END

class AncestorsCall(SpellCard):
    def __init__(self):
        super().__init__("Ancestor's Call", 4, CHARACTER_CLASS.SHAMAN, CARD_RARITY.EPIC)

    def can_use(self, player, game):
        return super().can_use(player, game) and (len(player.minions) < 7 or len(player.opponent.minions) < 7)

    def use(self, player, game):
        super().use(player, game)
        for player in game.players:
            minions = [card for card in player.hand if card.is_minion()]
            if len(minions) and len(player.minions) < 7:
                minion_card = game.random_choice(minions)
                minion_card.unattach()
                player.hand.remove(minion_card)
                minion_card.summon(player, game, len(player.minions))
**************************************************
**************************************************
example# 135
NAME_BEGIN Anima Golem NAME_END ATK_BEGIN 9 ATK_END DEF_BEGIN 9 DEF_END COST_BEGIN 6 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Warlock PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN At the end of each turn , destroy this minion if it 's your only one . DESC_END

class AnimaGolem(MinionCard):
    def __init__(self):
        super().__init__("Anima Golem", 6, CHARACTER_CLASS.WARLOCK, CARD_RARITY.EPIC, minion_type=MINION_TYPE.MECH)

    def create_minion(self, player):
        return Minion(9, 9, effects=[Effect(TurnEnded(MinionCountIs(1), BothPlayer()), ActionTag(Kill(), SelfSelector()))])
**************************************************
**************************************************
example# 136
NAME_BEGIN Antique Healbot NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Battlecry : Restore 8 Health to your hero . DESC_END

class AntiqueHealbot(MinionCard):
    def __init__(self):
        super().__init__("Antique Healbot", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=Battlecry(Heal(8), HeroSelector()))

    def create_minion(self, player):
        return Minion(3, 3)
**************************************************
**************************************************
example# 137
NAME_BEGIN Arcane Nullifier X-21 NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Taunt NL Ca n't be targeted by spells or Hero Powers . DESC_END

class ArcaneNullifierX21(MinionCard):
    def __init__(self):
        super().__init__("Arcane Nullifier X-21", 4, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)

    def create_minion(self, player):
        return Minion(2, 5, taunt=True, spell_targetable=False)
**************************************************
**************************************************
example# 138
NAME_BEGIN Armor Plating NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN Give a minion +1 Health . DESC_END

class ArmorPlating(SpellCard):
    def __init__(self):
        super().__init__("Armor Plating", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.increase_health(1)
**************************************************
**************************************************
example# 139
NAME_BEGIN Blingtron 3000 NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Battlecry : Equip a random weapon for each player . DESC_END

class Blingtron3000(MinionCard):
    def __init__(self):
        super().__init__("Blingtron 3000", 5, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH, battlecry=Battlecry(Equip(CardQuery(conditions=[IsWeapon()])), PlayerSelector(players=BothPlayer())))

    def create_minion(self, player):
        return Minion(3, 4)
**************************************************
**************************************************
example# 140
NAME_BEGIN Bolvar Fordragon NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 7 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Paladin PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Whenever a friendly minion dies while this is in your hand , gain +1 Attack . DESC_END

class BolvarFordragon(MinionCard):
    def __init__(self):
        super().__init__("Bolvar Fordragon", 5, CHARACTER_CLASS.PALADIN, CARD_RARITY.LEGENDARY, effects=[Effect(MinionDied(), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])

    def create_minion(self, player):
        return Minion(1, 7)
**************************************************
**************************************************
example# 141
NAME_BEGIN Bomb Lobber NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Battlecry : Deal 4 damage to a random enemy minion . DESC_END

class BombLobber(MinionCard):
    def __init__(self):
        super().__init__("Bomb Lobber", 5, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), MinionSelector(None, EnemyPlayer(), RandomPicker())))

    def create_minion(self, player):
        return Minion(3, 3)
**************************************************
**************************************************
example# 142
NAME_BEGIN Boom Bot NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN Deathrattle : Deal 1-4 damage to a random enemy . DESC_END

class BoomBot(MinionCard):
    def __init__(self):
        super().__init__("Boom Bot", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.MECH)

    def create_minion(self, player):
        return Minion(1, 1, deathrattle=Deathrattle(Damage(RandomAmount(1, 4)), CharacterSelector(players=EnemyPlayer(), picker=RandomPicker())))
**************************************************
**************************************************
example# 143
NAME_BEGIN Bouncing Blade NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Warrior PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Deal $ 1 damage to a random minion . Repeat until a minion dies . DESC_END

class BouncingBlade(SpellCard):
    def __init__(self):
        super().__init__("Bouncing Blade", 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.EPIC)

    def can_use(self, player, game):
        return super().can_use(player, game) and len(player.minions) + len(player.opponent.minions) >= 1

    def use(self, player, game):
        super().use(player, game)

        targets = player.minions[:] + player.opponent.minions[:]
        if len(targets):
            for bounces in range(80):
                target = game.random_choice(targets)
                target.damage(player.effective_spell_damage(1), self)
                if target.dead:
                    break
**************************************************
**************************************************
example# 144
NAME_BEGIN Call Pet NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Hunter PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Draw a card . NL If it 's a Beast , it costs ( 4 ) less . DESC_END

class CallPet(SpellCard):
    def __init__(self):
        super().__init__("Call Pet", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)

    def use(self, player, game):
        def reduce_cost(card):
            if card.is_minion() and card.minion_type == MINION_TYPE.BEAST:
                card.add_buff(Buff(ManaChange(-4)))

        super().use(player, game)
        player.bind_once("card_drawn", reduce_cost)
        player.draw()
**************************************************
**************************************************
example# 145
NAME_BEGIN Chicken NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN NIL DESC_END

class Chicken(MinionCard):
    def __init__(self):
        super().__init__("Chicken", 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, MINION_TYPE.BEAST)

    def create_minion(self, p):
        return Minion(1, 1)
**************************************************
**************************************************
example# 146
NAME_BEGIN Clockwork Giant NAME_END ATK_BEGIN 8 ATK_END DEF_BEGIN 8 DEF_END COST_BEGIN 12 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Costs ( 1 ) less for each card in your opponent 's hand . DESC_END

class ClockworkGiant(MinionCard):
    def __init__(self):
        super().__init__("Clockwork Giant", 12, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, minion_type=MINION_TYPE.MECH, buffs=[Buff(ManaChange(Count(CardSelector(EnemyPlayer())), -1))])

    def create_minion(self, player):
        return Minion(8, 8)
**************************************************
**************************************************
example# 147
NAME_BEGIN Clockwork Gnome NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Deathrattle : Add a Spare Part card to your hand . DESC_END

class ClockworkGnome(MinionCard):
    def __init__(self):
        super().__init__("Clockwork Gnome", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)

    def create_minion(self, player):
        from hearthbreaker.cards.spells.neutral import spare_part_list
        return Minion(2, 1, deathrattle=Deathrattle(AddCard(CardQuery(source=CARD_SOURCE.LIST, source_list=spare_part_list)), PlayerSelector()))
**************************************************
**************************************************
example# 148
NAME_BEGIN Cobalt Guardian NAME_END ATK_BEGIN 6 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Paladin PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Whenever you summon a Mech , gain Divine Shield . DESC_END

class CobaltGuardian(MinionCard):
    def __init__(self):
        super().__init__("Cobalt Guardian", 5, CHARACTER_CLASS.PALADIN, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)

    def create_minion(self, player):
        return Minion(6, 3, effects=[Effect(MinionSummoned(IsType(MINION_TYPE.MECH)), ActionTag(Give(DivineShield()), SelfSelector()))])
**************************************************
**************************************************
example# 149
NAME_BEGIN Cobra Shot NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Hunter PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Deal $ 3 damage to a minion and the enemy hero . DESC_END

class CobraShot(SpellCard):
    def __init__(self):
        super().__init__("Cobra Shot", 5, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(3), self)
        game.other_player.hero.damage(player.effective_spell_damage(3), self)
**************************************************
**************************************************
example# 150
NAME_BEGIN Coghammer NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN 3 DUR_END TYPE_BEGIN Weapon TYPE_END PLAYER_CLS_BEGIN Paladin PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Battlecry : Give a random friendly minion Divine Shield and Taunt . DESC_END

class Coghammer(WeaponCard):
    def __init__(self):
        super().__init__("Coghammer", 3, CHARACTER_CLASS.PALADIN, CARD_RARITY.EPIC, battlecry=Battlecry(Give([Buff(DivineShield()), Buff(Taunt())]), MinionSelector(picker=RandomPicker())))

    def create_weapon(self, player):
        return Weapon(2, 3)
**************************************************
**************************************************
example# 151
NAME_BEGIN Cogmaster NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Has +2 Attack while you have a Mech . DESC_END

class Cogmaster(MinionCard):
    def __init__(self):
        super().__init__("Cogmaster", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(1, 2, auras=[Aura(ChangeAttack(2), SelfSelector(), GreaterThan(Count(MinionSelector(IsType(MINION_TYPE.MECH))), value=0))])
**************************************************
**************************************************
example# 152
NAME_BEGIN Crush NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 7 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Warrior PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Destroy a minion . If you have a damaged minion , this costs ( 4 ) less . DESC_END

class Crush(SpellCard):
    def __init__(self):
        super().__init__("Crush", 7, CHARACTER_CLASS.WARRIOR, CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.find_minion_spell_target, buffs=[Buff(ManaChange(-4), GreaterThan(Count(MinionSelector(IsDamaged())), value=0))])

    def use(self, player, game):
        super().use(player, game)

        self.target.die(self)
**************************************************
**************************************************
example# 153
NAME_BEGIN Dark Wispers NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 6 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Choose One - Summon 5 Wisps ; or Give a minion +5/+5 and Taunt . DESC_END

class DarkWispers(SpellCard):
    def __init__(self):
        super().__init__("Dark Wispers", 6, CHARACTER_CLASS.DRUID, CARD_RARITY.EPIC)

    def can_use(self, player, game):
        return (super().can_use(player, game) and (len(player.minions) < 7 or hearthbreaker.targeting.find_minion_spell_target(game, lambda t: t.spell_targetable()) is not None))

    def use(self, player, game):
        super().use(player, game)

        class Buff5(ChoiceCard):
            def __init__(self):
                super().__init__("Give a minion +5/+5 and Taunt", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, False)

            def can_use(self, player, game):
                return hearthbreaker.targeting.find_minion_spell_target(game, lambda t: t.spell_targetable()) is not None

            def use(self, player, game):
                targets = hearthbreaker.targeting.find_minion_spell_target(game, lambda t: t.spell_targetable())
                target = player.agent.choose_target(targets)
                target.change_attack(5)
                target.increase_health(5)
                target.taunt = True

        class Wisps5(ChoiceCard):
            def __init__(self):
                super().__init__("Summon 5 Wisps", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, False)

            def can_use(self, player, game):
                return len(player.minions) < 7

            def use(self, player, game):
                from hearthbreaker.cards.minions.neutral import Wisp
                for i in range(0, 5):
                    wisp = Wisp()
                    wisp.summon(player, game, len(player.minions))

        if len(hearthbreaker.targeting.find_minion_spell_target(game, lambda t: t.spell_targetable())) == 0:
            option = Wisps5()
        else:
            option = player.agent.choose_option([Wisps5(), Buff5()], player)
        option.use(player, game)
**************************************************
**************************************************
example# 154
NAME_BEGIN Darkbomb NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Warlock PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Deal $ 3 damage . DESC_END

class Darkbomb(SpellCard):
    def __init__(self):
        super().__init__("Darkbomb", 2, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(3), self)
**************************************************
**************************************************
example# 155
NAME_BEGIN Demonheart NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Warlock PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Deal $ 5 damage to a minion . If it 's a friendly Demon , give it +5/+5 instead . DESC_END

class Demonheart(SpellCard):
    def __init__(self):
        super().__init__("Demonheart", 5, CHARACTER_CLASS.WARLOCK, CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        targets = copy.copy(player.game.current_player.minions)
        if self.target.card.minion_type is MINION_TYPE.DEMON and self.target in targets:
            self.target.change_attack(5)
            self.target.increase_health(5)
        else:
            self.target.damage(player.effective_spell_damage(5), self)
**************************************************
**************************************************
example# 156
NAME_BEGIN Dr. Boom NAME_END ATK_BEGIN 7 ATK_END DEF_BEGIN 7 DEF_END COST_BEGIN 7 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Battlecry : Summon two 1/1 Boom Bots . WARNING : Bots may explode . DESC_END

class DoctorBoom(MinionCard):
    def __init__(self):
        super().__init__("Dr. Boom", 7, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, battlecry=Battlecry(Summon(BoomBot(), 2), PlayerSelector()))

    def create_minion(self, player):
        return Minion(7, 7)
**************************************************
**************************************************
example# 157
NAME_BEGIN Druid of the Fang NAME_END ATK_BEGIN 7 ATK_END DEF_BEGIN 7 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN NIL DESC_END

class DruidOfTheFang(MinionCard):
    def __init__(self):
        super().__init__("Druid of the Fang", 5, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, battlecry=Battlecry(Transform(CobraForm()), SelfSelector(), GreaterThan(Count(MinionSelector(IsType(MINION_TYPE.BEAST))), value=0)))

    def create_minion(self, player):
        return Minion(4, 4)
**************************************************
**************************************************
example# 158
NAME_BEGIN Druid of the Fang NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Battlecry : If you have a Beast , transform this minion into a 7/7 . DESC_END

class DruidOfTheFang(MinionCard):
    def __init__(self):
        super().__init__("Druid of the Fang", 5, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, battlecry=Battlecry(Transform(CobraForm()), SelfSelector(), GreaterThan(Count(MinionSelector(IsType(MINION_TYPE.BEAST))), value=0)))

    def create_minion(self, player):
        return Minion(4, 4)
**************************************************
**************************************************
example# 159
NAME_BEGIN Dunemaul Shaman NAME_END ATK_BEGIN 5 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Shaman PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Windfury , Overload : ( 1 ) NL 50 % chance to attack the wrong enemy . DESC_END

class DunemaulShaman(MinionCard):
    def __init__(self):
        super().__init__("Dunemaul Shaman", 4, CHARACTER_CLASS.SHAMAN, CARD_RARITY.RARE, overload=1)

    def create_minion(self, player):
        return Minion(5, 4, windfury=True, effects=[Effect(Attack(), ActionTag(ChangeTarget(CharacterSelector(NotCurrentTarget(), EnemyPlayer(), RandomPicker())), SelfSelector(), And(OneIn(2), OpponentMinionCountIsGreaterThan(0))))])
**************************************************
**************************************************
example# 160
NAME_BEGIN Enhance-o Mechano NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Battlecry : Give your other minions Windfury , Taunt , or Divine Shield . NL ( at random ) DESC_END

class EnhanceoMechano(MinionCard):
    def __init__(self):
        super().__init__("Enhance-o Mechano", 4, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, minion_type=MINION_TYPE.MECH, battlecry=Battlecry(Give([ Buff(Windfury()), Buff(Taunt()), Buff(DivineShield())], RandomPicker()), MinionSelector()))

    def create_minion(self, player):
        return Minion(3, 2)
**************************************************
**************************************************
example# 161
NAME_BEGIN Explosive Sheep NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Deathrattle : Deal 2 damage to all minions . DESC_END

class ExplosiveSheep(MinionCard):
    def __init__(self):
        super().__init__("Explosive Sheep", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)

    def create_minion(self, player):
        return Minion(1, 1, deathrattle=Deathrattle(Damage(2), CharacterSelector(players=BothPlayer())), taunt=True)
**************************************************
**************************************************
example# 162
NAME_BEGIN Feign Death NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Hunter PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Trigger all Deathrattles on your minions . DESC_END

class FeignDeath(SpellCard):
    def __init__(self):
        super().__init__("Feign Death", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.EPIC)

    def use(self, player, game):
        super().use(player, game)

        for minion in sorted(player.minions, key=lambda m: m.born):
            for deathrattle in minion.deathrattle:
                deathrattle.do(minion)
            if player.double_deathrattle:
                for deathrattle in minion.deathrattle:
                    deathrattle.do(minion)
**************************************************
**************************************************
example# 163
NAME_BEGIN Fel Cannon NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Warlock PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN At the end of your turn , deal 2 damage to a non-Mech minion . DESC_END

class FelCannon(MinionCard):
    def __init__(self):
        super().__init__("Fel Cannon", 4, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)

    def create_minion(self, player):
        return Minion(3, 5, effects=[Effect(TurnEnded(), ActionTag(Damage(2), MinionSelector(Not(IsType(MINION_TYPE.MECH, True)), BothPlayer(), RandomPicker())))])
**************************************************
**************************************************
example# 164
NAME_BEGIN Fel Reaver NAME_END ATK_BEGIN 8 ATK_END DEF_BEGIN 8 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Whenever your opponent plays a card , remove the top 3 cards of your deck . DESC_END

class FelReaver(MinionCard):
    def __init__(self):
        super().__init__("Fel Reaver", 5, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, minion_type=MINION_TYPE.MECH)

    def create_minion(self, player):
        return Minion(8, 8, effects=[Effect(CardPlayed(player=EnemyPlayer()), ActionTag(Discard(3, query=CardQuery(source=CARD_SOURCE.MY_DECK)), PlayerSelector()))])
**************************************************
**************************************************
example# 165
NAME_BEGIN Finicky Cloakfield NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN Give a friendly minion Stealth until your next turn . DESC_END

class FinickyCloakfield(SpellCard):
    def __init__(self):
        super().__init__("Finicky Cloakfield", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.find_friendly_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.add_buff(BuffUntil(Stealth(), TurnStarted()))
**************************************************
**************************************************
example# 166
NAME_BEGIN Flame Leviathan NAME_END ATK_BEGIN 7 ATK_END DEF_BEGIN 7 DEF_END COST_BEGIN 7 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Mage PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN When you draw this , deal 2 damage to all characters . DESC_END

class FlameLeviathan(MinionCard):
    def __init__(self):
        super().__init__("Flame Leviathan", 7, CHARACTER_CLASS.MAGE, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH, effects=[Effect(Drawn(), ActionTag(Damage(2), CharacterSelector(None, BothPlayer())))])

    def create_minion(self, player):
        return Minion(7, 7)
**************************************************
**************************************************
example# 167
NAME_BEGIN Flamecannon NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Mage PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Deal $ 4 damage to a random enemy minion . DESC_END

class Flamecannon(SpellCard):
    def __init__(self):
        super().__init__("Flamecannon", 2, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON)

    def use(self, player, game):
        super().use(player, game)

        targets = hearthbreaker.targeting.find_enemy_minion_battlecry_target(player.game, lambda x: True)
        target = game.random_choice(targets)
        target.damage(player.effective_spell_damage(4), self)

    def can_use(self, player, game):
        return super().can_use(player, game) and len(game.other_player.minions) >= 1
**************************************************
**************************************************
example# 168
NAME_BEGIN Foe Reaper 4000 NAME_END ATK_BEGIN 6 ATK_END DEF_BEGIN 9 DEF_END COST_BEGIN 8 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Also damages the minions next to whomever he attacks . DESC_END

class FoeReaper4000(MinionCard):
    def __init__(self):
        super().__init__("Foe Reaper 4000", 8, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)

    def create_minion(self, player):
        return Minion(6, 9, effects=[Effect(Attack(IsMinion()), ActionTag(Damage(Attribute("attack", SelfSelector())), MinionSelector(TargetAdjacent(), EnemyPlayer())))])
**************************************************
**************************************************
example# 169
NAME_BEGIN Force-Tank MAX NAME_END ATK_BEGIN 7 ATK_END DEF_BEGIN 7 DEF_END COST_BEGIN 8 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Divine Shield DESC_END

class ForceTankMAX(MinionCard):
    def __init__(self):
        super().__init__("Force-Tank MAX", 8, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)

    def create_minion(self, player):
        return Minion(7, 7, divine_shield=True)
**************************************************
**************************************************
example# 170
NAME_BEGIN Gahz'rilla NAME_END ATK_BEGIN 6 ATK_END DEF_BEGIN 9 DEF_END COST_BEGIN 7 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Hunter PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Whenever this minion takes damage , double its Attack . DESC_END

class Gahzrilla(MinionCard):
    def __init__(self):
        super().__init__("Gahz'rilla", 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(6, 9, effects=[Effect(Damaged(), ActionTag(Give(Buff(DoubleAttack())), SelfSelector()))])
**************************************************
**************************************************
example# 171
NAME_BEGIN Gallywix 's Coin NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 0 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN Gain 1 Mana Crystal this turn only . NL ( Wo n't trigger Gallywix . ) DESC_END

class GallywixsCoin(SpellCard):
    def __init__(self):
        super().__init__("Gallywix's Coin", 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False)

    def use(self, player, game):
        super().use(player, game)
        if player.mana < 10:
            player.mana += 1
**************************************************
**************************************************
example# 172
NAME_BEGIN Gazlowe NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 6 DEF_END COST_BEGIN 6 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Whenever you cast a 1-mana spell , add a random Mech to your hand . DESC_END

class Gazlowe(MinionCard):
    def __init__(self):
        super().__init__("Gazlowe", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)

    def create_minion(self, player):
        return Minion(3, 6, effects=[Effect(SpellCast(ManaCost(1)), ActionTag(AddCard(CardQuery(conditions=[IsType(MINION_TYPE.MECH)])), PlayerSelector()))])
**************************************************
**************************************************
example# 173
NAME_BEGIN Gilblin Stalker NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Stealth DESC_END

class GilblinStalker(MinionCard):
    def __init__(self):
        super().__init__("Gilblin Stalker", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(2, 3, stealth=True)
**************************************************
**************************************************
example# 174
NAME_BEGIN Glaivezooka NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN 2 DUR_END TYPE_BEGIN Weapon TYPE_END PLAYER_CLS_BEGIN Hunter PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Battlecry : Give a random friendly minion +1 Attack . DESC_END

class Glaivezooka(WeaponCard):
    def __init__(self):
        super().__init__("Glaivezooka", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, battlecry=Battlecry(Give(ChangeAttack(1)), MinionSelector(None, picker=RandomPicker())))

    def create_weapon(self, player):
        return Weapon(2, 2)
**************************************************
**************************************************
example# 175
NAME_BEGIN Gnomeregan Infantry NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Charge NL Taunt DESC_END

class GnomereganInfantry(MinionCard):
    def __init__(self):
        super().__init__("Gnomeregan Infantry", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(1, 4, charge=True, taunt=True)
**************************************************
**************************************************
example# 176
NAME_BEGIN Goblin Blastmage NAME_END ATK_BEGIN 5 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Mage PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Battlecry : If you have a Mech , deal 4 damage randomly split among all enemies . DESC_END

class GoblinBlastmage(MinionCard):
    def __init__(self):
        super().__init__("Goblin Blastmage", 4, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE, battlecry=Battlecry(Damage(1), CharacterSelector(None, EnemyPlayer(), RandomPicker(4)), GreaterThan(Count(MinionSelector(IsType(MINION_TYPE.MECH))), value=0)))

    def create_minion(self, player):
        return Minion(5, 4)
**************************************************
**************************************************
example# 177
NAME_BEGIN Goblin Sapper NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Has +4 Attack while your opponent has 6 or more cards in hand . DESC_END

class GoblinSapper(MinionCard):
    def __init__(self):
        super().__init__("Goblin Sapper", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)

    def create_minion(self, player):
        return Minion(2, 4, buffs=[Buff(ChangeAttack(4), GreaterThan(Count(CardSelector(EnemyPlayer())), value=5))])
**************************************************
**************************************************
example# 178
NAME_BEGIN Grove Tender NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Choose One - Give each player a Mana Crystal ; or Each player draws a card . DESC_END

class GroveTender(MinionCard):
    def __init__(self):
        super().__init__("Grove Tender", 3, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE, choices=[
            Choice(GiftOfMana(), GiveManaCrystal(), PlayerSelector(players=BothPlayer())),
            Choice(GiftOfCards(), Draw(), PlayerSelector(players=BothPlayer()))
        ])

    def create_minion(self, player):
        return Minion(2, 4)
**************************************************
**************************************************
example# 179
NAME_BEGIN Hemet Nesingwary NAME_END ATK_BEGIN 6 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Battlecry : Destroy a Beast . DESC_END

class HemetNesingwary(MinionCard):
    def __init__(self):
        super().__init__("Hemet Nesingwary", 5, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, battlecry=Battlecry(Kill(), MinionSelector(IsType(MINION_TYPE.BEAST), players=BothPlayer(), picker=UserPicker())))

    def create_minion(self, player):
        return Minion(6, 3)
**************************************************
**************************************************
example# 180
NAME_BEGIN Hobgoblin NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Whenever you play a 1-Attack minion , give it +2/+2 . DESC_END

class Hobgoblin(MinionCard):
    def __init__(self):
        super().__init__("Hobgoblin", 3, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC)

    def create_minion(self, player):
        return Minion(2, 3, effects=[Effect(MinionPlaced(BaseAttackEqualTo(1)), ActionTag(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2))]), TargetSelector()))])
**************************************************
**************************************************
example# 181
NAME_BEGIN Illuminator NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN If you control a Secret at the end of your turn , restore 4 health to your hero . DESC_END

class Illuminator(MinionCard):
    def __init__(self):
        super().__init__("Illuminator", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)

    def create_minion(self, player):
        return Minion(2, 4, effects=[Effect(TurnEnded(HasSecret()), ActionTag(Heal(4), HeroSelector()))])
**************************************************
**************************************************
example# 182
NAME_BEGIN Imp NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Warlock PLAYER_CLS_END RACE_BEGIN Demon RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN NIL DESC_END

class Imp(MinionCard):
    def __init__(self):
        super().__init__("Imp", 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, False, minion_type=MINION_TYPE.DEMON)

    def create_minion(self, player):
        return Minion(1, 1)
**************************************************
**************************************************
example# 183
NAME_BEGIN Imp-losion NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Warlock PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Deal $ 2- $ 4 damage to a minion . Summon a 1/1 Imp for each damage dealt . DESC_END

class Implosion(SpellCard):
    def __init__(self):
        super().__init__("Imp-losion", 4, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_spell_target)

    def use(self, player, game):
        super().use(player, game)

        amount = player.effective_spell_damage(game.random_amount(2, 4))
        had_shield = self.target.divine_shield

        self.target.damage(amount, self)

        if not had_shield:
            for i in range(0, amount):
                imp = Imp()
                imp.summon(player, game, len(player.minions))
**************************************************
**************************************************
example# 184
NAME_BEGIN Jeeves NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN At the end of each player 's turn , that player draws until they have 3 cards . DESC_END

class Jeeves(MinionCard):
    def __init__(self):
        super().__init__("Jeeves", 4, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)

    def create_minion(self, player):
        return Minion(1, 4, effects=[Effect(TurnEnded(player=BothPlayer()), ActionTag(Draw(Difference(Count(CardSelector(players=CurrentPlayer())), value=3)), PlayerSelector(CurrentPlayer())))])
**************************************************
**************************************************
example# 185
NAME_BEGIN Junkbot NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Whenever a friendly Mech dies , gain +2/+2 . DESC_END

class Junkbot(MinionCard):
    def __init__(self):
        super().__init__("Junkbot", 5, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, minion_type=MINION_TYPE.MECH)

    def create_minion(self, player):
        return Minion(1, 5, effects=[Effect(MinionDied(IsType(MINION_TYPE.MECH)), ActionTag(Give([Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), SelfSelector()))])
**************************************************
**************************************************
example# 186
NAME_BEGIN Kezan Mystic NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Battlecry : Take control of a random enemy Secret . DESC_END

class KezanMystic(MinionCard):
    def __init__(self):
        super().__init__("Kezan Mystic", 4, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(ApplySecret(CARD_SOURCE.ENEMY_SECRETS), PlayerSelector()))

    def create_minion(self, player):
        return Minion(4, 3)
**************************************************
**************************************************
example# 187
NAME_BEGIN King of Beasts NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 6 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Hunter PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Taunt . Battlecry : Gain +1 Attack for each other Beast you have . DESC_END

class KingOfBeasts(MinionCard):
    def __init__(self):
        super().__init__("King of Beasts", 5, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE, minion_type=MINION_TYPE.BEAST, battlecry=Battlecry(Give(Buff(ChangeAttack(Count(MinionSelector(IsType( MINION_TYPE.BEAST)))))), SelfSelector()))

    def create_minion(self, player):
        return Minion(2, 6, taunt=True)
**************************************************
**************************************************
example# 188
NAME_BEGIN Light of the Naaru NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Priest PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Restore # 3 Health . If the target is still damaged , summon a Lightwarden . DESC_END

class LightOfTheNaaru(SpellCard):
    def __init__(self):
        super().__init__("Light of the Naaru", 1, CHARACTER_CLASS.PRIEST, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_spell_target)

    def use(self, player, game):
        super().use(player, game)

        self.target.heal(player.effective_heal_power(3), self)

        lightwarden = Lightwarden()
        if self.target is None:
            lightwarden.summon(player, game, len(player.minions))
        elif self.target.health != self.target.calculate_max_health():
            lightwarden.summon(player, game, len(player.minions))
**************************************************
**************************************************
example# 189
NAME_BEGIN Lightbomb NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 6 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Priest PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Deal damage to each minion equal to its Attack . DESC_END

class Lightbomb(SpellCard):
    def __init__(self):
        super().__init__("Lightbomb", 6, CHARACTER_CLASS.PRIEST, CARD_RARITY.EPIC)

    def use(self, player, game):
        super().use(player, game)

        targets = copy.copy(game.other_player.minions)
        targets.extend(player.minions)

        for minion in targets:
            minion.damage(player.effective_spell_damage(minion.calculate_attack()), self)
**************************************************
**************************************************
example# 190
NAME_BEGIN Lil ' Exorcist NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Taunt NL Battlecry : Gain +1/+1 for each enemy Deathrattle minion . DESC_END

class LilExorcist(MinionCard):
    def __init__(self):
        super().__init__("Lil' Exorcist", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(Count(MinionSelector(MinionHasDeathrattle(), EnemyPlayer())))), Buff(ChangeHealth(Count(MinionSelector(MinionHasDeathrattle(), EnemyPlayer()))))]), SelfSelector()))

    def create_minion(self, player):
        return Minion(2, 3, taunt=True)
**************************************************
**************************************************
example# 191
NAME_BEGIN Lost Tallstrider NAME_END ATK_BEGIN 5 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN NIL DESC_END

class LostTallstrider(MinionCard):
    def __init__(self):
        super().__init__("Lost Tallstrider", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(5, 4)
**************************************************
**************************************************
example# 192
NAME_BEGIN Malorne NAME_END ATK_BEGIN 9 ATK_END DEF_BEGIN 7 DEF_END COST_BEGIN 7 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Deathrattle : Shuffle this minion into your deck . DESC_END

class Malorne(MinionCard):
    def __init__(self):
        super().__init__("Malorne", 7, CHARACTER_CLASS.DRUID, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(9, 7, deathrattle=[Deathrattle(AddCard(CardQuery(source=CARD_SOURCE.MINION, minion=SelfSelector()), add_to_deck=True), PlayerSelector()), Deathrattle(Remove(), SelfSelector())])
**************************************************
**************************************************
example# 193
NAME_BEGIN Mech-Bear-Cat NAME_END ATK_BEGIN 7 ATK_END DEF_BEGIN 6 DEF_END COST_BEGIN 6 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Whenever this minion takes damage , add a Spare Part card to your hand . DESC_END

class MechBearCat(MinionCard):
    def __init__(self):
        super().__init__("Mech-Bear-Cat", 6, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)

    def create_minion(self, player):
        return Minion(7, 6, effects=[Effect(Damaged(), ActionTag(AddCard(CardQuery(source=CARD_SOURCE.LIST, source_list=spare_part_list)), PlayerSelector()))])
**************************************************
**************************************************
example# 194
NAME_BEGIN Mechanical Yeti NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Deathrattle : Give each player a Spare Part . DESC_END

class MechanicalYeti(MinionCard):
    def __init__(self):
        super().__init__("Mechanical Yeti", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)

    def create_minion(self, player):
        from hearthbreaker.cards.spells.neutral import spare_part_list
        return Minion(4, 5, deathrattle=Deathrattle(AddCard(CardQuery(source=CARD_SOURCE.LIST, source_list=spare_part_list)), PlayerSelector(BothPlayer())))
**************************************************
**************************************************
example# 195
NAME_BEGIN Mechwarper NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Your Mechs cost ( 1 ) less . DESC_END

class Mechwarper(MinionCard):
    def __init__(self):
        super().__init__("Mechwarper", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)

    def create_minion(self, player):
        return Minion(2, 3, auras=[Aura(ManaChange(-1), CardSelector(condition=IsType(MINION_TYPE.MECH)))])
**************************************************
**************************************************
example# 196
NAME_BEGIN Mekgineer Thermaplugg NAME_END ATK_BEGIN 9 ATK_END DEF_BEGIN 7 DEF_END COST_BEGIN 9 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Whenever an enemy minion dies , summon a Leper Gnome . DESC_END

class MekgineerThermaplugg(MinionCard):
    def __init__(self):
        super().__init__("Mekgineer Thermaplugg", 9, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)

    def create_minion(self, player):
        return Minion(9, 7, effects=[Effect(MinionDied(player=EnemyPlayer()), ActionTag(Summon(LeperGnome()), PlayerSelector()))])
**************************************************
**************************************************
example# 197
NAME_BEGIN Metaltooth Leaper NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Hunter PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Battlecry : Give your other Mechs +2 Attack . DESC_END

class MetaltoothLeaper(MinionCard):
    def __init__(self):
        super().__init__("Metaltooth Leaper", 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=Battlecry(Give(Buff(ChangeAttack(2))), MinionSelector(IsType(MINION_TYPE.MECH))))

    def create_minion(self, player):
        return Minion(3, 3)
**************************************************
**************************************************
example# 198
NAME_BEGIN Micro Machine NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN At the start of each turn , gain +1 Attack . DESC_END

class MicroMachine(MinionCard):
    def __init__(self):
        super().__init__("Micro Machine", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)

    def create_minion(self, player):
        return Minion(1, 2, effects=[Effect(TurnStarted(player=BothPlayer()), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])
**************************************************
**************************************************
example# 199
NAME_BEGIN Mimiron 's Head NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN At the start of your turn , if you have at least 3 Mechs , destroy them all and form V-07-TR-0N . DESC_END

class MimironsHead(MinionCard):
    def __init__(self):
        super().__init__("Mimiron's Head", 5, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)

    def create_minion(self, player):
        return Minion(4, 5, effects=[Effect(TurnStarted(), [ActionTag(Kill(), MinionSelector(IsType(MINION_TYPE.MECH, True)), GreaterThan(Count(MinionSelector(IsType(MINION_TYPE.MECH, True))), value=2)), ActionTag(Summon(V07TR0N()), PlayerSelector())])])
**************************************************
**************************************************
example# 200
NAME_BEGIN Mogor the Ogre NAME_END ATK_BEGIN 7 ATK_END DEF_BEGIN 6 DEF_END COST_BEGIN 6 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN All minions have a 50 % chance to attack the wrong enemy . DESC_END

class MogorTheOgre(MinionCard):
    def __init__(self):
        super().__init__("Mogor the Ogre", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)

    def create_minion(self, player):
        return Minion(7, 6, effects=[Effect(CharacterAttack(None, BothPlayer()), ActionTag(ChangeTarget(
            CharacterSelector(NotCurrentTarget(), EnemyPlayer(), RandomPicker())), TargetSelector(),
            And(OneIn(2), OpponentMinionCountIsGreaterThan(0))))])
**************************************************
**************************************************
example# 201
NAME_BEGIN Muster for Battle NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Paladin PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Summon three 1/1 Silver Hand Recruits . Equip a 1/4 Weapon . DESC_END

class MusterForBattle(SpellCard):
    def __init__(self):
        super().__init__("Muster for Battle", 3, CHARACTER_CLASS.PALADIN, CARD_RARITY.RARE)

    def use(self, player, game):
        super().use(player, game)

        for i in range(0, 3):
            dude = SilverHandRecruit()
            dude.summon(player, player.game, len(player.minions))
        justice = LightsJustice()
        hammer = justice.create_weapon(player)
        hammer.card = justice
        hammer.equip(player)
**************************************************
**************************************************
example# 202
NAME_BEGIN Neptulon NAME_END ATK_BEGIN 7 ATK_END DEF_BEGIN 7 DEF_END COST_BEGIN 7 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Shaman PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Battlecry : Add 4 random Murlocs to your hand . Overload : ( 3 ) DESC_END

class Neptulon(MinionCard):
    def __init__(self):
        from hearthbreaker.cards.minions.neutral import BluegillWarrior, ColdlightOracle, ColdlightSeer, \
            GrimscaleOracle, MurlocRaider, MurlocTidecaller, MurlocTidehunter, MurlocWarleader, OldMurkEye, \
            Puddlestomper
        murloc_list = [BluegillWarrior(), ColdlightOracle(), ColdlightSeer(), GrimscaleOracle(), MurlocRaider(), MurlocTidecaller(), MurlocTidehunter(), MurlocWarleader(), OldMurkEye(), Puddlestomper(), SiltfinSpiritwalker()]
        super().__init__("Neptulon", 7, CHARACTER_CLASS.SHAMAN, CARD_RARITY.LEGENDARY, overload=3, battlecry=Battlecry(AddCard(CardQuery(source=CARD_SOURCE.LIST, source_list=murloc_list), 4), PlayerSelector()))

    def create_minion(self, player):
        return Minion(7, 7)
**************************************************
**************************************************
example# 203
NAME_BEGIN Ogre Brute NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN 50 % chance to attack the wrong enemy . DESC_END

class OgreBrute(MinionCard):
    def __init__(self):
        super().__init__("Ogre Brute", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(4, 4, effects=[Effect(Attack(), ActionTag(ChangeTarget(CharacterSelector(NotCurrentTarget(), EnemyPlayer(), RandomPicker())), SelfSelector(), And(OneIn(2), OpponentMinionCountIsGreaterThan(0))))])
**************************************************
**************************************************
example# 204
NAME_BEGIN Ogre Ninja NAME_END ATK_BEGIN 6 ATK_END DEF_BEGIN 6 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Rogue PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Stealth NL 50 % chance to attack the wrong enemy . DESC_END

class OgreNinja(MinionCard):
    def __init__(self):
        super().__init__("Ogre Ninja", 5, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE)

    def create_minion(self, player):
        return Minion(6, 6, stealth=True, effects=[Effect(Attack(), ActionTag(ChangeTarget( CharacterSelector(NotCurrentTarget(), EnemyPlayer(), RandomPicker())), SelfSelector(), And(OneIn(2), OpponentMinionCountIsGreaterThan(0))))])
**************************************************
**************************************************
example# 205
NAME_BEGIN Ogre Warmaul NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN 2 DUR_END TYPE_BEGIN Weapon TYPE_END PLAYER_CLS_BEGIN Warrior PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN 50 % chance to attack the wrong enemy . DESC_END

class OgreWarmaul(WeaponCard):
    def __init__(self):
        super().__init__("Ogre Warmaul", 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON)

    def create_weapon(self, player):
        return Weapon(4, 2, effects=[Effect(CharacterAttack(IsHero()), ActionTag(ChangeTarget(CharacterSelector(NotCurrentTarget(), EnemyPlayer(), RandomPicker())), HeroSelector(), And(OneIn(2), OpponentMinionCountIsGreaterThan(0))))])
**************************************************
**************************************************
example# 206
NAME_BEGIN One-eyed Cheat NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Rogue PLAYER_CLS_END RACE_BEGIN Pirate RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Whenever you summon a Pirate , gain Stealth . DESC_END

class OneeyedCheat(MinionCard):
    def __init__(self):
        super().__init__("One-eyed Cheat", 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE, minion_type=MINION_TYPE.PIRATE)

    def create_minion(self, player):
        return Minion(4, 1, effects=[Effect(MinionSummoned(IsType(MINION_TYPE.PIRATE)), ActionTag(Give(Stealth()), SelfSelector()))])
**************************************************
**************************************************
example# 207
NAME_BEGIN Piloted Shredder NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Deathrattle : Summon a random 2-Cost minion . DESC_END

class PilotedShredder(MinionCard):
    def __init__(self):
        super().__init__("Piloted Shredder", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)

    def create_minion(self, player):
        return Minion(4, 3, deathrattle=Deathrattle(Summon(CardQuery(conditions=[ManaCost(2), IsMinion()])), PlayerSelector()))
**************************************************
**************************************************
example# 208
NAME_BEGIN Puddlestomper NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Murloc RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN NIL DESC_END

class Puddlestomper(MinionCard):
    def __init__(self):
        super().__init__("Puddlestomper", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC)

    def create_minion(self, player):
        return Minion(3, 2)
**************************************************
**************************************************
example# 209
NAME_BEGIN Quartermaster NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Paladin PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Battlecry : Give your Silver Hand Recruits +2/+2 . DESC_END

class Quartermaster(MinionCard):
    def __init__(self):
        super().__init__("Quartermaster", 5, CHARACTER_CLASS.PALADIN, CARD_RARITY.EPIC, battlecry=Battlecry(Give([Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), MinionSelector(HasCardName("Silver Hand Recruit"))))

    def create_minion(self, player):
        return Minion(2, 5)
**************************************************
**************************************************
example# 210
NAME_BEGIN Recombobulator NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Battlecry : Transform a friendly minion into a random minion with the same Cost . DESC_END

class Recombobulator(MinionCard):
    def __init__(self):
        super().__init__("Recombobulator", 2, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, battlecry=Battlecry(Transform(CardQuery(conditions=[ ManaCost(Attribute("mana", SelfSelector())), IsMinion()])), MinionSelector(picker=UserPicker())))

    def create_minion(self, player):
        return Minion(3, 2)
**************************************************
**************************************************
example# 211
NAME_BEGIN Recycle NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 6 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Shuffle an enemy minion into your opponent 's deck . DESC_END

class Recycle(SpellCard):
    def __init__(self):
        super().__init__("Recycle", 6, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_enemy_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        player.opponent.deck.put_back(self.target)
        self.target.remove_from_board()
**************************************************
**************************************************
example# 212
NAME_BEGIN Reversing Switch NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN Swap a minion 's Attack and Health . DESC_END

class ReversingSwitch(SpellCard):
    def __init__(self):
        super().__init__("Reversing Switch", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        temp_attack = self.target.calculate_attack()
        temp_health = self.target.health
        if temp_attack == 0:
            self.target.die(None)
        else:
            self.target.set_attack_to(temp_health)
            self.target.set_health_to(temp_attack)
**************************************************
**************************************************
example# 213
NAME_BEGIN Rusty Horn NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN Give a minion Taunt . DESC_END

class RustyHorn(SpellCard):
    def __init__(self):
        super().__init__("Rusty Horn", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.add_buff(Buff(Taunt()))
**************************************************
**************************************************
example# 214
NAME_BEGIN Sabotage NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Rogue PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Destroy a random enemy minion . Combo : And your opponent 's weapon . DESC_END

class Sabotage(SpellCard):
    def __init__(self):
        super().__init__("Sabotage", 4, CHARACTER_CLASS.ROGUE, CARD_RARITY.EPIC)

    def use(self, player, game):
        super().use(player, game)
        targets = hearthbreaker.targeting.find_enemy_minion_battlecry_target(player.game, lambda x: True)
        target = game.random_choice(targets)
        target.die(None)
        game.check_delayed()
        if player.cards_played > 0 and game.other_player.weapon is not None:
            game.other_player.weapon.destroy()

    def can_use(self, player, game):
        return super().can_use(player, game) and len(game.other_player.minions) >= 1
**************************************************
**************************************************
example# 215
NAME_BEGIN Salty Dog NAME_END ATK_BEGIN 7 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Pirate RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN NIL DESC_END

class SaltyDog(MinionCard):
    def __init__(self):
        super().__init__("Salty Dog", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE)

    def create_minion(self, player):
        return Minion(7, 4)
**************************************************
**************************************************
example# 216
NAME_BEGIN Seal of Light NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Paladin PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Restore # 4 Health to your hero and gain +2 Attack this turn . DESC_END

class SealOfLight(SpellCard):
    def __init__(self):
        super().__init__("Seal of Light", 2, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)

    def use(self, player, game):
        super().use(player, game)
        player.hero.heal(player.effective_heal_power(4), self)
        player.hero.change_temp_attack(2)
**************************************************
**************************************************
example# 217
NAME_BEGIN Shadowbomber NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Priest PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Battlecry : Deal 3 damage to each hero . DESC_END

class Shadowbomber(MinionCard):
    def __init__(self):
        super().__init__("Shadowbomber", 1, CHARACTER_CLASS.PRIEST, CARD_RARITY.EPIC, battlecry=Battlecry(Damage(3), HeroSelector(players=BothPlayer())))

    def create_minion(self, player):
        return Minion(2, 1)
**************************************************
**************************************************
example# 218
NAME_BEGIN Shadowboxer NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Priest PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Whenever a character is healed , deal 1 damage to a random enemy . DESC_END

class Shadowboxer(MinionCard):
    def __init__(self):
        super().__init__("Shadowboxer", 2, CHARACTER_CLASS.PRIEST, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)

    def create_minion(self, player):
        return Minion(2, 3, effects=[Effect(CharacterHealed(player=BothPlayer()), ActionTag(Damage(1), CharacterSelector(players=EnemyPlayer(), picker=RandomPicker(), condition=None)))])
**************************************************
**************************************************
example# 219
NAME_BEGIN Shielded Minibot NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Paladin PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Divine Shield DESC_END

class ShieldedMinibot(MinionCard):
    def __init__(self):
        super().__init__("Shielded Minibot", 2, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)

    def create_minion(self, player):
        return Minion(2, 2, divine_shield=True)
**************************************************
**************************************************
example# 220
NAME_BEGIN Shieldmaiden NAME_END ATK_BEGIN 5 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 6 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Warrior PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Battlecry : Gain 5 Armor . DESC_END

class Shieldmaiden(MinionCard):
    def __init__(self):
        super().__init__("Shieldmaiden", 6, CHARACTER_CLASS.WARRIOR, CARD_RARITY.RARE, battlecry=Battlecry(IncreaseArmor(5), HeroSelector()))

    def create_minion(self, player):
        return Minion(5, 5)
**************************************************
**************************************************
example# 221
NAME_BEGIN Ship 's Cannon NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Whenever you summon a Pirate , deal 2 damage to a random enemy . DESC_END

class ShipsCannon(MinionCard):
    def __init__(self):
        super().__init__("Ship's Cannon", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(2, 3, effects=[Effect(MinionSummoned(IsType(MINION_TYPE.PIRATE)), ActionTag(Damage(2), CharacterSelector(None, EnemyPlayer(), RandomPicker())))])
**************************************************
**************************************************
example# 222
NAME_BEGIN Shrinkmeister NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Priest PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Battlecry : Give a minion -2 Attack this turn . DESC_END

class Shrinkmeister(MinionCard):
    def __init__(self):
        super().__init__("Shrinkmeister", 2, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON, battlecry=Battlecry(Give(BuffUntil(ChangeAttack(-2), TurnEnded(player=CurrentPlayer()))), MinionSelector(players=BothPlayer(), picker=UserPicker())))

    def create_minion(self, player):
        return Minion(3, 2)
**************************************************
**************************************************
example# 223
NAME_BEGIN Siege Engine NAME_END ATK_BEGIN 5 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Warrior PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Whenever you gain Armor , give this minion +1 Attack . DESC_END

class SiegeEngine(MinionCard):
    def __init__(self):
        super().__init__("Siege Engine", 5, CHARACTER_CLASS.WARRIOR, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)

    def create_minion(self, player):
        return Minion(5, 5, effects=[Effect(ArmorIncreased(), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])
**************************************************
**************************************************
example# 224
NAME_BEGIN Snowchugger NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Mage PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Freeze any character damaged by this minion . DESC_END

class Snowchugger(MinionCard):
    def __init__(self):
        super().__init__("Snowchugger", 2, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)

    def create_minion(self, player):
        return Minion(2, 3, effects=[Effect(DidDamage(), ActionTag(Give(Frozen()), TargetSelector()))])
**************************************************
**************************************************
example# 225
NAME_BEGIN Soot Spewer NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Mage PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Spell Damage +1 DESC_END

class SootSpewer(MinionCard):
    def __init__(self):
        super().__init__("Soot Spewer", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)

    def create_minion(self, player):
        return Minion(3, 3, spell_damage=1)
**************************************************
**************************************************
example# 226
NAME_BEGIN Spider Tank NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN NIL DESC_END

class SpiderTank(MinionCard):
    def __init__(self):
        super().__init__("Spider Tank", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)

    def create_minion(self, player):
        return Minion(3, 4)
**************************************************
**************************************************
example# 227
NAME_BEGIN Steamwheedle Sniper NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Hunter PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Your Hero Power can target minions . DESC_END

class SteamwheedleSniper(MinionCard):
    def __init__(self):
        super().__init__("Steamwheedle Sniper", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.EPIC)

    def create_minion(self, player):
        return Minion(2, 3, auras=[Aura(PowerTargetsMinions(), HeroSelector())])
**************************************************
**************************************************
example# 228
NAME_BEGIN Stonesplinter Trogg NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Whenever your opponent casts a spell , gain +1 Attack . DESC_END

class StonesplinterTrogg(MinionCard):
    def __init__(self):
        super().__init__("Stonesplinter Trogg", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(2, 3, effects=[Effect(SpellCast(player=EnemyPlayer()), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])
**************************************************
**************************************************
example# 229
NAME_BEGIN Target Dummy NAME_END ATK_BEGIN 0 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 0 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Taunt DESC_END

class TargetDummy(MinionCard):
    def __init__(self):
        super().__init__("Target Dummy", 0, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)

    def create_minion(self, player):
        return Minion(0, 2, taunt=True)
**************************************************
**************************************************
example# 230
NAME_BEGIN Time Rewinder NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN Return a friendly minion to your hand . DESC_END

class TimeRewinder(SpellCard):
    def __init__(self):
        super().__init__("Time Rewinder", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.find_friendly_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.bounce()
**************************************************
**************************************************
example# 231
NAME_BEGIN Tinker 's Sharpsword Oil NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Rogue PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Give your weapon +3 Attack . Combo : Give a random friendly minion +3 Attack . DESC_END

class TinkersSharpswordOil(SpellCard):
    def __init__(self):
        super().__init__("Tinker's Sharpsword Oil", 4, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON)

    def use(self, player, game):
        super().use(player, game)
        player.weapon.base_attack += 3
        player.hero.change_temp_attack(3)
        if player.cards_played > 0:
            targets = hearthbreaker.targeting.find_friendly_minion_battlecry_target(player.game, lambda x: x)
            if targets is not None:
                target = player.game.random_choice(targets)
                target.add_buff(Buff(ChangeAttack(3)))

    def can_use(self, player, game):
        return super().can_use(player, game) and player.weapon is not None
**************************************************
**************************************************
example# 232
NAME_BEGIN Trade Prince Gallywix NAME_END ATK_BEGIN 5 ATK_END DEF_BEGIN 8 DEF_END COST_BEGIN 6 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Rogue PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Whenever your opponent casts a spell , gain a copy of it and give them a Coin . DESC_END

class TradePrinceGallywix(MinionCard):
    def __init__(self):
        super().__init__("Trade Prince Gallywix", 6, CHARACTER_CLASS.ROGUE, CARD_RARITY.LEGENDARY)

    def create_minion(self, player):
        return Minion(5, 8, effects=[Effect(SpellCast(Not(HasCardName("Gallywix's Coin")), EnemyPlayer()), ActionTag(AddCard(CardQuery(source=CARD_SOURCE.LAST_CARD)), PlayerSelector(FriendlyPlayer()))), Effect(SpellCast(Not(HasCardName("Gallywix's Coin")), EnemyPlayer()), ActionTag(AddCard(GallywixsCoin()), PlayerSelector(EnemyPlayer())))])
**************************************************
**************************************************
example# 233
NAME_BEGIN Tree of Life NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 9 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Restore all characters to full Health . DESC_END

class TreeOfLife(SpellCard):
    def __init__(self):
        super().__init__("Tree of Life", 9, CHARACTER_CLASS.DRUID, CARD_RARITY.EPIC)

    def use(self, player, game):
        super().use(player, game)

        targets = copy.copy(game.other_player.minions)
        targets.extend(game.current_player.minions)
        targets.append(game.other_player.hero)
        targets.append(game.current_player.hero)
        for target in targets:
            target.heal(player.effective_heal_power(target.calculate_max_health()), self)
**************************************************
**************************************************
example# 234
NAME_BEGIN Troggzor the Earthinator NAME_END ATK_BEGIN 6 ATK_END DEF_BEGIN 6 DEF_END COST_BEGIN 7 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Whenever your opponent casts a spell , summon a Burly Rockjaw Trogg . DESC_END

class TroggzorTheEarthinator(MinionCard):
    def __init__(self):
        super().__init__("Troggzor the Earthinator", 7, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)

    def create_minion(self, player):
        return Minion(6, 6, effects=[Effect(SpellCast(player=EnemyPlayer()), ActionTag(Summon(BurlyRockjawTrogg()), PlayerSelector()))])
**************************************************
**************************************************
example# 235
NAME_BEGIN Unstable Portal NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Mage PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Add a random minion to your hand . It costs ( 3 ) less . DESC_END

class UnstablePortal(SpellCard):
    def __init__(self):
        super().__init__("Unstable Portal", 2, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)

    def use(self, player, game):
        super().use(player, game)
        query = CardQuery(conditions=[IsMinion()])
        new_minon = query.get_card(player, player, self)
        new_minon.add_buff(Buff(ManaChange(-3)))
        player.hand.append(new_minon)
**************************************************
**************************************************
example# 236
NAME_BEGIN Upgraded Repair Bot NAME_END ATK_BEGIN 5 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Priest PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Battlecry : Give a friendly Mech +4 Health . DESC_END

class UpgradedRepairBot(MinionCard):
    def __init__(self):
        super().__init__("Upgraded Repair Bot", 5, CHARACTER_CLASS.PRIEST, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=Battlecry(Give(ChangeHealth(4)), MinionSelector(IsType(MINION_TYPE.MECH), picker=UserPicker())))

    def create_minion(self, player):
        return Minion(5, 5)
**************************************************
**************************************************
example# 237
NAME_BEGIN V-07-TR-0N NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 8 DEF_END COST_BEGIN 8 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Charge NL Mega-Windfury ( Can attack four times a turn . ) DESC_END

class V07TR0N(MinionCard):
    def __init__(self):
        super().__init__("V-07-TR-0N", 8, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, False, MINION_TYPE.MECH)

    def create_minion(self, player):
        return Minion(4, 8, charge=True, buffs=[Buff(MegaWindfury())])
**************************************************
**************************************************
example# 238
NAME_BEGIN Velen 's Chosen NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Priest PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Give a minion +2/+4 and Spell Damage +1 . DESC_END

class VelensChosen(SpellCard):
    def __init__(self):
        super().__init__("Velen's Chosen", 3, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)

        self.target.change_attack(2)
        self.target.increase_health(4)
        self.target.add_buff(Buff(SpellDamage(1)))
**************************************************
**************************************************
example# 239
NAME_BEGIN Vitality Totem NAME_END ATK_BEGIN 0 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Shaman PLAYER_CLS_END RACE_BEGIN Totem RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN At the end of your turn , restore 4 Health to your hero . DESC_END

class VitalityTotem(MinionCard):
    def __init__(self):
        super().__init__("Vitality Totem", 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.RARE, minion_type=MINION_TYPE.TOTEM)

    def create_minion(self, player):
        return Minion(0, 3, effects=[Effect(TurnEnded(), ActionTag(Heal(4), HeroSelector()))])
**************************************************
**************************************************
example# 240
NAME_BEGIN Wee Spellstopper NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Mage PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Adjacent minions ca n't be targeted by spells or Hero Powers . DESC_END

class WeeSpellstopper(MinionCard):
    def __init__(self):
        super().__init__("Wee Spellstopper", 4, CHARACTER_CLASS.MAGE, CARD_RARITY.EPIC)

    def create_minion(self, player):
        return Minion(2, 5, auras=[Aura(NoSpellTarget(), MinionSelector(Adjacent()))])
**************************************************
**************************************************
example# 241
NAME_BEGIN Whirling Blades NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN Give a minion +1 Attack . DESC_END

class WhirlingBlades(SpellCard):
    def __init__(self):
        super().__init__("Whirling Blades", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.change_attack(1)
**************************************************
**************************************************
example# 242
NAME_BEGIN Whirling Zap-o-matic NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Shaman PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Windfury DESC_END

class WhirlingZapomatic(MinionCard):
    def __init__(self):
        super().__init__("Whirling Zap-o-matic", 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)

    def create_minion(self, p):
        return Minion(3, 2, windfury=True)
**************************************************
**************************************************
example# 243
NAME_BEGIN Anub'ar Ambusher NAME_END ATK_BEGIN 5 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Rogue PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Deathrattle : Return a random friendly minion to your hand . DESC_END

class AnubarAmbusher(MinionCard):
    def __init__(self):
        super().__init__("Anub'ar Ambusher", 4, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(5, 5, deathrattle=Deathrattle(Bounce(), MinionSelector(picker=RandomPicker())))
**************************************************
**************************************************
example# 244
NAME_BEGIN Avenge NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Paladin PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Secret : When one of your minions dies , give a random friendly minion +3/+2 . DESC_END

class Avenge(SecretCard):
    def __init__(self):
        super().__init__("Avenge", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)

    def _reveal(self, dead_minion, attacker):
        if len([minion for minion in self.player.minions if not minion.dead]) > 0:
            target = self.player.game.random_choice(self.player.minions)
            target.change_attack(3)
            target.increase_health(2)
            super().reveal()

    def activate(self, player):
        player.bind("minion_died", self._reveal)

    def deactivate(self, player):
        player.unbind("minion_died", self._reveal)
**************************************************
**************************************************
example# 245
NAME_BEGIN Baron Rivendare NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 7 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Your minions trigger their Deathrattles twice . DESC_END

class BaronRivendare(MinionCard):
    def __init__(self):
        super().__init__("Baron Rivendare", 4, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)

    def create_minion(self, player):
        return Minion(1, 7, auras=[Aura(DoubleDeathrattle(), PlayerSelector())])
**************************************************
**************************************************
example# 246
NAME_BEGIN Dancing Swords NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Deathrattle : Your opponent draws a card . DESC_END

class DancingSwords(MinionCard):
    def __init__(self):
        super().__init__("Dancing Swords", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(4, 4, deathrattle=Deathrattle(Draw(), PlayerSelector(EnemyPlayer())))
**************************************************
**************************************************
example# 247
NAME_BEGIN Dark Cultist NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Priest PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Deathrattle : Give a random friendly minion +3 Health . DESC_END

class DarkCultist(MinionCard):
    def __init__(self):
        super().__init__("Dark Cultist", 3, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(3, 4, deathrattle=Deathrattle(Give(ChangeHealth(3)), MinionSelector(picker=RandomPicker())))
**************************************************
**************************************************
example# 248
NAME_BEGIN Duplicate NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Mage PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Secret : When a friendly minion dies , put 2 copies of it into your hand . DESC_END

class Duplicate(SecretCard):
    def __init__(self):
        super().__init__("Duplicate", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON)
        self.player = None

    def activate(self, player):
        player.bind("minion_died", self._reveal)
        self.player = player

    def deactivate(self, player):
        player.unbind("minion_died", self._reveal)
        self.player = None

    def _reveal(self, minion, by):
        for c in range(0, 2):
            if len(self.player.hand) < 10:
                new_card = type(minion.card)()
                self.player.hand.append(new_card)
                new_card.attach(new_card, self.player)
        super().reveal()
**************************************************
**************************************************
example# 249
NAME_BEGIN Echoing Ooze NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Battlecry : Summon an exact copy of this minion at the end of the turn . DESC_END

class EchoingOoze(MinionCard):
    def __init__(self):
        super().__init__("Echoing Ooze", 2, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, battlecry=Battlecry(GiveEffect(Effect(TurnEnded(), ActionTag(Duplicate(SelfSelector()), PlayerSelector()))), PlayerSelector()))

    def create_minion(self, player):
        return Minion(1, 2)
**************************************************
**************************************************
example# 250
NAME_BEGIN Feugen NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 7 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN NIL DESC_END

class Feugen(MinionCard):
    def __init__(self):
        super().__init__("Feugen", 5, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)

    def create_minion(self, player):
        return Minion(4, 7, deathrattle=Deathrattle(Summon(Thaddius()), PlayerSelector(), InGraveyard(Stalagg())))
**************************************************
**************************************************
example# 251
NAME_BEGIN Feugen NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 7 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Deathrattle : If Stalagg also died this game , summon Thaddius . DESC_END

class Feugen(MinionCard):
    def __init__(self):
        super().__init__("Feugen", 5, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)

    def create_minion(self, player):
        return Minion(4, 7, deathrattle=Deathrattle(Summon(Thaddius()), PlayerSelector(), InGraveyard(Stalagg())))
**************************************************
**************************************************
example# 252
NAME_BEGIN Haunted Creeper NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Deathrattle : Summon two 1/1 Spectral Spiders . DESC_END

class HauntedCreeper(MinionCard):
    def __init__(self):
        super().__init__("Haunted Creeper", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(1, 2, deathrattle=Deathrattle(Summon(SpectralSpider(), 2), PlayerSelector()))
**************************************************
**************************************************
example# 253
NAME_BEGIN Kel'Thuzad NAME_END ATK_BEGIN 6 ATK_END DEF_BEGIN 8 DEF_END COST_BEGIN 8 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN At the end of each turn , summon all friendly minions that died this turn . DESC_END

class KelThuzad(MinionCard):
    def __init__(self):
        super().__init__("Kel'Thuzad", 8, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)

    def create_minion(self, player):
        return Minion(6, 8, effects=[Effect(TurnEnded(player=BothPlayer()), ActionTag(ResurrectFriendly(), PlayerSelector()))])
**************************************************
**************************************************
example# 254
NAME_BEGIN Loatheb NAME_END ATK_BEGIN 5 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Battlecry : Enemy spells cost ( 5 ) more next turn . DESC_END

class Loatheb(MinionCard):
    def __init__(self):
        super().__init__("Loatheb", 5, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, battlecry=Battlecry(GiveAura(AuraUntil(ManaChange(5), CardSelector(condition=IsSpell()), TurnEnded())), PlayerSelector(players=EnemyPlayer())))

    def create_minion(self, player):
        return Minion(5, 5)
**************************************************
**************************************************
example# 255
NAME_BEGIN Mad Scientist NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Deathrattle : Put a Secret from your deck into the battlefield . DESC_END

class MadScientist(MinionCard):
    def __init__(self):
        super().__init__("Mad Scientist", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(2, 2, deathrattle=Deathrattle(ApplySecret(CARD_SOURCE.MY_DECK), PlayerSelector()))
**************************************************
**************************************************
example# 256
NAME_BEGIN Nerubian NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN NIL DESC_END

class Nerubian(MinionCard):
    def __init__(self):
        super().__init__("Nerubian", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, False)

    def create_minion(self, p):
        return Minion(4, 4)
**************************************************
**************************************************
example# 257
NAME_BEGIN Nerubian NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN NIL DESC_END

class Nerubian(MinionCard):
    def __init__(self):
        super().__init__("Nerubian", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, False)

    def create_minion(self, p):
        return Minion(4, 4)
**************************************************
**************************************************
example# 258
NAME_BEGIN Nerubian NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN NIL DESC_END

class Nerubian(MinionCard):
    def __init__(self):
        super().__init__("Nerubian", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, False)

    def create_minion(self, p):
        return Minion(4, 4)
**************************************************
**************************************************
example# 259
NAME_BEGIN Nerubian Egg NAME_END ATK_BEGIN 0 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Deathrattle : Summon a 4/4 Nerubian . DESC_END

class NerubianEgg(MinionCard):
    def __init__(self):
        super().__init__("Nerubian Egg", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)

    def create_minion(self, player):
        return Minion(0, 2, deathrattle=Deathrattle(Summon(Nerubian()), PlayerSelector()))
**************************************************
**************************************************
example# 260
NAME_BEGIN Poison Seeds NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Destroy all minions and summon 2/2 Treants to replace them . DESC_END

class PoisonSeeds(SpellCard):
    def __init__(self):
        super().__init__("Poison Seeds", 4, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON)

    def use(self, player, game):
        super().use(player, game)
        from hearthbreaker.cards.minions.druid import PoisonSeedsTreant
        targets = hearthbreaker.targeting.find_minion_spell_target(game, lambda m: True)
        for target in targets:
            target.die(None)

        game.check_delayed()

        for target in targets:
            PoisonSeedsTreant().summon(target.player, target.game, len(target.player.minions))
**************************************************
**************************************************
example# 261
NAME_BEGIN Reincarnate NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Shaman PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Destroy a minion , then return it to life with full Health . DESC_END

class Reincarnate(SpellCard):

    def __init__(self):
        super().__init__("Reincarnate", 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.die(self)
        game.check_delayed()
        self.target.card.summon(self.target.player, game, len(self.target.player.minions))
**************************************************
**************************************************
example# 262
NAME_BEGIN Shade of Naxxramas NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Stealth . At the start of your turn , gain +1/+1 . DESC_END

class ShadeOfNaxxramas(MinionCard):
    def __init__(self):
        super().__init__("Shade of Naxxramas", 3, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC)

    def create_minion(self, player):
        return Minion(2, 2, stealth=True, effects=[Effect(TurnStarted(), ActionTag(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector()))])
**************************************************
**************************************************
example# 263
NAME_BEGIN Slime NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN Taunt DESC_END

class Slime(MinionCard):
    def __init__(self):
        super().__init__("Slime", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False)

    def create_minion(self, p):
        return Minion(1, 2, taunt=True)
**************************************************
**************************************************
example# 264
NAME_BEGIN Spectral Spider NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN NIL DESC_END

class SpectralSpider(MinionCard):
    def __init__(self):
        super().__init__("Spectral Spider", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False)

    def create_minion(self, player):
        return Minion(1, 1)
**************************************************
**************************************************
example# 265
NAME_BEGIN Stalagg NAME_END ATK_BEGIN 7 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN NIL DESC_END

class Stalagg(MinionCard):
    def __init__(self):
        super().__init__("Stalagg", 5, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)

    def create_minion(self, player):
        return Minion(7, 4, deathrattle=Deathrattle(Summon(Thaddius()), PlayerSelector(), InGraveyard(Feugen())))
**************************************************
**************************************************
example# 266
NAME_BEGIN Stalagg NAME_END ATK_BEGIN 7 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Deathrattle : If Feugen also died this game , summon Thaddius . DESC_END

class Stalagg(MinionCard):
    def __init__(self):
        super().__init__("Stalagg", 5, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)

    def create_minion(self, player):
        return Minion(7, 4, deathrattle=Deathrattle(Summon(Thaddius()), PlayerSelector(), InGraveyard(Feugen())))
**************************************************
**************************************************
example# 267
NAME_BEGIN Stoneskin Gargoyle NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN At the start of your turn , restore this minion to full Health . DESC_END

class StoneskinGargoyle(MinionCard):
    def __init__(self):
        super().__init__("Stoneskin Gargoyle", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(1, 4, effects=[Effect(TurnStarted(), ActionTag(Heal(10000), SelfSelector()))])
**************************************************
**************************************************
example# 268
NAME_BEGIN Thaddius NAME_END ATK_BEGIN 11 ATK_END DEF_BEGIN 11 DEF_END COST_BEGIN 10 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN NIL DESC_END

class Thaddius(MinionCard):
    def __init__(self):
        super().__init__("Thaddius", 10, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, False)

    def create_minion(self, player):
        return Minion(11, 11)
**************************************************
**************************************************
example# 269
NAME_BEGIN Treant NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN NIL DESC_END

class Treant(MinionCard):
    def __init__(self):
        super().__init__("Treant", 1, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON)

    def create_minion(self, _):
        return Minion(2, 2)
**************************************************
**************************************************
example# 270
NAME_BEGIN Undertaker NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Whenever you summon a minion with Deathrattle , gain +1 Attack . DESC_END

class Undertaker(MinionCard):
    def __init__(self):
        super().__init__("Undertaker", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(1, 2, effects=[Effect(MinionSummoned(MinionHasDeathrattle()), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])
**************************************************
**************************************************
example# 271
NAME_BEGIN Unstable Ghoul NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Taunt . Deathrattle : Deal 1 damage to all minions . DESC_END

class UnstableGhoul(MinionCard):
    def __init__(self):
        super().__init__("Unstable Ghoul", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(1, 3, deathrattle=Deathrattle(Damage(1), MinionSelector(players=BothPlayer())), taunt=True)
**************************************************
**************************************************
example# 272
NAME_BEGIN Webspinner NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Hunter PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Deathrattle : Add a random Beast card to your hand . DESC_END

class Webspinner(MinionCard):
    def __init__(self):
        super().__init__("Webspinner", 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(1, 1, deathrattle=Deathrattle(AddCard(CardQuery(conditions=[IsType(MINION_TYPE.BEAST)])), PlayerSelector()))
**************************************************
**************************************************
example# 273
NAME_BEGIN Zombie Chow NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Deathrattle : Restore 5 Health to the enemy hero . DESC_END

class ZombieChow(MinionCard):
    def __init__(self):
        super().__init__("Zombie Chow", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(2, 3, deathrattle=Deathrattle(Heal(5), HeroSelector(EnemyPlayer())))
**************************************************
**************************************************
example# 274
NAME_BEGIN Abomination NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Taunt . Deathrattle : Deal 2 damage to ALL characters . DESC_END

class Abomination(MinionCard):
    def __init__(self):
        super().__init__("Abomination", 5, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)

    def create_minion(self, player):
        return Minion(4, 4, deathrattle=Deathrattle(Damage(2), CharacterSelector(players=BothPlayer())), taunt=True)
**************************************************
**************************************************
example# 275
NAME_BEGIN Abusive Sergeant NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Battlecry : Give a minion +2 Attack this turn . DESC_END

class AbusiveSergeant(MinionCard):
    def __init__(self):
        super().__init__("Abusive Sergeant", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Give(BuffUntil(ChangeAttack(2), TurnEnded(player=CurrentPlayer()))), MinionSelector(players=BothPlayer(), picker=UserPicker())))

    def create_minion(self, player):
        return Minion(2, 1)
**************************************************
**************************************************
example# 276
NAME_BEGIN Acolyte of Pain NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Whenever this minion takes damage , draw a card . DESC_END

class AcolyteOfPain(MinionCard):
    def __init__(self):
        super().__init__("Acolyte of Pain", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(1, 3, effects=[Effect(Damaged(), ActionTag(Draw(), PlayerSelector()))])
**************************************************
**************************************************
example# 277
NAME_BEGIN Al'Akir the Windlord NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 8 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Shaman PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Windfury , Charge , Divine Shield , Taunt DESC_END

class AlAkirTheWindlord(MinionCard):
    def __init__(self):
        super().__init__("Al'Akir the Windlord", 8, CHARACTER_CLASS.SHAMAN, CARD_RARITY.LEGENDARY)

    def create_minion(self, player):
        return Minion(3, 5, windfury=True, charge=True, divine_shield=True, taunt=True)
**************************************************
**************************************************
example# 278
NAME_BEGIN Alarm-o-Bot NAME_END ATK_BEGIN 0 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN At the start of your turn , swap this minion with a random one in your hand . DESC_END

class AlarmoBot(MinionCard):
    def __init__(self):
        super().__init__("Alarm-o-Bot", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)

    def create_minion(self, player):
        return Minion(0, 3, effects=[Effect(TurnStarted(), ActionTag(SwapWithHand(), PlayerSelector()))])
**************************************************
**************************************************
example# 279
NAME_BEGIN Aldor Peacekeeper NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Paladin PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Battlecry : Change an enemy minion 's Attack to 1 . DESC_END

class AldorPeacekeeper(MinionCard):
    def __init__(self):
        super().__init__("Aldor Peacekeeper", 3, CHARACTER_CLASS.PALADIN, CARD_RARITY.RARE, battlecry=Battlecry(Give(SetAttack(1)), MinionSelector(condition=None, players=EnemyPlayer())))

    def create_minion(self, player):
        return Minion(3, 3)
**************************************************
**************************************************
example# 280
NAME_BEGIN Ancestral Spirit NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Shaman PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Give a minion `` Deathrattle : Resummon this minion . '' DESC_END

class AncestralSpirit(SpellCard):
    def __init__(self):
        super().__init__("Ancestral Spirit", 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.deathrattle.append(Deathrattle(Summon(self.target.card), PlayerSelector()))
**************************************************
**************************************************
example# 281
NAME_BEGIN Ancient Brewmaster NAME_END ATK_BEGIN 5 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Battlecry : Return a friendly minion from the battlefield to your hand . DESC_END

class AncientBrewmaster(MinionCard):
    def __init__(self):
        super().__init__("Ancient Brewmaster", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Bounce(), MinionSelector(picker=UserPicker())))

    def create_minion(self, player):
        return Minion(5, 4)
**************************************************
**************************************************
example# 282
NAME_BEGIN Ancient Mage NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Battlecry : Give adjacent minions Spell Damage +1 . DESC_END

class AncientMage(MinionCard):
    def __init__(self):
        super().__init__("Ancient Mage", 4, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(Give(SpellDamage(1)), MinionSelector(condition=Adjacent())))

    def create_minion(self, player):
        return Minion(2, 5)
**************************************************
**************************************************
example# 283
NAME_BEGIN Ancient Watcher NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Ca n't attack . DESC_END

class AncientWatcher(MinionCard):
    def __init__(self):
        super().__init__("Ancient Watcher", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)

    def create_minion(self, player):
        return Minion(4, 5, buffs=[Buff(CantAttack())])
**************************************************
**************************************************
example# 284
NAME_BEGIN Ancient of Lore NAME_END ATK_BEGIN 5 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 7 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Choose One - Draw 2 cards ; or Restore 5 Health . DESC_END

class AncientOfLore(MinionCard):
    def __init__(self):

        super().__init__("Ancient of Lore", 7, CHARACTER_CLASS.DRUID, CARD_RARITY.EPIC, choices=[
            Choice(AncientSecrets(), Heal(5), HeroSelector()),
            Choice(AncientTeachings(), Draw(3), PlayerSelector())
        ])

    def create_minion(self, player):
        return Minion(5, 5)
**************************************************
**************************************************
example# 285
NAME_BEGIN Ancient of War NAME_END ATK_BEGIN 5 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 7 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Choose One - NL +5 Attack ; or +5 Health and Taunt . DESC_END

class AncientOfWar(MinionCard):
    def __init__(self):

        super().__init__("Ancient of War", 7, CHARACTER_CLASS.DRUID, CARD_RARITY.EPIC, choices=[
            Choice(Health(), Give([Buff(ChangeHealth(5)), Buff(Taunt())]), SelfSelector()),
            Choice(Attack(), Give([Buff(ChangeAttack(5))]), SelfSelector()),
        ])

    def create_minion(self, player):
        return Minion(5, 5)
**************************************************
**************************************************
example# 286
NAME_BEGIN Angry Chicken NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Enrage : +5 Attack . DESC_END

class AngryChicken(MinionCard):
    def __init__(self):
        super().__init__("Angry Chicken", 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(1, 1, enrage=[Aura(ChangeAttack(5), SelfSelector())])
**************************************************
**************************************************
example# 287
NAME_BEGIN Arathi Weaponsmith NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Warrior PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Battlecry : Equip a 2/2 weapon . DESC_END

class ArathiWeaponsmith(MinionCard):
    def __init__(self):
        super().__init__("Arathi Weaponsmith", 4, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON, battlecry=Battlecry(Equip(BattleAxe()), PlayerSelector()))

    def create_minion(self, player):
        return Minion(3, 3)
**************************************************
**************************************************
example# 288
NAME_BEGIN Argent Commander NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 6 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Charge NL Divine Shield DESC_END

class ArgentCommander(MinionCard):
    def __init__(self):
        super().__init__("Argent Commander", 6, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)

    def create_minion(self, player):
        return Minion(4, 2, divine_shield=True, charge=True)
**************************************************
**************************************************
example# 289
NAME_BEGIN Argent Protector NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Paladin PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Battlecry : Give a friendly minion Divine Shield . DESC_END

class ArgentProtector(MinionCard):
    def __init__(self):
        super().__init__("Argent Protector", 2, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON, battlecry=Battlecry(Give(DivineShield()), MinionSelector()))

    def create_minion(self, player):
        return Minion(2, 2)
**************************************************
**************************************************
example# 290
NAME_BEGIN Argent Squire NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Divine Shield DESC_END

class ArgentSquire(MinionCard):
    def __init__(self):
        super().__init__("Argent Squire", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(1, 1, divine_shield=True)
**************************************************
**************************************************
example# 291
NAME_BEGIN Armorsmith NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Warrior PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Whenever a friendly minion takes damage , gain 1 Armor . DESC_END

class Armorsmith(MinionCard):
    def __init__(self):
        super().__init__("Armorsmith", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.RARE)

    def create_minion(self, player):
        return Minion(1, 4, effects=[Effect(CharacterDamaged(condition=IsMinion()), ActionTag(IncreaseArmor(), HeroSelector()))])
**************************************************
**************************************************
example# 292
NAME_BEGIN Ashbringer NAME_END ATK_BEGIN 5 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN 3 DUR_END TYPE_BEGIN Weapon TYPE_END PLAYER_CLS_BEGIN Paladin PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN NIL DESC_END

class Ashbringer(WeaponCard):
    def __init__(self):
        super().__init__("Ashbringer", 5, CHARACTER_CLASS.PALADIN, CARD_RARITY.LEGENDARY, False)

    def create_weapon(self, player):
        weapon = Weapon(5, 3)
        return weapon
**************************************************
**************************************************
example# 293
NAME_BEGIN Auchenai Soulpriest NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Priest PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Your cards and powers that restore Health now deal damage instead . DESC_END

class AuchenaiSoulpriest(MinionCard):
    def __init__(self):
        super().__init__("Auchenai Soulpriest", 4, CHARACTER_CLASS.PRIEST, CARD_RARITY.RARE)

    def create_minion(self, player):
        return Minion(3, 5, auras=[Aura(HealAsDamage(), PlayerSelector())])
**************************************************
**************************************************
example# 294
NAME_BEGIN Avenging Wrath NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 6 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Paladin PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Deal $ 8 damage randomly split among all enemies . DESC_END

class AvengingWrath(SpellCard):
    def __init__(self):
        super().__init__("Avenging Wrath", 6, CHARACTER_CLASS.PALADIN, CARD_RARITY.EPIC)

    def use(self, player, game):
        super().use(player, game)
        for i in range(0, player.effective_spell_damage(8)):
            targets = copy.copy(game.other_player.minions)
            targets.append(game.other_player.hero)
            target = game.random_choice(targets)
            target.damage(1, self)
**************************************************
**************************************************
example# 295
NAME_BEGIN Azure Drake NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Dragon RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Spell Damage +1 . Battlecry : Draw a card . DESC_END

class AzureDrake(MinionCard):
    def __init__(self):
        super().__init__("Azure Drake", 5, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.DRAGON, battlecry=Battlecry(Draw(), PlayerSelector()))

    def create_minion(self, player):
        return Minion(4, 4, spell_damage=1)
**************************************************
**************************************************
example# 296
NAME_BEGIN Bane of Doom NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Warlock PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Deal $ 2 damage to a character . If that kills it , summon a random Demon . DESC_END

class BaneOfDoom(SpellCard):
    def __init__(self):
        super().__init__("Bane of Doom", 5, CHARACTER_CLASS.WARLOCK, CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.find_spell_target)

    def use(self, player, game):
        super().use(player, game)
        if self.target.health <= player.effective_spell_damage(2) and (isinstance(self.target, Minion) and not self.target.divine_shield):
            self.target.damage(player.effective_spell_damage(2), self)
            demons = CardQuery(conditions=[IsType(MINION_TYPE.DEMON)])
            demons.get_card(player, player, self).summon(player, game, len(player.minions))
        else:
            self.target.damage(player.effective_spell_damage(2), self)
**************************************************
**************************************************
example# 297
NAME_BEGIN Baron Geddon NAME_END ATK_BEGIN 7 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 7 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN At the end of your turn , deal 2 damage to ALL other characters . DESC_END

class BaronGeddon(MinionCard):
    def __init__(self):
        super().__init__("Baron Geddon", 7, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)

    def create_minion(self, player):
        return Minion(7, 5, effects=[Effect(TurnEnded(), ActionTag(Damage(2), CharacterSelector(players=BothPlayer())))])
**************************************************
**************************************************
example# 298
NAME_BEGIN Battle Axe NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN 2 DUR_END TYPE_BEGIN Weapon TYPE_END PLAYER_CLS_BEGIN Warrior PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN NIL DESC_END

class BattleAxe(WeaponCard):
    def __init__(self):
        super().__init__("Battle Axe", 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON, False)

    def create_weapon(self, player):
        return Weapon(2, 2)
**************************************************
**************************************************
example# 299
NAME_BEGIN Battle Rage NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Warrior PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Draw a card for each damaged friendly character . DESC_END

class BattleRage(SpellCard):
    def __init__(self):
        super().__init__("Battle Rage", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON)

    def use(self, player, game):
        def damaged_character(character):
            return character.health < character.calculate_max_health()

        super().use(player, game)

        characters = copy.copy(player.minions)
        characters.append(player.hero)

        characters = [character for character in characters if damaged_character(character)]

        for i in range(0, len(characters)):
            player.draw()
**************************************************
**************************************************
example# 300
NAME_BEGIN Bestial Wrath NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Hunter PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Give a friendly Beast +2 Attack and Immune this turn . DESC_END

class BestialWrath(SpellCard):
    def __init__(self):
        super().__init__("Bestial Wrath", 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.find_friendly_minion_spell_target, filter_func=lambda minion: minion.card.minion_type is MINION_TYPE.BEAST and minion.spell_targetable())

    def use(self, player, game):
        super().use(player, game)
        self.target.add_buff(BuffUntil(Immune(), TurnEnded(player=CurrentPlayer())))
        self.target.change_temp_attack(2)
**************************************************
**************************************************
example# 301
NAME_BEGIN Betrayal NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Rogue PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Force an enemy minion to deal its damage to the minions next to it . DESC_END

class Betrayal(SpellCard):
    def __init__(self):
        super().__init__("Betrayal", 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_enemy_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)

        left_minion = None
        right_minion = None

        index = self.target.index
        if index > 0:
            left_minion = game.other_player.minions[index - 1]
        if index < min(len(game.other_player.minions) - 1, 6):
            right_minion = game.other_player.minions[index + 1]

        original_immune = self.target.immune
        self.target.immune = True
        if left_minion is not None:
            left_minion.damage(self.target.calculate_attack(), self.target)
        if right_minion is not None:
            right_minion.damage(self.target.calculate_attack(), self.target)
        self.target.immune = original_immune
**************************************************
**************************************************
example# 302
NAME_BEGIN Big Game Hunter NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Battlecry : Destroy a minion with an Attack of 7 or more . DESC_END

class BigGameHunter(MinionCard):
    def __init__(self):
        super().__init__("Big Game Hunter", 3, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, battlecry=Battlecry(Kill(), MinionSelector(AttackGreaterThan(6), BothPlayer())))

    def create_minion(self, player):
        return Minion(4, 2)
**************************************************
**************************************************
example# 303
NAME_BEGIN Bite NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Give your hero +4 Attack this turn and 4 Armor . DESC_END

class Bite(SpellCard):
    def __init__(self):
        super().__init__("Bite", 4, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)

    def use(self, player, game):
        super().use(player, game)
        player.hero.change_temp_attack(4)
        player.hero.increase_armor(4)
**************************************************
**************************************************
example# 304
NAME_BEGIN Blessing of Wisdom NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Paladin PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Choose a minion . Whenever it attacks , draw a card . DESC_END

class BlessingOfWisdom(SpellCard):
    def __init__(self):
        super().__init__("Blessing of Wisdom", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        if player is game.players[0]:
            draw_player = PlayerOne()
        else:
            draw_player = PlayerTwo()
        self.target.add_effect(Effect(Attack(), ActionTag(Draw(), PlayerSelector(draw_player))))
**************************************************
**************************************************
example# 305
NAME_BEGIN Blizzard NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 6 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Mage PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Deal $ 2 damage to all enemy minions and Freeze them . DESC_END

class Blizzard(SpellCard):
    def __init__(self):
        super().__init__("Blizzard", 6, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)

    def use(self, player, game):
        super().use(player, game)
        for minion in copy.copy(game.other_player.minions):
            minion.damage(player.effective_spell_damage(2), self)
        for minion in game.other_player.minions:
            minion.add_buff(Buff(Frozen()))
**************************************************
**************************************************
example# 306
NAME_BEGIN Blood Fury NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN 8 DUR_END TYPE_BEGIN Weapon TYPE_END PLAYER_CLS_BEGIN Warlock PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN NIL DESC_END

class BloodFury(WeaponCard):
    def __init__(self):
        super().__init__("Blood Fury", 3, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE, False)

    def create_weapon(self, player):
        return Weapon(3, 8)
**************************************************
**************************************************
example# 307
NAME_BEGIN Blood Imp NAME_END ATK_BEGIN 0 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Warlock PLAYER_CLS_END RACE_BEGIN Demon RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Stealth . At the end of your turn , give another random friendly minion +1 Health . DESC_END

class BloodImp(MinionCard):
    def __init__(self):
        super().__init__("Blood Imp", 1, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON)

    def create_minion(self, player):
        return Minion(0, 1, stealth=True, effects=[Effect(TurnEnded(), ActionTag(Give(ChangeHealth(1)), MinionSelector(picker=RandomPicker())))])
**************************************************
**************************************************
example# 308
NAME_BEGIN Blood Knight NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Battlecry : All minions lose Divine Shield . Gain +3/+3 for each Shield lost . DESC_END

class BloodKnight(MinionCard):
    def __init__(self):
        super().__init__("Blood Knight", 3, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, battlecry=(Battlecry([Give([Buff(ChangeAttack(Count(MinionSelector(HasDivineShield(), BothPlayer())), 3)), Buff(ChangeHealth(Count(MinionSelector(HasDivineShield(), BothPlayer())), 3))])], SelfSelector()), Battlecry(RemoveDivineShields(), (MinionSelector(HasDivineShield(), BothPlayer())))))

    def create_minion(self, player):
        return Minion(3, 3)
**************************************************
**************************************************
example# 309
NAME_BEGIN Bloodmage Thalnos NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Spell Damage +1 . Deathrattle : Draw a card . DESC_END

class BloodmageThalnos(MinionCard):
    def __init__(self):
        super().__init__("Bloodmage Thalnos", 2, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)

    def create_minion(self, player):
        return Minion(1, 1, spell_damage=1, deathrattle=Deathrattle(Draw(), PlayerSelector()))
**************************************************
**************************************************
example# 310
NAME_BEGIN Bloodsail Corsair NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Pirate RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Battlecry : Remove 1 Durability from your opponent 's weapon . DESC_END

class BloodsailCorsair(MinionCard):
    def __init__(self):
        super().__init__("Bloodsail Corsair", 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.PIRATE, battlecry=Battlecry(DecreaseDurability(), WeaponSelector(EnemyPlayer())))

    def create_minion(self, player):
        return Minion(1, 2)
**************************************************
**************************************************
example# 311
NAME_BEGIN Bloodsail Raider NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Pirate RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Battlecry : Gain Attack equal to the Attack of your weapon . DESC_END

class BloodsailRaider(MinionCard):
    def __init__(self):
        super().__init__("Bloodsail Raider", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE, battlecry=Battlecry(Give(Buff(ChangeAttack(Attribute("base_attack", WeaponSelector())))), SelfSelector()))

    def create_minion(self, player):
        return Minion(2, 3)
**************************************************
**************************************************
example# 312
NAME_BEGIN Cairne Bloodhoof NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 6 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Deathrattle : Summon a 4/5 Baine Bloodhoof . DESC_END

class CairneBloodhoof(MinionCard):
    def __init__(self):
        super().__init__("Cairne Bloodhoof", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)

    def create_minion(self, player):
        return Minion(4, 5, deathrattle=Deathrattle(Summon(BaineBloodhoof()), PlayerSelector()))
**************************************************
**************************************************
example# 313
NAME_BEGIN Captain Greenskin NAME_END ATK_BEGIN 5 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Pirate RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Battlecry : Give your weapon +1/+1 . DESC_END

class CaptainGreenskin(MinionCard):
    def __init__(self):
        super().__init__("Captain Greenskin", 5, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.PIRATE, battlecry=Battlecry([IncreaseWeaponAttack(1), IncreaseDurability()], WeaponSelector()))

    def create_minion(self, player):
        return Minion(5, 4)
**************************************************
**************************************************
example# 314
NAME_BEGIN Cenarius NAME_END ATK_BEGIN 5 ATK_END DEF_BEGIN 8 DEF_END COST_BEGIN 9 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Choose One - Give your other minions +2/+2 ; or Summon two 2/2 Treants with Taunt . DESC_END

class Cenarius(MinionCard):
    def __init__(self):
        super().__init__("Cenarius", 9, CHARACTER_CLASS.DRUID, CARD_RARITY.LEGENDARY, choices=[
            Choice(IncreaseStats(), Give([Buff(ChangeAttack(2)), Buff(ChangeHealth(2)), Buff(Taunt())]), MinionSelector()),
            Choice(SummonTreants(), Summon(TauntTreant(), 2), PlayerSelector())
        ])

    def create_minion(self, player):
        return Minion(5, 8)
**************************************************
**************************************************
example# 315
NAME_BEGIN Circle of Healing NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 0 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Priest PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Restore # 4 Health to ALL minions . DESC_END

class CircleOfHealing(SpellCard):
    def __init__(self):
        super().__init__("Circle of Healing", 0, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON)

    def use(self, player, game):
        super().use(player, game)

        targets = copy.copy(game.other_player.minions)
        targets.extend(player.minions)

        for minion in targets:
            minion.heal(player.effective_heal_power(4), self)
**************************************************
**************************************************
example# 316
NAME_BEGIN Cold Blood NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Rogue PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Give a minion +2 Attack . Combo : +4 Attack instead . DESC_END

class ColdBlood(SpellCard):
    def __init__(self):
        super().__init__("Cold Blood", 1, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)

        if player.cards_played > 0:
            self.target.change_attack(4)
        else:
            self.target.change_attack(2)
**************************************************
**************************************************
example# 317
NAME_BEGIN Coldlight Oracle NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Murloc RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Battlecry : Each player draws 2 cards . DESC_END

class ColdlightOracle(MinionCard):
    def __init__(self):
        super().__init__("Coldlight Oracle", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.MURLOC, battlecry=Battlecry(Draw(2), PlayerSelector(players=BothPlayer())))

    def create_minion(self, player):
        return Minion(2, 2)
**************************************************
**************************************************
example# 318
NAME_BEGIN Coldlight Seer NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Murloc RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Battlecry : Give ALL other Murlocs +2 Health . DESC_END

class ColdlightSeer(MinionCard):
    def __init__(self):
        super().__init__("Coldlight Seer", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.MURLOC, battlecry=Battlecry(Give(ChangeHealth(2)), MinionSelector(IsType(MINION_TYPE.MURLOC), BothPlayer())))

    def create_minion(self, player):
        return Minion(2, 3)
**************************************************
**************************************************
example# 319
NAME_BEGIN Commanding Shout NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Warrior PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Your minions ca n't be reduced below 1 Health this turn . Draw a card . DESC_END

class CommandingShout(SpellCard):
    def __init__(self):
        super().__init__("Commanding Shout", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.RARE)

    def use(self, player, game):
        super().use(player, game)
        player.add_aura(AuraUntil(MinimumHealth(1), MinionSelector(), TurnEnded()))

        player.draw()
**************************************************
**************************************************
example# 320
NAME_BEGIN Counterspell NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Mage PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Secret : When your opponent casts a spell , Counter it . DESC_END

class Counterspell(SecretCard):
    def __init__(self):
        super().__init__("Counterspell", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)

    def use(self, player, game):
        super().use(player, game)

    def _reveal(self, card, index):
        if card.is_spell():
            card.cancel = True
            super().reveal()

    def activate(self, player):
        player.game.current_player.bind("card_played", self._reveal)

    def deactivate(self, player):
        player.game.current_player.unbind("card_played", self._reveal)
**************************************************
**************************************************
example# 321
NAME_BEGIN Crazed Alchemist NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Battlecry : Swap the Attack and Health of a minion . DESC_END

class CrazedAlchemist(MinionCard):
    def __init__(self):
        super().__init__("Crazed Alchemist", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(SwapStats('health', 'attack', False), MinionSelector(players=BothPlayer(), picker=UserPicker())))

    def create_minion(self, player):
        return Minion(2, 2)
**************************************************
**************************************************
example# 322
NAME_BEGIN Cruel Taskmaster NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Warrior PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Battlecry : Deal 1 damage to a minion and give it +2 Attack . DESC_END

class CruelTaskmaster(MinionCard):
    def __init__(self):
        super().__init__("Cruel Taskmaster", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON, battlecry=Battlecry([Damage(1), Give(ChangeAttack(2))], MinionSelector(players=BothPlayer(), picker=UserPicker())))

    def create_minion(self, player):
        return Minion(2, 2)
**************************************************
**************************************************
example# 323
NAME_BEGIN Cult Master NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Whenever one of your other minions dies , draw a card . DESC_END

class CultMaster(MinionCard):
    def __init__(self):
        super().__init__("Cult Master", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(4, 2, effects=[Effect(MinionDied(), ActionTag(Draw(), PlayerSelector()))])
**************************************************
**************************************************
example# 324
NAME_BEGIN Damaged Golem NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN NIL DESC_END

class DamagedGolem(MinionCard):
    def __init__(self):
        super().__init__("Damaged Golem", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.MECH)

    def create_minion(self, player):
        return Minion(2, 1)
**************************************************
**************************************************
example# 325
NAME_BEGIN Dark Iron Dwarf NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Battlecry : Give a minion +2 Attack this turn . DESC_END

class DarkIronDwarf(MinionCard):
    def __init__(self):
        super().__init__("Dark Iron Dwarf", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Give(BuffUntil(ChangeAttack(2), TurnEnded(player=CurrentPlayer()))), MinionSelector(players=BothPlayer(), picker=UserPicker())))

    def create_minion(self, player):
        return Minion(4, 4)
**************************************************
**************************************************
example# 326
NAME_BEGIN Deadly Shot NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Hunter PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Destroy a random enemy minion . DESC_END

class DeadlyShot(SpellCard):
    def __init__(self):
        super().__init__("Deadly Shot", 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON)

    def use(self, player, game):
        super().use(player, game)
        targets = hearthbreaker.targeting.find_enemy_minion_battlecry_target(player.game, lambda x: True)
        target = game.random_choice(targets)
        target.die(None)
        game.check_delayed()

    def can_use(self, player, game):
        return super().can_use(player, game) and len(game.other_player.minions) >= 1
**************************************************
**************************************************
example# 327
NAME_BEGIN Deathwing NAME_END ATK_BEGIN 12 ATK_END DEF_BEGIN 12 DEF_END COST_BEGIN 10 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Dragon RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Battlecry : Destroy all other minions and discard your hand . DESC_END

class Deathwing(MinionCard):
    def __init__(self):
        super().__init__("Deathwing", 10, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DRAGON, battlecry=(Battlecry(Kill(), MinionSelector(players=BothPlayer())), Battlecry(Discard(amount=Count(CardSelector())), PlayerSelector())))

    def create_minion(self, player):
        return Minion(12, 12)
**************************************************
**************************************************
example# 328
NAME_BEGIN Defias Bandit NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Rogue PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN NIL DESC_END

class DefiasBandit(MinionCard):
    def __init__(self):
        super().__init__("Defias Bandit", 1, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON, False)

    def create_minion(self, player):
        return Minion(2, 1)
**************************************************
**************************************************
example# 329
NAME_BEGIN Defias Ringleader NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Rogue PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Combo : Summon a 2/1 Defias Bandit . DESC_END

class DefiasRingleader(MinionCard):
    def __init__(self):
        super().__init__("Defias Ringleader", 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON, combo=Battlecry(Summon(DefiasBandit()), PlayerSelector()))

    def create_minion(self, player):
        return Minion(2, 2)
**************************************************
**************************************************
example# 330
NAME_BEGIN Demolisher NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN At the start of your turn , deal 2 damage to a random enemy . DESC_END

class Demolisher(MinionCard):
    def __init__(self):
        super().__init__("Demolisher", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)

    def create_minion(self, player):
        return Minion(1, 4, effects=[Effect(TurnStarted(), ActionTag(Damage(2), CharacterSelector(players=EnemyPlayer(), picker=RandomPicker())))])
**************************************************
**************************************************
example# 331
NAME_BEGIN Demonfire NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Warlock PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Deal $ 2 damage to a minion . If it’s a friendly Demon , give it +2/+2 instead . DESC_END

class Demonfire(SpellCard):
    def __init__(self):
        super().__init__("Demonfire", 2, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        targets = copy.copy(player.game.current_player.minions)
        if self.target.card.minion_type is MINION_TYPE.DEMON and self.target in targets:
            self.target.change_attack(2)
            self.target.increase_health(2)
        else:
            self.target.damage(player.effective_spell_damage(2), self)
**************************************************
**************************************************
example# 332
NAME_BEGIN Demonfire NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 0 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Enchantment TYPE_END PLAYER_CLS_BEGIN Warlock PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN This Demon has +2/+2 . DESC_END

class Demonfire(SpellCard):
    def __init__(self):
        super().__init__("Demonfire", 2, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        targets = copy.copy(player.game.current_player.minions)
        if self.target.card.minion_type is MINION_TYPE.DEMON and self.target in targets:
            self.target.change_attack(2)
            self.target.increase_health(2)
        else:
            self.target.damage(player.effective_spell_damage(2), self)
**************************************************
**************************************************
example# 333
NAME_BEGIN Devilsaur NAME_END ATK_BEGIN 5 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN NIL DESC_END

class Devilsaur(MinionCard):
    def __init__(self):
        super().__init__("Devilsaur", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(5, 5)
**************************************************
**************************************************
example# 334
NAME_BEGIN Dire Wolf Alpha NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Adjacent minions have +1 Attack . DESC_END

class DireWolfAlpha(MinionCard):
    def __init__(self):
        super().__init__("Dire Wolf Alpha", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(2, 2, auras=[Aura(ChangeAttack(1), MinionSelector(Adjacent()))])
**************************************************
**************************************************
example# 335
NAME_BEGIN Divine Favor NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Paladin PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Draw cards until you have as many in hand as your opponent . DESC_END

class DivineFavor(SpellCard):
    def __init__(self):
        super().__init__("Divine Favor", 3, CHARACTER_CLASS.PALADIN, CARD_RARITY.RARE)

    def use(self, player, game):
        super().use(player, game)
        difference = len(game.other_player.hand) - len(player.hand)
        for i in range(0, difference):
            player.draw()
**************************************************
**************************************************
example# 336
NAME_BEGIN Doomsayer NAME_END ATK_BEGIN 0 ATK_END DEF_BEGIN 7 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN At the start of your turn , destroy ALL minions . DESC_END

class Doomsayer(MinionCard):
    def __init__(self):
        super().__init__("Doomsayer", 2, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC)

    def create_minion(self, player):
        return Minion(0, 7, effects=[Effect(TurnStarted(), ActionTag(Kill(), MinionSelector(condition=None, players=BothPlayer())))])
**************************************************
**************************************************
example# 337
NAME_BEGIN Dread Corsair NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Pirate RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Taunt . Costs ( 1 ) less per Attack of your weapon . DESC_END

class DreadCorsair(MinionCard):
    def __init__(self):
        super().__init__("Dread Corsair", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE, buffs=[Buff(ManaChange(Attribute("attack", WeaponSelector()), -1))])

    def create_minion(self, player):
        return Minion(3, 3, taunt=True)
**************************************************
**************************************************
example# 338
NAME_BEGIN Dream NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 0 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Dream PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN Return a minion to its owner 's hand . DESC_END

class Dream(SpellCard):
    def __init__(self):
        super().__init__("Dream", 0, CHARACTER_CLASS.DREAM, CARD_RARITY.COMMON, False, hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.bounce()
**************************************************
**************************************************
example# 339
NAME_BEGIN Druid of the Claw NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 6 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Taunt DESC_END

class DruidOfTheClaw(MinionCard):
    def __init__(self):
        super().__init__("Druid of the Claw", 5, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, choices=[
            Choice(CatForm(), Transform(CatDruid()), SelfSelector()),
            Choice(BearForm(), Transform(BearDruid()), SelfSelector())
        ])

    def create_minion(self, player):
        return Minion(4, 4)
**************************************************
**************************************************
example# 340
NAME_BEGIN Druid of the Claw NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Choose One - Charge ; or +2 Health and Taunt . DESC_END

class DruidOfTheClaw(MinionCard):
    def __init__(self):
        super().__init__("Druid of the Claw", 5, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, choices=[
            Choice(CatForm(), Transform(CatDruid()), SelfSelector()),
            Choice(BearForm(), Transform(BearDruid()), SelfSelector())
        ])

    def create_minion(self, player):
        return Minion(4, 4)
**************************************************
**************************************************
example# 341
NAME_BEGIN Druid of the Claw NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Charge DESC_END

class DruidOfTheClaw(MinionCard):
    def __init__(self):
        super().__init__("Druid of the Claw", 5, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, choices=[
            Choice(CatForm(), Transform(CatDruid()), SelfSelector()),
            Choice(BearForm(), Transform(BearDruid()), SelfSelector())
        ])

    def create_minion(self, player):
        return Minion(4, 4)
**************************************************
**************************************************
example# 342
NAME_BEGIN Dust Devil NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Shaman PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Windfury . Overload : ( 2 ) DESC_END

class DustDevil(MinionCard):
    def __init__(self):
        super().__init__("Dust Devil", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, overload=2)

    def create_minion(self, player):
        return Minion(3, 1, windfury=True)
**************************************************
**************************************************
example# 343
NAME_BEGIN Eaglehorn Bow NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN 2 DUR_END TYPE_BEGIN Weapon TYPE_END PLAYER_CLS_BEGIN Hunter PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Whenever a friendly Secret is revealed , gain +1 Durability . DESC_END

class EaglehornBow(WeaponCard):
    def __init__(self):
        super().__init__("Eaglehorn Bow", 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)

    def create_weapon(self, player):
        return Weapon(3, 2, effects=[Effect(SecretRevealed(), ActionTag(IncreaseDurability(), WeaponSelector()))])
**************************************************
**************************************************
example# 344
NAME_BEGIN Earthen Ring Farseer NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Battlecry : Restore 3 Health . DESC_END

class EarthenRingFarseer(MinionCard):
    def __init__(self):
        super().__init__("Earthen Ring Farseer", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Heal(3), CharacterSelector(players=BothPlayer(), picker=UserPicker())))

    def create_minion(self, player):
        return Minion(3, 3)
**************************************************
**************************************************
example# 345
NAME_BEGIN Edwin VanCleef NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Rogue PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Combo : Gain +2/+2 for each card played earlier this turn . DESC_END

class EdwinVanCleef(MinionCard):
    def __init__(self):
        super().__init__("Edwin VanCleef", 3, CHARACTER_CLASS.ROGUE, CARD_RARITY.LEGENDARY, battlecry=Battlecry(Give([Buff(ChangeAttack(Attribute("cards_played", PlayerSelector()), 2)), Buff(ChangeHealth(Attribute("cards_played", PlayerSelector()), 2))]), SelfSelector()))

    def create_minion(self, player):
        return Minion(2, 2)
**************************************************
**************************************************
example# 346
NAME_BEGIN Emerald Drake NAME_END ATK_BEGIN 7 ATK_END DEF_BEGIN 6 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Dream PLAYER_CLS_END RACE_BEGIN Dragon RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN NIL DESC_END

class EmeraldDrake(MinionCard):
    def __init__(self):
        super().__init__("Emerald Drake", 4, CHARACTER_CLASS.DREAM, CARD_RARITY.COMMON, False, MINION_TYPE.DRAGON)

    def create_minion(self, player):
        return Minion(7, 6)
**************************************************
**************************************************
example# 347
NAME_BEGIN Emperor Cobra NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Destroy any minion damaged by this minion . DESC_END

class EmperorCobra(MinionCard):
    def __init__(self):
        super().__init__("Emperor Cobra", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(2, 3, effects=[Effect(DidDamage(), ActionTag(Kill(), TargetSelector(IsMinion())))])
**************************************************
**************************************************
example# 348
NAME_BEGIN Equality NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Paladin PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Change the Health of ALL minions to 1 . DESC_END

class Equality(SpellCard):
    def __init__(self):
        super().__init__("Equality", 2, CHARACTER_CLASS.PALADIN, CARD_RARITY.RARE)

    def use(self, player, game):
        super().use(player, game)

        targets = copy.copy(game.other_player.minions)
        targets.extend(player.minions)

        for minion in targets:
            minion.set_health_to(1)

    def can_use(self, player, game):
        return super().can_use(player, game) and (len(player.minions) > 0 or len(game.other_player.minions) > 0)
**************************************************
**************************************************
example# 349
NAME_BEGIN Ethereal Arcanist NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Mage PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN If you control a Secret at the end of your turn , gain +2/+2 . DESC_END

class EtherealArcanist(MinionCard):
    def __init__(self):
        super().__init__("Ethereal Arcanist", 4, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)

    def create_minion(self, player):
        return Minion(3, 3, effects=[Effect(TurnEnded(HasSecret()), ActionTag(Give(ChangeAttack(2)), SelfSelector())), Effect(TurnEnded(HasSecret()), ActionTag(Give(ChangeHealth(2)), SelfSelector()))])
**************************************************
**************************************************
example# 350
NAME_BEGIN Eviscerate NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Rogue PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Deal $ 2 damage . Combo : Deal $ 4 damage instead . DESC_END

class Eviscerate(SpellCard):
    def __init__(self):
        super().__init__("Eviscerate", 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target)

    def use(self, player, game):
        super().use(player, game)

        if player.cards_played > 0:
            self.target.damage(player.effective_spell_damage(4), self)
        else:
            self.target.damage(player.effective_spell_damage(2), self)
**************************************************
**************************************************
example# 351
NAME_BEGIN Explosive Shot NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Hunter PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Deal $ 5 damage to a minion and $ 2 damage to adjacent ones . DESC_END

class ExplosiveShot(SpellCard):
    def __init__(self):
        super().__init__("Explosive Shot", 5, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)

        index = self.target.index
        if self.target.index < len(self.target.player.minions) - 1:
            minion = self.target.player.minions[index + 1]
            minion.damage(player.effective_spell_damage(2), self)

        self.target.damage(player.effective_spell_damage(5), self)

        if self.target.index > 0:
            minion = self.target.player.minions[index - 1]
            minion.damage(player.effective_spell_damage(2), self)
**************************************************
**************************************************
example# 352
NAME_BEGIN Faceless Manipulator NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Battlecry : Choose a minion and become a copy of it . DESC_END

class FacelessManipulator(MinionCard):
    def __init__(self):
        super().__init__("Faceless Manipulator", 5, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, battlecry=Battlecry(Replace(), MinionSelector(players=BothPlayer(), picker=UserPicker())))

    def create_minion(self, player):
        return Minion(3, 3)
**************************************************
**************************************************
example# 353
NAME_BEGIN Faerie Dragon NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Dragon RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Ca n't be targeted by spells or Hero Powers . DESC_END

class FaerieDragon(MinionCard):
    def __init__(self):
        super().__init__("Faerie Dragon", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON)

    def create_minion(self, player):
        return Minion(3, 2, spell_targetable=False)
**************************************************
**************************************************
example# 354
NAME_BEGIN Far Sight NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Shaman PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Draw a card . That card costs ( 3 ) less . DESC_END

class FarSight(SpellCard):
    def __init__(self):
        super().__init__("Far Sight", 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.EPIC)

    def use(self, player, game):
        def reduce_cost(card):
            card.add_buff(Buff(ManaChange(-3)))

        super().use(player, game)
        player.bind_once("card_drawn", reduce_cost)
        player.draw()
**************************************************
**************************************************
example# 355
NAME_BEGIN Felguard NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Warlock PLAYER_CLS_END RACE_BEGIN Demon RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Taunt . Battlecry : Destroy one of your Mana Crystals . DESC_END

class Felguard(MinionCard):
    def __init__(self):
        super().__init__("Felguard", 3, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON, battlecry=Battlecry(DestroyManaCrystal(), PlayerSelector()))

    def create_minion(self, player):
        return Minion(3, 5, taunt=True)
**************************************************
**************************************************
example# 356
NAME_BEGIN Fen Creeper NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 6 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Taunt DESC_END

class FenCreeper(MinionCard):
    def __init__(self):
        super().__init__("Fen Creeper", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(3, 6, taunt=True)
**************************************************
**************************************************
example# 357
NAME_BEGIN Feral Spirit NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Shaman PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Summon two 2/3 Spirit Wolves with Taunt . Overload : ( 2 ) DESC_END

class FeralSpirit(SpellCard):
    def __init__(self):
        super().__init__("Feral Spirit", 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.RARE, overload=2)

    def use(self, player, game):
        super().use(player, game)

        for i in range(0, 2):
            spirit_wolf = hearthbreaker.cards.minions.shaman.SpiritWolf()
            spirit_wolf.summon(player, game, len(player.minions))

    def can_use(self, player, game):
        return super().can_use(player, game) and len(player.minions) < 7
**************************************************
**************************************************
example# 358
NAME_BEGIN Finkle Einhorn NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN NIL DESC_END

class FinkleEinhorn(MinionCard):
    def __init__(self):
        super().__init__("Finkle Einhorn", 2, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, False)

    def create_minion(self, player):
        return Minion(3, 3)
**************************************************
**************************************************
example# 359
NAME_BEGIN Flame Imp NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Warlock PLAYER_CLS_END RACE_BEGIN Demon RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Battlecry : Deal 3 damage to your hero . DESC_END

class FlameImp(MinionCard):
    def __init__(self):
        super().__init__("Flame Imp", 1, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON, battlecry=Battlecry(Damage(3), HeroSelector()))

    def create_minion(self, player):
        return Minion(3, 2)
**************************************************
**************************************************
example# 360
NAME_BEGIN Flesheating Ghoul NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Whenever a minion dies , gain +1 Attack . DESC_END

class FlesheatingGhoul(MinionCard):
    def __init__(self):
        super().__init__("Flesheating Ghoul", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(2, 3, effects=[Effect(MinionDied(player=BothPlayer()), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])
**************************************************
**************************************************
example# 361
NAME_BEGIN Force of Nature NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 6 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Summon three 2/2 Treants with Charge that die at the end of the turn . DESC_END

class ForceOfNature(SpellCard):
    def __init__(self):
        super().__init__("Force of Nature", 6, CHARACTER_CLASS.DRUID, CARD_RARITY.EPIC)

    def use(self, player, game):
        super().use(player, game)
        from hearthbreaker.cards.minions.druid import ChargeTreant
        for i in [0, 1, 2]:
            treant_card = ChargeTreant()
            treant_card.summon(player, game, len(player.minions))

    def can_use(self, player, game):
        return super().can_use(player, game) and len(player.minions) < 7
**************************************************
**************************************************
example# 362
NAME_BEGIN Forked Lightning NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Shaman PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Deal $ 2 damage to 2 random enemy minions . Overload : ( 2 ) DESC_END

class ForkedLightning(SpellCard):
    def __init__(self):
        super().__init__("Forked Lightning", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, overload=2)

    def use(self, player, game):
        super().use(player, game)

        minions = copy.copy(game.other_player.minions)
        for i in range(0, 2):
            minion = game.random_choice(minions)
            minions.remove(minion)
            minion.damage(player.effective_spell_damage(3), self)

    def can_use(self, player, game):
        return super().can_use(player, game) and len(game.other_player.minions) >= 2
**************************************************
**************************************************
example# 363
NAME_BEGIN Freezing Trap NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Hunter PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Secret : When an enemy minion attacks , return it to its owner 's hand and it costs ( 2 ) more . DESC_END

class FreezingTrap(SecretCard):
    def __init__(self):
        super().__init__("Freezing Trap", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON)

    def activate(self, player):
        player.game.current_player.bind("character_attack", self._reveal)

    def deactivate(self, player):
        player.game.current_player.unbind("character_attack", self._reveal)

    def _reveal(self, attacker, target):
        if isinstance(attacker, Minion) and not attacker.removed:
            attacker.bounce()
            attacker.card.add_buff(Buff(ManaChange(2)))
            super().reveal()
**************************************************
**************************************************
example# 364
NAME_BEGIN Frost Elemental NAME_END ATK_BEGIN 5 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 6 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Battlecry : Freeze a character . DESC_END

class FrostElemental(MinionCard):
    def __init__(self):
        super().__init__("Frost Elemental", 6, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Give(Frozen()), CharacterSelector(players=BothPlayer(), picker=UserPicker())))

    def create_minion(self, player):
        return Minion(5, 5)
**************************************************
**************************************************
example# 365
NAME_BEGIN Frothing Berserker NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Warrior PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Whenever a minion takes damage , gain +1 Attack . DESC_END

class FrothingBerserker(MinionCard):
    def __init__(self):
        super().__init__("Frothing Berserker", 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.RARE)

    def create_minion(self, player):
        return Minion(2, 4, effects=[Effect(CharacterDamaged(player=BothPlayer(), condition=IsMinion()), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])
**************************************************
**************************************************
example# 366
NAME_BEGIN Gadgetzan Auctioneer NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 6 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Whenever you cast a spell , draw a card . DESC_END

class GadgetzanAuctioneer(MinionCard):
    def __init__(self):
        super().__init__("Gadgetzan Auctioneer", 6, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)

    def create_minion(self, player):
        return Minion(4, 4, effects=[Effect(SpellCast(), ActionTag(Draw(), PlayerSelector()))])
**************************************************
**************************************************
example# 367
NAME_BEGIN Gladiator 's Longbow NAME_END ATK_BEGIN 5 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 7 COST_END DUR_BEGIN 2 DUR_END TYPE_BEGIN Weapon TYPE_END PLAYER_CLS_BEGIN Hunter PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Your hero is Immune while attacking . DESC_END

class GladiatorsLongbow(WeaponCard):
    def __init__(self):
        super().__init__("Gladiator's Longbow", 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.EPIC)

    def create_weapon(self, player):
        return Weapon(5, 2, effects=[Effect(CharacterAttack(IsHero()), ActionTag(Give(BuffUntil(Immune(), AttackCompleted())), HeroSelector()))])
**************************************************
**************************************************
example# 368
NAME_BEGIN Grommash Hellscream NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 9 DEF_END COST_BEGIN 8 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Warrior PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Charge NL Enrage : +6 Attack DESC_END

class GrommashHellscream(MinionCard):
    def __init__(self):
        super().__init__("Grommash Hellscream", 8, CHARACTER_CLASS.WARRIOR, CARD_RARITY.LEGENDARY)

    def create_minion(self, player):
        return Minion(4, 9, charge=True, enrage=[Aura(ChangeAttack(6), SelfSelector())])
**************************************************
**************************************************
example# 369
NAME_BEGIN Gruul NAME_END ATK_BEGIN 7 ATK_END DEF_BEGIN 7 DEF_END COST_BEGIN 8 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN At the end of each turn , gain +1/+1 . DESC_END

class Gruul(MinionCard):
    def __init__(self):
        super().__init__("Gruul", 8, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)

    def create_minion(self, player):
        return Minion(7, 7, effects=[Effect(TurnEnded(player=BothPlayer()), ActionTag(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector()))])
**************************************************
**************************************************
example# 370
NAME_BEGIN Harrison Jones NAME_END ATK_BEGIN 5 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Battlecry : Destroy your opponent 's weapon and draw cards equal to its Durability . DESC_END

class HarrisonJones(MinionCard):
    def __init__(self):
        super().__init__("Harrison Jones", 5, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, battlecry=(Battlecry(Draw(Attribute("durability", WeaponSelector(EnemyPlayer()))), PlayerSelector()), Battlecry(Destroy(), WeaponSelector(EnemyPlayer()))))

    def create_minion(self, player):
        return Minion(5, 4)
**************************************************
**************************************************
example# 371
NAME_BEGIN Harvest Golem NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Deathrattle : Summon a 2/1 Damaged Golem . DESC_END

class HarvestGolem(MinionCard):
    def __init__(self):
        super().__init__("Harvest Golem", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)

    def create_minion(self, player):
        return Minion(2, 3, deathrattle=Deathrattle(Summon(DamagedGolem()), PlayerSelector()))
**************************************************
**************************************************
example# 372
NAME_BEGIN Headcrack NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Rogue PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Deal $ 2 damage to the enemy hero . Combo : Return this to your hand next turn . DESC_END

class Headcrack(SpellCard):
    def __init__(self):
        super().__init__("Headcrack", 3, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE)

    def use(self, player, game):
        super().use(player, game)
        game.other_player.hero.damage(player.effective_spell_damage(2), self)
        if player.cards_played > 0:
            player.add_effect(Effect(TurnEnded(), ActionTag(AddCard(self), PlayerSelector())))
**************************************************
**************************************************
example# 373
NAME_BEGIN Heavy Axe NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN 3 DUR_END TYPE_BEGIN Weapon TYPE_END PLAYER_CLS_BEGIN Warrior PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN NIL DESC_END

class HeavyAxe(WeaponCard):
    def __init__(self):
        super().__init__("Heavy Axe", 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON, False)

    def create_weapon(self, player):
        return Weapon(1, 3)
**************************************************
**************************************************
example# 374
NAME_BEGIN Hogger NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 6 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN At the end of your turn , summon a 2/2 Gnoll with Taunt . DESC_END

class Hogger(MinionCard):
    def __init__(self):
        super().__init__("Hogger", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)

    def create_minion(self, player):
        return Minion(4, 4, effects=[Effect(TurnEnded(), ActionTag(Summon(Gnoll()), PlayerSelector()))])
**************************************************
**************************************************
example# 375
NAME_BEGIN Holy Fire NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 6 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Priest PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Deal $ 5 damage . Restore # 5 Health to your hero . DESC_END

class HolyFire(SpellCard):
    def __init__(self):
        super().__init__("Holy Fire", 6, CHARACTER_CLASS.PRIEST, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)

        self.target.damage(player.effective_spell_damage(5), self)
        player.hero.heal(player.effective_heal_power(5), self)
**************************************************
**************************************************
example# 376
NAME_BEGIN Hungry Crab NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Battlecry : Destroy a Murloc and gain +2/+2 . DESC_END

class HungryCrab(MinionCard):
    def __init__(self):
        super().__init__("Hungry Crab", 1, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, minion_type=MINION_TYPE.BEAST, battlecry=(Battlecry(Kill(), MinionSelector(IsType(MINION_TYPE.MURLOC), BothPlayer())), Battlecry(Give([Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), SelfSelector())))

    def create_minion(self, player):
        return Minion(1, 2)
**************************************************
**************************************************
example# 377
NAME_BEGIN Hyena NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Hunter PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN NIL DESC_END

class Hyena(MinionCard):
    def __init__(self):
        super().__init__("Hyena", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE, False, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(2, 2)
**************************************************
**************************************************
example# 378
NAME_BEGIN Ice Barrier NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Mage PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Secret : When your hero is attacked , gain 8 Armor . DESC_END

class IceBarrier(SecretCard):
    def __init__(self):
        super().__init__("Ice Barrier", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON)

    def _reveal(self, attacker, target):
        if target is self.player.hero and not attacker.removed:
            attacker.player.game.other_player.hero.armor += 8
            super().reveal()

    def activate(self, player):
        player.opponent.bind("character_attack", self._reveal)

    def deactivate(self, player):
        player.opponent.unbind("character_attack", self._reveal)
**************************************************
**************************************************
example# 379
NAME_BEGIN Ice Block NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Mage PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Secret : When your hero takes fatal damage , prevent it and become Immune this turn . DESC_END

class IceBlock(SecretCard):
    def __init__(self):
        super().__init__("Ice Block", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.EPIC)
        self.player = None

    def _reveal(self, character, attacker, amount):
        if character.is_hero():
            if character.health - amount <= 0:
                character.add_buff(BuffUntil(Immune(), TurnEnded(player=CurrentPlayer())))
                super().reveal()

    def activate(self, player):
        player.bind("pre_damage", self._reveal)

    def deactivate(self, player):
        player.unbind("pre_damage", self._reveal)
**************************************************
**************************************************
example# 380
NAME_BEGIN Ice Lance NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Mage PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Freeze a character . If it was already Frozen , deal $ 4 damage instead . DESC_END

class IceLance(SpellCard):
    def __init__(self):
        super().__init__("Ice Lance", 1, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target)

    def use(self, player, game):
        super().use(player, game)
        if self.target.frozen:
            self.target.damage(4, self)
        else:
            self.target.add_buff(Buff(Frozen()))
**************************************************
**************************************************
example# 381
NAME_BEGIN Illidan Stormrage NAME_END ATK_BEGIN 7 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 6 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Demon RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Whenever you play a card , summon a 2/1 Flame of Azzinoth . DESC_END

class IllidanStormrage(MinionCard):
    def __init__(self):
        super().__init__("Illidan Stormrage", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DEMON)

    def create_minion(self, player):
        return Minion(7, 5, effects=[Effect(CardPlayed(), ActionTag(Summon(FlameOfAzzinoth()), PlayerSelector()))])
**************************************************
**************************************************
example# 382
NAME_BEGIN Imp NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Demon RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN NIL DESC_END

class Imp(MinionCard):
    def __init__(self):
        super().__init__("Imp", 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, False, minion_type=MINION_TYPE.DEMON)

    def create_minion(self, player):
        return Minion(1, 1)
**************************************************
**************************************************
example# 383
NAME_BEGIN Imp Master NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN At the end of your turn , deal 1 damage to this minion and summon a 1/1 Imp . DESC_END

class ImpMaster(MinionCard):
    def __init__(self):
        super().__init__("Imp Master", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)

    def create_minion(self, player):
        return Minion(1, 5, effects=[Effect(TurnEnded(), ActionTag(Damage(1), SelfSelector())), Effect(TurnEnded(), ActionTag(Summon(Imp()), PlayerSelector()))])
**************************************************
**************************************************
example# 384
NAME_BEGIN Inner Fire NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Priest PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Change a minion 's Attack to be equal to its Health . DESC_END

class InnerFire(SpellCard):
    def __init__(self):
        super().__init__("Inner Fire", 1, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)

        delta = self.target.health - self.target.calculate_attack()
        self.target.change_attack(delta)
**************************************************
**************************************************
example# 385
NAME_BEGIN Inner Rage NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 0 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Warrior PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Deal $ 1 damage to a minion and give it +2 Attack . DESC_END

class InnerRage(SpellCard):
    def __init__(self):
        super().__init__("Inner Rage", 0, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(1, self)
        self.target.change_attack(2)
**************************************************
**************************************************
example# 386
NAME_BEGIN Ironbeak Owl NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Battlecry : Silence a minion . DESC_END

class IronbeakOwl(MinionCard):
    def __init__(self):
        super().__init__("Ironbeak Owl", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST, battlecry=Battlecry(Silence(), MinionSelector(players=BothPlayer(), picker=UserPicker())))

    def create_minion(self, player):
        return Minion(2, 1)
**************************************************
**************************************************
example# 387
NAME_BEGIN Jungle Panther NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Stealth DESC_END

class JunglePanther(MinionCard):
    def __init__(self):
        super().__init__("Jungle Panther", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(4, 2, stealth=True)
**************************************************
**************************************************
example# 388
NAME_BEGIN Keeper of the Grove NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Choose One - Deal 2 damage ; or Silence a minion . DESC_END

class KeeperOfTheGrove(MinionCard):
    def __init__(self):
        super().__init__("Keeper of the Grove", 4, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE, choices=[
            Choice(Moonfire(), Damage(2), CharacterSelector(players=BothPlayer(), picker=UserPicker())),
            Choice(Dispel(), Silence(), MinionSelector(players=BothPlayer(), picker=UserPicker()))
        ])

    def create_minion(self, player):
        return Minion(2, 4)
**************************************************
**************************************************
example# 389
NAME_BEGIN Kidnapper NAME_END ATK_BEGIN 5 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 6 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Rogue PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Combo : Return a minion to its owner 's hand . DESC_END

class Kidnapper(MinionCard):
    def __init__(self):
        super().__init__("Kidnapper", 6, CHARACTER_CLASS.ROGUE, CARD_RARITY.EPIC, combo=Battlecry(Bounce(), MinionSelector(picker=UserPicker(), players=BothPlayer())))

    def create_minion(self, player):
        return Minion(5, 3)
**************************************************
**************************************************
example# 390
NAME_BEGIN King Krush NAME_END ATK_BEGIN 8 ATK_END DEF_BEGIN 8 DEF_END COST_BEGIN 9 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Hunter PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Charge DESC_END

class KingKrush(MinionCard):
    def __init__(self):
        super().__init__("King Krush", 9, CHARACTER_CLASS.HUNTER, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(8, 8, charge=True)
**************************************************
**************************************************
example# 391
NAME_BEGIN King Mukla NAME_END ATK_BEGIN 5 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Battlecry : Give your opponent 2 Bananas . DESC_END

class KingMukla(MinionCard):
    def __init__(self):
        super().__init__("King Mukla", 3, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST, battlecry=Battlecry(AddCard(Bananas(), 2), PlayerSelector(EnemyPlayer())))

    def create_minion(self, player):
        return Minion(5, 5)
**************************************************
**************************************************
example# 392
NAME_BEGIN Laughing Sister NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Dream PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN Ca n't be targeted by spells or Hero Powers . DESC_END

class LaughingSister(MinionCard):
    def __init__(self):
        super().__init__("Laughing Sister", 3, CHARACTER_CLASS.DREAM, CARD_RARITY.COMMON, False)

    def create_minion(self, player):
        return Minion(3, 5, spell_targetable=False)
**************************************************
**************************************************
example# 393
NAME_BEGIN Lava Burst NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Shaman PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Deal $ 5 damage . Overload : ( 2 ) DESC_END

class LavaBurst(SpellCard):
    def __init__(self):
        super().__init__("Lava Burst", 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_spell_target, overload=2)

    def use(self, player, game):
        super().use(player, game)

        self.target.damage(player.effective_spell_damage(5), self)
**************************************************
**************************************************
example# 394
NAME_BEGIN Lay on Hands NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 8 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Paladin PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Restore # 8 Health . Draw 3 cards . DESC_END

class LayOnHands(SpellCard):
    def __init__(self):
        super().__init__("Lay on Hands", 8, CHARACTER_CLASS.PALADIN, CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.find_spell_target)

    def use(self, player, game):
        super().use(player, game)

        self.target.heal(player.effective_heal_power(8), self)
        player.draw()
        player.draw()
        player.draw()
**************************************************
**************************************************
example# 395
NAME_BEGIN Leeroy Jenkins NAME_END ATK_BEGIN 6 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Charge . Battlecry : Summon two 1/1 Whelps for your opponent . DESC_END

class LeeroyJenkins(MinionCard):
    def __init__(self):
        super().__init__("Leeroy Jenkins", 5, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, battlecry=Battlecry(Summon(Whelp(), 2), PlayerSelector(players=EnemyPlayer())))

    def create_minion(self, player):
        return Minion(6, 2, charge=True)
**************************************************
**************************************************
example# 396
NAME_BEGIN Leper Gnome NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Deathrattle : Deal 2 damage to the enemy hero . DESC_END

class LeperGnome(MinionCard):
    def __init__(self):
        super().__init__("Leper Gnome", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(2, 1, deathrattle=Deathrattle(Damage(2), HeroSelector(EnemyPlayer())))
**************************************************
**************************************************
example# 397
NAME_BEGIN Lightning Bolt NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Shaman PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Deal $ 3 damage . Overload : ( 1 ) DESC_END

class LightningBolt(SpellCard):
    def __init__(self):
        super().__init__("Lightning Bolt", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target, overload=1)

    def use(self, player, game):
        super().use(player, game)

        self.target.damage(player.effective_spell_damage(3), self)
**************************************************
**************************************************
example# 398
NAME_BEGIN Lightning Storm NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Shaman PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Deal $ 2- $ 3 damage to all enemy minions . Overload : ( 2 ) DESC_END

class LightningStorm(SpellCard):
    def __init__(self):
        super().__init__("Lightning Storm", 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.RARE, overload=2)

    def use(self, player, game):
        super().use(player, game)

        for minion in copy.copy(game.other_player.minions):
            minion.damage(player.effective_spell_damage(game.random_amount(2, 3)), self)
**************************************************
**************************************************
example# 399
NAME_BEGIN Lightspawn NAME_END ATK_BEGIN 0 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Priest PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN This minion 's Attack is always equal to its Health . DESC_END

class Lightspawn(MinionCard):
    def __init__(self):
        super().__init__("Lightspawn", 4, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(0, 5, buffs=[Buff(AttackEqualsHealth())])
**************************************************
**************************************************
example# 400
NAME_BEGIN Loot Hoarder NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Deathrattle : Draw a card . DESC_END

class LootHoarder(MinionCard):
    def __init__(self):
        super().__init__("Loot Hoarder", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(2, 1, deathrattle=Deathrattle(Draw(), PlayerSelector()))
**************************************************
**************************************************
example# 401
NAME_BEGIN Lord Jaraxxus NAME_END ATK_BEGIN 0 ATK_END DEF_BEGIN 15 DEF_END COST_BEGIN 0 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Hero TYPE_END PLAYER_CLS_BEGIN Warlock PLAYER_CLS_END RACE_BEGIN Demon RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN NIL DESC_END

class LordJaraxxus(MinionCard):
    def __init__(self):
        super().__init__("Lord Jaraxxus", 9, CHARACTER_CLASS.WARLOCK, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DEMON, battlecry=(Battlecry(ReplaceHeroWithMinion(Jaraxxus()), HeroSelector()), Battlecry(Remove(), SelfSelector()), Battlecry(Equip(BloodFury()), PlayerSelector())))

    def create_minion(self, player):
        return Minion(3, 15)
**************************************************
**************************************************
example# 402
NAME_BEGIN Lord Jaraxxus NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 15 DEF_END COST_BEGIN 9 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Warlock PLAYER_CLS_END RACE_BEGIN Demon RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Battlecry : Destroy your hero and replace it with Lord Jaraxxus . DESC_END

class LordJaraxxus(MinionCard):
    def __init__(self):
        super().__init__("Lord Jaraxxus", 9, CHARACTER_CLASS.WARLOCK, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DEMON, battlecry=(Battlecry(ReplaceHeroWithMinion(Jaraxxus()), HeroSelector()), Battlecry(Remove(), SelfSelector()), Battlecry(Equip(BloodFury()), PlayerSelector())))

    def create_minion(self, player):
        return Minion(3, 15)
**************************************************
**************************************************
example# 403
NAME_BEGIN Lorewalker Cho NAME_END ATK_BEGIN 0 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Whenever a player casts a spell , put a copy into the other player’s hand . DESC_END

class LorewalkerCho(MinionCard):
    def __init__(self):
        super().__init__("Lorewalker Cho", 2, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)

    def create_minion(self, player):
        return Minion(0, 4, effects=[Effect(SpellCast(player=BothPlayer()), ActionTag(AddCard(CardQuery(source=CARD_SOURCE.LAST_CARD)), PlayerSelector(OtherPlayer())))])
**************************************************
**************************************************
example# 404
NAME_BEGIN Mad Bomber NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Battlecry : Deal 3 damage randomly split between all other characters . DESC_END

class MadBomber(MinionCard):
    def __init__(self):
        super().__init__("Mad Bomber", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Damage(1), CharacterSelector(players=BothPlayer(), picker=RandomPicker(3))))

    def create_minion(self, player):
        return Minion(3, 2)
**************************************************
**************************************************
example# 405
NAME_BEGIN Malygos NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 12 DEF_END COST_BEGIN 9 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Dragon RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Spell Damage +5 DESC_END

class Malygos(MinionCard):
    def __init__(self):
        super().__init__("Malygos", 9, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DRAGON)

    def create_minion(self, player):
        return Minion(4, 12, spell_damage=5)
**************************************************
**************************************************
example# 406
NAME_BEGIN Mana Addict NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Whenever you cast a spell , gain +2 Attack this turn . DESC_END

class ManaAddict(MinionCard):
    def __init__(self):
        super().__init__("Mana Addict", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)

    def create_minion(self, player):
        return Minion(1, 3, effects=[Effect(SpellCast(), ActionTag(Give(BuffUntil(ChangeAttack(2), TurnEnded())), SelfSelector()))])
**************************************************
**************************************************
example# 407
NAME_BEGIN Mana Tide Totem NAME_END ATK_BEGIN 0 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Shaman PLAYER_CLS_END RACE_BEGIN Totem RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN At the end of your turn , draw a card . DESC_END

class ManaTideTotem(MinionCard):
    def __init__(self):
        super().__init__("Mana Tide Totem", 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.RARE, minion_type=MINION_TYPE.TOTEM)

    def create_minion(self, player):
        return Minion(0, 3, effects=[Effect(TurnEnded(), ActionTag(Draw(), PlayerSelector()))])
**************************************************
**************************************************
example# 408
NAME_BEGIN Mark of Nature NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Choose One - Give a minion +4 Attack ; or +4 Health and Taunt . DESC_END

class MarkOfNature(SpellCard):
    def __init__(self):
        super().__init__("Mark of Nature", 3, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        class MarkOfNatureAttack(ChoiceCard):
            def __init__(self):
                super().__init__("Mark of Nature +4 Attack", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.find_minion_spell_target)

            def use(self, player, game):
                target.change_attack(4)

        class MarkOfNatureHealth(ChoiceCard):
            def __init__(self):
                super().__init__("Mark of Nature +4 Health", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.find_minion_spell_target)

            def use(self, player, game):
                target.increase_health(4)
                target.taunt = True

        super().use(player, game)
        target = self.target
        option = game.current_player.agent.choose_option([MarkOfNatureAttack(), MarkOfNatureHealth()], player)
        option.use(player, game)
**************************************************
**************************************************
example# 409
NAME_BEGIN Mass Dispel NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Priest PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Silence all enemy minions . Draw a card . DESC_END

class MassDispel(SpellCard):
    def __init__(self):
        super().__init__("Mass Dispel", 4, CHARACTER_CLASS.PRIEST, CARD_RARITY.RARE)

    def use(self, player, game):
        super().use(player, game)

        for minion in game.other_player.minions:
            minion.silence()

        player.draw()
**************************************************
**************************************************
example# 410
NAME_BEGIN Master Swordsmith NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN At the end of your turn , give another random friendly minion +1 Attack . DESC_END

class MasterSwordsmith(MinionCard):
    def __init__(self):
        super().__init__("Master Swordsmith", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)

    def create_minion(self, player):
        return Minion(1, 3, effects=[Effect(TurnEnded(), ActionTag(Give(ChangeAttack(1)), MinionSelector(picker=RandomPicker())))])
**************************************************
**************************************************
example# 411
NAME_BEGIN Master of Disguise NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Rogue PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Battlecry : Give a friendly minion Stealth . DESC_END

class MasterOfDisguise(MinionCard):
    def __init__(self):
        super().__init__("Master of Disguise", 4, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE, battlecry=Battlecry(Give(Stealth()), MinionSelector(picker=UserPicker())))

    def create_minion(self, player):
        return Minion(4, 4)
**************************************************
**************************************************
example# 412
NAME_BEGIN Millhouse Manastorm NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Battlecry : Enemy spells cost ( 0 ) next turn . DESC_END

class MillhouseManastorm(MinionCard):
    def __init__(self):
        super().__init__("Millhouse Manastorm", 2, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, battlecry=Battlecry(GiveAura(AuraUntil(ManaChange(-100), CardSelector(condition=IsSpell()), TurnEnded())), PlayerSelector(players=EnemyPlayer())))

    def create_minion(self, player):
        return Minion(4, 4)
**************************************************
**************************************************
example# 413
NAME_BEGIN Mind Control Tech NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Battlecry : If your opponent has 4 or more minions , take control of one at random . DESC_END

class MindControlTech(MinionCard):
    def __init__(self):
        super().__init__("Mind Control Tech", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(Steal(), MinionSelector(players=EnemyPlayer(), condition=None, picker=RandomPicker()), OpponentMinionCountIsGreaterThan(3)) )

    def create_minion(self, player):
        return Minion(3, 3)
**************************************************
**************************************************
example# 414
NAME_BEGIN Mindgames NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Priest PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Put a copy of a random minion from your opponent 's deck into the battlefield . DESC_END

class Mindgames(SpellCard):
    def __init__(self):
        super().__init__("Mindgames", 4, CHARACTER_CLASS.PRIEST, CARD_RARITY.EPIC)

    def use(self, player, game):
        super().use(player, game)

        minion_card = game.random_draw(game.other_player.deck.cards, lambda c: not c.drawn and isinstance(c, MinionCard))
        if not minion_card:
            minion_card = ShadowOfNothing()
        else:
            minion_card = copy.copy(minion_card)
        minion_card.drawn = True
        minion_card.summon(player, game, 0)

    def can_use(self, player, game):
        return super().can_use(player, game) and len(player.minions) < 7
**************************************************
**************************************************
example# 415
NAME_BEGIN Mirror Entity NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Mage PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Secret : When your opponent plays a minion , summon a copy of it . DESC_END

class MirrorEntity(SecretCard):
    def __init__(self):
        super().__init__("Mirror Entity", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON)
        self.player = None

    def _reveal(self, minion):
        if len(self.player.minions) < 7:
            mirror = minion.copy(self.player)
            mirror.add_to_board(len(self.player.minions))
            minion.player.trigger("minion_summoned", mirror)
            minion.player.trigger("after_added", mirror)
            super().reveal()

    def activate(self, player):
        player.game.current_player.bind("minion_played", self._reveal)
        self.player = player

    def deactivate(self, player):
        player.game.current_player.unbind("minion_played", self._reveal)
        self.player = None
**************************************************
**************************************************
example# 416
NAME_BEGIN Molten Giant NAME_END ATK_BEGIN 8 ATK_END DEF_BEGIN 8 DEF_END COST_BEGIN 20 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Costs ( 1 ) less for each damage your hero has taken . DESC_END

class MoltenGiant(MinionCard):
    def __init__(self):
        super().__init__("Molten Giant", 20, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, buffs=[Buff(ManaChange(Attribute("damage", HeroSelector()), -1))])

    def create_minion(self, player):
        return Minion(8, 8)
**************************************************
**************************************************
example# 417
NAME_BEGIN Mortal Strike NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Warrior PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Deal $ 4 damage . If you have 12 or less Health , deal $ 6 instead . DESC_END

class MortalStrike(SpellCard):
    def __init__(self):
        super().__init__("Mortal Strike", 4, CHARACTER_CLASS.WARRIOR, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_spell_target)

    def use(self, player, game):
        super().use(player, game)
        if player.hero.health <= 12:
            self.target.damage(player.effective_spell_damage(6), self)
        else:
            self.target.damage(player.effective_spell_damage(4), self)
**************************************************
**************************************************
example# 418
NAME_BEGIN Mountain Giant NAME_END ATK_BEGIN 8 ATK_END DEF_BEGIN 8 DEF_END COST_BEGIN 12 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Costs ( 1 ) less for each other card in your hand . DESC_END

class MountainGiant(MinionCard):
    def __init__(self):
        super().__init__("Mountain Giant", 12, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, buffs=[Buff(ManaChange(Count(CardSelector()), -1))])

    def create_minion(self, player):
        return Minion(8, 8)
**************************************************
**************************************************
example# 419
NAME_BEGIN Murloc Tidecaller NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Murloc RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Whenever a Murloc is summoned , gain +1 Attack . DESC_END

class MurlocTidecaller(MinionCard):
    def __init__(self):
        super().__init__("Murloc Tidecaller", 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.MURLOC)

    def create_minion(self, player):
        return Minion(1, 2, effects=[(Effect(MinionSummoned(IsType(MINION_TYPE.MURLOC), player=BothPlayer()), ActionTag(Give(ChangeAttack(1)), SelfSelector())))])
**************************************************
**************************************************
example# 420
NAME_BEGIN Murloc Warleader NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Murloc RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN ALL other Murlocs have +2/+1 . DESC_END

class MurlocWarleader(MinionCard):
    def __init__(self):
        super().__init__("Murloc Warleader", 3, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, minion_type=MINION_TYPE.MURLOC)

    def create_minion(self, player):
        return Minion(3, 3, auras=[Aura(ChangeAttack(2), MinionSelector(IsType(MINION_TYPE.MURLOC), BothPlayer())), Aura(ChangeHealth(1), MinionSelector(IsType(MINION_TYPE.MURLOC), BothPlayer()))])
**************************************************
**************************************************
example# 421
NAME_BEGIN Nat Pagle NAME_END ATK_BEGIN 0 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN At the start of your turn , you have a 50 % chance to draw an extra card . DESC_END

class NatPagle(MinionCard):
    def __init__(self):
        super().__init__("Nat Pagle", 2, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)

    def create_minion(self, player):
        return Minion(0, 4, effects=[Effect(TurnStarted(), ActionTag(Draw(), PlayerSelector(), OneIn(2)))])
**************************************************
**************************************************
example# 422
NAME_BEGIN Naturalize NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Destroy a minion . Your opponent draws 2 cards . DESC_END

class Naturalize(SpellCard):
    def __init__(self):
        super().__init__("Naturalize", 1, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.die(self)
        game.other_player.draw()
        game.other_player.draw()
**************************************************
**************************************************
example# 423
NAME_BEGIN Nightmare NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 0 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Dream PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN Give a minion +5/+5 . At the start of your next turn , destroy it . DESC_END

class Nightmare(SpellCard):
    def __init__(self):
        super().__init__("Nightmare", 0, CHARACTER_CLASS.DREAM, CARD_RARITY.COMMON, False, hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.add_buff(Buff(ChangeAttack(5)))
        self.target.add_buff(Buff(ChangeHealth(5)))
        self.target.add_effect(Effect(TurnStarted(player=CurrentPlayer()), ActionTag(Kill(), SelfSelector())))
**************************************************
**************************************************
example# 424
NAME_BEGIN Nozdormu NAME_END ATK_BEGIN 8 ATK_END DEF_BEGIN 8 DEF_END COST_BEGIN 9 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Dragon RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Players only have 15 seconds to take their turns . DESC_END

class Nozdormu(MinionCard):
    def __init__(self):
        super().__init__("Nozdormu", 9, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DRAGON)

    def create_minion(self, player):
        return Minion(8, 8)
**************************************************
**************************************************
example# 425
NAME_BEGIN Onyxia NAME_END ATK_BEGIN 8 ATK_END DEF_BEGIN 8 DEF_END COST_BEGIN 9 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Dragon RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Battlecry : Summon 1/1 Whelps until your side of the battlefield is full . DESC_END

class Onyxia(MinionCard):
    def __init__(self):
        super().__init__("Onyxia", 9, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DRAGON, battlecry=Battlecry(Summon(Whelp(), 6), PlayerSelector()))

    def create_minion(self, player):
        return Minion(8, 8)
**************************************************
**************************************************
example# 426
NAME_BEGIN Panther NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN NIL DESC_END

class Panther(MinionCard):
    def __init__(self):
        super().__init__("Panther", 2, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, False, MINION_TYPE.BEAST)

    def create_minion(self, _):
        return Minion(3, 2, MINION_TYPE.BEAST)
**************************************************
**************************************************
example# 427
NAME_BEGIN Patient Assassin NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Rogue PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Stealth . Destroy any minion damaged by this minion . DESC_END

class PatientAssassin(MinionCard):
    def __init__(self):
        super().__init__("Patient Assassin", 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.EPIC)

    def create_minion(self, player):
        return Minion(1, 1, stealth=True, effects=[Effect(DidDamage(), ActionTag(Kill(), TargetSelector(IsMinion())))])
**************************************************
**************************************************
example# 428
NAME_BEGIN Perdition 's Blade NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN 2 DUR_END TYPE_BEGIN Weapon TYPE_END PLAYER_CLS_BEGIN Rogue PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Battlecry : Deal 1 damage . Combo : Deal 2 instead . DESC_END

class PerditionsBlade(WeaponCard):
    def __init__(self):
        super().__init__("Perdition's Blade", 3, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE, battlecry=Battlecry(Damage(1), CharacterSelector(None, picker=UserPicker())), combo=Battlecry(Damage(2), CharacterSelector(None, picker=UserPicker())))

    def create_weapon(self, player):
        return Weapon(2, 2)
**************************************************
**************************************************
example# 429
NAME_BEGIN Pint-Sized Summoner NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN The first minion you play each turn costs ( 1 ) less . DESC_END

class PintSizedSummoner(MinionCard):
    def __init__(self):
        super().__init__("Pint-Sized Summoner", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)

    def create_minion(self, player):
        return Minion(2, 2, effects=[Effect(TurnStarted(), ActionTag(GiveAura(AuraUntil(ManaChange(-1), CardSelector( condition=IsMinion()), MinionPlaced())), PlayerSelector()))])
**************************************************
**************************************************
example# 430
NAME_BEGIN Pit Lord NAME_END ATK_BEGIN 5 ATK_END DEF_BEGIN 6 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Warlock PLAYER_CLS_END RACE_BEGIN Demon RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Battlecry : Deal 5 damage to your hero . DESC_END

class PitLord(MinionCard):
    def __init__(self):
        super().__init__("Pit Lord", 4, CHARACTER_CLASS.WARLOCK, CARD_RARITY.EPIC, minion_type=MINION_TYPE.DEMON, battlecry=Battlecry(Damage(5), HeroSelector()))

    def create_minion(self, player):
        return Minion(5, 6)
**************************************************
**************************************************
example# 431
NAME_BEGIN Power Overwhelming NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Warlock PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Give a friendly minion +4/+4 until end of turn . Then , it dies . Horribly . DESC_END

class PowerOverwhelming(SpellCard):
    def __init__(self):
        super().__init__("Power Overwhelming", 1, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_friendly_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)

        self.target.add_effect(Effect(TurnEnded(), ActionTag(Kill(), SelfSelector())))
        self.target.change_attack(4)
        self.target.increase_health(4)
**************************************************
**************************************************
example# 432
NAME_BEGIN Priestess of Elune NAME_END ATK_BEGIN 5 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 6 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Battlecry : Restore 4 Health to your hero . DESC_END

class PriestessOfElune(MinionCard):
    def __init__(self):
        super().__init__("Priestess of Elune", 6, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Heal(4), HeroSelector()))

    def create_minion(self, player):
        return Minion(5, 4)
**************************************************
**************************************************
example# 433
NAME_BEGIN Prophet Velen NAME_END ATK_BEGIN 7 ATK_END DEF_BEGIN 7 DEF_END COST_BEGIN 7 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Priest PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Double the damage and healing of your spells and Hero Power . DESC_END

class ProphetVelen(MinionCard):
    def __init__(self):
        super().__init__("Prophet Velen", 7, CHARACTER_CLASS.PRIEST, CARD_RARITY.LEGENDARY)

    def create_minion(self, player):
        return Minion(7, 7, auras=[Aura(MultiplySpellDamage(2), PlayerSelector()), Aura(MultiplyHealAmount(2), PlayerSelector())])
**************************************************
**************************************************
example# 434
NAME_BEGIN Pyroblast NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 10 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Mage PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Deal $ 10 damage . DESC_END

class Pyroblast(SpellCard):
    def __init__(self):
        super().__init__("Pyroblast", 10, CHARACTER_CLASS.MAGE, CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.find_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(10), self)
**************************************************
**************************************************
example# 435
NAME_BEGIN Questing Adventurer NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Whenever you play a card , gain +1/+1 . DESC_END

class QuestingAdventurer(MinionCard):
    def __init__(self):
        super().__init__("Questing Adventurer", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)

    def create_minion(self, player):
        return Minion(2, 2, effects=[Effect(CardPlayed(), ActionTag(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector()))])
**************************************************
**************************************************
example# 436
NAME_BEGIN Raging Worgen NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Enrage : Windfury and +1 Attack DESC_END

class RagingWorgen(MinionCard):
    def __init__(self):
        super().__init__("Raging Worgen", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(3, 3, enrage=[Aura(ChangeAttack(1), SelfSelector()), Aura(Windfury(), SelfSelector())])
**************************************************
**************************************************
example# 437
NAME_BEGIN Ragnaros the Firelord NAME_END ATK_BEGIN 8 ATK_END DEF_BEGIN 8 DEF_END COST_BEGIN 8 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Ca n't attack . At the end of your turn , deal 8 damage to a random enemy . DESC_END

class RagnarosTheFirelord(MinionCard):
    def __init__(self):
        super().__init__("Ragnaros the Firelord", 8, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)

    def create_minion(self, player):
        return Minion(8, 8, effects=[Effect(TurnEnded(), ActionTag(Damage(8), CharacterSelector(players=EnemyPlayer(), picker=RandomPicker())))], buffs=[Buff(CantAttack())])
**************************************************
**************************************************
example# 438
NAME_BEGIN Rampage NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Warrior PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Give a damaged minion +3/+3 . DESC_END

class Rampage(SpellCard):
    def __init__(self):
        super().__init__("Rampage", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target, filter_func=lambda target: target.health != target.calculate_max_health() and target.spell_targetable())

    def use(self, player, game):
        super().use(player, game)
        self.target.change_attack(3)
        self.target.increase_health(3)
**************************************************
**************************************************
example# 439
NAME_BEGIN Ravenholdt Assassin NAME_END ATK_BEGIN 7 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 7 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Stealth DESC_END

class RavenholdtAssassin(MinionCard):
    def __init__(self):
        super().__init__("Ravenholdt Assassin", 7, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)

    def create_minion(self, player):
        return Minion(7, 5, stealth=True)
**************************************************
**************************************************
example# 440
NAME_BEGIN SI:7 Agent NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Rogue PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Combo : Deal 2 damage . DESC_END

class SI7Agent(MinionCard):
    def __init__(self):
        super().__init__("SI:7 Agent", 3, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE, combo=Battlecry(Damage(2), CharacterSelector( players=BothPlayer(), picker=UserPicker()) ))

    def create_minion(self, player):
        return Minion(3, 3)
**************************************************
**************************************************
example# 441
NAME_BEGIN Savagery NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Deal damage equal to your hero 's Attack to a minion . DESC_END

class Savagery(SpellCard):
    def __init__(self):
        super().__init__("Savagery", 1, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(player.hero.calculate_attack()), self)
**************************************************
**************************************************
example# 442
NAME_BEGIN Savannah Highmane NAME_END ATK_BEGIN 6 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 6 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Hunter PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Deathrattle : Summon two 2/2 Hyenas . DESC_END

class SavannahHighmane(MinionCard):
    def __init__(self):
        super().__init__("Savannah Highmane", 6, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(6, 5, deathrattle=Deathrattle(Summon(Hyena(), 2), PlayerSelector()))
**************************************************
**************************************************
example# 443
NAME_BEGIN Scarlet Crusader NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Divine Shield DESC_END

class ScarletCrusader(MinionCard):
    def __init__(self):
        super().__init__("Scarlet Crusader", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(3, 1, divine_shield=True)
**************************************************
**************************************************
example# 444
NAME_BEGIN Scavenging Hyena NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Hunter PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Whenever a friendly Beast dies , gain +2/+1 . DESC_END

class ScavengingHyena(MinionCard):
    def __init__(self):
        super().__init__("Scavenging Hyena", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(2, 2, effects=[Effect(MinionDied(IsType(MINION_TYPE.BEAST)), ActionTag(Give(ChangeAttack(2)), SelfSelector())), Effect(MinionDied(IsType(MINION_TYPE.BEAST)), ActionTag(Give(ChangeHealth(1)), SelfSelector()))])
**************************************************
**************************************************
example# 445
NAME_BEGIN Sea Giant NAME_END ATK_BEGIN 8 ATK_END DEF_BEGIN 8 DEF_END COST_BEGIN 10 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Costs ( 1 ) less for each other minion on the battlefield . DESC_END

class SeaGiant(MinionCard):
    def __init__(self):
        super().__init__("Sea Giant", 10, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, buffs=[Buff(ManaChange(Count(MinionSelector(None, BothPlayer())), -1))])

    def create_minion(self, player):
        return Minion(8, 8)
**************************************************
**************************************************
example# 446
NAME_BEGIN Secretkeeper NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Whenever a Secret is played , gain +1/+1 . DESC_END

class Secretkeeper(MinionCard):
    def __init__(self):
        super().__init__("Secretkeeper", 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)

    def create_minion(self, player):
        return Minion(1, 2, effects=[Effect(SpellCast(IsSecret(), BothPlayer()), ActionTag(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector()))])
**************************************************
**************************************************
example# 447
NAME_BEGIN Sense Demons NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Warlock PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Put 2 random Demons from your deck into your hand . DESC_END

class SenseDemons(SpellCard):
    def __init__(self):
        super().__init__("Sense Demons", 3, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON)

    def use(self, player, game):
        super().use(player, game)

        for i in range(0, 2):
            demon_card = game.random_draw(game.current_player.deck.cards, lambda c: not c.drawn and c.is_minion() and c.minion_type == MINION_TYPE.DEMON)
            if demon_card:
                demon_card.drawn = True
                player.deck.left -= 1
                if len(player.hand) < 10:
                    player.hand.append(demon_card)
                    demon_card.player = player
                    self.trigger("card_drawn", demon_card)
                else:
                    player.trigger("card_destroyed", demon_card)
            else:
                if len(player.hand) < 10:
                    player.hand.append(hearthbreaker.cards.minions.warlock.WorthlessImp())
                    player.hand[-1].player = player
                    self.trigger("card_drawn", hearthbreaker.cards.minions.warlock.WorthlessImp())
**************************************************
**************************************************
example# 448
NAME_BEGIN Shadowflame NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Warlock PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Destroy a friendly minion and deal its Attack damage to all enemy minions . DESC_END

class Shadowflame(SpellCard):
    def __init__(self):
        super().__init__("Shadowflame", 4, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_friendly_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        shadowflame_damage = self.target.calculate_attack()
        self.target.die(self)
        for minion in game.other_player.minions:
            minion.damage(player.effective_spell_damage(shadowflame_damage), self)
**************************************************
**************************************************
example# 449
NAME_BEGIN Shadowform NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Priest PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Your Hero Power becomes 'Deal 2 damage ' . If already in Shadowform : 3 damage . DESC_END

class Shadowform(SpellCard):
    def __init__(self):
        super().__init__("Shadowform", 3, CHARACTER_CLASS.PRIEST, CARD_RARITY.EPIC)

    def use(self, player, game):
        super().use(player, game)

        if type(player.hero.power) is not hearthbreaker.powers.MindShatter and type( player.hero.power) is not hearthbreaker.powers.MindSpike:
            player.hero.power = hearthbreaker.powers.MindSpike()
            player.hero.power.hero = player.hero
        elif type(player.hero.power) is hearthbreaker.powers.MindSpike:
            player.hero.power = hearthbreaker.powers.MindShatter()
            player.hero.power.hero = player.hero
**************************************************
**************************************************
example# 450
NAME_BEGIN Shadowstep NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 0 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Rogue PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Return a friendly minion to your hand . It costs ( 2 ) less . DESC_END

class Shadowstep(SpellCard):
    def __init__(self):
        super().__init__("Shadowstep", 0, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_friendly_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)

        self.target.bounce()
        self.target.card.add_buff(Buff(ManaChange(-3)))
**************************************************
**************************************************
example# 451
NAME_BEGIN Shield Slam NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Warrior PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Deal 1 damage to a minion for each Armor you have . DESC_END

class ShieldSlam(SpellCard):
    def __init__(self):
        super().__init__("Shield Slam", 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(player.hero.armor), self)
**************************************************
**************************************************
example# 452
NAME_BEGIN Shieldbearer NAME_END ATK_BEGIN 0 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Taunt DESC_END

class Shieldbearer(MinionCard):
    def __init__(self):
        super().__init__("Shieldbearer", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(0, 4, taunt=True)
**************************************************
**************************************************
example# 453
NAME_BEGIN Silence NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 0 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Priest PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Silence a minion . DESC_END

class Silence(SpellCard):
    def __init__(self):
        super().__init__("Silence", 0, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)

        self.target.silence()
**************************************************
**************************************************
example# 454
NAME_BEGIN Silver Hand Knight NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Battlecry : Summon a 2/2 Squire . DESC_END

class SilverHandKnight(MinionCard):
    def __init__(self):
        super().__init__("Silver Hand Knight", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Summon(Squire()), PlayerSelector()))

    def create_minion(self, player):
        return Minion(4, 4)
**************************************************
**************************************************
example# 455
NAME_BEGIN Silvermoon Guardian NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Divine Shield DESC_END

class SilvermoonGuardian(MinionCard):
    def __init__(self):
        super().__init__("Silvermoon Guardian", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(3, 3, divine_shield=True)
**************************************************
**************************************************
example# 456
NAME_BEGIN Snake NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 0 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Hunter PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN NIL DESC_END

class Snake(MinionCard):
    def __init__(self):
        super().__init__("Snake", 0, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(1, 1)
**************************************************
**************************************************
example# 457
NAME_BEGIN Snake Trap NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Hunter PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Secret : When one of your minions is attacked , summon three 1/1 Snakes . DESC_END

class SnakeTrap(SecretCard):
    def __init__(self):
        super().__init__("Snake Trap", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.EPIC)

    def activate(self, player):
        player.game.current_player.bind("character_attack", self._reveal)

    def deactivate(self, player):
        player.game.current_player.unbind("character_attack", self._reveal)

    def _reveal(self, attacker, target):
        if isinstance(target, Minion):
            snake = hearthbreaker.cards.minions.hunter.Snake()
            player = target.player.game.other_player
            for i in range(0, 3):
                snake.summon(player, player.game, len(player.minions))
            super().reveal()
**************************************************
**************************************************
example# 458
NAME_BEGIN Snipe NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Hunter PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Secret : When your opponent plays a minion , deal $ 4 damage to it . DESC_END

class Snipe(SecretCard):
    def __init__(self):
        super().__init__("Snipe", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON)

    def activate(self, player):
        player.game.current_player.bind("minion_played", self._reveal)

    def deactivate(self, player):
        player.game.current_player.unbind("minion_played", self._reveal)

    def _reveal(self, minion):
        minion.damage(4, None)
        super().reveal()
**************************************************
**************************************************
example# 459
NAME_BEGIN Sorcerer 's Apprentice NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Mage PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Your spells cost ( 1 ) less . DESC_END

class SorcerersApprentice(MinionCard):
    def __init__(self):
        super().__init__("Sorcerer's Apprentice", 2, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(3, 2, auras=[Aura(ManaChange(-1), CardSelector(condition=IsSpell()))])
**************************************************
**************************************************
example# 460
NAME_BEGIN Soul of the Forest NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Give your minions `` Deathrattle : Summon a 2/2 Treant . '' DESC_END

class SoulOfTheForest(SpellCard):
    def __init__(self):
        super().__init__("Soul of the Forest", 4, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON)

    def use(self, player, game):
        super().use(player, game)
        from hearthbreaker.cards.minions.druid import Treant
        for minion in player.minions:
            minion.deathrattle.append(Deathrattle(Summon(Treant()), PlayerSelector()))
**************************************************
**************************************************
example# 461
NAME_BEGIN Southsea Captain NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Pirate RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Your other Pirates have +1/+1 . DESC_END

class SouthseaCaptain(MinionCard):
    def __init__(self):
        super().__init__("Southsea Captain", 3, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, minion_type=MINION_TYPE.PIRATE)

    def create_minion(self, player):
        return Minion(3, 3, auras=[Aura(ChangeAttack(1), MinionSelector(IsType(MINION_TYPE.PIRATE))), Aura(ChangeHealth(1), MinionSelector(IsType(MINION_TYPE.PIRATE)))])
**************************************************
**************************************************
example# 462
NAME_BEGIN Southsea Deckhand NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Pirate RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Has Charge while you have a weapon equipped . DESC_END

class SouthseaDeckhand(MinionCard):
    def __init__(self):
        super().__init__("Southsea Deckhand", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE)

    def create_minion(self, player):
        return Minion(2, 1, buffs=[Buff(Charge(), GreaterThan(Count(WeaponSelector()), value=0))])
**************************************************
**************************************************
example# 463
NAME_BEGIN Spellbender NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Mage PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Secret : When an enemy casts a spell on a minion , summon a 1/3 as the new target . DESC_END

class Spellbender(SecretCard):
    def __init__(self):
        super().__init__("Spellbender", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.EPIC)
        self.player = None

    def _reveal(self, card, index):
        if card.is_spell() and len(self.player.minions) < 7 and card.target and card.target.is_minion():
            SpellbenderMinion().summon(self.player, self.player.game, len(self.player.minions))
            card.target = self.player.minions[-1]
            super().reveal()

    def activate(self, player):
        player.game.current_player.bind("card_played", self._reveal)
        self.player = player

    def deactivate(self, player):
        player.game.current_player.unbind("card_played", self._reveal)
        self.player = None
**************************************************
**************************************************
example# 464
NAME_BEGIN Spirit Wolf NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Shaman PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Taunt DESC_END

class SpiritWolf(MinionCard):
    def __init__(self):
        super().__init__("Spirit Wolf", 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.RARE, False)

    def create_minion(self, p):
        return Minion(2, 3, taunt=True)
**************************************************
**************************************************
example# 465
NAME_BEGIN Spiteful Smith NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 6 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Enrage : Your weapon has +2 Attack . DESC_END

class SpitefulSmith(MinionCard):
    def __init__(self):
        super().__init__("Spiteful Smith", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(4, 6, enrage=[Aura(ChangeAttack(2), WeaponSelector())])
**************************************************
**************************************************
example# 466
NAME_BEGIN Squire NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN NIL DESC_END

class Squire(MinionCard):
    def __init__(self):
        super().__init__("Squire", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False)

    def create_minion(self, player):
        return Minion(2, 2)
**************************************************
**************************************************
example# 467
NAME_BEGIN Squirrel NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN NIL DESC_END

class Squirrel(MinionCard):
    def __init__(self):
        super().__init__("Squirrel", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(1, 1)
**************************************************
**************************************************
example# 468
NAME_BEGIN Stampeding Kodo NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Battlecry : Destroy a random enemy minion with 2 or less Attack . DESC_END

class StampedingKodo(MinionCard):
    def __init__(self):
        super().__init__("Stampeding Kodo", 5, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.BEAST, battlecry=Battlecry(Kill(), MinionSelector(AttackLessThanOrEqualTo(2), EnemyPlayer(), RandomPicker())))

    def create_minion(self, player):
        return Minion(3, 5)
**************************************************
**************************************************
example# 469
NAME_BEGIN Starfall NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Choose One - Deal $ 5 damage to a minion ; or $ 2 damage to all enemy minions . DESC_END

class Starfall(SpellCard):
    def __init__(self):
        super().__init__("Starfall", 5, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)

    def can_use(self, player, game):
        return super().can_use(player, game) and len(game.other_player.minions) > 0

    def use(self, player, game):
        super().use(player, game)
        option = player.agent.choose_option([DamageAll(), DamageOne()], player)
        option.use(player, game)
**************************************************
**************************************************
example# 470
NAME_BEGIN Stormforged Axe NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN 3 DUR_END TYPE_BEGIN Weapon TYPE_END PLAYER_CLS_BEGIN Shaman PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Overload : ( 1 ) DESC_END

class StormforgedAxe(WeaponCard):
    def __init__(self):
        super().__init__("Stormforged Axe", 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, overload=1)

    def create_weapon(self, player):
        return Weapon(2, 3)
**************************************************
**************************************************
example# 471
NAME_BEGIN Stranglethorn Tiger NAME_END ATK_BEGIN 5 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Stealth DESC_END

class StranglethornTiger(MinionCard):
    def __init__(self):
        super().__init__("Stranglethorn Tiger", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(5, 5, stealth=True)
**************************************************
**************************************************
example# 472
NAME_BEGIN Sunwalker NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 6 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Taunt NL Divine Shield DESC_END

class Sunwalker(MinionCard):
    def __init__(self):
        super().__init__("Sunwalker", 6, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)

    def create_minion(self, player):
        return Minion(4, 5, divine_shield=True, taunt=True)
**************************************************
**************************************************
example# 473
NAME_BEGIN Sword of Justice NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN 5 DUR_END TYPE_BEGIN Weapon TYPE_END PLAYER_CLS_BEGIN Paladin PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Whenever you summon a minion , give it +1/+1 and this loses 1 Durability . DESC_END

class SwordOfJustice(WeaponCard):
    def __init__(self):
        super().__init__("Sword of Justice", 3, CHARACTER_CLASS.PALADIN, CARD_RARITY.EPIC)

    def create_weapon(self, player):
        return Weapon(1, 5, effects=[Effect(MinionSummoned(), ActionTag(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), TargetSelector())), Effect(MinionSummoned(), ActionTag(DecreaseDurability(), WeaponSelector()))])
**************************************************
**************************************************
example# 474
NAME_BEGIN Sylvanas Windrunner NAME_END ATK_BEGIN 5 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 6 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Deathrattle : Take control of a random enemy minion . DESC_END

class SylvanasWindrunner(MinionCard):
    def __init__(self):
        super().__init__("Sylvanas Windrunner", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)

    def create_minion(self, player):
        return Minion(5, 5, deathrattle=Deathrattle(Steal(), MinionSelector(players=EnemyPlayer(), picker=RandomPicker())))
**************************************************
**************************************************
example# 475
NAME_BEGIN Tauren Warrior NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Taunt . Enrage : +3 Attack DESC_END

class TaurenWarrior(MinionCard):
    def __init__(self):
        super().__init__("Tauren Warrior", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(2, 3, taunt=True, enrage=[Aura(ChangeAttack(3), SelfSelector())])
**************************************************
**************************************************
example# 476
NAME_BEGIN Temple Enforcer NAME_END ATK_BEGIN 6 ATK_END DEF_BEGIN 6 DEF_END COST_BEGIN 6 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Priest PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Battlecry : Give a friendly minion +3 Health . DESC_END

class TempleEnforcer(MinionCard):
    def __init__(self):
        super().__init__("Temple Enforcer", 6, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON, battlecry=Battlecry(Give(ChangeHealth(3)), MinionSelector(picker=UserPicker())))

    def create_minion(self, player):
        return Minion(6, 6)
**************************************************
**************************************************
example# 477
NAME_BEGIN The Beast NAME_END ATK_BEGIN 9 ATK_END DEF_BEGIN 7 DEF_END COST_BEGIN 6 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Deathrattle : Summon a 3/3 Finkle Einhorn for your opponent . DESC_END

class TheBeast(MinionCard):
    def __init__(self):
        super().__init__("The Beast", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(9, 7, deathrattle=Deathrattle(Summon(FinkleEinhorn()), PlayerSelector(EnemyPlayer())))
**************************************************
**************************************************
example# 478
NAME_BEGIN The Black Knight NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 6 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Battlecry : Destroy an enemy minion with Taunt . DESC_END

class TheBlackKnight(MinionCard):
    def __init__(self):
        super().__init__("The Black Knight", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, battlecry=Battlecry(Kill(), MinionSelector(HasStatus("taunt"), EnemyPlayer(), UserPicker())))

    def create_minion(self, player):
        return Minion(4, 5)
**************************************************
**************************************************
example# 479
NAME_BEGIN Thoughtsteal NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Priest PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Copy 2 cards from your opponent 's deck and put them into your hand . DESC_END

class Thoughtsteal(SpellCard):
    def __init__(self):
        super().__init__("Thoughtsteal", 3, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON)

    def use(self, player, game):
        super().use(player, game)
        for i in range(0, 2):
            new_card = game.random_draw(game.other_player.deck.cards, lambda c: not c.drawn)
            if new_card:
                new_card = copy.copy(new_card)
                new_card.drawn = True
                if len(player.hand) < 10:
                    player.hand.append(new_card)
                    new_card.player = player
                    self.trigger("card_drawn", new_card)
                else:
                    player.trigger("card_destroyed", new_card)
**************************************************
**************************************************
example# 480
NAME_BEGIN Tirion Fordring NAME_END ATK_BEGIN 6 ATK_END DEF_BEGIN 6 DEF_END COST_BEGIN 8 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Paladin PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Divine Shield . Taunt . Deathrattle : Equip a 5/3 Ashbringer . DESC_END

class TirionFordring(MinionCard):
    def __init__(self):
        super().__init__("Tirion Fordring", 8, CHARACTER_CLASS.PALADIN, CARD_RARITY.LEGENDARY)

    def create_minion(self, player):
        return Minion(6, 6, divine_shield=True, taunt=True, deathrattle=Deathrattle(Equip(Ashbringer()), PlayerSelector()))
**************************************************
**************************************************
example# 481
NAME_BEGIN Treant NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Charge . At the end of the turn , destroy this minion . DESC_END

class Treant(MinionCard):
    def __init__(self):
        super().__init__("Treant", 1, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON)

    def create_minion(self, _):
        return Minion(2, 2)
**************************************************
**************************************************
example# 482
NAME_BEGIN Treant NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN NIL DESC_END

class Treant(MinionCard):
    def __init__(self):
        super().__init__("Treant", 1, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON)

    def create_minion(self, _):
        return Minion(2, 2)
**************************************************
**************************************************
example# 483
NAME_BEGIN Treant NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN Taunt DESC_END

class Treant(MinionCard):
    def __init__(self):
        super().__init__("Treant", 1, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON)

    def create_minion(self, _):
        return Minion(2, 2)
**************************************************
**************************************************
example# 484
NAME_BEGIN Twilight Drake NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Dragon RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Battlecry : Gain +1 Health for each card in your hand . DESC_END

class TwilightDrake(MinionCard):
    def __init__(self):
        super().__init__("Twilight Drake", 4, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.DRAGON, battlecry=Battlecry(Give(Buff(ChangeHealth(Count(CardSelector())))), SelfSelector()))

    def create_minion(self, player):
        return Minion(4, 1)
**************************************************
**************************************************
example# 485
NAME_BEGIN Twisting Nether NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 8 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Warlock PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Destroy all minions . DESC_END

class TwistingNether(SpellCard):
    def __init__(self):
        super().__init__("Twisting Nether", 8, CHARACTER_CLASS.WARLOCK, CARD_RARITY.EPIC)

    def use(self, player, game):
        super().use(player, game)
        targets = copy.copy(game.other_player.minions)
        targets.extend(game.current_player.minions)
        for minion in targets:
            minion.die(self)
**************************************************
**************************************************
example# 486
NAME_BEGIN Unbound Elemental NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Shaman PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Whenever you play a card with Overload , gain +1/+1 . DESC_END

class UnboundElemental(MinionCard):
    def __init__(self):
        super().__init__("Unbound Elemental", 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(2, 4, effects=[Effect(CardPlayed(HasOverload()), ActionTag(Give(ChangeAttack(1)), SelfSelector())), Effect(CardPlayed(HasOverload()), ActionTag(Give(ChangeHealth(1)), SelfSelector()))])
**************************************************
**************************************************
example# 487
NAME_BEGIN Unleash the Hounds NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Hunter PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN For each enemy minion , summon a 1/1 Hound with Charge . DESC_END

class UnleashTheHounds(SpellCard):
    def __init__(self):
        super().__init__("Unleash the Hounds", 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON)

    def use(self, player, game):
        super().use(player, game)

        for target in hearthbreaker.targeting.find_enemy_minion_spell_target(player.game, lambda x: True):
            hound = hearthbreaker.cards.minions.hunter.Hound()
            hound.summon(player, game, len(player.minions))

    def can_use(self, player, game):
        return super().can_use(player, game) and len(game.other_player.minions) >= 1 and len(player.minions) < 7
**************************************************
**************************************************
example# 488
NAME_BEGIN Venture Co. Mercenary NAME_END ATK_BEGIN 7 ATK_END DEF_BEGIN 6 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Your minions cost ( 3 ) more . DESC_END

class VentureCoMercenary(MinionCard):
    def __init__(self):
        super().__init__("Venture Co. Mercenary", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(7, 6, auras=[Aura(ManaChange(3), CardSelector(condition=IsMinion()))])
**************************************************
**************************************************
example# 489
NAME_BEGIN Violet Apprentice NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 0 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN NIL DESC_END

class VioletApprentice(MinionCard):
    def __init__(self):
        super().__init__("Violet Apprentice", 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False)

    def create_minion(self, player):
        return Minion(1, 1)
**************************************************
**************************************************
example# 490
NAME_BEGIN Violet Teacher NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Whenever you cast a spell , summon a 1/1 Violet Apprentice . DESC_END

class VioletTeacher(MinionCard):
    def __init__(self):
        super().__init__("Violet Teacher", 4, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)

    def create_minion(self, player):
        return Minion(3, 5, effects=[Effect(SpellCast(), ActionTag(Summon(VioletApprentice()), PlayerSelector()))])
**************************************************
**************************************************
example# 491
NAME_BEGIN Void Terror NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Warlock PLAYER_CLS_END RACE_BEGIN Demon RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Battlecry : Destroy the minions on either side of this minion and gain their Attack and Health . DESC_END

class VoidTerror(MinionCard):
    def __init__(self):
        super().__init__("Void Terror", 3, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON, battlecry=(Battlecry( Give([Buff(ChangeHealth(Attribute("health", MinionSelector(Adjacent())))), Buff(ChangeAttack(Attribute("attack", MinionSelector(Adjacent()))))]), SelfSelector()), Battlecry(Kill(), MinionSelector(Adjacent()))))

    def create_minion(self, player):
        return Minion(3, 3)
**************************************************
**************************************************
example# 492
NAME_BEGIN Whelp NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Dragon RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN NIL DESC_END

class Whelp(MinionCard):
    def __init__(self):
        super().__init__("Whelp", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.DRAGON)

    def create_minion(self, player):
        return Minion(1, 1)
**************************************************
**************************************************
example# 493
NAME_BEGIN Whelp NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Dragon RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN NIL DESC_END

class Whelp(MinionCard):
    def __init__(self):
        super().__init__("Whelp", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.DRAGON)

    def create_minion(self, player):
        return Minion(1, 1)
**************************************************
**************************************************
example# 494
NAME_BEGIN Wild Pyromancer NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN After you cast a spell , deal 1 damage to ALL minions . DESC_END

class WildPyromancer(MinionCard):
    def __init__(self):
        super().__init__("Wild Pyromancer", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)

    def create_minion(self, player):
        return Minion(3, 2, effects=[Effect(CardUsed(IsSpell()), ActionTag(Damage(1), MinionSelector(condition=None, players=BothPlayer())))])
**************************************************
**************************************************
example# 495
NAME_BEGIN Windfury Harpy NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 6 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Windfury DESC_END

class WindfuryHarpy(MinionCard):
    def __init__(self):
        super().__init__("Windfury Harpy", 6, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(4, 5, windfury=True)
**************************************************
**************************************************
example# 496
NAME_BEGIN Worthless Imp NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Warlock PLAYER_CLS_END RACE_BEGIN Demon RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN You are out of demons ! At least there are always imps ... DESC_END

class WorthlessImp(MinionCard):
    def __init__(self):
        super().__init__("Worthless Imp", 1, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, False, MINION_TYPE.DEMON)

    def create_minion(self, p):
        return Minion(1, 1)
**************************************************
**************************************************
example# 497
NAME_BEGIN Wrath NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Choose One - Deal $ 3 damage to a minion ; or $ 1 damage and draw a card . DESC_END

class Wrath(SpellCard):
    def __init__(self):
        super().__init__("Wrath", 2, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        class WrathOne(ChoiceCard):
            def __init__(self):
                super().__init__("Wrath 1 Damage", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.find_minion_spell_target)

            def use(self, player, game):
                target.damage(player.effective_spell_damage(1), wrath)
                player.draw()

        class WrathThree(ChoiceCard):
            def __init__(self):
                super().__init__("Wrath 3 Damage", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.find_minion_spell_target)

            def use(self, player, game):
                target.damage(player.effective_spell_damage(3), wrath)

        super().use(player, game)
        option = game.current_player.agent.choose_option([WrathOne(), WrathThree()], player)
        target = self.target
        wrath = self
        option.use(player, game)
**************************************************
**************************************************
example# 498
NAME_BEGIN Young Dragonhawk NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Windfury DESC_END

class YoungDragonhawk(MinionCard):
    def __init__(self):
        super().__init__("Young Dragonhawk", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(1, 1, windfury=True)
**************************************************
**************************************************
example# 499
NAME_BEGIN Young Priestess NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN At the end of your turn , give another random friendly minion +1 Health . DESC_END

class YoungPriestess(MinionCard):
    def __init__(self):
        super().__init__("Young Priestess", 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)

    def create_minion(self, player):
        return Minion(2, 1, effects=[Effect(TurnEnded(), ActionTag(Give(ChangeHealth(1)), MinionSelector(picker=RandomPicker())))])
**************************************************
**************************************************
example# 500
NAME_BEGIN Youthful Brewmaster NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Battlecry : Return a friendly minion from the battlefield to your hand . DESC_END

class YouthfulBrewmaster(MinionCard):
    def __init__(self):
        super().__init__("Youthful Brewmaster", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Bounce(), MinionSelector(picker=UserPicker())))

    def create_minion(self, player):
        return Minion(3, 2)
**************************************************
**************************************************
example# 501
NAME_BEGIN Ysera NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 12 DEF_END COST_BEGIN 9 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Dragon RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN At the end of your turn , add a Dream Card to your hand . DESC_END

class Ysera(MinionCard):
    def __init__(self):
        super().__init__("Ysera", 9, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DRAGON)

    def create_minion(self, player):
        dream_card_list = [EmeraldDrake(), LaughingSister(), Nightmare(), YseraAwakens(), Dream()]
        return Minion(4, 12, effects=[Effect(TurnEnded(), ActionTag(AddCard(CardQuery(source=CARD_SOURCE.LIST, source_list=dream_card_list)), PlayerSelector()))])
**************************************************
**************************************************
example# 502
NAME_BEGIN Ysera Awakens NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Dream PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN Deal $ 5 damage to all characters except Ysera . DESC_END

class YseraAwakens(SpellCard):
    def __init__(self):
        super().__init__("Ysera Awakens", 2, CHARACTER_CLASS.DREAM, CARD_RARITY.COMMON, False)

    def use(self, player, game):
        super().use(player, game)
        targets = copy.copy(player.game.other_player.minions)
        targets.extend(player.game.current_player.minions)
        targets.append(player.game.other_player.hero)
        targets.append(player.game.current_player.hero)
        targets = filter(lambda m: not m.is_minion() or m.card.name != "Ysera", targets)
        for minion in targets:
            minion.damage(player.effective_spell_damage(5), self)
**************************************************
**************************************************
example# 503
NAME_BEGIN Axe Flinger NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Warrior PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Whenever this minion takes damage , deal 2 damage to the enemy hero . DESC_END

class AxeFlinger(MinionCard):
    def __init__(self):
        super().__init__("Axe Flinger", 4, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(2, 5, effects=[Effect(Damaged(), ActionTag(Damage(2), HeroSelector(EnemyPlayer())))])
**************************************************
**************************************************
example# 504
NAME_BEGIN Blackwing Technician NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Battlecry : If you 're holding a Dragon , gain +1/+1 . DESC_END

class BlackwingTechnician(MinionCard):
    def __init__(self):
        super().__init__("Blackwing Technician", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=(Battlecry(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector(), GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.DRAGON))), value=0))))

    def create_minion(self, player):
        return Minion(2, 4)
**************************************************
**************************************************
example# 505
NAME_BEGIN Chromaggus NAME_END ATK_BEGIN 6 ATK_END DEF_BEGIN 8 DEF_END COST_BEGIN 8 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Dragon RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Whenever you draw a card , put another copy into your hand . DESC_END

class Chromaggus(MinionCard):
    def __init__(self):
        super().__init__("Chromaggus", 8, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DRAGON)

    def create_minion(self, player):
        return Minion(6, 8, effects=[Effect(CardDrawn(), [ActionTag(AddCard(CardQuery(source=CARD_SOURCE.LAST_DRAWN, make_copy=True)), PlayerSelector())])])
**************************************************
**************************************************
example# 506
NAME_BEGIN Core Rager NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Hunter PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Battlecry : If your hand is empty , gain +3/+3 . DESC_END

class CoreRager(MinionCard):
    def __init__(self):
        super().__init__("Core Rager", 4, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE, minion_type=MINION_TYPE.BEAST, battlecry=(Battlecry(Give([Buff(ChangeAttack(3)), Buff(ChangeHealth(3))]), SelfSelector(), Not(GreaterThan(Count(CardSelector()), value=0)))))

    def create_minion(self, player):
        return Minion(4, 4)
**************************************************
**************************************************
example# 507
NAME_BEGIN Dark Iron Skulker NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Rogue PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Battlecry : Deal 2 damage to all undamaged enemy minions . DESC_END

class DarkIronSkulker(MinionCard):
    def __init__(self):
        super().__init__("Dark Iron Skulker", 5, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE, battlecry=Battlecry(Damage(2), MinionSelector(condition=Not(IsDamaged()), players=EnemyPlayer())))

    def create_minion(self, player):
        return Minion(4, 3)
**************************************************
**************************************************
example# 508
NAME_BEGIN Demonwrath NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Warlock PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Deal $ 2 damage to all non-Demon minions . DESC_END

class Demonwrath(SpellCard):
    def __init__(self):
        super().__init__("Demonwrath", 3, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE)

    def use(self, player, game):
        super().use(player, game)
        targets = copy.copy(game.other_player.minions)
        targets.extend(game.current_player.minions)
        for minion in targets:
            if minion.card.minion_type is not MINION_TYPE.DEMON:
                minion.damage(player.effective_spell_damage(2), self)
**************************************************
**************************************************
example# 509
NAME_BEGIN Dragon Consort NAME_END ATK_BEGIN 5 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Paladin PLAYER_CLS_END RACE_BEGIN Dragon RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Battlecry : The next Dragon you play costs ( 2 ) less . DESC_END

class DragonConsort(MinionCard):
    def __init__(self):
        super().__init__("Dragon Consort", 5, CHARACTER_CLASS.PALADIN, CARD_RARITY.RARE, minion_type=MINION_TYPE.DRAGON, battlecry=Battlecry(GiveAura([AuraUntil(ManaChange(-3), CardSelector(condition=IsType(MINION_TYPE.DRAGON)), CardPlayed(IsType(MINION_TYPE.DRAGON)), False)]), PlayerSelector()))

    def create_minion(self, player):
        return Minion(5, 5)
**************************************************
**************************************************
example# 510
NAME_BEGIN Dragon Egg NAME_END ATK_BEGIN 0 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Whenever this minion takes damage , summon a 2/1 Whelp . DESC_END

class DragonEgg(MinionCard):
    def __init__(self):
        super().__init__("Dragon Egg", 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)

    def create_minion(self, player):
        return Minion(0, 2, effects=[Effect(Damaged(), ActionTag(Summon(BlackWhelp()), PlayerSelector()))])
**************************************************
**************************************************
example# 511
NAME_BEGIN Dragon 's Breath NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Mage PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Deal $ 4 damage . Costs ( 1 ) less for each minion that died this turn . DESC_END

class DragonsBreath(SpellCard):
    def __init__(self):
        super().__init__("Dragon's Breath", 5, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target, buffs=[Buff(ManaChange(Count(DeadMinionSelector(players=BothPlayer())), -1))])

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(player.effective_spell_damage(4), self)
**************************************************
**************************************************
example# 512
NAME_BEGIN Druid of the Flame NAME_END ATK_BEGIN 5 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN NIL DESC_END

class DruidOfTheFlame(MinionCard):
    def __init__(self):
        super().__init__("Druid of the Flame", 3, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, choices=[
            Choice(FlameCatForm(), Transform(FlameCat()), SelfSelector()),
            Choice(FlameBirdForm(), Transform(FlameBird()), SelfSelector())
        ])

    def create_minion(self, player):
        return Minion(2, 2)
**************************************************
**************************************************
example# 513
NAME_BEGIN Druid of the Flame NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Choose One - Transform into a 5/2 minion ; or a 2/5 minion . DESC_END

class DruidOfTheFlame(MinionCard):
    def __init__(self):
        super().__init__("Druid of the Flame", 3, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, choices=[
            Choice(FlameCatForm(), Transform(FlameCat()), SelfSelector()),
            Choice(FlameBirdForm(), Transform(FlameBird()), SelfSelector())
        ])

    def create_minion(self, player):
        return Minion(2, 2)
**************************************************
**************************************************
example# 514
NAME_BEGIN Druid of the Flame NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN NIL DESC_END

class DruidOfTheFlame(MinionCard):
    def __init__(self):
        super().__init__("Druid of the Flame", 3, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, choices=[
            Choice(FlameCatForm(), Transform(FlameCat()), SelfSelector()),
            Choice(FlameBirdForm(), Transform(FlameBird()), SelfSelector())
        ])

    def create_minion(self, player):
        return Minion(2, 2)
**************************************************
**************************************************
example# 515
NAME_BEGIN Emperor Thaurissan NAME_END ATK_BEGIN 5 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 6 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN At the end of your turn , reduce the Cost of cards in your hand by ( 1 ) . DESC_END

class EmperorThaurissan(MinionCard):
    def __init__(self):
        super().__init__("Emperor Thaurissan", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)

    def create_minion(self, player):
        return Minion(5, 5, effects=[Effect(TurnEnded(), [ActionTag(Give(Buff(ManaChange(-1))), CardSelector())])])
**************************************************
**************************************************
example# 516
NAME_BEGIN Fireguard Destroyer NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 6 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Shaman PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Battlecry : Gain 1-4 Attack . Overload : ( 1 ) DESC_END

class FireguardDestroyer(MinionCard):
    def __init__(self):
        super().__init__("Fireguard Destroyer", 4, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, overload=1, battlecry=Battlecry(Give(Buff(ChangeAttack(RandomAmount(1, 4)))), SelfSelector()))

    def create_minion(self, player):
        return Minion(3, 6)
**************************************************
**************************************************
example# 517
NAME_BEGIN Flamewaker NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Mage PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN After you cast a spell , deal 2 damage randomly split among all enemies . DESC_END

class Flamewaker(MinionCard):
    def __init__(self):
        super().__init__("Flamewaker", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)

    def create_minion(self, player):
        return Minion(2, 4, effects=[Effect(CardUsed(IsSpell()), ActionTag(Damage(1), CharacterSelector(None, EnemyPlayer(), RandomPicker(2))))])
**************************************************
**************************************************
example# 518
NAME_BEGIN Gang Up NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Rogue PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Choose a minion . Shuffle 3 copies of it into your deck . DESC_END

class GangUp(SpellCard):
    def __init__(self):
        super().__init__("Gang Up", 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        for i in range(3):
            player.put_back(type(self.target.card)())
**************************************************
**************************************************
example# 519
NAME_BEGIN Grim Patron NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Whenever this minion survives damage , summon another Grim Patron . DESC_END

class GrimPatron(MinionCard):
    def __init__(self):
        super().__init__("Grim Patron", 5, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)

    def create_minion(self, player):
        return Minion(3, 3, effects=[Effect(Damaged(), [ActionTag(Summon(GrimPatron()), PlayerSelector(), GreaterThan(Attribute("health", SelfSelector()), value=0))])])
**************************************************
**************************************************
example# 520
NAME_BEGIN Imp Gang Boss NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Warlock PLAYER_CLS_END RACE_BEGIN Demon RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Whenever this minion takes damage , summon a 1/1 Imp . DESC_END

class ImpGangBoss(MinionCard):
    def __init__(self):
        super().__init__("Imp Gang Boss", 3, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON)

    def create_minion(self, player):
        return Minion(2, 4, effects=[Effect(Damaged(), ActionTag(Summon(Imp()), PlayerSelector()))])
**************************************************
**************************************************
example# 521
NAME_BEGIN Lava Shock NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Shaman PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Deal $ 2 damage . NL Unlock your Overloaded Mana Crystals . DESC_END

class LavaShock(SpellCard):
    def __init__(self):
        super().__init__("Lava Shock", 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(2, self)
        player.upcoming_overload = 0
        player.mana += player.current_overload
        player.current_overload = 0
**************************************************
**************************************************
example# 522
NAME_BEGIN Majordomo Executus NAME_END ATK_BEGIN 9 ATK_END DEF_BEGIN 7 DEF_END COST_BEGIN 9 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Deathrattle : Replace your hero with Ragnaros , the Firelord . DESC_END

class MajordomoExecutus(MinionCard):
    def __init__(self):
        super().__init__("Majordomo Executus", 9, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)

    def create_minion(self, player):
        return Minion(9, 7, deathrattle=[Deathrattle(Transform(Ragnaros()), HeroSelector())])
**************************************************
**************************************************
example# 523
NAME_BEGIN Nefarian NAME_END ATK_BEGIN 8 ATK_END DEF_BEGIN 8 DEF_END COST_BEGIN 9 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Dragon RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Battlecry : Add 2 random spells to your hand ( from your opponent 's class ) . DESC_END

class Nefarian(MinionCard):
    def __init__(self):
        super().__init__("Nefarian", 9, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DRAGON, battlecry=Battlecry(AddCard(CardQuery(conditions=[ IsClass(Attribute("character_class", HeroSelector(EnemyPlayer()))), IsSpell() ]), 2), PlayerSelector()))

    def create_minion(self, player):
        return Minion(8, 8)
**************************************************
**************************************************
example# 524
NAME_BEGIN Quick Shot NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Hunter PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Deal $ 3 damage . NL If your hand is empty , draw a card . DESC_END

class QuickShot(SpellCard):
    def __init__(self):
        super().__init__("Quick Shot", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.damage(3, self)
        if len(player.hand) == 0:
            player.draw()
**************************************************
**************************************************
example# 525
NAME_BEGIN Rend Blackhand NAME_END ATK_BEGIN 8 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 7 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Battlecry : If you 're holding a Dragon , destroy a Legendary minion . DESC_END

class RendBlackhand(MinionCard):
    def __init__(self):
        super().__init__("Rend Blackhand", 7, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, battlecry=(Battlecry(Kill(), MinionSelector(And(MinionIsNotTarget(), IsRarity(CARD_RARITY.LEGENDARY)), BothPlayer(), UserPicker()), GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.DRAGON))), value=0))))

    def create_minion(self, player):
        return Minion(8, 4)
**************************************************
**************************************************
example# 526
NAME_BEGIN Resurrect NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Priest PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Summon a random friendly minion that died this game . DESC_END

class Resurrect(SpellCard):
    def __init__(self):
        super().__init__("Resurrect", 2, CHARACTER_CLASS.PRIEST, CARD_RARITY.RARE)

    def use(self, player, game):
        from hearthbreaker.engine import card_lookup
        super().use(player, game)
        if len(player.graveyard) > 0 and len(player.minions) < 7:
            card_name = game.random_choice(player.graveyard)
            card = card_lookup(card_name)
            card.summon(player, game, len(player.minions))
**************************************************
**************************************************
example# 527
NAME_BEGIN Revenge NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Warrior PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Deal $ 1 damage to all minions . If you have 12 or less Health , deal $ 3 damage instead . DESC_END

class Revenge(SpellCard):
    def __init__(self):
        super().__init__("Revenge", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.RARE)

    def use(self, player, game):
        super().use(player, game)
        targets = copy.copy(game.other_player.minions)
        targets.extend(game.current_player.minions)
        if player.hero.health <= 12:
            for minion in targets:
                minion.damage(player.effective_spell_damage(3), self)
        else:
            for minion in targets:
                minion.damage(player.effective_spell_damage(1), self)
**************************************************
**************************************************
example# 528
NAME_BEGIN Volcanic Drake NAME_END ATK_BEGIN 6 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 6 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Dragon RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Costs ( 1 ) less for each minion that died this turn . DESC_END

class VolcanicDrake(MinionCard):
    def __init__(self):
        super().__init__("Volcanic Drake", 6, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, buffs=[Buff(ManaChange(Count(DeadMinionSelector(players=BothPlayer())), -1))])

    def create_minion(self, player):
        return Minion(6, 4)
**************************************************
**************************************************
example# 529
NAME_BEGIN Volcanic Lumberer NAME_END ATK_BEGIN 7 ATK_END DEF_BEGIN 8 DEF_END COST_BEGIN 9 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Taunt NL Costs ( 1 ) less for each minion that died this turn . DESC_END

class VolcanicLumberer(MinionCard):
    def __init__(self):
        super().__init__("Volcanic Lumberer", 9, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE, buffs=[Buff(ManaChange(Count(DeadMinionSelector(players=BothPlayer())), -1))])

    def create_minion(self, player):
        return Minion(7, 8, taunt=True)
**************************************************
**************************************************
example# 530
NAME_BEGIN Whelp NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Dragon RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN NIL DESC_END

class Whelp(MinionCard):
    def __init__(self):
        super().__init__("Whelp", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.DRAGON)

    def create_minion(self, player):
        return Minion(1, 1)
**************************************************
**************************************************
example# 531
NAME_BEGIN Whelp NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN NIL DESC_END

class Whelp(MinionCard):
    def __init__(self):
        super().__init__("Whelp", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.DRAGON)

    def create_minion(self, player):
        return Minion(1, 1)
**************************************************
**************************************************
example# 532
NAME_BEGIN Whelp NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Dragon RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN NIL DESC_END

class Whelp(MinionCard):
    def __init__(self):
        super().__init__("Whelp", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.DRAGON)

    def create_minion(self, player):
        return Minion(1, 1)
**************************************************
**************************************************
example# 533
NAME_BEGIN Assassin 's Blade NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN 4 DUR_END TYPE_BEGIN Weapon TYPE_END PLAYER_CLS_BEGIN Rogue PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN NIL DESC_END

class AssassinsBlade(WeaponCard):
    def __init__(self):
        super().__init__("Assassin's Blade", 5, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON)

    def create_weapon(self, player):
        return Weapon(3, 4)
**************************************************
**************************************************
example# 534
NAME_BEGIN Boulderfist Ogre NAME_END ATK_BEGIN 6 ATK_END DEF_BEGIN 7 DEF_END COST_BEGIN 6 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN NIL DESC_END

class BoulderfistOgre(MinionCard):
    def __init__(self):
        super().__init__("Boulderfist Ogre", 6, CHARACTER_CLASS.ALL, CARD_RARITY.FREE)

    def create_minion(self, player):
        return Minion(6, 7)
**************************************************
**************************************************
example# 535
NAME_BEGIN Deadly Poison NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Rogue PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Give your weapon +2 Attack . DESC_END

class DeadlyPoison(SpellCard):
    def __init__(self):
        super().__init__("Deadly Poison", 1, CHARACTER_CLASS.ROGUE, CARD_RARITY.FREE)

    def use(self, player, game):
        super().use(player, game)

        player.weapon.base_attack += 2
        player.hero.change_temp_attack(2)

    def can_use(self, player, game):
        return super().can_use(player, game) and player.weapon is not None
**************************************************
**************************************************
example# 536
NAME_BEGIN Fire Elemental NAME_END ATK_BEGIN 6 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 6 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Shaman PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Battlecry : Deal 3 damage . DESC_END

class FireElemental(MinionCard):
    def __init__(self):
        super().__init__("Fire Elemental", 6, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3), CharacterSelector(players=BothPlayer(), picker=UserPicker())))

    def create_minion(self, player):
        return Minion(6, 5)
**************************************************
**************************************************
example# 537
NAME_BEGIN Gnomish Inventor NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Battlecry : Draw a card . DESC_END

class GnomishInventor(MinionCard):
    def __init__(self):
        super().__init__("Gnomish Inventor", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Draw(), PlayerSelector()))

    def create_minion(self, player):
        return Minion(2, 4)
**************************************************
**************************************************
example# 538
NAME_BEGIN Heroic Strike NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Warrior PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Give your hero +4 Attack this turn . DESC_END

class HeroicStrike(SpellCard):
    def __init__(self):
        super().__init__("Heroic Strike", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.FREE)

    def use(self, player, game):
        super().use(player, game)
        player.hero.change_temp_attack(4)
**************************************************
**************************************************
example# 539
NAME_BEGIN Ironbark Protector NAME_END ATK_BEGIN 8 ATK_END DEF_BEGIN 8 DEF_END COST_BEGIN 8 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Taunt DESC_END

class IronbarkProtector(MinionCard):
    def __init__(self):
        super().__init__("Ironbark Protector", 8, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(8, 8, taunt=True)
**************************************************
**************************************************
example# 540
NAME_BEGIN Mark of the Wild NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Give a minion Taunt and +2/+2 . ( +2 Attack/+2 Health ) DESC_END

class MarkOfTheWild(SpellCard):
    def __init__(self):
        super().__init__("Mark of the Wild", 2, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.change_attack(2)
        self.target.increase_health(2)
        self.target.taunt = True
**************************************************
**************************************************
example# 541
NAME_BEGIN Multi-Shot NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Hunter PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Deal $ 3 damage to two random enemy minions . DESC_END

class MultiShot(SpellCard):
    def __init__(self):
        super().__init__("Multi-Shot", 4, CHARACTER_CLASS.HUNTER, CARD_RARITY.FREE)

    def use(self, player, game):
        super().use(player, game)

        targets = copy.copy(game.other_player.minions)
        for i in range(0, 2):
            target = game.random_choice(targets)
            targets.remove(target)
            target.damage(player.effective_spell_damage(3), self)

    def can_use(self, player, game):
        return super().can_use(player, game) and len(game.other_player.minions) >= 2
**************************************************
**************************************************
example# 542
NAME_BEGIN Power Word : Shield NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Priest PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Give a minion +2 Health . NL Draw a card . DESC_END

class PowerWordShield(SpellCard):
    def __init__(self):
        super().__init__("Power Word: Shield", 1, CHARACTER_CLASS.PRIEST, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)

        self.target.increase_health(2)
        player.draw()
**************************************************
**************************************************
example# 543
NAME_BEGIN Sen'jin Shieldmasta NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Taunt DESC_END

class SenjinShieldmasta(MinionCard):
    def __init__(self):
        super().__init__("Sen'jin Shieldmasta", 4, CHARACTER_CLASS.ALL, CARD_RARITY.FREE)

    def create_minion(self, player):
        return Minion(3, 5, taunt=True)
**************************************************
**************************************************
example# 544
NAME_BEGIN Sinister Strike NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Rogue PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Deal $ 3 damage to the enemy hero . DESC_END

class SinisterStrike(SpellCard):
    def __init__(self):
        super().__init__("Sinister Strike", 1, CHARACTER_CLASS.ROGUE, CARD_RARITY.FREE)

    def use(self, player, game):
        super().use(player, game)

        game.other_player.hero.damage(player.effective_spell_damage(3), self)
**************************************************
**************************************************
example# 545
NAME_BEGIN Succubus NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Warlock PLAYER_CLS_END RACE_BEGIN Demon RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Battlecry : Discard a random card . DESC_END

class Succubus(MinionCard):
    def __init__(self):
        super().__init__("Succubus", 2, CHARACTER_CLASS.WARLOCK, CARD_RARITY.FREE, minion_type=MINION_TYPE.DEMON, battlecry=Battlecry(Discard(), PlayerSelector()))

    def create_minion(self, player):
        return Minion(4, 3)
**************************************************
**************************************************
example# 546
NAME_BEGIN War Golem NAME_END ATK_BEGIN 7 ATK_END DEF_BEGIN 7 DEF_END COST_BEGIN 7 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN NIL DESC_END

class WarGolem(MinionCard):
    def __init__(self):
        super().__init__("War Golem", 7, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(7, 7)
**************************************************
**************************************************
example# 547
NAME_BEGIN Acidmaw NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 7 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Hunter PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Whenever another minion takes damage , destroy it . DESC_END

class Acidmaw(MinionCard):
    def __init__(self):
        super().__init__("Acidmaw", 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(4, 2, effects=[Effect(CharacterDamaged(MinionIsNotTarget(), BothPlayer()), [ActionTag(Kill(), TargetSelector())])])
**************************************************
**************************************************
example# 548
NAME_BEGIN Boar NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN Charge DESC_END

class Boar(MinionCard):
    def __init__(self):
        super().__init__("Boar", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(1, 1)
**************************************************
**************************************************
example# 549
NAME_BEGIN Anodized Robo Cub NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Taunt . Choose One - NL +1 Attack ; or +1 Health . DESC_END

class AnodizedRoboCub(MinionCard):
    def __init__(self):
        super().__init__("Anodized Robo Cub", 2, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, choices=[Choice(AttackMode(), Give([Buff(ChangeAttack(1))]), SelfSelector()), Choice(TankMode(), Give([Buff(ChangeHealth(1))]), SelfSelector())])

    def create_minion(self, player):
        return Minion(2, 2, taunt=True)
**************************************************
**************************************************
example# 550
NAME_BEGIN Burrowing Mine NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 0 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Warrior PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN When you draw this , it explodes . You take 10 damage and draw a card . DESC_END

class BurrowingMine(SpellCard):
    def __init__(self):
        super().__init__("Burrowing Mine", 0, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON, False, effects=[Effect(Drawn(), ActionTag(Damage(10), HeroSelector())), Effect(Drawn(), ActionTag(Discard(query=CardQuery(source=CARD_SOURCE.LAST_DRAWN)), PlayerSelector())), Effect(Drawn(), ActionTag(Draw(), PlayerSelector()))])

    def use(self, player, game):
        super().use(player, game)
**************************************************
**************************************************
example# 551
NAME_BEGIN Crackle NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Shaman PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Deal $ 3- $ 6 damage . Overload : ( 1 ) DESC_END

class Crackle(SpellCard):
    def __init__(self):
        super().__init__("Crackle", 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target, overload=1)

    def use(self, player, game):
        super().use(player, game)

        self.target.damage(player.effective_spell_damage(game.random_amount(3, 6)), self)
**************************************************
**************************************************
example# 552
NAME_BEGIN Emergency Coolant NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN Freeze a minion . DESC_END

class EmergencyCoolant(SpellCard):
    def __init__(self):
        super().__init__("Emergency Coolant", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.add_buff(Buff(Frozen()))
**************************************************
**************************************************
example# 553
NAME_BEGIN Flying Machine NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Windfury DESC_END

class FlyingMachine(MinionCard):
    def __init__(self):
        super().__init__("Flying Machine", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)

    def create_minion(self, player):
        return Minion(1, 4, windfury=True)
**************************************************
**************************************************
example# 554
NAME_BEGIN Goblin Auto-Barber NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Rogue PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Battlecry : Give your weapon +1 Attack . DESC_END

class GoblinAutoBarber(MinionCard):
    def __init__(self):
        super().__init__("Goblin Auto-Barber", 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=Battlecry(IncreaseWeaponAttack(1), WeaponSelector()))

    def create_minion(self, player):
        return Minion(3, 2)
**************************************************
**************************************************
example# 555
NAME_BEGIN Iron Sensei NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Rogue PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN At the end of your turn , give another friendly Mech +2/+2 . DESC_END

class IronSensei(MinionCard):
    def __init__(self):
        super().__init__("Iron Sensei", 3, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)

    def create_minion(self, player):
        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give([Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), MinionSelector(IsType(MINION_TYPE.MECH), picker=RandomPicker())))])
**************************************************
**************************************************
example# 556
NAME_BEGIN Mal'Ganis NAME_END ATK_BEGIN 9 ATK_END DEF_BEGIN 7 DEF_END COST_BEGIN 9 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Warlock PLAYER_CLS_END RACE_BEGIN Demon RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Your other Demons have +2/+2 . NL Your hero is Immune . DESC_END

class MalGanis(MinionCard):
    def __init__(self):
        super().__init__("Mal'Ganis", 9, CHARACTER_CLASS.WARLOCK, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DEMON)

    def create_minion(self, player):
        return Minion(9, 7, auras=[Aura(ChangeHealth(2), MinionSelector(IsType(MINION_TYPE.DEMON))), Aura(ChangeAttack(2), MinionSelector(IsType(MINION_TYPE.DEMON))), Aura(Immune(), HeroSelector())])
**************************************************
**************************************************
example# 557
NAME_BEGIN Mistress of Pain NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Warlock PLAYER_CLS_END RACE_BEGIN Demon RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Whenever this minion deals damage , restore that much Health to your hero . DESC_END

class MistressOfPain(MinionCard):
    def __init__(self):
        super().__init__("Mistress of Pain", 2, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON)

    def create_minion(self, player):
        return Minion(1, 4, effects=[Effect(DidDamage(), ActionTag(Heal(EventValue()), HeroSelector()))])
**************************************************
**************************************************
example# 558
NAME_BEGIN Powermace NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN 2 DUR_END TYPE_BEGIN Weapon TYPE_END PLAYER_CLS_BEGIN Shaman PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Deathrattle : Give a random friendly Mech +2/+2 . DESC_END

class Powermace(WeaponCard):
    def __init__(self):
        super().__init__("Powermace", 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.RARE)

    def create_weapon(self, player):
        return Weapon(3, 2, deathrattle=Deathrattle(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2))]), MinionSelector(IsType(MINION_TYPE.MECH), picker=RandomPicker())))
**************************************************
**************************************************
example# 559
NAME_BEGIN Screwjank Clunker NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Warrior PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Battlecry : Give a friendly Mech +2/+2 . DESC_END

class ScrewjankClunker(MinionCard):
    def __init__(self):
        super().__init__("Screwjank Clunker", 4, CHARACTER_CLASS.WARRIOR, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2))]), MinionSelector(IsType(MINION_TYPE.MECH), picker=UserPicker())))

    def create_minion(self, player):
        return Minion(2, 5)
**************************************************
**************************************************
example# 560
NAME_BEGIN Sneed 's Old Shredder NAME_END ATK_BEGIN 5 ATK_END DEF_BEGIN 7 DEF_END COST_BEGIN 8 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Deathrattle : Summon a random legendary minion . DESC_END

class SneedsOldShredder(MinionCard):
    def __init__(self):
        super().__init__("Sneed's Old Shredder", 8, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)

    def create_minion(self, player):
        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(conditions=[IsRarity(CARD_RARITY.LEGENDARY), IsMinion()])), PlayerSelector()))
**************************************************
**************************************************
example# 561
NAME_BEGIN Toshley NAME_END ATK_BEGIN 5 ATK_END DEF_BEGIN 7 DEF_END COST_BEGIN 6 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Battlecry and Deathrattle : Add a Spare Part card to your hand . DESC_END

class Toshley(MinionCard):
    def __init__(self):
        from hearthbreaker.cards.spells.neutral import spare_part_list
        super().__init__("Toshley", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, battlecry=Battlecry(AddCard(CardQuery(source=CARD_SOURCE.LIST, source_list=spare_part_list)), PlayerSelector()))

    def create_minion(self, player):
        from hearthbreaker.cards.spells.neutral import spare_part_list
        return Minion(5, 7, deathrattle=Deathrattle(AddCard(CardQuery(source=CARD_SOURCE.LIST, source_list=spare_part_list)), PlayerSelector()))
**************************************************
**************************************************
example# 562
NAME_BEGIN Warbot NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Warrior PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Enrage : +1 Attack . DESC_END

class Warbot(MinionCard):
    def __init__(self):
        super().__init__("Warbot", 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)

    def create_minion(self, player):
        return Minion(1, 3, enrage=[Aura(ChangeAttack(1), SelfSelector())])
**************************************************
**************************************************
example# 563
NAME_BEGIN Deathlord NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 8 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Taunt . Deathrattle : Your opponent puts a minion from their deck into the battlefield . DESC_END

class Deathlord(MinionCard):
    def __init__(self):
        super().__init__("Deathlord", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)

    def create_minion(self, player):
        return Minion(2, 8, taunt=True, deathrattle=Deathrattle(Summon(CardQuery(conditions=[IsMinion()], source=CARD_SOURCE.MY_DECK)), PlayerSelector(EnemyPlayer())))
**************************************************
**************************************************
example# 564
NAME_BEGIN Nerub'ar Weblord NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Minions with Battlecry cost ( 2 ) more . DESC_END

class NerubarWeblord(MinionCard):
    def __init__(self):
        super().__init__("Nerub'ar Weblord", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(1, 4, auras=[Aura(ManaChange(2), CardSelector(BothPlayer(), HasBattlecry()))])
**************************************************
**************************************************
example# 565
NAME_BEGIN Spectral Knight NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 6 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Ca n't be targeted by spells or Hero Powers . DESC_END

class SpectralKnight(MinionCard):
    def __init__(self):
        super().__init__("Spectral Knight", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(4, 6, spell_targetable=False)
**************************************************
**************************************************
example# 566
NAME_BEGIN Wailing Soul NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Battlecry : Silence your other minions . DESC_END

class WailingSoul(MinionCard):
    def __init__(self):
        super().__init__("Wailing Soul", 4, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(Silence(), MinionSelector()))

    def create_minion(self, player):
        return Minion(3, 5)
**************************************************
**************************************************
example# 567
NAME_BEGIN Amani Berserker NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Enrage : +3 Attack DESC_END

class AmaniBerserker(MinionCard):
    def __init__(self):
        super().__init__("Amani Berserker", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(2, 3, enrage=[Aura(ChangeAttack(3), SelfSelector())])
**************************************************
**************************************************
example# 568
NAME_BEGIN Archmage Antonidas NAME_END ATK_BEGIN 5 ATK_END DEF_BEGIN 7 DEF_END COST_BEGIN 7 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Mage PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Whenever you cast a spell , add a 'Fireball ' spell to your hand . DESC_END

class ArchmageAntonidas(MinionCard):
    def __init__(self):
        super().__init__("Archmage Antonidas", 7, CHARACTER_CLASS.MAGE, CARD_RARITY.LEGENDARY)

    def create_minion(self, player):
        return Minion(5, 7, effects=[Effect(SpellCast(), ActionTag(AddCard(hearthbreaker.cards.Fireball()), PlayerSelector()))])
**************************************************
**************************************************
example# 569
NAME_BEGIN Bananas NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN Give a minion +1/+1 . DESC_END

class Bananas(SpellCard):
    def __init__(self):
        super().__init__("Bananas", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.change_attack(1)
        self.target.increase_health(1)
**************************************************
**************************************************
example# 570
NAME_BEGIN Blessed Champion NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Paladin PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Double a minion 's Attack . DESC_END

class BlessedChampion(SpellCard):
    def __init__(self):
        super().__init__("Blessed Champion", 5, CHARACTER_CLASS.PALADIN, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.add_buff(Buff(DoubleAttack()))
**************************************************
**************************************************
example# 571
NAME_BEGIN Cabal Shadow Priest NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 6 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Priest PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Battlecry : Take control of an enemy minion that has 2 or less Attack . DESC_END

class CabalShadowPriest(MinionCard):
    def __init__(self):
        super().__init__("Cabal Shadow Priest", 6, CHARACTER_CLASS.PRIEST, CARD_RARITY.EPIC, battlecry=Battlecry(Steal(), MinionSelector(AttackLessThanOrEqualTo(2), players=EnemyPlayer(), picker=UserPicker())))

    def create_minion(self, player):
        return Minion(4, 5)
**************************************************
**************************************************
example# 572
NAME_BEGIN Cone of Cold NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Mage PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Freeze a minion and the minions next to it , and deal $ 1 damage to them . DESC_END

class ConeOfCold(SpellCard):
    def __init__(self):
        super().__init__("Cone of Cold", 4, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)

        self.target.add_buff(Buff(Frozen()))
        index = self.target.index

        if self.target.index < len(self.target.player.minions) - 1:
            minion = self.target.player.minions[index + 1]
            minion.damage(player.effective_spell_damage(1), self)
            minion.add_buff(Buff(Frozen()))

        self.target.damage(player.effective_spell_damage(1), self)

        if self.target.index > 0:
            minion = self.target.player.minions[index - 1]
            minion.damage(player.effective_spell_damage(1), self)
            minion.add_buff(Buff(Frozen()))
**************************************************
**************************************************
example# 573
NAME_BEGIN Defender of Argus NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Battlecry : Give adjacent minions +1/+1 and Taunt . DESC_END

class DefenderOfArgus(MinionCard):
    def __init__(self):
        super().__init__("Defender of Argus", 4, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(Give([ Buff(Taunt()), Buff(ChangeAttack(1)), Buff(ChangeHealth(1)) ]), MinionSelector(Adjacent())))

    def create_minion(self, player):
        return Minion(2, 3)
**************************************************
**************************************************
example# 574
NAME_BEGIN Doomhammer NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN 8 DUR_END TYPE_BEGIN Weapon TYPE_END PLAYER_CLS_BEGIN Shaman PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Windfury , Overload : ( 2 ) DESC_END

class Doomhammer(WeaponCard):
    def __init__(self):
        super().__init__("Doomhammer", 5, CHARACTER_CLASS.SHAMAN, CARD_RARITY.EPIC, overload=2)

    def create_weapon(self, player):
        return Weapon(2, 8, buffs=[Buff(Windfury())])
**************************************************
**************************************************
example# 575
NAME_BEGIN Earth Shock NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Shaman PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Silence a minion , then deal $ 1 damage to it . DESC_END

class EarthShock(SpellCard):
    def __init__(self):
        super().__init__("Earth Shock", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)

        self.target.silence()
        self.target.damage(player.effective_spell_damage(1), self)
**************************************************
**************************************************
example# 576
NAME_BEGIN Eye for an Eye NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Paladin PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Secret : When your hero takes damage , deal that much damage to the enemy hero . DESC_END

class EyeForAnEye(SecretCard):
    def __init__(self):
        super().__init__("Eye for an Eye", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)

    def _reveal(self, character, attacker, amount):
        if character.is_hero():
            character.player.opponent.hero.damage(amount, self)
        super().reveal()

    def activate(self, player):
        player.bind("character_damaged", self._reveal)

    def deactivate(self, player):
        player.unbind("character_damaged", self._reveal)
**************************************************
**************************************************
example# 577
NAME_BEGIN Flare NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Hunter PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN All minions lose Stealth . Destroy all enemy Secrets . Draw a card . DESC_END

class Flare(SpellCard):
    def __init__(self):
        super().__init__("Flare", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)

    def use(self, player, game):
        super().use(player, game)
        for minion in hearthbreaker.targeting.find_minion_spell_target(game, lambda m: m.stealth):
            minion.stealth = False

        for secret in game.other_player.secrets:
            secret.deactivate(game.other_player)

        game.other_player.secrets = []
        player.draw()
**************************************************
**************************************************
example# 578
NAME_BEGIN Gorehowl NAME_END ATK_BEGIN 7 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 7 COST_END DUR_BEGIN 1 DUR_END TYPE_BEGIN Weapon TYPE_END PLAYER_CLS_BEGIN Warrior PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Attacking a minion costs 1 Attack instead of 1 Durability . DESC_END

class Gorehowl(WeaponCard):
    def __init__(self):
        super().__init__("Gorehowl", 7, CHARACTER_CLASS.WARRIOR, CARD_RARITY.EPIC)

    def create_weapon(self, player):
        return Weapon(7, 1, effects=[Effect(CharacterAttack(And(IsHero(), TargetIsMinion())), [ActionTag(IncreaseDurability(), WeaponSelector()), ActionTag(IncreaseWeaponAttack(-1), WeaponSelector()), ActionTag(Give(BuffUntil(ChangeAttack(1), AttackCompleted())), HeroSelector())])])
**************************************************
**************************************************
example# 579
NAME_BEGIN Hound NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Hunter PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN Charge DESC_END

class Hound(MinionCard):
    def __init__(self):
        super().__init__("Hound", 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(1, 1, charge=True)
**************************************************
**************************************************
example# 580
NAME_BEGIN Injured Blademaster NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 7 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Battlecry : Deal 4 damage to HIMSELF . DESC_END

class InjuredBlademaster(MinionCard):
    def __init__(self):
        super().__init__("Injured Blademaster", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), SelfSelector()))

    def create_minion(self, player):
        return Minion(4, 7)
**************************************************
**************************************************
example# 581
NAME_BEGIN Knife Juggler NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN After you summon a minion , deal 1 damage to a random enemy . DESC_END

class KnifeJuggler(MinionCard):
    def __init__(self):
        super().__init__("Knife Juggler", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)

    def create_minion(self, player):
        return Minion(3, 2, effects=[Effect(AfterAdded(), ActionTag(Damage(1), CharacterSelector(players=EnemyPlayer(), picker=RandomPicker(), condition=None)))])
**************************************************
**************************************************
example# 582
NAME_BEGIN Lightwell NAME_END ATK_BEGIN 0 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Priest PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN At the start of your turn , restore 3 Health to a damaged friendly character . DESC_END

class Lightwell(MinionCard):
    def __init__(self):
        super().__init__("Lightwell", 2, CHARACTER_CLASS.PRIEST, CARD_RARITY.RARE)

    def create_minion(self, player):
        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Heal(3), CharacterSelector(condition=IsDamaged(), picker=RandomPicker())))])
**************************************************
**************************************************
example# 583
NAME_BEGIN Mana Wyrm NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Mage PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Whenever you cast a spell , gain +1 Attack . DESC_END

class ManaWyrm(MinionCard):
    def __init__(self):
        super().__init__("Mana Wyrm", 1, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(1, 3, effects=[Effect(SpellCast(), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])
**************************************************
**************************************************
example# 584
NAME_BEGIN Mogu'shan Warden NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 7 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Taunt DESC_END

class MogushanWarden(MinionCard):
    def __init__(self):
        super().__init__("Mogu'shan Warden", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(1, 7, taunt=True)
**************************************************
**************************************************
example# 585
NAME_BEGIN Nourish NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Choose One - Gain 2 Mana Crystals ; or Draw 3 cards . DESC_END

class Nourish(SpellCard):
    def __init__(self):
        super().__init__("Nourish", 5, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)

    def use(self, player, game):
        super().use(player, game)

        class Gain2(ChoiceCard):

            def __init__(self):
                super().__init__("Gain 2 mana crystals", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, False)

            def use(self, player, game):
                if player.max_mana < 8:
                    player.max_mana += 2
                    player.mana += 2
                else:
                    player.max_mana = 10
                    player.mana += 2

        class Draw3(ChoiceCard):

            def __init__(self):
                super().__init__("Draw three cards", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, False)

            def use(self, player, game):
                player.draw()
                player.draw()
                player.draw()

        option = player.agent.choose_option([Gain2(), Draw3()], player)
        option.use(player, game)
**************************************************
**************************************************
example# 586
NAME_BEGIN Preparation NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 0 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Rogue PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN The next spell you cast this turn costs ( 3 ) less . DESC_END

class Preparation(SpellCard):
    def __init__(self):
        super().__init__("Preparation", 0, CHARACTER_CLASS.ROGUE, CARD_RARITY.EPIC)

    def use(self, player, game):
        super().use(player, game)
        player.add_aura(AuraUntil(ManaChange(-3), CardSelector(condition=IsSpell()), SpellCast()))
**************************************************
**************************************************
example# 587
NAME_BEGIN Repentance NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Paladin PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Secret : When your opponent plays a minion , reduce its Health to 1 . DESC_END

class Repentance(SecretCard):
    def __init__(self):
        super().__init__("Repentance", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)

    def _reveal(self, minion):

        minion.set_health_to(1)
        super().reveal()

    def activate(self, player):
        player.game.current_player.bind("minion_played", self._reveal)

    def deactivate(self, player):
        player.game.current_player.unbind("minion_played", self._reveal)
**************************************************
**************************************************
example# 588
NAME_BEGIN Shadow of Nothing NAME_END ATK_BEGIN 0 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 0 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Priest PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Mindgames whiffed ! Your opponent had no minions ! DESC_END

class ShadowOfNothing(MinionCard):
    def __init__(self):
        super().__init__("Shadow of Nothing", 0, CHARACTER_CLASS.PRIEST, CARD_RARITY.EPIC, False)

    def create_minion(self, p):
        return Minion(0, 1)
**************************************************
**************************************************
example# 589
NAME_BEGIN Slam NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Warrior PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Deal $ 2 damage to a minion . If it survives , draw a card . DESC_END

class Slam(SpellCard):
    def __init__(self):
        super().__init__("Slam", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        if self.target.health > player.effective_spell_damage(2) or self.target.divine_shield:
            self.target.damage(player.effective_spell_damage(2), self)
            player.draw()
        else:
            self.target.damage(player.effective_spell_damage(2), self)
**************************************************
**************************************************
example# 590
NAME_BEGIN Spellbreaker NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Battlecry : Silence a minion . DESC_END

class Spellbreaker(MinionCard):
    def __init__(self):
        super().__init__("Spellbreaker", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.NONE, battlecry=Battlecry(Silence(), MinionSelector(players=BothPlayer(), picker=UserPicker())))

    def create_minion(self, player):
        return Minion(4, 3)
**************************************************
**************************************************
example# 591
NAME_BEGIN Sunfury Protector NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Battlecry : Give adjacent minions Taunt . DESC_END

class SunfuryProtector(MinionCard):
    def __init__(self):
        super().__init__("Sunfury Protector", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(Give(Buff(Taunt())), MinionSelector(Adjacent())))

    def create_minion(self, player):
        return Minion(2, 3)
**************************************************
**************************************************
example# 592
NAME_BEGIN Tinkmaster Overspark NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Battlecry : Transform another random minion into a 5/5 Devilsaur or a 1/1 Squirrel . DESC_END

class TinkmasterOverspark(MinionCard):
    def __init__(self):
        super().__init__("Tinkmaster Overspark", 3, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(CardQuery(source=CARD_SOURCE.LIST, source_list=[Devilsaur(), Squirrel()])), MinionSelector(players=BothPlayer(), picker=RandomPicker())))

    def create_minion(self, player):
        return Minion(3, 3)
**************************************************
**************************************************
example# 593
NAME_BEGIN Vaporize NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Mage PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Secret : When a minion attacks your hero , destroy it . DESC_END

class Vaporize(SecretCard):
    def __init__(self):
        super().__init__("Vaporize", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)

    def _reveal(self, attacker, target):
        if target is self.player.hero and attacker.is_minion() and not attacker.removed:
            attacker.die(self)
            attacker.game.check_delayed()
            super().reveal()

    def activate(self, player):
        player.opponent.bind("character_attack", self._reveal)

    def deactivate(self, player):
        player.opponent.unbind("character_attack", self._reveal)
**************************************************
**************************************************
example# 594
NAME_BEGIN Worgen Infiltrator NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Stealth DESC_END

class WorgenInfiltrator(MinionCard):
    def __init__(self):
        super().__init__("Worgen Infiltrator", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(2, 1, stealth=True)
**************************************************
**************************************************
example# 595
NAME_BEGIN Blackwing Corruptor NAME_END ATK_BEGIN 5 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Battlecry : If you 're holding a Dragon , deal 3 damage . DESC_END

class BlackwingCorruptor(MinionCard):
    def __init__(self):
        super().__init__("Blackwing Corruptor", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3), CharacterSelector(players=BothPlayer(), picker=UserPicker()), GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.DRAGON))), value=0)))

    def create_minion(self, player):
        return Minion(5, 4)
**************************************************
**************************************************
example# 596
NAME_BEGIN Drakonid Crusher NAME_END ATK_BEGIN 6 ATK_END DEF_BEGIN 6 DEF_END COST_BEGIN 6 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Dragon RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Battlecry : If your opponent has 15 or less Health , gain +3/+3 . DESC_END

class DrakonidCrusher(MinionCard):
    def __init__(self):
        super().__init__("Drakonid Crusher", 6, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=(Battlecry(Give([Buff(ChangeAttack(3)), Buff(ChangeHealth(3))]), SelfSelector(), Not(GreaterThan(Attribute('health', HeroSelector(EnemyPlayer())), value=15)))))

    def create_minion(self, player):
        return Minion(6, 6)
**************************************************
**************************************************
example# 597
NAME_BEGIN Imp NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Warlock PLAYER_CLS_END RACE_BEGIN Demon RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN NIL DESC_END

class Imp(MinionCard):
    def __init__(self):
        super().__init__("Imp", 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, False, minion_type=MINION_TYPE.DEMON)

    def create_minion(self, player):
        return Minion(1, 1)
**************************************************
**************************************************
example# 598
NAME_BEGIN Twilight Whelp NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Priest PLAYER_CLS_END RACE_BEGIN Dragon RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Battlecry : If you 're holding a Dragon , gain +2 Health . DESC_END

class TwilightWhelp(MinionCard):
    def __init__(self):
        super().__init__("Twilight Whelp", 1, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=(Battlecry(Give(Buff(ChangeHealth(2))), SelfSelector(), GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.DRAGON))), value=0))))

    def create_minion(self, player):
        return Minion(2, 1)
**************************************************
**************************************************
example# 599
NAME_BEGIN Archmage NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 7 DEF_END COST_BEGIN 6 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Spell Damage +1 DESC_END

class Archmage(MinionCard):
    def __init__(self):
        super().__init__("Archmage", 6, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(4, 7, spell_damage=1)
**************************************************
**************************************************
example# 600
NAME_BEGIN Booty Bay Bodyguard NAME_END ATK_BEGIN 5 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Taunt DESC_END

class BootyBayBodyguard(MinionCard):
    def __init__(self):
        super().__init__("Booty Bay Bodyguard", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(5, 4, taunt=True)
**************************************************
**************************************************
example# 601
NAME_BEGIN Darkscale Healer NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Battlecry : Restore 2 Health to all friendly characters . DESC_END

class DarkscaleHealer(MinionCard):
    def __init__(self):
        super().__init__("Darkscale Healer", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Heal(2), CharacterSelector()))

    def create_minion(self, player):
        return Minion(4, 5)
**************************************************
**************************************************
example# 602
NAME_BEGIN Fiery War Axe NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN 2 DUR_END TYPE_BEGIN Weapon TYPE_END PLAYER_CLS_BEGIN Warrior PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN NIL DESC_END

class FieryWarAxe(WeaponCard):
    def __init__(self):
        super().__init__("Fiery War Axe", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.FREE)

    def create_weapon(self, player):
        return Weapon(3, 2)
**************************************************
**************************************************
example# 603
NAME_BEGIN Frostwolf Warlord NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Battlecry : Gain +1/+1 for each other friendly minion on the battlefield . DESC_END

class FrostwolfWarlord(MinionCard):
    def __init__(self):
        super().__init__("Frostwolf Warlord", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack(Count(MinionSelector()))), Buff(ChangeHealth(Count(MinionSelector())))]), SelfSelector()))

    def create_minion(self, player):
        return Minion(4, 4)
**************************************************
**************************************************
example# 604
NAME_BEGIN Hellfire NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Warlock PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Deal $ 3 damage to ALL characters . DESC_END

class Hellfire(SpellCard):
    def __init__(self):
        super().__init__("Hellfire", 4, CHARACTER_CLASS.WARLOCK, CARD_RARITY.FREE)

    def use(self, player, game):
        super().use(player, game)
        targets = copy.copy(game.other_player.minions)
        targets.extend(game.current_player.minions)
        targets.append(game.other_player.hero)
        targets.append(game.current_player.hero)
        for minion in targets:
            minion.damage(player.effective_spell_damage(3), self)
**************************************************
**************************************************
example# 605
NAME_BEGIN Innervate NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 0 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Gain 2 Mana Crystals this turn only . DESC_END

class Innervate(SpellCard):
    def __init__(self):
        super().__init__("Innervate", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE)

    def use(self, player, game):
        super().use(player, game)
        if player.mana < 8:
            player.mana += 2
        else:
            player.mana = 10
**************************************************
**************************************************
example# 606
NAME_BEGIN Magma Rager NAME_END ATK_BEGIN 5 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN NIL DESC_END

class MagmaRager(MinionCard):
    def __init__(self):
        super().__init__("Magma Rager", 3, CHARACTER_CLASS.ALL, CARD_RARITY.FREE)

    def create_minion(self, player):
        return Minion(5, 1)
**************************************************
**************************************************
example# 607
NAME_BEGIN Mortal Coil NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Warlock PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Deal $ 1 damage to a minion . If that kills it , draw a card . DESC_END

class MortalCoil(SpellCard):
    def __init__(self):
        super().__init__("Mortal Coil", 1, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        if self.target.health <= player.effective_spell_damage(1) and not self.target.divine_shield:
            self.target.damage(player.effective_spell_damage(1), self)
            player.draw()
        else:
            self.target.damage(player.effective_spell_damage(1), self)
**************************************************
**************************************************
example# 608
NAME_BEGIN Polymorph NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Mage PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Transform a minion into a 1/1 Sheep . DESC_END

class Polymorph(SpellCard):
    def __init__(self):
        super().__init__("Polymorph", 4, CHARACTER_CLASS.MAGE, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        from hearthbreaker.cards.minions.mage import Sheep
        sheep = Sheep()
        minion = sheep.create_minion(None)
        minion.card = sheep
        self.target.replace(minion)
**************************************************
**************************************************
example# 609
NAME_BEGIN Searing Totem NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Shaman PLAYER_CLS_END RACE_BEGIN Totem RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN NIL DESC_END

class SearingTotem(MinionCard):
    def __init__(self):
        super().__init__("Searing Totem", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)

    def create_minion(self, player):
        return Minion(1, 1)
**************************************************
**************************************************
example# 610
NAME_BEGIN Silverback Patriarch NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Taunt DESC_END

class SilverbackPatriarch(MinionCard):
    def __init__(self):
        super().__init__("Silverback Patriarch", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(1, 4, taunt=True)
**************************************************
**************************************************
example# 611
NAME_BEGIN Stormwind Knight NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Charge DESC_END

class StormwindKnight(MinionCard):
    def __init__(self):
        super().__init__("Stormwind Knight", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(2, 5, charge=True)
**************************************************
**************************************************
example# 612
NAME_BEGIN Voodoo Doctor NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Battlecry : Restore 2 Health . DESC_END

class VoodooDoctor(MinionCard):
    def __init__(self):
        super().__init__("Voodoo Doctor", 1, CHARACTER_CLASS.ALL, CARD_RARITY.FREE, battlecry=Battlecry(Heal(2), CharacterSelector(players=BothPlayer(), picker=UserPicker())))

    def create_minion(self, player):
        return Minion(2, 1)
**************************************************
**************************************************
example# 613
NAME_BEGIN Wrath of Air Totem NAME_END ATK_BEGIN 0 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Shaman PLAYER_CLS_END RACE_BEGIN Totem RACE_END RARITY_BEGIN Free RARITY_END DESC_BEGIN Spell Damage +1 DESC_END

class WrathOfAirTotem(MinionCard):
    def __init__(self):
        super().__init__("Wrath of Air Totem", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)

    def create_minion(self, player):
        return Minion(0, 2, spell_damage=1)
**************************************************
**************************************************
example# 614
NAME_BEGIN Astral Communion NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Gain 10 Mana Crystals . Discard your hand . DESC_END

class AstralCommunion(SpellCard):
    def __init__(self):
        super().__init__("Astral Communion", 4, CHARACTER_CLASS.DRUID, CARD_RARITY.EPIC)

    def use(self, player, game):
        super().use(player, game)
        for card in player.hand:
            card.unattach()
            player.trigger("card_discarded", card)
        player.hand = []
        player.max_mana = 10
        player.mana = 10
**************************************************
**************************************************
example# 615
NAME_BEGIN Annoy-o-Tron NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Taunt NL Divine Shield DESC_END

class AnnoyoTron(MinionCard):
    def __init__(self):
        super().__init__("Annoy-o-Tron", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)

    def create_minion(self, player):
        return Minion(1, 2, divine_shield=True, taunt=True)
**************************************************
**************************************************
example# 616
NAME_BEGIN Burly Rockjaw Trogg NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Whenever your opponent casts a spell , gain +2 Attack . DESC_END

class BurlyRockjawTrogg(MinionCard):
    def __init__(self):
        super().__init__("Burly Rockjaw Trogg", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(3, 5, effects=[Effect(SpellCast(player=EnemyPlayer()), ActionTag(Give(ChangeAttack(2)), SelfSelector()))])
**************************************************
**************************************************
example# 617
NAME_BEGIN Cogmaster 's Wrench NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN 3 DUR_END TYPE_BEGIN Weapon TYPE_END PLAYER_CLS_BEGIN Rogue PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Has +2 Attack while you have a Mech . DESC_END

class CogmastersWrench(WeaponCard):
    def __init__(self):
        super().__init__("Cogmaster's Wrench", 3, CHARACTER_CLASS.ROGUE, CARD_RARITY.EPIC)

    def create_weapon(self, player):
        return Weapon(1, 3, buffs=[Buff(ChangeAttack(2), GreaterThan(Count(MinionSelector(IsType(MINION_TYPE.MECH))), value=0))])
**************************************************
**************************************************
example# 618
NAME_BEGIN Echo of Medivh NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Mage PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Put a copy of each friendly minion into your hand . DESC_END

class EchoOfMedivh(SpellCard):
    def __init__(self):
        super().__init__("Echo of Medivh", 4, CHARACTER_CLASS.MAGE, CARD_RARITY.EPIC)

    def use(self, player, game):
        super().use(player, game)
        for minion in sorted(copy.copy(player.minions), key=lambda minion: minion.born):
            if len(player.hand) < 10:
                player.hand.append(minion.card)
**************************************************
**************************************************
example# 619
NAME_BEGIN Floating Watcher NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Warlock PLAYER_CLS_END RACE_BEGIN Demon RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Whenever your hero takes damage on your turn , gain +2/+2 . DESC_END

class FloatingWatcher(MinionCard):
    def __init__(self):
        super().__init__("Floating Watcher", 5, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON)

    def create_minion(self, player):
        return Minion(4, 4, effects=[Effect(CharacterDamaged(And(IsHero(), OwnersTurn())), ActionTag(Give([Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), SelfSelector()))])
**************************************************
**************************************************
example# 620
NAME_BEGIN Gnomish Experimenter NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Battlecry : Draw a card . If it 's a minion , transform it into a Chicken . DESC_END

class GnomishExperimenter(MinionCard):
    def __init__(self):
        super().__init__("Gnomish Experimenter", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=(Battlecry(Draw(), PlayerSelector()), Battlecry(Transform(GnomishChicken()), LastDrawnSelector(), Matches(LastDrawnSelector(), IsMinion()))))

    def create_minion(self, player):
        return Minion(3, 2)
**************************************************
**************************************************
example# 621
NAME_BEGIN Iron Juggernaut NAME_END ATK_BEGIN 6 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 6 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Warrior PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Battlecry : Shuffle a Mine into your opponent 's deck . When drawn , it explodes for 10 damage . DESC_END

class IronJuggernaut(MinionCard):
    def __init__(self):
        super().__init__("Iron Juggernaut", 6, CHARACTER_CLASS.WARRIOR, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH, battlecry=Battlecry(AddCard(BurrowingMine(), add_to_deck=True), PlayerSelector(EnemyPlayer())))

    def create_minion(self, player):
        return Minion(6, 5)
**************************************************
**************************************************
example# 622
NAME_BEGIN Madder Bomber NAME_END ATK_BEGIN 5 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Battlecry : Deal 6 damage randomly split between all other characters . DESC_END

class MadderBomber(MinionCard):
    def __init__(self):
        super().__init__("Madder Bomber", 5, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(Damage(1), CharacterSelector(players=BothPlayer(), picker=RandomPicker(6))))

    def create_minion(self, player):
        return Minion(5, 4)
**************************************************
**************************************************
example# 623
NAME_BEGIN Mini-Mage NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Stealth NL Spell Damage +1 DESC_END

class MiniMage(MinionCard):
    def __init__(self):
        super().__init__("Mini-Mage", 4, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC)

    def create_minion(self, player):
        return Minion(4, 1, stealth=True, spell_damage=1)
**************************************************
**************************************************
example# 624
NAME_BEGIN Piloted Sky Golem NAME_END ATK_BEGIN 6 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 6 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Mech RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Deathrattle : Summon a random 4-Cost minion . DESC_END

class PilotedSkyGolem(MinionCard):
    def __init__(self):
        super().__init__("Piloted Sky Golem", 6, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, minion_type=MINION_TYPE.MECH)

    def create_minion(self, player):
        return Minion(6, 4, deathrattle=Deathrattle(Summon(CardQuery(conditions=[ManaCost(4), IsMinion()])), PlayerSelector()))
**************************************************
**************************************************
example# 625
NAME_BEGIN Scarlet Purifier NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Paladin PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Battlecry : Deal 2 damage to all minions with Deathrattle . DESC_END

class ScarletPurifier(MinionCard):
    def __init__(self):
        super().__init__("Scarlet Purifier", 3, CHARACTER_CLASS.PALADIN, CARD_RARITY.RARE, battlecry=Battlecry(Damage(2), MinionSelector(MinionHasDeathrattle(), BothPlayer())))

    def create_minion(self, player):
        return Minion(4, 3)
**************************************************
**************************************************
example# 626
NAME_BEGIN Siltfin Spiritwalker NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Shaman PLAYER_CLS_END RACE_BEGIN Murloc RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Whenever another friendly Murloc dies , draw a card . Overload : ( 1 ) DESC_END

class SiltfinSpiritwalker(MinionCard):
    def __init__(self):
        super().__init__("Siltfin Spiritwalker", 4, CHARACTER_CLASS.SHAMAN, CARD_RARITY.EPIC, minion_type=MINION_TYPE.MURLOC, overload=1)

    def create_minion(self, player):
        return Minion(2, 5, effects=[Effect(MinionDied(IsType(MINION_TYPE.MURLOC)), ActionTag(Draw(), PlayerSelector()))])
**************************************************
**************************************************
example# 627
NAME_BEGIN Tinkertown Technician NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Battlecry : If you have a Mech , gain +1/+1 and add a Spare Part to your hand . DESC_END

class TinkertownTechnician(MinionCard):
    def __init__(self):
        from hearthbreaker.cards.spells.neutral import spare_part_list
        super().__init__("Tinkertown Technician", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=(Battlecry(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector(), GreaterThan(Count(MinionSelector(IsType(MINION_TYPE.MECH))), value=0)), Battlecry(AddCard(CardQuery(source=CARD_SOURCE.LIST, source_list=spare_part_list)), PlayerSelector(), GreaterThan(Count(MinionSelector(IsType(MINION_TYPE.MECH))), value=0))))

    def create_minion(self, player):
        return Minion(3, 3)
**************************************************
**************************************************
example# 628
NAME_BEGIN Vol'jin NAME_END ATK_BEGIN 6 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Priest PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Battlecry : Swap Health with another minion . DESC_END

class Voljin(MinionCard):
    def __init__(self):
        super().__init__("Vol'jin", 5, CHARACTER_CLASS.PRIEST, CARD_RARITY.LEGENDARY, battlecry=Battlecry(SwapStats("health", "health", True), MinionSelector(players=BothPlayer(), picker=UserPicker())))

    def create_minion(self, player):
        return Minion(6, 2)
**************************************************
**************************************************
example# 629
NAME_BEGIN Death 's Bite NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN 2 DUR_END TYPE_BEGIN Weapon TYPE_END PLAYER_CLS_BEGIN Warrior PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Deathrattle : Deal 1 damage to all minions . DESC_END

class DeathsBite(WeaponCard):
    def __init__(self):
        super().__init__("Death's Bite", 4, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON)

    def create_weapon(self, player):
        return Weapon(4, 2, deathrattle=Deathrattle(Damage(1), MinionSelector(players=BothPlayer())))
**************************************************
**************************************************
example# 630
NAME_BEGIN Maexxna NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 8 DEF_END COST_BEGIN 6 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Beast RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Destroy any minion damaged by this minion . DESC_END

class Maexxna(MinionCard):
    def __init__(self):
        super().__init__("Maexxna", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)

    def create_minion(self, player):
        return Minion(2, 8, effects=[Effect(DidDamage(), ActionTag(Kill(), TargetSelector(IsMinion())))])
**************************************************
**************************************************
example# 631
NAME_BEGIN Sludge Belcher NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Taunt . NL Deathrattle : Summon a 1/2 Slime with Taunt . DESC_END

class SludgeBelcher(MinionCard):
    def __init__(self):
        super().__init__("Sludge Belcher", 5, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)

    def create_minion(self, player):
        return Minion(3, 5, taunt=True, deathrattle=Deathrattle(Summon(Slime()), PlayerSelector()))
**************************************************
**************************************************
example# 632
NAME_BEGIN Voidcaller NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Warlock PLAYER_CLS_END RACE_BEGIN Demon RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Deathrattle : Put a random Demon from your hand into the battlefield . DESC_END

class Voidcaller(MinionCard):
    def __init__(self):
        super().__init__("Voidcaller", 4, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON)

    def create_minion(self, player):
        return Minion(3, 4, deathrattle=Deathrattle(Summon(CardQuery(conditions=[IsType(MINION_TYPE.DEMON)], source=CARD_SOURCE.MY_HAND)), PlayerSelector()))
**************************************************
**************************************************
example# 633
NAME_BEGIN Alexstrasza NAME_END ATK_BEGIN 8 ATK_END DEF_BEGIN 8 DEF_END COST_BEGIN 9 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Dragon RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN Battlecry : Set a hero 's remaining Health to 15 . DESC_END

class Alexstrasza(MinionCard):
    def __init__(self):
        super().__init__("Alexstrasza", 9, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DRAGON, battlecry=Battlecry(SetHealth(15), HeroSelector(players=BothPlayer(), picker=UserPicker())))

    def create_minion(self, player):
        return Minion(8, 8)
**************************************************
**************************************************
example# 634
NAME_BEGIN Arcane Golem NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Charge . Battlecry : Give your opponent a Mana Crystal . DESC_END

class ArcaneGolem(MinionCard):
    def __init__(self):
        super().__init__("Arcane Golem", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(GiveManaCrystal(), PlayerSelector(players=EnemyPlayer())))

    def create_minion(self, player):
        return Minion(4, 2, charge=True)
**************************************************
**************************************************
example# 635
NAME_BEGIN Baine Bloodhoof NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Legendary RARITY_END DESC_BEGIN NIL DESC_END

class BaineBloodhoof(MinionCard):
    def __init__(self):
        super().__init__("Baine Bloodhoof", 4, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, False)

    def create_minion(self, player):
        return Minion(4, 5)
**************************************************
**************************************************
example# 636
NAME_BEGIN Blade Flurry NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Rogue PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Destroy your weapon and deal its damage to all enemies . DESC_END

class BladeFlurry(SpellCard):
    def __init__(self):
        super().__init__("Blade Flurry", 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE)

    def use(self, player, game):
        super().use(player, game)

        if player.weapon is not None:
            attack_power = player.effective_spell_damage(player.hero.calculate_attack())
            player.weapon.destroy()

            for minion in copy.copy(game.other_player.minions):
                minion.damage(attack_power, self)

            game.other_player.hero.damage(attack_power, self)
**************************************************
**************************************************
example# 637
NAME_BEGIN Brawl NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Warrior PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Destroy all minions except one . ( chosen randomly ) DESC_END

class Brawl(SpellCard):
    def __init__(self):
        super().__init__("Brawl", 5, CHARACTER_CLASS.WARRIOR, CARD_RARITY.EPIC)

    def can_use(self, player, game):
        return super().can_use(player, game) and len(player.minions) + len(player.opponent.minions) >= 2

    def use(self, player, game):
        super().use(player, game)

        minions = copy.copy(player.minions)
        minions.extend(game.other_player.minions)

        if len(minions) > 1:
            survivor = game.random_choice(minions)
            for minion in minions:
                if minion is not survivor:
                    minion.die(self)
**************************************************
**************************************************
example# 638
NAME_BEGIN Conceal NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Rogue PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Give your minions Stealth until your next turn . DESC_END

class Conceal(SpellCard):
    def __init__(self):
        super().__init__("Conceal", 1, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON)

    def use(self, player, game):
        super().use(player, game)
        for minion in player.minions:
            if not minion.stealth:
                minion.add_buff(BuffUntil(Stealth(), TurnStarted()))
**************************************************
**************************************************
example# 639
NAME_BEGIN Defender NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Paladin PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN NIL DESC_END

class DefenderMinion(MinionCard):
    def __init__(self):
        super().__init__("Defender", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)

    def create_minion(self, p):
        return Minion(2, 1)
**************************************************
**************************************************
example# 640
NAME_BEGIN Doomguard NAME_END ATK_BEGIN 5 ATK_END DEF_BEGIN 7 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Warlock PLAYER_CLS_END RACE_BEGIN Demon RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Charge . Battlecry : Discard two random cards . DESC_END

class Doomguard(MinionCard):
    def __init__(self):
        super().__init__("Doomguard", 5, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON, battlecry=Battlecry(Discard(amount=2), PlayerSelector()))

    def create_minion(self, player):
        return Minion(5, 7, charge=True)
**************************************************
**************************************************
example# 641
NAME_BEGIN Earth Elemental NAME_END ATK_BEGIN 7 ATK_END DEF_BEGIN 8 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Shaman PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN Taunt . Overload : ( 3 ) DESC_END

class EarthElemental(MinionCard):
    def __init__(self):
        super().__init__("Earth Elemental", 5, CHARACTER_CLASS.SHAMAN, CARD_RARITY.EPIC, overload=3)

    def create_minion(self, player):
        return Minion(7, 8, taunt=True)
**************************************************
**************************************************
example# 642
NAME_BEGIN Explosive Trap NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Hunter PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Secret : When your hero is attacked , deal $ 2 damage to all enemies . DESC_END

class ExplosiveTrap(SecretCard):
    def __init__(self):
        super().__init__("Explosive Trap", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON)

    def activate(self, player):
        player.opponent.bind("character_attack", self._reveal)

    def deactivate(self, player):
        player.opponent.unbind("character_attack", self._reveal)

    def _reveal(self, attacker, target):
        if isinstance(target, Hero):
            game = attacker.player.game
            enemies = copy.copy(game.current_player.minions)
            enemies.append(game.current_player.hero)
            for enemy in enemies:
                enemy.damage(2, None)
            game.check_delayed()
            super().reveal()
**************************************************
**************************************************
example# 643
NAME_BEGIN Flame of Azzinoth NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN NIL DESC_END

class FlameOfAzzinoth(MinionCard):
    def __init__(self):
        super().__init__("Flame of Azzinoth", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False)

    def create_minion(self, player):
        return Minion(2, 1)
**************************************************
**************************************************
example# 644
NAME_BEGIN Gnoll NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN NIL RARITY_END DESC_BEGIN Taunt DESC_END

class Gnoll(MinionCard):
    def __init__(self):
        super().__init__("Gnoll", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False)

    def create_minion(self, player):
        return Minion(2, 2, taunt=True)
**************************************************
**************************************************
example# 645
NAME_BEGIN Holy Wrath NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Paladin PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Draw a card and deal damage equal to its cost . DESC_END

class HolyWrath(SpellCard):
    def __init__(self):
        super().__init__("Holy Wrath", 5, CHARACTER_CLASS.PALADIN, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_spell_target)

    def use(self, player, game):
        super().use(player, game)

        fatigue = False
        if player.deck.left == 0:
            fatigue = True

        player.draw()
        if not fatigue:
            cost = player.hand[-1].mana
            self.target.damage(player.effective_spell_damage(cost), self)
**************************************************
**************************************************
example# 646
NAME_BEGIN Infernal NAME_END ATK_BEGIN 6 ATK_END DEF_BEGIN 6 DEF_END COST_BEGIN 6 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Warlock PLAYER_CLS_END RACE_BEGIN Demon RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN NIL DESC_END

class Infernal(MinionCard):
    def __init__(self):
        super().__init__("Infernal", 6, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.DEMON)

    def create_minion(self, player):
        return Minion(6, 6)
**************************************************
**************************************************
example# 647
NAME_BEGIN Kirin Tor Mage NAME_END ATK_BEGIN 4 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Mage PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Battlecry : The next Secret you play this turn costs ( 0 ) . DESC_END

class KirinTorMage(MinionCard):
    def __init__(self):
        super().__init__("Kirin Tor Mage", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE, battlecry=Battlecry(GiveAura([AuraUntil(ManaChange(-100), CardSelector(condition=IsSecret()), CardPlayed(IsSecret()))]), PlayerSelector()))

    def create_minion(self, player):
        return Minion(4, 3)
**************************************************
**************************************************
example# 648
NAME_BEGIN Lightwarden NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Whenever a character is healed , gain +2 Attack . DESC_END

class Lightwarden(MinionCard):
    def __init__(self):
        super().__init__("Lightwarden", 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)

    def create_minion(self, player):
        return Minion(1, 2, effects=[Effect(CharacterHealed(player=BothPlayer()), ActionTag(Give(ChangeAttack(2)), SelfSelector()))])
**************************************************
**************************************************
example# 649
NAME_BEGIN Mana Wraith NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 2 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN ALL minions cost ( 1 ) more . DESC_END

class ManaWraith(MinionCard):
    def __init__(self):
        super().__init__("Mana Wraith", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)

    def create_minion(self, player):
        return Minion(2, 2, auras=[Aura(ManaChange(1), CardSelector(BothPlayer(), IsMinion()))])
**************************************************
**************************************************
example# 650
NAME_BEGIN Misdirection NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Hunter PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Secret : When a character attacks your hero , instead he attacks another random character . DESC_END

class Misdirection(SecretCard):
    def __init__(self):
        super().__init__("Misdirection", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)

    def activate(self, player):
        player.opponent.bind("character_attack", self._reveal)

    def deactivate(self, player):
        player.opponent.unbind("character_attack", self._reveal)

    def _reveal(self, character, target):
        if isinstance(target, Hero) and not character.removed:
            game = character.player.game
            possibilities = copy.copy(game.current_player.minions)
            possibilities.extend(game.other_player.minions)
            possibilities.append(game.current_player.hero)
            possibilities.append(game.other_player.hero)
            possibilities.remove(character.current_target)
            character.current_target = game.random_choice(possibilities)

            super().reveal()
**************************************************
**************************************************
example# 651
NAME_BEGIN Noble Sacrifice NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Paladin PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Secret : When an enemy attacks , summon a 2/1 Defender as the new target . DESC_END

class NobleSacrifice(SecretCard):
    def __init__(self):
        super().__init__("Noble Sacrifice", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)

    def _reveal(self, attacker, target):
        player = attacker.player.game.other_player
        if len(player.minions) < 7 and not attacker.removed:
            from hearthbreaker.cards.minions.paladin import DefenderMinion
            defender = DefenderMinion()
            defender.summon(player, player.game, len(player.minions))
            attacker.current_target = player.minions[-1]
            super().reveal()

    def activate(self, player):
        player.opponent.bind("character_attack", self._reveal)

    def deactivate(self, player):
        player.opponent.unbind("character_attack", self._reveal)
**************************************************
**************************************************
example# 652
NAME_BEGIN Power of the Wild NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 2 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Druid PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Choose One - Give your minions +1/+1 ; or Summon a 3/2 Panther . DESC_END

class PowerOfTheWild(SpellCard):
    def __init__(self):
        super().__init__("Power of the Wild", 2, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON)

    def use(self, player, game):
        super().use(player, game)
        option = player.agent.choose_option([LeaderOfThePack(), SummonPanther()], player)
        option.use(player, game)
**************************************************
**************************************************
example# 653
NAME_BEGIN Redemption NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Paladin PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Secret : When one of your minions dies , return it to life with 1 Health . DESC_END

class Redemption(SecretCard):
    def __init__(self):
        super().__init__("Redemption", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)

    def _reveal(self, minion, by):
        resurrection = minion.card.summon(minion.player, minion.game, min(minion.index, len(minion.player.minions)))
        if resurrection:
            resurrection.health = 1
            super().reveal()

    def activate(self, player):
        player.bind("minion_died", self._reveal)

    def deactivate(self, player):
        player.unbind("minion_died", self._reveal)
**************************************************
**************************************************
example# 654
NAME_BEGIN Shadow Madness NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Priest PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Gain control of an enemy minion with 3 or less Attack until end of turn . DESC_END

class ShadowMadness(SpellCard):
    def __init__(self):
        super().__init__("Shadow Madness", 4, CHARACTER_CLASS.PRIEST, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_enemy_minion_spell_target, filter_func=lambda target: target.calculate_attack() <= 3 and target.spell_targetable())

    def use(self, player, game):

        super().use(player, game)

        minion = self.target.copy(player)
        minion.active = True
        minion.exhausted = False

        self.target.remove_from_board()
        minion.add_to_board(len(player.minions))

        minion.add_buff(BuffUntil(Stolen(), TurnEnded()))

    def can_use(self, player, game):
        return super().can_use(player, game) and len(player.minions) < 7
**************************************************
**************************************************
example# 655
NAME_BEGIN Siphon Soul NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 6 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Warlock PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN Destroy a minion . Restore # 3 Health to your hero . DESC_END

class SiphonSoul(SpellCard):
    def __init__(self):
        super().__init__("Siphon Soul", 6, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_minion_spell_target)

    def use(self, player, game):
        super().use(player, game)
        self.target.die(self)
        player.hero.heal(player.effective_heal_power(3), self)
**************************************************
**************************************************
example# 656
NAME_BEGIN Spellbender NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 0 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Mage PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Epic RARITY_END DESC_BEGIN NIL DESC_END

class Spellbender(SecretCard):
    def __init__(self):
        super().__init__("Spellbender", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.EPIC)
        self.player = None

    def _reveal(self, card, index):
        if card.is_spell() and len(self.player.minions) < 7 and card.target and card.target.is_minion():
            SpellbenderMinion().summon(self.player, self.player.game, len(self.player.minions))
            card.target = self.player.minions[-1]
            super().reveal()

    def activate(self, player):
        player.game.current_player.bind("card_played", self._reveal)
        self.player = player

    def deactivate(self, player):
        player.game.current_player.unbind("card_played", self._reveal)
        self.player = None
**************************************************
**************************************************
example# 657
NAME_BEGIN Summoning Portal NAME_END ATK_BEGIN 0 ATK_END DEF_BEGIN 4 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Warlock PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Your minions cost ( 2 ) less , but not less than ( 1 ) . DESC_END

class SummoningPortal(MinionCard):
    def __init__(self):
        super().__init__("Summoning Portal", 4, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(0, 4, auras=[Aura(ManaChange(-2, 1, minimum=1), CardSelector(condition=IsMinion()))])
**************************************************
**************************************************
example# 658
NAME_BEGIN Thrallmar Farseer NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 3 DEF_END COST_BEGIN 3 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Windfury DESC_END

class ThrallmarFarseer(MinionCard):
    def __init__(self):
        super().__init__("Thrallmar Farseer", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(2, 3, windfury=True)
**************************************************
**************************************************
example# 659
NAME_BEGIN Upgrade ! NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Warrior PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Rare RARITY_END DESC_BEGIN If you have a weapon , give it +1/+1 . Otherwise equip a 1/3 weapon . DESC_END

class Upgrade(SpellCard):
    def __init__(self):
        super().__init__("Upgrade!", 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.RARE)

    def use(self, player, game):
        super().use(player, game)
        from hearthbreaker.cards.weapons.warrior import HeavyAxe
        if player.weapon:
            player.weapon.durability += 1
            player.weapon.base_attack += 1
        else:
            heavy_axe = HeavyAxe().create_weapon(player)
            heavy_axe.equip(player)
**************************************************
**************************************************
example# 660
NAME_BEGIN Wisp NAME_END ATK_BEGIN 1 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 0 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN NIL DESC_END

class Wisp(MinionCard):
    def __init__(self):
        super().__init__("Wisp", 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)

    def create_minion(self, player):
        return Minion(1, 1)
**************************************************
**************************************************
example# 661
NAME_BEGIN Black Whelp NAME_END ATK_BEGIN 2 ATK_END DEF_BEGIN 1 DEF_END COST_BEGIN 1 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Dragon RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN NIL DESC_END

class BlackWhelp(MinionCard):
    def __init__(self):
        super().__init__("Black Whelp", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, MINION_TYPE.DRAGON)

    def create_minion(self, player):
        return Minion(2, 1)
**************************************************
**************************************************
example# 662
NAME_BEGIN Dragonkin Sorcerer NAME_END ATK_BEGIN 3 ATK_END DEF_BEGIN 5 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Dragon RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Whenever you target this minion with a spell , gain +1/+1 . DESC_END

class DragonkinSorcerer(MinionCard):
    def __init__(self):
        super().__init__("Dragonkin Sorcerer", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON)

    def create_minion(self, player):
        return Minion(3, 5, effects=[Effect(SpellTargeted(), [ActionTag(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector())])])
**************************************************
**************************************************
example# 663
NAME_BEGIN Hungry Dragon NAME_END ATK_BEGIN 5 ATK_END DEF_BEGIN 6 DEF_END COST_BEGIN 4 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Minion TYPE_END PLAYER_CLS_BEGIN Neutral PLAYER_CLS_END RACE_BEGIN Dragon RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Battlecry : Summon a random 1-Cost minion for your opponent . DESC_END

class HungryDragon(MinionCard):
    def __init__(self):
        super().__init__("Hungry Dragon", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=(Battlecry(Summon(CardQuery(conditions=[ManaCost(1), IsMinion()])), PlayerSelector(EnemyPlayer()))))

    def create_minion(self, player):
        return Minion(5, 6)
**************************************************
**************************************************
example# 664
NAME_BEGIN Solemn Vigil NAME_END ATK_BEGIN -1 ATK_END DEF_BEGIN -1 DEF_END COST_BEGIN 5 COST_END DUR_BEGIN -1 DUR_END TYPE_BEGIN Spell TYPE_END PLAYER_CLS_BEGIN Paladin PLAYER_CLS_END RACE_BEGIN NIL RACE_END RARITY_BEGIN Common RARITY_END DESC_BEGIN Draw 2 cards . Costs ( 1 ) less for each minion that died this turn . DESC_END

class SolemnVigil(SpellCard):
    def __init__(self):
        super().__init__("Solemn Vigil", 5, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON, buffs=[Buff(ManaChange(Count(DeadMinionSelector(players=BothPlayer())), -1))])

    def use(self, player, game):
        super().use(player, game)
        for n in range(0, 2):
            player.draw()
**************************************************
