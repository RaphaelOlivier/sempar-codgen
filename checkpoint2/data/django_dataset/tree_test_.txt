(root (Assign (expr*{targets} (expr (Name (str{id}{val=params})))) (expr{value} (List (epsilon)))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=params})))) (expr{value} (List (expr*{elts} (expr (Subscript (expr{value} (Name (str{id}{val=source}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))))))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (List (expr*{elts} (expr (Subscript (expr{value} (Name (str{id}{val=source}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))) (expr (List (expr*{elts} (expr (Name (str{id}{val=params})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (List (expr*{elts} (expr (Str (str{s}{val=}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result_args})))) (expr{value} (List (expr*{elts} (expr (List (epsilon))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=pos}))) (expr (Name (str{id}{val=last})))) (expr{value} (Num (int{n}{val=0})))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=pos}))) (expr (Name (str{id}{val=elt})))))) (expr{iter} (Call (expr{func} (Name (str{id}{val=enumerate}))) (expr*{args} (expr (Name (str{id}{val=source})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=elt}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=string_types})))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=piece})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=}))) (str{attr}{val=join}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=source}))) (slice{slice} (Slice (expr{lower} (Name (str{id}{val=last}))) (expr{upper} (Name (str{id}{val=pos}))))))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=elt}))) (expr (Name (str{id}{val=Group})))))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=piece}))) (operator{op} (Add)) (expr{value} (Subscript (expr{value} (Name (str{id}{val=elt}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=param})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=elt}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=param})))) (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=last})))) (expr{value} (BinOp (expr{left} (Name (str{id}{val=pos}))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=1})))))))
(root (For (expr{target} (Name (str{id}{val=i}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=range}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=result}))))))))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Subscript (expr{value} (Name (str{id}{val=result}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=i}))))))) (operator{op} (Add)) (expr{value} (Name (str{id}{val=piece})))))
(root (If (expr{test} (Name (str{id}{val=param}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=result_args}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=i}))))))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=param}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=elt}))) (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=Choice}))) (expr (Name (str{id}{val=NonCapture}))))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=elt}))) (expr (Name (str{id}{val=NonCapture})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=elt})))) (expr{value} (List (expr*{elts} (expr (Name (str{id}{val=elt}))))))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=inner_result}))) (expr (Name (str{id}{val=inner_args}))))))) (expr{value} (Tuple (expr*{elts} (expr (List (epsilon))) (expr (List (epsilon))))))))
(root (For (expr{target} (Name (str{id}{val=item}))) (expr{iter} (Name (str{id}{val=elt}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=res}))) (expr (Name (str{id}{val=args}))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=flatten_result}))) (expr*{args} (expr (Name (str{id}{val=item}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=inner_result}))) (str{attr}{val=extend}))) (expr*{args} (expr (Name (str{id}{val=res}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=inner_args}))) (str{attr}{val=extend}))) (expr*{args} (expr (Name (str{id}{val=args}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=new_result})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=new_args})))) (expr{value} (List (epsilon)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=item}))) (expr (Name (str{id}{val=args})))))) (expr{iter} (Call (expr{func} (Name (str{id}{val=zip}))) (expr*{args} (expr (Name (str{id}{val=result}))) (expr (Name (str{id}{val=result_args})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=i_item}))) (expr (Name (str{id}{val=i_args})))))) (expr{iter} (Call (expr{func} (Name (str{id}{val=zip}))) (expr*{args} (expr (Name (str{id}{val=inner_result}))) (expr (Name (str{id}{val=inner_args})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=new_result}))) (str{attr}{val=append}))) (expr*{args} (expr (BinOp (expr{left} (Name (str{id}{val=item}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=i_item}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=new_args}))) (str{attr}{val=append}))) (expr*{args} (expr (BinOp (expr{left} (Subscript (expr{value} (Name (str{id}{val=args}))) (slice{slice} (Slice (epsilon))))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=i_args}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Name (str{id}{val=new_result})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result_args})))) (expr{value} (Name (str{id}{val=new_args})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=pos}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Name (str{id}{val=last})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=piece})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=}))) (str{attr}{val=join}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=source}))) (slice{slice} (Slice (expr{lower} (Name (str{id}{val=last}))))))))))))
(root (For (expr{target} (Name (str{id}{val=i}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=range}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=result}))))))))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Subscript (expr{value} (Name (str{id}{val=result}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=i}))))))) (operator{op} (Add)) (expr{value} (Name (str{id}{val=piece})))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=result}))) (expr (Name (str{id}{val=result_args}))))))))
(root (ImportFrom (str{module}{val=django.utils.functional}) (alias*{names} (alias (str{name}{val=curry})) (alias (str{name}{val=Promise}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=EscapeData}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (ClassDef (str{name}{val=EscapeBytes}) (expr*{bases} (expr (Name (str{id}{val=bytes}))) (expr (Name (str{id}{val=EscapeData})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (ClassDef (str{name}{val=EscapeText}) (expr*{bases} (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))) (expr (Name (str{id}{val=EscapeData})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=PY3}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=EscapeString})))) (expr{value} (Name (str{id}{val=EscapeText})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=EscapeString})))) (expr{value} (Name (str{id}{val=EscapeBytes})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=EscapeUnicode})))) (expr{value} (Name (str{id}{val=EscapeText})))))
(root (ClassDef (str{name}{val=SafeData}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__html__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=self})))))
(root (ClassDef (str{name}{val=SafeBytes}) (expr*{bases} (expr (Name (str{id}{val=bytes}))) (expr (Name (str{id}{val=SafeData})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__add__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=rhs})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=t})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=SafeBytes}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__add__}))) (expr*{args} (expr (Name (str{id}{val=rhs}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=rhs}))) (expr (Name (str{id}{val=SafeText})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=SafeText}))) (expr*{args} (expr (Name (str{id}{val=t}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=rhs}))) (expr (Name (str{id}{val=SafeBytes})))))) (stmt*{body} (stmt (Pass))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=SafeBytes}))) (expr*{args} (expr (Name (str{id}{val=t}))))))))
(root (Return (expr{value} (Name (str{id}{val=t})))))
(root (FunctionDef (str{name}{val=_proxy_method}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=method})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=kwargs}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=data})))) (expr{value} (Call (expr{func} (Name (str{id}{val=method}))) (expr*{args} (expr (Name (str{id}{val=self})))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=data}))) (expr (Name (str{id}{val=bytes})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=SafeBytes}))) (expr*{args} (expr (Name (str{id}{val=data}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=SafeText}))) (expr*{args} (expr (Name (str{id}{val=data}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=decode})))) (expr{value} (Call (expr{func} (Name (str{id}{val=curry}))) (expr*{args} (expr (Name (str{id}{val=_proxy_method})))) (keyword*{keywords} (keyword (str{arg}{val=method}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=bytes}))) (str{attr}{val=decode})))))))))
(root (ClassDef (str{name}{val=SafeText}) (expr*{bases} (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))) (expr (Name (str{id}{val=SafeData})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__add__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=rhs})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=t})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=SafeText}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__add__}))) (expr*{args} (expr (Name (str{id}{val=rhs}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=rhs}))) (expr (Name (str{id}{val=SafeData})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=SafeText}))) (expr*{args} (expr (Name (str{id}{val=t}))))))))
(root (Return (expr{value} (Name (str{id}{val=t})))))
(root (FunctionDef (str{name}{val=_proxy_method}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=method})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=kwargs}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=data})))) (expr{value} (Call (expr{func} (Name (str{id}{val=method}))) (expr*{args} (expr (Name (str{id}{val=self})))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=data}))) (expr (Name (str{id}{val=bytes})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=SafeBytes}))) (expr*{args} (expr (Name (str{id}{val=data}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=SafeText}))) (expr*{args} (expr (Name (str{id}{val=data}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=encode})))) (expr{value} (Call (expr{func} (Name (str{id}{val=curry}))) (expr*{args} (expr (Name (str{id}{val=_proxy_method})))) (keyword*{keywords} (keyword (str{arg}{val=method}) (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))) (str{attr}{val=encode})))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=PY3}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=SafeString})))) (expr{value} (Name (str{id}{val=SafeText})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=SafeString})))) (expr{value} (Name (str{id}{val=SafeBytes})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=SafeUnicode})))) (expr{value} (Name (str{id}{val=SafeText})))))
(root (FunctionDef (str{name}{val=mark_safe}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=s})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=s}))) (expr (Name (str{id}{val=SafeData})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=s})))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=s}))) (expr (Name (str{id}{val=bytes})))))) (expr (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=s}))) (expr (Name (str{id}{val=Promise})))))) (expr (Attribute (expr{value} (Name (str{id}{val=s}))) (str{attr}{val=_delegate_bytes}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=SafeBytes}))) (expr*{args} (expr (Name (str{id}{val=s}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=s}))) (expr (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))) (expr (Name (str{id}{val=Promise}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=SafeText}))) (expr*{args} (expr (Name (str{id}{val=s}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=SafeString}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Name (str{id}{val=s})))))))))))
(root (FunctionDef (str{name}{val=mark_for_escaping}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=s})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=s}))) (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=SafeData}))) (expr (Name (str{id}{val=EscapeData}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=s})))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=s}))) (expr (Name (str{id}{val=bytes})))))) (expr (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=s}))) (expr (Name (str{id}{val=Promise})))))) (expr (Attribute (expr{value} (Name (str{id}{val=s}))) (str{attr}{val=_delegate_bytes}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=EscapeBytes}))) (expr*{args} (expr (Name (str{id}{val=s}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=s}))) (expr (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))) (expr (Name (str{id}{val=Promise}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=EscapeText}))) (expr*{args} (expr (Name (str{id}{val=s}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=EscapeBytes}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=bytes}))) (expr*{args} (expr (Name (str{id}{val=s})))))))))))
(root (Import (alias*{names} (alias (str{name}{val=operator})))))
(root (Import (alias*{names} (alias (str{name}{val=sys})))))
(root (Import (alias*{names} (alias (str{name}{val=types})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__author__})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__version__})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=PY2})))) (expr{value} (Compare (expr{left} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=version_info}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=2}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=PY3})))) (expr{value} (Compare (expr{left} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=version_info}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=3}))))))))
(root (If (expr{test} (Name (str{id}{val=PY3}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=string_types})))) (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=str}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=integer_types})))) (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=int}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=class_types})))) (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=type}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=text_type})))) (expr{value} (Name (str{id}{val=str})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=binary_type})))) (expr{value} (Name (str{id}{val=bytes})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=MAXSIZE})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=maxsize})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=string_types})))) (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=basestring}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=integer_types})))) (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=int}))) (expr (Name (str{id}{val=long}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=class_types})))) (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=type}))) (expr (Attribute (expr{value} (Name (str{id}{val=types}))) (str{attr}{val=ClassType}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=text_type})))) (expr{value} (Name (str{id}{val=unicode})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=binary_type})))) (expr{value} (Name (str{id}{val=str})))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=platform}))) (str{attr}{val=startswith}))) (expr*{args} (expr (Str (str{s}{val=java})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=MAXSIZE})))) (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (BinOp (expr{left} (BinOp (expr{left} (Num (int{n}{val=1}))) (operator{op} (LShift)) (expr{right} (Num (int{n}{val=31}))))) (operator{op} (Sub)) (expr{right} (Num (int{n}{val=1}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (ClassDef (str{name}{val=X}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__len__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Num (int{n}{val=1}))) (operator{op} (LShift)) (expr{right} (Num (int{n}{val=31})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=X}))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=OverflowError}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=MAXSIZE})))) (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (BinOp (expr{left} (BinOp (expr{left} (Num (int{n}{val=1}))) (operator{op} (LShift)) (expr{right} (Num (int{n}{val=31}))))) (operator{op} (Sub)) (expr{right} (Num (int{n}{val=1}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=MAXSIZE})))) (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (BinOp (expr{left} (BinOp (expr{left} (Num (int{n}{val=1}))) (operator{op} (LShift)) (expr{right} (Num (int{n}{val=63}))))) (operator{op} (Sub)) (expr{right} (Num (int{n}{val=1}))))))))))
(root (Delete (expr*{targets} (expr (Name (str{id}{val=X}))))))
(root (FunctionDef (str{name}{val=_add_doc}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=func}))) (expr (Name (str{id}{val=doc})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=func}))) (str{attr}{val=__doc__})))) (expr{value} (Name (str{id}{val=doc})))))
(root (FunctionDef (str{name}{val=_import_module}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=__import__}))) (expr*{args} (expr (Name (str{id}{val=name}))))))))
(root (Return (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=modules}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=name})))))))))
(root (ClassDef (str{name}{val=_LazyDescr}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=name})))) (expr{value} (Name (str{id}{val=name})))))
(root (FunctionDef (str{name}{val=__get__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=obj}))) (expr (Name (str{id}{val=tp})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_resolve})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ImportError}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=AttributeError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=name}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=setattr}))) (expr*{args} (expr (Name (str{id}{val=obj}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=name}))) (expr (Name (str{id}{val=result}))))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=delattr}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=obj}))) (str{attr}{val=__class__}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=name}))))))))
(root (Return (expr{value} (Name (str{id}{val=result})))))
(root (ClassDef (str{name}{val=MovedModule}) (expr*{bases} (expr (Name (str{id}{val=_LazyDescr})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=old}))) (expr (Name (str{id}{val=new})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=MovedModule}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=name}))))))))
(root (If (expr{test} (Name (str{id}{val=PY3}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=new}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=new})))) (expr{value} (Name (str{id}{val=name})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=mod})))) (expr{value} (Name (str{id}{val=new})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=mod})))) (expr{value} (Name (str{id}{val=old})))))
(root (FunctionDef (str{name}{val=_resolve}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=_import_module}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=mod}))))))))
(root (FunctionDef (str{name}{val=__getattr__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=attr})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=attr}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))))))))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=mod}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=modules}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=AttributeError}))) (expr*{args} (expr (Name (str{id}{val=attr}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_module})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_resolve})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ImportError}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=AttributeError}))) (expr*{args} (expr (Name (str{id}{val=attr}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=_module}))) (expr (Name (str{id}{val=attr}))))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=setattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=attr}))) (expr (Name (str{id}{val=value}))))))))
(root (Return (expr{value} (Name (str{id}{val=value})))))
(root (ClassDef (str{name}{val=_LazyModule}) (expr*{bases} (expr (Attribute (expr{value} (Name (str{id}{val=types}))) (str{attr}{val=ModuleType})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=_LazyModule}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=name}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__doc__})))) (expr{value} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__class__}))) (str{attr}{val=__doc__})))))
(root (FunctionDef (str{name}{val=__dir__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=attrs})))) (expr{value} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))))))))
(root (AugAssign (expr{target} (Name (str{id}{val=attrs}))) (operator{op} (Add)) (expr{value} (ListComp (expr{elt} (Attribute (expr{value} (Name (str{id}{val=attr}))) (str{attr}{val=name}))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=attr}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_moved_attributes})))))))))
(root (Return (expr{value} (Name (str{id}{val=attrs})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_moved_attributes})))) (expr{value} (List (epsilon)))))
(root (ClassDef (str{name}{val=MovedAttribute}) (expr*{bases} (expr (Name (str{id}{val=_LazyDescr})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=old_mod}))) (expr (Name (str{id}{val=new_mod}))) (expr (Name (str{id}{val=old_attr}))) (expr (Name (str{id}{val=new_attr})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=MovedAttribute}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=name}))))))))
(root (If (expr{test} (Name (str{id}{val=PY3}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=new_mod}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=new_mod})))) (expr{value} (Name (str{id}{val=name})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=mod})))) (expr{value} (Name (str{id}{val=new_mod})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=new_attr}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=old_attr}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=new_attr})))) (expr{value} (Name (str{id}{val=name})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=new_attr})))) (expr{value} (Name (str{id}{val=old_attr})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=attr})))) (expr{value} (Name (str{id}{val=new_attr})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=mod})))) (expr{value} (Name (str{id}{val=old_mod})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=old_attr}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=old_attr})))) (expr{value} (Name (str{id}{val=name})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=attr})))) (expr{value} (Name (str{id}{val=old_attr})))))
(root (FunctionDef (str{name}{val=_resolve}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=module})))) (expr{value} (Call (expr{func} (Name (str{id}{val=_import_module}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=mod}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=module}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=attr}))))))))
(root (ClassDef (str{name}{val=_MovedItems}) (expr*{bases} (expr (Name (str{id}{val=_LazyModule})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_moved_attributes})))) (expr{value} (List (expr*{elts} (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=cStringIO}))) (expr (Str (str{s}{val=cStringIO}))) (expr (Str (str{s}{val=io}))) (expr (Str (str{s}{val=StringIO})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=filter}))) (expr (Str (str{s}{val=itertools}))) (expr (Str (str{s}{val=builtins}))) (expr (Str (str{s}{val=ifilter}))) (expr (Str (str{s}{val=filter})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=filterfalse}))) (expr (Str (str{s}{val=itertools}))) (expr (Str (str{s}{val=itertools}))) (expr (Str (str{s}{val=ifilterfalse}))) (expr (Str (str{s}{val=filterfalse})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=input}))) (expr (Str (str{s}{val=__builtin__}))) (expr (Str (str{s}{val=builtins}))) (expr (Str (str{s}{val=raw_input}))) (expr (Str (str{s}{val=input})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=map}))) (expr (Str (str{s}{val=itertools}))) (expr (Str (str{s}{val=builtins}))) (expr (Str (str{s}{val=imap}))) (expr (Str (str{s}{val=map})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=range}))) (expr (Str (str{s}{val=__builtin__}))) (expr (Str (str{s}{val=builtins}))) (expr (Str (str{s}{val=xrange}))) (expr (Str (str{s}{val=range})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=reload_module}))) (expr (Str (str{s}{val=__builtin__}))) (expr (Str (str{s}{val=imp}))) (expr (Str (str{s}{val=reload})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=reduce}))) (expr (Str (str{s}{val=__builtin__}))) (expr (Str (str{s}{val=functools})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=StringIO}))) (expr (Str (str{s}{val=StringIO}))) (expr (Str (str{s}{val=io})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=UserString}))) (expr (Str (str{s}{val=UserString}))) (expr (Str (str{s}{val=collections})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=xrange}))) (expr (Str (str{s}{val=__builtin__}))) (expr (Str (str{s}{val=builtins}))) (expr (Str (str{s}{val=xrange}))) (expr (Str (str{s}{val=range})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=zip}))) (expr (Str (str{s}{val=itertools}))) (expr (Str (str{s}{val=builtins}))) (expr (Str (str{s}{val=izip}))) (expr (Str (str{s}{val=zip})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=zip_longest}))) (expr (Str (str{s}{val=itertools}))) (expr (Str (str{s}{val=itertools}))) (expr (Str (str{s}{val=izip_longest}))) (expr (Str (str{s}{val=zip_longest})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedModule}))) (expr*{args} (expr (Str (str{s}{val=builtins}))) (expr (Str (str{s}{val=__builtin__})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedModule}))) (expr*{args} (expr (Str (str{s}{val=configparser}))) (expr (Str (str{s}{val=ConfigParser})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedModule}))) (expr*{args} (expr (Str (str{s}{val=copyreg}))) (expr (Str (str{s}{val=copy_reg})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedModule}))) (expr*{args} (expr (Str (str{s}{val=dbm_gnu}))) (expr (Str (str{s}{val=gdbm}))) (expr (Str (str{s}{val=dbm.gnu})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedModule}))) (expr*{args} (expr (Str (str{s}{val=http_cookiejar}))) (expr (Str (str{s}{val=cookielib}))) (expr (Str (str{s}{val=http.cookiejar})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedModule}))) (expr*{args} (expr (Str (str{s}{val=http_cookies}))) (expr (Str (str{s}{val=Cookie}))) (expr (Str (str{s}{val=http.cookies})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedModule}))) (expr*{args} (expr (Str (str{s}{val=html_entities}))) (expr (Str (str{s}{val=htmlentitydefs}))) (expr (Str (str{s}{val=html.entities})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedModule}))) (expr*{args} (expr (Str (str{s}{val=html_parser}))) (expr (Str (str{s}{val=HTMLParser}))) (expr (Str (str{s}{val=html.parser})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedModule}))) (expr*{args} (expr (Str (str{s}{val=http_client}))) (expr (Str (str{s}{val=httplib}))) (expr (Str (str{s}{val=http.client})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedModule}))) (expr*{args} (expr (Str (str{s}{val=email_mime_multipart}))) (expr (Str (str{s}{val=email.MIMEMultipart}))) (expr (Str (str{s}{val=email.mime.multipart})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedModule}))) (expr*{args} (expr (Str (str{s}{val=email_mime_text}))) (expr (Str (str{s}{val=email.MIMEText}))) (expr (Str (str{s}{val=email.mime.text})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedModule}))) (expr*{args} (expr (Str (str{s}{val=email_mime_base}))) (expr (Str (str{s}{val=email.MIMEBase}))) (expr (Str (str{s}{val=email.mime.base})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedModule}))) (expr*{args} (expr (Str (str{s}{val=BaseHTTPServer}))) (expr (Str (str{s}{val=BaseHTTPServer}))) (expr (Str (str{s}{val=http.server})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedModule}))) (expr*{args} (expr (Str (str{s}{val=CGIHTTPServer}))) (expr (Str (str{s}{val=CGIHTTPServer}))) (expr (Str (str{s}{val=http.server})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedModule}))) (expr*{args} (expr (Str (str{s}{val=SimpleHTTPServer}))) (expr (Str (str{s}{val=SimpleHTTPServer}))) (expr (Str (str{s}{val=http.server})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedModule}))) (expr*{args} (expr (Str (str{s}{val=cPickle}))) (expr (Str (str{s}{val=cPickle}))) (expr (Str (str{s}{val=pickle})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedModule}))) (expr*{args} (expr (Str (str{s}{val=queue}))) (expr (Str (str{s}{val=Queue})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedModule}))) (expr*{args} (expr (Str (str{s}{val=reprlib}))) (expr (Str (str{s}{val=repr})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedModule}))) (expr*{args} (expr (Str (str{s}{val=socketserver}))) (expr (Str (str{s}{val=SocketServer})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedModule}))) (expr*{args} (expr (Str (str{s}{val=_thread}))) (expr (Str (str{s}{val=thread}))) (expr (Str (str{s}{val=_thread})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedModule}))) (expr*{args} (expr (Str (str{s}{val=tkinter}))) (expr (Str (str{s}{val=Tkinter})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedModule}))) (expr*{args} (expr (Str (str{s}{val=tkinter_dialog}))) (expr (Str (str{s}{val=Dialog}))) (expr (Str (str{s}{val=tkinter.dialog})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedModule}))) (expr*{args} (expr (Str (str{s}{val=tkinter_filedialog}))) (expr (Str (str{s}{val=FileDialog}))) (expr (Str (str{s}{val=tkinter.filedialog})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedModule}))) (expr*{args} (expr (Str (str{s}{val=tkinter_scrolledtext}))) (expr (Str (str{s}{val=ScrolledText}))) (expr (Str (str{s}{val=tkinter.scrolledtext})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedModule}))) (expr*{args} (expr (Str (str{s}{val=tkinter_simpledialog}))) (expr (Str (str{s}{val=SimpleDialog}))) (expr (Str (str{s}{val=tkinter.simpledialog})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedModule}))) (expr*{args} (expr (Str (str{s}{val=tkinter_tix}))) (expr (Str (str{s}{val=Tix}))) (expr (Str (str{s}{val=tkinter.tix})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedModule}))) (expr*{args} (expr (Str (str{s}{val=tkinter_ttk}))) (expr (Str (str{s}{val=ttk}))) (expr (Str (str{s}{val=tkinter.ttk})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedModule}))) (expr*{args} (expr (Str (str{s}{val=tkinter_constants}))) (expr (Str (str{s}{val=Tkconstants}))) (expr (Str (str{s}{val=tkinter.constants})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedModule}))) (expr*{args} (expr (Str (str{s}{val=tkinter_dnd}))) (expr (Str (str{s}{val=Tkdnd}))) (expr (Str (str{s}{val=tkinter.dnd})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedModule}))) (expr*{args} (expr (Str (str{s}{val=tkinter_colorchooser}))) (expr (Str (str{s}{val=tkColorChooser}))) (expr (Str (str{s}{val=tkinter.colorchooser})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedModule}))) (expr*{args} (expr (Str (str{s}{val=tkinter_commondialog}))) (expr (Str (str{s}{val=tkCommonDialog}))) (expr (Str (str{s}{val=tkinter.commondialog})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedModule}))) (expr*{args} (expr (Str (str{s}{val=tkinter_tkfiledialog}))) (expr (Str (str{s}{val=tkFileDialog}))) (expr (Str (str{s}{val=tkinter.filedialog})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedModule}))) (expr*{args} (expr (Str (str{s}{val=tkinter_font}))) (expr (Str (str{s}{val=tkFont}))) (expr (Str (str{s}{val=tkinter.font})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedModule}))) (expr*{args} (expr (Str (str{s}{val=tkinter_messagebox}))) (expr (Str (str{s}{val=tkMessageBox}))) (expr (Str (str{s}{val=tkinter.messagebox})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedModule}))) (expr*{args} (expr (Str (str{s}{val=tkinter_tksimpledialog}))) (expr (Str (str{s}{val=tkSimpleDialog}))) (expr (Str (str{s}{val=tkinter.simpledialog})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedModule}))) (expr*{args} (expr (Str (str{s}{val=urllib_parse}))) (expr (BinOp (expr{left} (Name (str{id}{val=__name__}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=.moves.urllib_parse}))))) (expr (Str (str{s}{val=urllib.parse})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedModule}))) (expr*{args} (expr (Str (str{s}{val=urllib_error}))) (expr (BinOp (expr{left} (Name (str{id}{val=__name__}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=.moves.urllib_error}))))) (expr (Str (str{s}{val=urllib.error})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedModule}))) (expr*{args} (expr (Str (str{s}{val=urllib}))) (expr (BinOp (expr{left} (Name (str{id}{val=__name__}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=.moves.urllib}))))) (expr (BinOp (expr{left} (Name (str{id}{val=__name__}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=.moves.urllib})))))))) (expr (Call (expr{func} (Name (str{id}{val=MovedModule}))) (expr*{args} (expr (Str (str{s}{val=urllib_robotparser}))) (expr (Str (str{s}{val=robotparser}))) (expr (Str (str{s}{val=urllib.robotparser})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedModule}))) (expr*{args} (expr (Str (str{s}{val=xmlrpc_client}))) (expr (Str (str{s}{val=xmlrpclib}))) (expr (Str (str{s}{val=xmlrpc.client})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedModule}))) (expr*{args} (expr (Str (str{s}{val=xmlrpc_server}))) (expr (Str (str{s}{val=xmlrpclib}))) (expr (Str (str{s}{val=xmlrpc.server})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedModule}))) (expr*{args} (expr (Str (str{s}{val=winreg}))) (expr (Str (str{s}{val=_winreg})))))))))))
(root (For (expr{target} (Name (str{id}{val=attr}))) (expr{iter} (Name (str{id}{val=_moved_attributes}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=setattr}))) (expr*{args} (expr (Name (str{id}{val=_MovedItems}))) (expr (Attribute (expr{value} (Name (str{id}{val=attr}))) (str{attr}{val=name}))) (expr (Name (str{id}{val=attr}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=attr}))) (expr (Name (str{id}{val=MovedModule})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=modules}))) (slice{slice} (Index (expr{value} (BinOp (expr{left} (BinOp (expr{left} (Name (str{id}{val=__name__}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=.moves.}))))) (operator{op} (Add)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=attr}))) (str{attr}{val=name})))))))))) (expr{value} (Name (str{id}{val=attr})))))
(root (Delete (expr*{targets} (expr (Name (str{id}{val=attr}))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=_MovedItems}))) (str{attr}{val=_moved_attributes})))) (expr{value} (Name (str{id}{val=_moved_attributes})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=moves}))) (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=modules}))) (slice{slice} (Index (expr{value} (BinOp (expr{left} (Name (str{id}{val=__name__}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=.moves})))))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=_MovedItems}))) (expr*{args} (expr (BinOp (expr{left} (Name (str{id}{val=__name__}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=.moves}))))))))))
(root (ClassDef (str{name}{val=Module_six_moves_urllib_parse}) (expr*{bases} (expr (Name (str{id}{val=_LazyModule})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_urllib_parse_moved_attributes})))) (expr{value} (List (expr*{elts} (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=ParseResult}))) (expr (Str (str{s}{val=urlparse}))) (expr (Str (str{s}{val=urllib.parse})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=SplitResult}))) (expr (Str (str{s}{val=urlparse}))) (expr (Str (str{s}{val=urllib.parse})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=parse_qs}))) (expr (Str (str{s}{val=urlparse}))) (expr (Str (str{s}{val=urllib.parse})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=parse_qsl}))) (expr (Str (str{s}{val=urlparse}))) (expr (Str (str{s}{val=urllib.parse})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=urldefrag}))) (expr (Str (str{s}{val=urlparse}))) (expr (Str (str{s}{val=urllib.parse})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=urljoin}))) (expr (Str (str{s}{val=urlparse}))) (expr (Str (str{s}{val=urllib.parse})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=urlparse}))) (expr (Str (str{s}{val=urlparse}))) (expr (Str (str{s}{val=urllib.parse})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=urlsplit}))) (expr (Str (str{s}{val=urlparse}))) (expr (Str (str{s}{val=urllib.parse})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=urlunparse}))) (expr (Str (str{s}{val=urlparse}))) (expr (Str (str{s}{val=urllib.parse})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=urlunsplit}))) (expr (Str (str{s}{val=urlparse}))) (expr (Str (str{s}{val=urllib.parse})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=quote}))) (expr (Str (str{s}{val=urllib}))) (expr (Str (str{s}{val=urllib.parse})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=quote_plus}))) (expr (Str (str{s}{val=urllib}))) (expr (Str (str{s}{val=urllib.parse})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=unquote}))) (expr (Str (str{s}{val=urllib}))) (expr (Str (str{s}{val=urllib.parse})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=unquote_plus}))) (expr (Str (str{s}{val=urllib}))) (expr (Str (str{s}{val=urllib.parse})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=urlencode}))) (expr (Str (str{s}{val=urllib}))) (expr (Str (str{s}{val=urllib.parse})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=splitquery}))) (expr (Str (str{s}{val=urllib}))) (expr (Str (str{s}{val=urllib.parse})))))))))))
(root (For (expr{target} (Name (str{id}{val=attr}))) (expr{iter} (Name (str{id}{val=_urllib_parse_moved_attributes}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=setattr}))) (expr*{args} (expr (Name (str{id}{val=Module_six_moves_urllib_parse}))) (expr (Attribute (expr{value} (Name (str{id}{val=attr}))) (str{attr}{val=name}))) (expr (Name (str{id}{val=attr}))))))))
(root (Delete (expr*{targets} (expr (Name (str{id}{val=attr}))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=Module_six_moves_urllib_parse}))) (str{attr}{val=_moved_attributes})))) (expr{value} (Name (str{id}{val=_urllib_parse_moved_attributes})))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=modules}))) (slice{slice} (Index (expr{value} (BinOp (expr{left} (Name (str{id}{val=__name__}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=_STR:0_}))))))))) (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=modules}))) (slice{slice} (Index (expr{value} (BinOp (expr{left} (Name (str{id}{val=__name__}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=.moves.urllib.parse})))))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=Module_six_moves_urllib_parse}))) (expr*{args} (expr (BinOp (expr{left} (Name (str{id}{val=__name__}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=_STR:0_}))))))))))
(root (ClassDef (str{name}{val=Module_six_moves_urllib_error}) (expr*{bases} (expr (Name (str{id}{val=_LazyModule})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_urllib_error_moved_attributes})))) (expr{value} (List (expr*{elts} (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=URLError}))) (expr (Str (str{s}{val=urllib2}))) (expr (Str (str{s}{val=urllib.error})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=HTTPError}))) (expr (Str (str{s}{val=urllib2}))) (expr (Str (str{s}{val=urllib.error})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=ContentTooShortError}))) (expr (Str (str{s}{val=urllib}))) (expr (Str (str{s}{val=urllib.error})))))))))))
(root (For (expr{target} (Name (str{id}{val=attr}))) (expr{iter} (Name (str{id}{val=_urllib_error_moved_attributes}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=setattr}))) (expr*{args} (expr (Name (str{id}{val=Module_six_moves_urllib_error}))) (expr (Attribute (expr{value} (Name (str{id}{val=attr}))) (str{attr}{val=name}))) (expr (Name (str{id}{val=attr}))))))))
(root (Delete (expr*{targets} (expr (Name (str{id}{val=attr}))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=Module_six_moves_urllib_error}))) (str{attr}{val=_moved_attributes})))) (expr{value} (Name (str{id}{val=_urllib_error_moved_attributes})))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=modules}))) (slice{slice} (Index (expr{value} (BinOp (expr{left} (Name (str{id}{val=__name__}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=.moves.urllib_error}))))))))) (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=modules}))) (slice{slice} (Index (expr{value} (BinOp (expr{left} (Name (str{id}{val=__name__}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=_STR:0_})))))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=Module_six_moves_urllib_error}))) (expr*{args} (expr (BinOp (expr{left} (Name (str{id}{val=__name__}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=_STR:0_}))))))))))
(root (ClassDef (str{name}{val=Module_six_moves_urllib_request}) (expr*{bases} (expr (Name (str{id}{val=_LazyModule})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_urllib_request_moved_attributes})))) (expr{value} (List (expr*{elts} (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=urlopen}))) (expr (Str (str{s}{val=urllib2}))) (expr (Str (str{s}{val=urllib.request})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=install_opener}))) (expr (Str (str{s}{val=urllib2}))) (expr (Str (str{s}{val=urllib.request})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=build_opener}))) (expr (Str (str{s}{val=urllib2}))) (expr (Str (str{s}{val=urllib.request})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=pathname2url}))) (expr (Str (str{s}{val=urllib}))) (expr (Str (str{s}{val=urllib.request})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=url2pathname}))) (expr (Str (str{s}{val=urllib}))) (expr (Str (str{s}{val=urllib.request})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=getproxies}))) (expr (Str (str{s}{val=urllib}))) (expr (Str (str{s}{val=urllib.request})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=Request}))) (expr (Str (str{s}{val=urllib2}))) (expr (Str (str{s}{val=urllib.request})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=OpenerDirector}))) (expr (Str (str{s}{val=urllib2}))) (expr (Str (str{s}{val=urllib.request})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=HTTPDefaultErrorHandler}))) (expr (Str (str{s}{val=urllib2}))) (expr (Str (str{s}{val=urllib.request})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=HTTPRedirectHandler}))) (expr (Str (str{s}{val=urllib2}))) (expr (Str (str{s}{val=urllib.request})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=HTTPCookieProcessor}))) (expr (Str (str{s}{val=urllib2}))) (expr (Str (str{s}{val=urllib.request})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=ProxyHandler}))) (expr (Str (str{s}{val=urllib2}))) (expr (Str (str{s}{val=urllib.request})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=BaseHandler}))) (expr (Str (str{s}{val=urllib2}))) (expr (Str (str{s}{val=urllib.request})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=HTTPPasswordMgr}))) (expr (Str (str{s}{val=urllib2}))) (expr (Str (str{s}{val=urllib.request})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=HTTPPasswordMgrWithDefaultRealm}))) (expr (Str (str{s}{val=urllib2}))) (expr (Str (str{s}{val=urllib.request})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=AbstractBasicAuthHandler}))) (expr (Str (str{s}{val=urllib2}))) (expr (Str (str{s}{val=urllib.request})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=HTTPBasicAuthHandler}))) (expr (Str (str{s}{val=urllib2}))) (expr (Str (str{s}{val=urllib.request})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=ProxyBasicAuthHandler}))) (expr (Str (str{s}{val=urllib2}))) (expr (Str (str{s}{val=urllib.request})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=AbstractDigestAuthHandler}))) (expr (Str (str{s}{val=urllib2}))) (expr (Str (str{s}{val=urllib.request})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=HTTPDigestAuthHandler}))) (expr (Str (str{s}{val=urllib2}))) (expr (Str (str{s}{val=urllib.request})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=ProxyDigestAuthHandler}))) (expr (Str (str{s}{val=urllib2}))) (expr (Str (str{s}{val=urllib.request})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=HTTPHandler}))) (expr (Str (str{s}{val=urllib2}))) (expr (Str (str{s}{val=urllib.request})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=HTTPSHandler}))) (expr (Str (str{s}{val=urllib2}))) (expr (Str (str{s}{val=urllib.request})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=FileHandler}))) (expr (Str (str{s}{val=urllib2}))) (expr (Str (str{s}{val=urllib.request})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=FTPHandler}))) (expr (Str (str{s}{val=urllib2}))) (expr (Str (str{s}{val=urllib.request})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=CacheFTPHandler}))) (expr (Str (str{s}{val=urllib2}))) (expr (Str (str{s}{val=urllib.request})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=UnknownHandler}))) (expr (Str (str{s}{val=urllib2}))) (expr (Str (str{s}{val=urllib.request})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=HTTPErrorProcessor}))) (expr (Str (str{s}{val=urllib2}))) (expr (Str (str{s}{val=urllib.request})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=urlretrieve}))) (expr (Str (str{s}{val=urllib}))) (expr (Str (str{s}{val=urllib.request})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=urlcleanup}))) (expr (Str (str{s}{val=urllib}))) (expr (Str (str{s}{val=urllib.request})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=URLopener}))) (expr (Str (str{s}{val=urllib}))) (expr (Str (str{s}{val=urllib.request})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=FancyURLopener}))) (expr (Str (str{s}{val=urllib}))) (expr (Str (str{s}{val=urllib.request})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=proxy_bypass}))) (expr (Str (str{s}{val=urllib}))) (expr (Str (str{s}{val=urllib.request})))))))))))
(root (For (expr{target} (Name (str{id}{val=attr}))) (expr{iter} (Name (str{id}{val=_urllib_request_moved_attributes}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=setattr}))) (expr*{args} (expr (Name (str{id}{val=Module_six_moves_urllib_request}))) (expr (Attribute (expr{value} (Name (str{id}{val=attr}))) (str{attr}{val=name}))) (expr (Name (str{id}{val=attr}))))))))
(root (Delete (expr*{targets} (expr (Name (str{id}{val=attr}))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=Module_six_moves_urllib_request}))) (str{attr}{val=_moved_attributes})))) (expr{value} (Name (str{id}{val=_urllib_request_moved_attributes})))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=modules}))) (slice{slice} (Index (expr{value} (BinOp (expr{left} (Name (str{id}{val=__name__}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=.moves.urllib_request}))))))))) (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=modules}))) (slice{slice} (Index (expr{value} (BinOp (expr{left} (Name (str{id}{val=__name__}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=_STR:0_})))))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=Module_six_moves_urllib_request}))) (expr*{args} (expr (BinOp (expr{left} (Name (str{id}{val=__name__}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=_STR:0_}))))))))))
(root (ClassDef (str{name}{val=Module_six_moves_urllib_response}) (expr*{bases} (expr (Name (str{id}{val=_LazyModule})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_urllib_response_moved_attributes})))) (expr{value} (List (expr*{elts} (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=addbase}))) (expr (Str (str{s}{val=urllib}))) (expr (Str (str{s}{val=urllib.response})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=addclosehook}))) (expr (Str (str{s}{val=urllib}))) (expr (Str (str{s}{val=urllib.response})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=addinfo}))) (expr (Str (str{s}{val=urllib}))) (expr (Str (str{s}{val=urllib.response})))))) (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=addinfourl}))) (expr (Str (str{s}{val=urllib}))) (expr (Str (str{s}{val=urllib.response})))))))))))
(root (For (expr{target} (Name (str{id}{val=attr}))) (expr{iter} (Name (str{id}{val=_urllib_response_moved_attributes}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=setattr}))) (expr*{args} (expr (Name (str{id}{val=Module_six_moves_urllib_response}))) (expr (Attribute (expr{value} (Name (str{id}{val=attr}))) (str{attr}{val=name}))) (expr (Name (str{id}{val=attr}))))))))
(root (Delete (expr*{targets} (expr (Name (str{id}{val=attr}))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=Module_six_moves_urllib_response}))) (str{attr}{val=_moved_attributes})))) (expr{value} (Name (str{id}{val=_urllib_response_moved_attributes})))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=modules}))) (slice{slice} (Index (expr{value} (BinOp (expr{left} (Name (str{id}{val=__name__}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=.moves.urllib_response}))))))))) (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=modules}))) (slice{slice} (Index (expr{value} (BinOp (expr{left} (Name (str{id}{val=__name__}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=_STR:0_})))))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=Module_six_moves_urllib_response}))) (expr*{args} (expr (BinOp (expr{left} (Name (str{id}{val=__name__}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=_STR:0_}))))))))))
(root (ClassDef (str{name}{val=Module_six_moves_urllib_robotparser}) (expr*{bases} (expr (Name (str{id}{val=_LazyModule})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_urllib_robotparser_moved_attributes})))) (expr{value} (List (expr*{elts} (expr (Call (expr{func} (Name (str{id}{val=MovedAttribute}))) (expr*{args} (expr (Str (str{s}{val=RobotFileParser}))) (expr (Str (str{s}{val=robotparser}))) (expr (Str (str{s}{val=urllib.robotparser})))))))))))
(root (For (expr{target} (Name (str{id}{val=attr}))) (expr{iter} (Name (str{id}{val=_urllib_robotparser_moved_attributes}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=setattr}))) (expr*{args} (expr (Name (str{id}{val=Module_six_moves_urllib_robotparser}))) (expr (Attribute (expr{value} (Name (str{id}{val=attr}))) (str{attr}{val=name}))) (expr (Name (str{id}{val=attr}))))))))
(root (Delete (expr*{targets} (expr (Name (str{id}{val=attr}))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=Module_six_moves_urllib_robotparser}))) (str{attr}{val=_moved_attributes})))) (expr{value} (Name (str{id}{val=_urllib_robotparser_moved_attributes})))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=modules}))) (slice{slice} (Index (expr{value} (BinOp (expr{left} (Name (str{id}{val=__name__}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=.moves.urllib_robotparser}))))))))) (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=modules}))) (slice{slice} (Index (expr{value} (BinOp (expr{left} (Name (str{id}{val=__name__}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=_STR:0_})))))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=Module_six_moves_urllib_robotparser}))) (expr*{args} (expr (BinOp (expr{left} (Name (str{id}{val=__name__}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=_STR:0_}))))))))))
(root (ClassDef (str{name}{val=Module_six_moves_urllib}) (expr*{bases} (expr (Attribute (expr{value} (Name (str{id}{val=types}))) (str{attr}{val=ModuleType})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=parse})))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=modules}))) (slice{slice} (Index (expr{value} (BinOp (expr{left} (Name (str{id}{val=__name__}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=_STR:0_})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=error})))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=modules}))) (slice{slice} (Index (expr{value} (BinOp (expr{left} (Name (str{id}{val=__name__}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=_STR:0_})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=request})))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=modules}))) (slice{slice} (Index (expr{value} (BinOp (expr{left} (Name (str{id}{val=__name__}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=_STR:0_})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=response})))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=modules}))) (slice{slice} (Index (expr{value} (BinOp (expr{left} (Name (str{id}{val=__name__}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=_STR:0_})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=robotparser})))) (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=modules}))) (slice{slice} (Index (expr{value} (BinOp (expr{left} (Name (str{id}{val=__name__}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=_STR:0_})))))))))))
(root (FunctionDef (str{name}{val=__dir__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=_STR:3_}))) (expr (Str (str{s}{val=_STR:4_}))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=modules}))) (slice{slice} (Index (expr{value} (BinOp (expr{left} (Name (str{id}{val=__name__}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=_STR:0_})))))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=Module_six_moves_urllib}))) (expr*{args} (expr (BinOp (expr{left} (Name (str{id}{val=__name__}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=_STR:0_}))))))))))
(root (FunctionDef (str{name}{val=add_move}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=move})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=setattr}))) (expr*{args} (expr (Name (str{id}{val=_MovedItems}))) (expr (Attribute (expr{value} (Name (str{id}{val=move}))) (str{attr}{val=name}))) (expr (Name (str{id}{val=move}))))))))
(root (FunctionDef (str{name}{val=remove_move}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=name})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=delattr}))) (expr*{args} (expr (Name (str{id}{val=_MovedItems}))) (expr (Name (str{id}{val=name}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=AttributeError}))) (stmt*{body} (stmt (Pass)))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Delete (expr*{targets} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=moves}))) (str{attr}{val=__dict__}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=name}))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=KeyError}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=AttributeError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=name})))))))))))))
(root (If (expr{test} (Name (str{id}{val=PY3}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_meth_func})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_meth_self})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_func_closure})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_func_code})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_func_defaults})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_func_globals})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_iterkeys})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_itervalues})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_iteritems})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_iterlists})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_meth_func})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_meth_self})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_func_closure})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_func_code})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_func_defaults})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_func_globals})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_iterkeys})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_itervalues})))) (expr{value} (Str (str{s}{val=itervalues})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_iteritems})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_iterlists})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=advance_iterator})))) (expr{value} (Name (str{id}{val=next})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=NameError}))) (stmt*{body} (stmt (Pass)))))))
(root (FunctionDef (str{name}{val=advance_iterator}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=it})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=it}))) (str{attr}{val=next})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=next})))) (expr{value} (Name (str{id}{val=advance_iterator})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=callable})))) (expr{value} (Name (str{id}{val=callable})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=NameError}))) (stmt*{body} (stmt (Pass)))))))
(root (FunctionDef (str{name}{val=callable}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=obj})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=any}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=klass}))) (str{attr}{val=__dict__})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=klass}))) (expr{iter} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=type}))) (expr*{args} (expr (Name (str{id}{val=obj})))))) (str{attr}{val=__mro__}))))))))))))
(root (If (expr{test} (Name (str{id}{val=PY3}))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=get_unbound_function}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=unbound})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=unbound})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=create_bound_method})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=types}))) (str{attr}{val=MethodType})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=Iterator})))) (expr{value} (Name (str{id}{val=object})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=get_unbound_function}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=unbound})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=unbound}))) (str{attr}{val=im_func})))))
(root (FunctionDef (str{name}{val=create_bound_method}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=func}))) (expr (Name (str{id}{val=obj})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=types}))) (str{attr}{val=MethodType}))) (expr*{args} (expr (Name (str{id}{val=func}))) (expr (Name (str{id}{val=obj}))) (expr (Attribute (expr{value} (Name (str{id}{val=obj}))) (str{attr}{val=__class__}))))))))
(root (ClassDef (str{name}{val=Iterator}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=next}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=type}))) (expr*{args} (expr (Name (str{id}{val=self})))))) (str{attr}{val=__next__}))) (expr*{args} (expr (Name (str{id}{val=self}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=callable})))) (expr{value} (Name (str{id}{val=callable})))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=_add_doc}))) (expr*{args} (expr (Name (str{id}{val=get_unbound_function}))) (expr (Str (str{s}{val=_STR:0__STR:1__STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=get_method_function})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=operator}))) (str{attr}{val=attrgetter}))) (expr*{args} (expr (Name (str{id}{val=_meth_func}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=get_method_self})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=operator}))) (str{attr}{val=attrgetter}))) (expr*{args} (expr (Name (str{id}{val=_meth_self}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=get_function_closure})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=operator}))) (str{attr}{val=attrgetter}))) (expr*{args} (expr (Name (str{id}{val=_func_closure}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=get_function_code})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=operator}))) (str{attr}{val=attrgetter}))) (expr*{args} (expr (Name (str{id}{val=_func_code}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=get_function_defaults})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=operator}))) (str{attr}{val=attrgetter}))) (expr*{args} (expr (Name (str{id}{val=_func_defaults}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=get_function_globals})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=operator}))) (str{attr}{val=attrgetter}))) (expr*{args} (expr (Name (str{id}{val=_func_globals}))))))))
(root (FunctionDef (str{name}{val=iterkeys}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=d})))) (str{kwarg}{val=kw}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=iter}))) (expr*{args} (expr (Call (expr{func} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=d}))) (expr (Name (str{id}{val=_iterkeys})))))) (expr{kwargs} (Name (str{id}{val=kw}))))))))))
(root (FunctionDef (str{name}{val=itervalues}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=d})))) (str{kwarg}{val=kw}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=iter}))) (expr*{args} (expr (Call (expr{func} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=d}))) (expr (Name (str{id}{val=_itervalues})))))) (expr{kwargs} (Name (str{id}{val=kw}))))))))))
(root (FunctionDef (str{name}{val=iteritems}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=d})))) (str{kwarg}{val=kw}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=iter}))) (expr*{args} (expr (Call (expr{func} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=d}))) (expr (Name (str{id}{val=_iteritems})))))) (expr{kwargs} (Name (str{id}{val=kw}))))))))))
(root (FunctionDef (str{name}{val=iterlists}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=d})))) (str{kwarg}{val=kw}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=iter}))) (expr*{args} (expr (Call (expr{func} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=d}))) (expr (Name (str{id}{val=_iterlists})))))) (expr{kwargs} (Name (str{id}{val=kw}))))))))))
(root (If (expr{test} (Name (str{id}{val=PY3}))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=b}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=s})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=s}))) (str{attr}{val=encode}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=u}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=s})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=s})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=unichr})))) (expr{value} (Name (str{id}{val=chr})))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=version_info}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))) (cmpop*{ops} (cmpop (LtE))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=int2byte}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=i})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=bytes}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=i})))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=int2byte})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=operator}))) (str{attr}{val=methodcaller}))) (expr*{args} (expr (Str (str{s}{val=to_bytes}))) (expr (Num (int{n}{val=1}))) (expr (Str (str{s}{val=big}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=byte2int})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=operator}))) (str{attr}{val=itemgetter}))) (expr*{args} (expr (Num (int{n}{val=0}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=indexbytes})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=operator}))) (str{attr}{val=getitem})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=iterbytes})))) (expr{value} (Name (str{id}{val=iter})))))
(root (Import (alias*{names} (alias (str{name}{val=io})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=StringIO})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=io}))) (str{attr}{val=StringIO})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=BytesIO})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=io}))) (str{attr}{val=BytesIO})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=b}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=s})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=s})))))
(root (FunctionDef (str{name}{val=u}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=s})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=unicode}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=s}))) (str{attr}{val=replace}))) (expr*{args} (expr (Str (str{s}{val=\\}))) (expr (Str (str{s}{val=\\\\})))))) (expr (Str (str{s}{val=_STR:1_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=unichr})))) (expr{value} (Name (str{id}{val=unichr})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=int2byte})))) (expr{value} (Name (str{id}{val=chr})))))
(root (FunctionDef (str{name}{val=byte2int}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=bs})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=ord}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=bs}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))))))))
(root (FunctionDef (str{name}{val=indexbytes}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=buf}))) (expr (Name (str{id}{val=i})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=ord}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=buf}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=i}))))))))))))
(root (FunctionDef (str{name}{val=iterbytes}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=buf})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (GeneratorExp (expr{elt} (Call (expr{func} (Name (str{id}{val=ord}))) (expr*{args} (expr (Name (str{id}{val=byte})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=byte}))) (expr{iter} (Name (str{id}{val=buf})))))))))
(root (Import (alias*{names} (alias (str{name}{val=StringIO})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=StringIO}))) (expr (Name (str{id}{val=BytesIO})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=StringIO}))) (str{attr}{val=StringIO})))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=_add_doc}))) (expr*{args} (expr (Name (str{id}{val=b}))) (expr (Str (str{s}{val=_STR:0_Byte literal'_STR:0_'}))))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=_add_doc}))) (expr*{args} (expr (Name (str{id}{val=u}))) (expr (Str (str{s}{val=_STR:0__STR:1__STR:0_}))))))))
(root (If (expr{test} (Name (str{id}{val=PY3}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=exec_})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=moves}))) (str{attr}{val=builtins}))) (expr (Str (str{s}{val=exec}))))))))
(root (FunctionDef (str{name}{val=reraise}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=tp}))) (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=tb})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=__traceback__}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=tb})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=with_traceback}))) (expr*{args} (expr (Name (str{id}{val=tb}))))))))
(root (Raise (expr{type} (Name (str{id}{val=value})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=exec_}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=_code_}))) (expr (Name (str{id}{val=_globs_}))) (expr (Name (str{id}{val=_locs_})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=_globs_}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=frame})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=_getframe}))) (expr*{args} (expr (Num (int{n}{val=1}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_globs_})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=frame}))) (str{attr}{val=f_globals})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=_locs_}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_locs_})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=frame}))) (str{attr}{val=f_locals})))))
(root (Delete (expr*{targets} (expr (Name (str{id}{val=frame}))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Name (str{id}{val=_locs_}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_locs_})))) (expr{value} (Name (str{id}{val=_globs_})))))
(root (Exec (expr{body} (Str (str{s}{val=_STR:0_exec _code_ in _globs_, _locs_'_STR:0_'})))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=exec_}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_def reraise(tp, value, tb=None):     raise tp, value, tb '_STR:0_'}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=print_})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=moves}))) (str{attr}{val=builtins}))) (expr (Str (str{s}{val=print}))) (expr (Name (str{id}{val=None}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=print_}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=print_}) (arguments{args} (arguments (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=fp})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=kwargs}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=file}))) (expr (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=stdout}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=fp}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (epsilon)))
(root (FunctionDef (str{name}{val=write}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=data})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=data}))) (expr (Name (str{id}{val=basestring})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=data})))) (expr{value} (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Name (str{id}{val=data}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=fp}))) (expr (Name (str{id}{val=file})))))) (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=data}))) (expr (Name (str{id}{val=unicode})))))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=fp}))) (str{attr}{val=encoding}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=errors})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=fp}))) (expr (Str (str{s}{val=errors}))) (expr (Name (str{id}{val=None}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=errors}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=errors})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=data})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=data}))) (str{attr}{val=encode}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=fp}))) (str{attr}{val=encoding}))) (expr (Name (str{id}{val=errors}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=fp}))) (str{attr}{val=write}))) (expr*{args} (expr (Name (str{id}{val=data}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=want_unicode})))) (expr{value} (Name (str{id}{val=False})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=sep})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=kwargs}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=sep}))) (expr (Name (str{id}{val=None}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=sep}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=sep}))) (expr (Name (str{id}{val=unicode})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=want_unicode})))) (expr{value} (Name (str{id}{val=True})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=sep}))) (expr (Name (str{id}{val=str})))))))) (stmt*{body} (stmt (Pass))))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TypeError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=end})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=kwargs}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=end}))) (expr (Name (str{id}{val=None}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=end}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=end}))) (expr (Name (str{id}{val=unicode})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=want_unicode})))) (expr{value} (Name (str{id}{val=True})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=end}))) (expr (Name (str{id}{val=str})))))))) (stmt*{body} (stmt (Pass))))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TypeError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Name (str{id}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TypeError}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=want_unicode}))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=arg}))) (expr{iter} (Name (str{id}{val=args}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=arg}))) (expr (Name (str{id}{val=unicode})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=want_unicode})))) (expr{value} (Name (str{id}{val=True})))))
(root (Break))
(root (If (expr{test} (Name (str{id}{val=want_unicode}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=newline})))) (expr{value} (Call (expr{func} (Name (str{id}{val=unicode}))) (expr*{args} (expr (Str (str{s}{val=\n}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=space})))) (expr{value} (Call (expr{func} (Name (str{id}{val=unicode}))) (expr*{args} (expr (Str (str{s}{val= }))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=newline})))) (expr{value} (Str (str{s}{val=\n})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=space})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=sep}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=sep})))) (expr{value} (Name (str{id}{val=space})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=end}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=end})))) (expr{value} (Name (str{id}{val=newline})))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=i}))) (expr (Name (str{id}{val=arg})))))) (expr{iter} (Call (expr{func} (Name (str{id}{val=enumerate}))) (expr*{args} (expr (Name (str{id}{val=args})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=i}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=write}))) (expr*{args} (expr (Name (str{id}{val=sep}))))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=write}))) (expr*{args} (expr (Name (str{id}{val=arg}))))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=write}))) (expr*{args} (expr (Name (str{id}{val=end}))))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=_add_doc}))) (expr*{args} (expr (Name (str{id}{val=reraise}))) (expr (Str (str{s}{val=_STR:0__STR:1__STR:0_}))))))))
(root (FunctionDef (str{name}{val=with_metaclass}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=meta})))) (str{vararg}{val=bases}))) (stmt*{body} (stmt (Pass)))))
(root (ClassDef (str{name}{val=metaclass}) (expr*{bases} (expr (Name (str{id}{val=meta})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__call__})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=type}))) (str{attr}{val=__call__})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__init__})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=type}))) (str{attr}{val=__init__})))))
(root (FunctionDef (str{name}{val=__new__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=cls}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=this_bases}))) (expr (Name (str{id}{val=d})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=this_bases}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=type}))) (str{attr}{val=__new__}))) (expr*{args} (expr (Name (str{id}{val=cls}))) (expr (Name (str{id}{val=name}))) (expr (Tuple (epsilon))) (expr (Name (str{id}{val=d}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=meta}))) (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=bases}))) (expr (Name (str{id}{val=d}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=metaclass}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))) (expr (Dict (epsilon))))))))
(root (FunctionDef (str{name}{val=add_metaclass}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=metaclass})))))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=wrapper}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=cls})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=orig_vars})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=cls}))) (str{attr}{val=__dict__}))) (str{attr}{val=copy})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=orig_vars}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=orig_vars}))) (str{attr}{val=pop}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=slots})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=orig_vars}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=slots}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=slots}))) (expr (Name (str{id}{val=str})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=slots})))) (expr{value} (List (expr*{elts} (expr (Name (str{id}{val=slots}))))))))
(root (For (expr{target} (Name (str{id}{val=slots_var}))) (expr{iter} (Name (str{id}{val=slots}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=orig_vars}))) (str{attr}{val=pop}))) (expr*{args} (expr (Name (str{id}{val=slots_var}))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=metaclass}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=cls}))) (str{attr}{val=__name__}))) (expr (Attribute (expr{value} (Name (str{id}{val=cls}))) (str{attr}{val=__bases__}))) (expr (Name (str{id}{val=orig_vars}))))))))
(root (Return (expr{value} (Name (str{id}{val=wrapper})))))
(root (If (expr{test} (Name (str{id}{val=PY3}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_assertCountEqual})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_assertRaisesRegex})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_assertRegex})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=memoryview})))) (expr{value} (Name (str{id}{val=memoryview})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=buffer_types})))) (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=bytes}))) (expr (Name (str{id}{val=bytearray}))) (expr (Name (str{id}{val=memoryview}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_assertCountEqual})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_assertRaisesRegex})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_assertRegex})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=platform}))) (str{attr}{val=startswith}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=memoryview})))) (expr{value} (Name (str{id}{val=memoryview})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=memoryview})))) (expr{value} (Name (str{id}{val=buffer})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=buffer_types})))) (expr{value} (Tuple (expr*{elts} (expr (Name (str{id}{val=bytearray}))) (expr (Name (str{id}{val=memoryview}))))))))
(root (FunctionDef (str{name}{val=assertCountEqual}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=_assertCountEqual})))))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (FunctionDef (str{name}{val=assertRaisesRegex}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=_assertRaisesRegex})))))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (FunctionDef (str{name}{val=assertRegex}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))) (str{vararg}{val=args}) (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=_assertRegex})))))) (expr{starargs} (Name (str{id}{val=args}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=add_move}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=MovedModule}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_})))))))))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=add_move}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=MovedModule}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_})))))))))))
(root (Import (alias*{names} (alias (str{name}{val=contextlib})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Import (alias*{names} (alias (str{name}{val=threading})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ImportError}))) (stmt*{body} (stmt (Pass)))))))
(root (Import (alias*{names} (alias (str{name}{val=dummy_threading}) (str{asname}{val=threading})))))
(root (ClassDef (str{name}{val=RWLock}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=mutex})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=threading}))) (str{attr}{val=RLock})))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=can_read})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=threading}))) (str{attr}{val=Semaphore}))) (expr*{args} (expr (Num (int{n}{val=0}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=can_write})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=threading}))) (str{attr}{val=Semaphore}))) (expr*{args} (expr (Num (int{n}{val=0}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=active_readers})))) (expr{value} (Num (int{n}{val=0})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=active_writers})))) (expr{value} (Num (int{n}{val=0})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=waiting_readers})))) (expr{value} (Num (int{n}{val=0})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=waiting_writers})))) (expr{value} (Num (int{n}{val=0})))))
(root (FunctionDef (str{name}{val=reader_enters}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (With (expr{context_expr} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=mutex}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=active_writers}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=waiting_writers}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=0}))))))))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=active_readers}))) (operator{op} (Add)) (expr{value} (Num (int{n}{val=1})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=can_read}))) (str{attr}{val=release})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (AugAssign (expr{target} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=waiting_readers}))) (operator{op} (Add)) (expr{value} (Num (int{n}{val=1})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=can_read}))) (str{attr}{val=acquire})))))))
(root (FunctionDef (str{name}{val=reader_leaves}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (With (expr{context_expr} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=mutex}))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=active_readers}))) (operator{op} (Sub)) (expr{value} (Num (int{n}{val=1})))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=active_readers}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=waiting_writers}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Num (int{n}{val=0}))))))))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=active_writers}))) (operator{op} (Add)) (expr{value} (Num (int{n}{val=1})))))
(root (AugAssign (expr{target} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=waiting_writers}))) (operator{op} (Sub)) (expr{value} (Num (int{n}{val=1})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=can_write}))) (str{attr}{val=release})))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Attribute (expr{value} (Name (str{id}{val=contextlib}))) (str{attr}{val=contextmanager}))))))
(root (FunctionDef (str{name}{val=reader}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=reader_enters})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Yield (epsilon)))))
(root (TryFinally (stmt*{body} (stmt (Pass))) (stmt*{finalbody} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=reader_leaves})))))))
(root (FunctionDef (str{name}{val=writer_enters}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (With (expr{context_expr} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=mutex}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=active_writers}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=waiting_writers}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=active_readers}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=0}))))))))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=active_writers}))) (operator{op} (Add)) (expr{value} (Num (int{n}{val=1})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=can_write}))) (str{attr}{val=release})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (AugAssign (expr{target} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=waiting_writers}))) (operator{op} (Add)) (expr{value} (Num (int{n}{val=1})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=can_write}))) (str{attr}{val=acquire})))))))
(root (FunctionDef (str{name}{val=writer_leaves}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (With (expr{context_expr} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=mutex}))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=active_writers}))) (operator{op} (Sub)) (expr{value} (Num (int{n}{val=1})))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=waiting_writers}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=active_writers}))) (operator{op} (Add)) (expr{value} (Num (int{n}{val=1})))))
(root (AugAssign (expr{target} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=waiting_writers}))) (operator{op} (Sub)) (expr{value} (Num (int{n}{val=1})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=can_write}))) (str{attr}{val=release})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=waiting_readers}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=t})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=waiting_readers})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=waiting_readers})))) (expr{value} (Num (int{n}{val=0})))))
(root (AugAssign (expr{target} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=active_readers}))) (operator{op} (Add)) (expr{value} (Name (str{id}{val=t})))))
(root (While (expr{test} (Compare (expr{left} (Name (str{id}{val=t}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=can_read}))) (str{attr}{val=release})))))))
(root (AugAssign (expr{target} (Name (str{id}{val=t}))) (operator{op} (Sub)) (expr{value} (Num (int{n}{val=1})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Attribute (expr{value} (Name (str{id}{val=contextlib}))) (str{attr}{val=contextmanager}))))))
(root (FunctionDef (str{name}{val=writer}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=writer_enters})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Expr (expr{value} (Yield (epsilon)))))
(root (TryFinally (stmt*{body} (stmt (Pass))) (stmt*{finalbody} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=writer_leaves})))))))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=color_names})))) (expr{value} (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=_STR:3_}))) (expr (Str (str{s}{val=_STR:4_}))) (expr (Str (str{s}{val=_STR:5_}))) (expr (Str (str{s}{val=_STR:6_}))) (expr (Str (str{s}{val=_STR:7_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=foreground})))) (expr{value} (Call (expr{func} (Name (str{id}{val=dict}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Tuple (expr*{elts} (expr (Subscript (expr{value} (Name (str{id}{val=color_names}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=x}))))))) (expr (BinOp (expr{left} (Str (str{s}{val=3%s}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=x})))))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=x}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=range}))) (expr*{args} (expr (Num (int{n}{val=8})))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=background})))) (expr{value} (Call (expr{func} (Name (str{id}{val=dict}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Tuple (expr*{elts} (expr (Subscript (expr{value} (Name (str{id}{val=color_names}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=x}))))))) (expr (BinOp (expr{left} (Str (str{s}{val=4%s}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=x})))))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=x}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=range}))) (expr*{args} (expr (Num (int{n}{val=8})))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=RESET})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=opt_dict})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:3_}))) (expr (Str (str{s}{val=_STR:5_}))) (expr (Str (str{s}{val=_STR:7_}))) (expr (Str (str{s}{val=conceal})))) (expr*{values} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=_STR:4_}))) (expr (Str (str{s}{val=_STR:6_}))) (expr (Str (str{s}{val=8}))))))))
(root (FunctionDef (str{name}{val=colorize}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=text}))) (expr (Name (str{id}{val=opts})))) (str{kwarg}{val=kwargs}) (expr*{defaults} (expr (Str (str{s}{val=}))) (expr (Tuple (epsilon)))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=code_list})))) (expr{value} (List (epsilon)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=text}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=})))))) (expr (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=opts})))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (expr (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=opts}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=RESET})))))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=k}))) (expr (Name (str{id}{val=v})))))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=iteritems}))) (expr*{args} (expr (Name (str{id}{val=kwargs})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=k}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=code_list}))) (str{attr}{val=append}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=foreground}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=v}))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Name (str{id}{val=k}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=code_list}))) (str{attr}{val=append}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=background}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=v}))))))))))))
(root (For (expr{target} (Name (str{id}{val=o}))) (expr{iter} (Name (str{id}{val=opts}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=o}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=opt_dict})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=code_list}))) (str{attr}{val=append}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=opt_dict}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=o}))))))))))))
(root (If (expr{test} (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=opts})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=text})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=text}))) (expr (Str (str{s}{val=})))))) (expr (Name (str{id}{val=RESET}))))))))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=%s%s}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:1_}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=_STR:0_}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=code_list})))))))) (expr (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=text}))) (expr (Str (str{s}{val=})))))))))))))
(root (FunctionDef (str{name}{val=make_style}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=opts})))) (str{kwarg}{val=kwargs}) (expr*{defaults} (expr (Tuple (epsilon)))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=text})))))) (expr{body} (Call (expr{func} (Name (str{id}{val=colorize}))) (expr*{args} (expr (Name (str{id}{val=text}))) (expr (Name (str{id}{val=opts})))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=NOCOLOR_PALETTE})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=DARK_PALETTE})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=LIGHT_PALETTE})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=PALETTES})))) (expr{value} (Dict (expr*{keys} (expr (Name (str{id}{val=NOCOLOR_PALETTE}))) (expr (Name (str{id}{val=DARK_PALETTE}))) (expr (Name (str{id}{val=LIGHT_PALETTE})))) (expr*{values} (expr (Dict (expr*{keys} (expr (Str (str{s}{val=ERROR}))) (expr (Str (str{s}{val=WARNING}))) (expr (Str (str{s}{val=NOTICE}))) (expr (Str (str{s}{val=SQL_FIELD}))) (expr (Str (str{s}{val=SQL_COLTYPE}))) (expr (Str (str{s}{val=SQL_KEYWORD}))) (expr (Str (str{s}{val=SQL_TABLE}))) (expr (Str (str{s}{val=HTTP_INFO}))) (expr (Str (str{s}{val=HTTP_SUCCESS}))) (expr (Str (str{s}{val=HTTP_REDIRECT}))) (expr (Str (str{s}{val=HTTP_NOT_MODIFIED}))) (expr (Str (str{s}{val=HTTP_BAD_REQUEST}))) (expr (Str (str{s}{val=HTTP_NOT_FOUND}))) (expr (Str (str{s}{val=HTTP_SERVER_ERROR}))) (expr (Str (str{s}{val=MIGRATE_HEADING}))) (expr (Str (str{s}{val=MIGRATE_LABEL}))) (expr (Str (str{s}{val=MIGRATE_SUCCESS}))) (expr (Str (str{s}{val=MIGRATE_FAILURE})))) (expr*{values} (expr (Dict (epsilon))) (expr (Dict (epsilon))) (expr (Dict (epsilon))) (expr (Dict (epsilon))) (expr (Dict (epsilon))) (expr (Dict (epsilon))) (expr (Dict (epsilon))) (expr (Dict (epsilon))) (expr (Dict (epsilon))) (expr (Dict (epsilon))) (expr (Dict (epsilon))) (expr (Dict (epsilon))) (expr (Dict (epsilon))) (expr (Dict (epsilon))) (expr (Dict (epsilon))) (expr (Dict (epsilon))) (expr (Dict (epsilon))) (expr (Dict (epsilon)))))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=ERROR}))) (expr (Str (str{s}{val=WARNING}))) (expr (Str (str{s}{val=NOTICE}))) (expr (Str (str{s}{val=SQL_FIELD}))) (expr (Str (str{s}{val=SQL_COLTYPE}))) (expr (Str (str{s}{val=SQL_KEYWORD}))) (expr (Str (str{s}{val=SQL_TABLE}))) (expr (Str (str{s}{val=HTTP_INFO}))) (expr (Str (str{s}{val=HTTP_SUCCESS}))) (expr (Str (str{s}{val=HTTP_REDIRECT}))) (expr (Str (str{s}{val=HTTP_NOT_MODIFIED}))) (expr (Str (str{s}{val=HTTP_BAD_REQUEST}))) (expr (Str (str{s}{val=HTTP_NOT_FOUND}))) (expr (Str (str{s}{val=HTTP_SERVER_ERROR}))) (expr (Str (str{s}{val=MIGRATE_HEADING}))) (expr (Str (str{s}{val=MIGRATE_LABEL}))) (expr (Str (str{s}{val=MIGRATE_SUCCESS}))) (expr (Str (str{s}{val=MIGRATE_FAILURE})))) (expr*{values} (expr (Dict (expr*{keys} (expr (Str (str{s}{val=fg}))) (expr (Str (str{s}{val=opts})))) (expr*{values} (expr (Str (str{s}{val=red}))) (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=bold}))))))))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=fg}))) (expr (Str (str{s}{val=opts})))) (expr*{values} (expr (Str (str{s}{val=yellow}))) (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=bold}))))))))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=fg})))) (expr*{values} (expr (Str (str{s}{val=red})))))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=fg}))) (expr (Str (str{s}{val=opts})))) (expr*{values} (expr (Str (str{s}{val=green}))) (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=bold}))))))))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=fg})))) (expr*{values} (expr (Str (str{s}{val=green})))))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=fg})))) (expr*{values} (expr (Str (str{s}{val=yellow})))))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=opts})))) (expr*{values} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=bold}))))))))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=opts})))) (expr*{values} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=bold}))))))))) (expr (Dict (epsilon))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=fg})))) (expr*{values} (expr (Str (str{s}{val=green})))))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=fg})))) (expr*{values} (expr (Str (str{s}{val=cyan})))))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=fg}))) (expr (Str (str{s}{val=opts})))) (expr*{values} (expr (Str (str{s}{val=red}))) (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=bold}))))))))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=fg})))) (expr*{values} (expr (Str (str{s}{val=yellow})))))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=fg}))) (expr (Str (str{s}{val=opts})))) (expr*{values} (expr (Str (str{s}{val=magenta}))) (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=bold}))))))))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=fg}))) (expr (Str (str{s}{val=opts})))) (expr*{values} (expr (Str (str{s}{val=cyan}))) (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=bold}))))))))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=opts})))) (expr*{values} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=bold}))))))))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=fg}))) (expr (Str (str{s}{val=opts})))) (expr*{values} (expr (Str (str{s}{val=green}))) (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=bold}))))))))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=fg}))) (expr (Str (str{s}{val=opts})))) (expr*{values} (expr (Str (str{s}{val=red}))) (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=bold})))))))))))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=ERROR}))) (expr (Str (str{s}{val=WARNING}))) (expr (Str (str{s}{val=NOTICE}))) (expr (Str (str{s}{val=SQL_FIELD}))) (expr (Str (str{s}{val=SQL_COLTYPE}))) (expr (Str (str{s}{val=SQL_KEYWORD}))) (expr (Str (str{s}{val=SQL_TABLE}))) (expr (Str (str{s}{val=HTTP_INFO}))) (expr (Str (str{s}{val=HTTP_SUCCESS}))) (expr (Str (str{s}{val=HTTP_REDIRECT}))) (expr (Str (str{s}{val=HTTP_NOT_MODIFIED}))) (expr (Str (str{s}{val=HTTP_BAD_REQUEST}))) (expr (Str (str{s}{val=HTTP_NOT_FOUND}))) (expr (Str (str{s}{val=HTTP_SERVER_ERROR}))) (expr (Str (str{s}{val=MIGRATE_HEADING}))) (expr (Str (str{s}{val=MIGRATE_LABEL}))) (expr (Str (str{s}{val=MIGRATE_SUCCESS}))) (expr (Str (str{s}{val=MIGRATE_FAILURE})))) (expr*{values} (expr (Dict (expr*{keys} (expr (Str (str{s}{val=fg}))) (expr (Str (str{s}{val=opts})))) (expr*{values} (expr (Str (str{s}{val=red}))) (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=bold}))))))))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=fg}))) (expr (Str (str{s}{val=opts})))) (expr*{values} (expr (Str (str{s}{val=yellow}))) (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=bold}))))))))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=fg})))) (expr*{values} (expr (Str (str{s}{val=red})))))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=fg}))) (expr (Str (str{s}{val=opts})))) (expr*{values} (expr (Str (str{s}{val=green}))) (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=bold}))))))))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=fg})))) (expr*{values} (expr (Str (str{s}{val=green})))))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=fg})))) (expr*{values} (expr (Str (str{s}{val=blue})))))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=opts})))) (expr*{values} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=bold}))))))))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=opts})))) (expr*{values} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=bold}))))))))) (expr (Dict (epsilon))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=fg}))) (expr (Str (str{s}{val=opts})))) (expr*{values} (expr (Str (str{s}{val=green}))) (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=bold}))))))))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=fg})))) (expr*{values} (expr (Str (str{s}{val=green})))))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=fg}))) (expr (Str (str{s}{val=opts})))) (expr*{values} (expr (Str (str{s}{val=red}))) (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=bold}))))))))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=fg})))) (expr*{values} (expr (Str (str{s}{val=red})))))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=fg}))) (expr (Str (str{s}{val=opts})))) (expr*{values} (expr (Str (str{s}{val=magenta}))) (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=bold}))))))))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=fg}))) (expr (Str (str{s}{val=opts})))) (expr*{values} (expr (Str (str{s}{val=cyan}))) (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=bold}))))))))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=opts})))) (expr*{values} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=bold}))))))))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=fg}))) (expr (Str (str{s}{val=opts})))) (expr*{values} (expr (Str (str{s}{val=green}))) (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=bold}))))))))) (expr (Dict (expr*{keys} (expr (Str (str{s}{val=fg}))) (expr (Str (str{s}{val=opts})))) (expr*{values} (expr (Str (str{s}{val=red}))) (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=bold})))))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=DEFAULT_PALETTE})))) (expr{value} (Name (str{id}{val=DARK_PALETTE})))))
(root (FunctionDef (str{name}{val=parse_color_setting}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=config_string})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=config_string}))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Subscript (expr{value} (Name (str{id}{val=PALETTES}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=DEFAULT_PALETTE})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=parts})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=config_string}))) (str{attr}{val=lower}))))) (str{attr}{val=split}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=palette})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=PALETTES}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=NOCOLOR_PALETTE}))))))) (str{attr}{val=copy})))))))
(root (For (expr{target} (Name (str{id}{val=part}))) (expr{iter} (Name (str{id}{val=parts}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=part}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=PALETTES})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=palette}))) (str{attr}{val=update}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=PALETTES}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=part}))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=part})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=definition})))) (expr{value} (Dict (epsilon)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=role}))) (expr (Name (str{id}{val=instructions}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=part}))) (str{attr}{val=split}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=role})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=role}))) (str{attr}{val=upper})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=styles})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=instructions}))) (str{attr}{val=split}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=styles}))) (str{attr}{val=reverse})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=colors})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=styles}))) (str{attr}{val=pop}))))) (str{attr}{val=split}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=colors}))) (str{attr}{val=reverse})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=fg})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=colors}))) (str{attr}{val=pop})))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=fg}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=color_names})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=definition}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Name (str{id}{val=fg})))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=colors}))) (expr (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=colors}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=-1}))))))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=color_names}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=definition}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=colors}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=-1})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=opts})))) (expr{value} (Call (expr{func} (Name (str{id}{val=tuple}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Name (str{id}{val=s}))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=s}))) (expr{iter} (Name (str{id}{val=styles}))) (expr*{ifs} (expr (Compare (expr{left} (Name (str{id}{val=s}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=opt_dict}))) (str{attr}{val=keys}))))))))))))))))))
(root (If (expr{test} (Name (str{id}{val=opts}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=definition}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Name (str{id}{val=opts})))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=role}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Subscript (expr{value} (Name (str{id}{val=PALETTES}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=NOCOLOR_PALETTE})))))))))) (expr (Name (str{id}{val=definition})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=palette}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=role})))))))) (expr{value} (Name (str{id}{val=definition})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=palette}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Subscript (expr{value} (Name (str{id}{val=PALETTES}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=NOCOLOR_PALETTE})))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=None})))))
(root (Return (expr{value} (Name (str{id}{val=palette})))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=re})))))
(root (Import (alias*{names} (alias (str{name}{val=unicodedata})))))
(root (ImportFrom (str{module}{val=gzip}) (alias*{names} (alias (str{name}{val=GzipFile}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=io}) (alias*{names} (alias (str{name}{val=BytesIO}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=warnings})))))
(root (ImportFrom (str{module}{val=django.utils.deprecation}) (alias*{names} (alias (str{name}{val=RemovedInDjango19Warning}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=force_text}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.functional}) (alias*{names} (alias (str{name}{val=allow_lazy})) (alias (str{name}{val=SimpleLazyObject}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.six.moves}) (alias*{names} (alias (str{name}{val=html_entities}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.translation}) (alias*{names} (alias (str{name}{val=ugettext_lazy})) (alias (str{name}{val=ugettext}) (str{asname}{val=_})) (alias (str{name}{val=pgettext}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.safestring}) (alias*{names} (alias (str{name}{val=mark_safe}))) (int{level}{val=0})))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=PY2}))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=force_unicode}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=capfirst})))) (expr{value} (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=x})))))) (expr{body} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=x}))) (expr (BinOp (expr{left} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=x})))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (str{attr}{val=upper}))))) (operator{op} (Add)) (expr{right} (Subscript (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=x})))))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=1}))))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=capfirst})))) (expr{value} (Call (expr{func} (Name (str{id}{val=allow_lazy}))) (expr*{args} (expr (Name (str{id}{val=capfirst}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=re_words})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=U}))) (operator{op} (BitOr)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=S}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=re_chars})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=U}))) (operator{op} (BitOr)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=S}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=re_tag})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=S}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=re_newlines})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=re_camel_case})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=wrap}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=text}))) (expr (Name (str{id}{val=width})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=text})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=text}))))))))
(root (FunctionDef (str{name}{val=_generator}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=line}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=text}))) (str{attr}{val=splitlines}))) (expr*{args} (expr (Name (str{id}{val=True})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=max_width})))) (expr{value} (Call (expr{func} (Name (str{id}{val=min}))) (expr*{args} (expr (BoolOp (boolop{op} (Or)) (expr*{values} (expr (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=line}))) (str{attr}{val=endswith}))) (expr*{args} (expr (Str (str{s}{val=\n})))))) (expr (BinOp (expr{left} (Name (str{id}{val=width}))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=1})))))))) (expr (Name (str{id}{val=width})))))) (expr (Name (str{id}{val=width}))))))))
(root (While (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=line})))))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Name (str{id}{val=max_width})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=space})))) (expr{value} (BinOp (expr{left} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=line}))) (slice{slice} (Slice (expr{upper} (BinOp (expr{left} (Name (str{id}{val=max_width}))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=1}))))))))) (str{attr}{val=rfind}))) (expr*{args} (expr (Str (str{s}{val= })))))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=1})))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=space}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=space})))) (expr{value} (BinOp (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=line}))) (str{attr}{val=find}))) (expr*{args} (expr (Str (str{s}{val= })))))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=1})))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=space}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Yield (expr{value} (Name (str{id}{val=line})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=line})))) (expr{value} (Str (str{s}{val=})))))
(root (Break))
(root (Expr (expr{value} (Yield (expr{value} (BinOp (expr{left} (Str (str{s}{val=%s\n}))) (operator{op} (Mod)) (expr{right} (Subscript (expr{value} (Name (str{id}{val=line}))) (slice{slice} (Slice (expr{upper} (BinOp (expr{left} (Name (str{id}{val=space}))) (operator{op} (Sub)) (expr{right} (Num (int{n}{val=1})))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=line})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=line}))) (slice{slice} (Slice (expr{lower} (Name (str{id}{val=space})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=max_width})))) (expr{value} (Call (expr{func} (Name (str{id}{val=min}))) (expr*{args} (expr (BoolOp (boolop{op} (Or)) (expr*{values} (expr (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=line}))) (str{attr}{val=endswith}))) (expr*{args} (expr (Str (str{s}{val=\n})))))) (expr (BinOp (expr{left} (Name (str{id}{val=width}))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=1})))))))) (expr (Name (str{id}{val=width})))))) (expr (Name (str{id}{val=width}))))))))
(root (If (expr{test} (Name (str{id}{val=line}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Yield (expr{value} (Name (str{id}{val=line})))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=}))) (str{attr}{val=join}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=_generator}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=wrap})))) (expr{value} (Call (expr{func} (Name (str{id}{val=allow_lazy}))) (expr*{args} (expr (Name (str{id}{val=wrap}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))))))))
(root (ClassDef (str{name}{val=Truncator}) (expr*{bases} (expr (Name (str{id}{val=SimpleLazyObject})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=text})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=Truncator}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=__init__}))) (expr*{args} (expr (Lambda (arguments{args} (arguments (epsilon))) (expr{body} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=text})))))))))))))
(root (FunctionDef (str{name}{val=add_truncation_text}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=text}))) (expr (Name (str{id}{val=truncate})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=truncate}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=truncate})))) (expr{value} (Call (expr{func} (Name (str{id}{val=pgettext}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=truncate})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=truncate}))))))))
(root (If (expr{test} (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=truncate})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Name (str{id}{val=truncate}))) (operator{op} (Mod)) (expr{right} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:0_})))) (expr*{values} (expr (Name (str{id}{val=text}))))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=text}))) (str{attr}{val=endswith}))) (expr*{args} (expr (Name (str{id}{val=truncate})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=text})))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=%s%s}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=text}))) (expr (Name (str{id}{val=truncate}))))))))))
(root (FunctionDef (str{name}{val=chars}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=num}))) (expr (Name (str{id}{val=truncate}))) (expr (Name (str{id}{val=html})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=length})))) (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=num}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=text})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=unicodedata}))) (str{attr}{val=normalize}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_wrapped}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=truncate_len})))) (expr{value} (Name (str{id}{val=length})))))
(root (For (expr{target} (Name (str{id}{val=char}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=add_truncation_text}))) (expr*{args} (expr (Str (str{s}{val=}))) (expr (Name (str{id}{val=truncate})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=unicodedata}))) (str{attr}{val=combining}))) (expr*{args} (expr (Name (str{id}{val=char})))))))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=truncate_len}))) (operator{op} (Sub)) (expr{value} (Num (int{n}{val=1})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=truncate_len}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Break))
(root (If (expr{test} (Name (str{id}{val=html}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_truncate_html}))) (expr*{args} (expr (Name (str{id}{val=length}))) (expr (Name (str{id}{val=truncate}))) (expr (Name (str{id}{val=text}))) (expr (Name (str{id}{val=truncate_len}))) (expr (Name (str{id}{val=False}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_text_chars}))) (expr*{args} (expr (Name (str{id}{val=length}))) (expr (Name (str{id}{val=truncate}))) (expr (Name (str{id}{val=text}))) (expr (Name (str{id}{val=truncate_len}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=chars})))) (expr{value} (Call (expr{func} (Name (str{id}{val=allow_lazy}))) (expr*{args} (expr (Name (str{id}{val=chars}))))))))
(root (FunctionDef (str{name}{val=_text_chars}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=length}))) (expr (Name (str{id}{val=truncate}))) (expr (Name (str{id}{val=text}))) (expr (Name (str{id}{val=truncate_len})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=s_len})))) (expr{value} (Num (int{n}{val=0})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=end_index})))) (expr{value} (Name (str{id}{val=None})))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=i}))) (expr (Name (str{id}{val=char})))))) (expr{iter} (Call (expr{func} (Name (str{id}{val=enumerate}))) (expr*{args} (expr (Name (str{id}{val=text})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=unicodedata}))) (str{attr}{val=combining}))) (expr*{args} (expr (Name (str{id}{val=char})))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (AugAssign (expr{target} (Name (str{id}{val=s_len}))) (operator{op} (Add)) (expr{value} (Num (int{n}{val=1})))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=end_index}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Compare (expr{left} (Name (str{id}{val=s_len}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Name (str{id}{val=truncate_len}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=end_index})))) (expr{value} (Name (str{id}{val=i})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=s_len}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Name (str{id}{val=length})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=add_truncation_text}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=text}))) (slice{slice} (Slice (expr{upper} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=end_index}))) (expr (Num (int{n}{val=0})))))))))) (expr (Name (str{id}{val=truncate}))))))))
(root (Return (expr{value} (Name (str{id}{val=text})))))
(root (FunctionDef (str{name}{val=words}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=num}))) (expr (Name (str{id}{val=truncate}))) (expr (Name (str{id}{val=html})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=length})))) (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=num}))))))))
(root (If (expr{test} (Name (str{id}{val=html}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_truncate_html}))) (expr*{args} (expr (Name (str{id}{val=length}))) (expr (Name (str{id}{val=truncate}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_wrapped}))) (expr (Name (str{id}{val=length}))) (expr (Name (str{id}{val=True}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_text_words}))) (expr*{args} (expr (Name (str{id}{val=length}))) (expr (Name (str{id}{val=truncate}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=words})))) (expr{value} (Call (expr{func} (Name (str{id}{val=allow_lazy}))) (expr*{args} (expr (Name (str{id}{val=words}))))))))
(root (FunctionDef (str{name}{val=_text_words}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=length}))) (expr (Name (str{id}{val=truncate})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=words})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_wrapped}))) (str{attr}{val=split})))))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=words})))))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Name (str{id}{val=length})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=words})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=words}))) (slice{slice} (Slice (expr{upper} (Name (str{id}{val=length})))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=add_truncation_text}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val= }))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=words})))))) (expr (Name (str{id}{val=truncate}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val= }))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=words}))))))))
(root (FunctionDef (str{name}{val=_truncate_html}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=length}))) (expr (Name (str{id}{val=truncate}))) (expr (Name (str{id}{val=text}))) (expr (Name (str{id}{val=truncate_len}))) (expr (Name (str{id}{val=words})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=words}))) (expr (Compare (expr{left} (Name (str{id}{val=length}))) (cmpop*{ops} (cmpop (LtE))) (expr*{comparators} (expr (Num (int{n}{val=0}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=html4_singlets})))) (expr{value} (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=_STR:3_}))) (expr (Str (str{s}{val=_STR:4_}))) (expr (Str (str{s}{val=_STR:5_}))) (expr (Str (str{s}{val=_STR:6_}))) (expr (Str (str{s}{val=_STR:7_}))) (expr (Str (str{s}{val=_STR:8_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=pos})))) (expr{value} (Num (int{n}{val=0})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=end_text_pos})))) (expr{value} (Num (int{n}{val=0})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=current_len})))) (expr{value} (Num (int{n}{val=0})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=open_tags})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=regex})))) (expr{value} (IfExp (expr{test} (Name (str{id}{val=words}))) (expr{body} (Name (str{id}{val=re_words}))) (expr{orelse} (Name (str{id}{val=re_chars})))))))
(root (While (expr{test} (Compare (expr{left} (Name (str{id}{val=current_len}))) (cmpop*{ops} (cmpop (LtE))) (expr*{comparators} (expr (Name (str{id}{val=length})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=m})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=regex}))) (str{attr}{val=search}))) (expr*{args} (expr (Name (str{id}{val=text}))) (expr (Name (str{id}{val=pos}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=m}))))) (stmt*{body} (stmt (Pass)))))
(root (Break))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=pos})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=m}))) (str{attr}{val=end}))) (expr*{args} (expr (Num (int{n}{val=0}))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=m}))) (str{attr}{val=group}))) (expr*{args} (expr (Num (int{n}{val=1})))))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=current_len}))) (operator{op} (Add)) (expr{value} (Num (int{n}{val=1})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=current_len}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=truncate_len})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=end_text_pos})))) (expr{value} (Name (str{id}{val=pos})))))
(root (Continue))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=tag})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re_tag}))) (str{attr}{val=match}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=m}))) (str{attr}{val=group}))) (expr*{args} (expr (Num (int{n}{val=0})))))))))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=tag}))))) (expr (Compare (expr{left} (Name (str{id}{val=current_len}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Name (str{id}{val=truncate_len}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=closing_tag}))) (expr (Name (str{id}{val=tagname}))) (expr (Name (str{id}{val=self_closing}))))))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=tag}))) (str{attr}{val=groups})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=tagname})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=tagname}))) (str{attr}{val=lower})))))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=self_closing}))) (expr (Compare (expr{left} (Name (str{id}{val=tagname}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=html4_singlets}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Name (str{id}{val=closing_tag}))) (stmt*{body} (stmt (Pass))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=i})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=open_tags}))) (str{attr}{val=index}))) (expr*{args} (expr (Name (str{id}{val=tagname}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ValueError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=open_tags})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=open_tags}))) (slice{slice} (Slice (expr{lower} (BinOp (expr{left} (Name (str{id}{val=i}))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=1})))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=open_tags}))) (str{attr}{val=insert}))) (expr*{args} (expr (Num (int{n}{val=0}))) (expr (Name (str{id}{val=tagname}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=current_len}))) (cmpop*{ops} (cmpop (LtE))) (expr*{comparators} (expr (Name (str{id}{val=length})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=text})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=out})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=text}))) (slice{slice} (Slice (expr{upper} (Name (str{id}{val=end_text_pos})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=truncate_text})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=add_truncation_text}))) (expr*{args} (expr (Str (str{s}{val=}))) (expr (Name (str{id}{val=truncate}))))))))
(root (If (expr{test} (Name (str{id}{val=truncate_text}))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=out}))) (operator{op} (Add)) (expr{value} (Name (str{id}{val=truncate_text})))))
(root (For (expr{target} (Name (str{id}{val=tag}))) (expr{iter} (Name (str{id}{val=open_tags}))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=out}))) (operator{op} (Add)) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=tag})))))))
(root (Return (expr{value} (Name (str{id}{val=out})))))
(root (FunctionDef (str{name}{val=get_valid_filename}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=s})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=s})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=s})))))) (str{attr}{val=strip}))))) (str{attr}{val=replace}))) (expr*{args} (expr (Str (str{s}{val= }))) (expr (Str (str{s}{val=_}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=sub}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=}))) (expr (Name (str{id}{val=s}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=get_valid_filename})))) (expr{value} (Call (expr{func} (Name (str{id}{val=allow_lazy}))) (expr*{args} (expr (Name (str{id}{val=get_valid_filename}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))))))))
(root (FunctionDef (str{name}{val=get_text_list}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=list_}))) (expr (Name (str{id}{val=last_word})))) (expr*{defaults} (expr (Call (expr{func} (Name (str{id}{val=ugettext_lazy}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=list_})))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Str (str{s}{val=})))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=list_})))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=list_}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))))))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=_}))) (expr*{args} (expr (Str (str{s}{val=, })))))) (str{attr}{val=join}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=i})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=i}))) (expr{iter} (Subscript (expr{value} (Name (str{id}{val=list_}))) (slice{slice} (Slice (expr{upper} (Num (int{n}{val=-1})))))))))))))) (expr (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=last_word})))))) (expr (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=list_}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=-1})))))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=get_text_list})))) (expr{value} (Call (expr{func} (Name (str{id}{val=allow_lazy}))) (expr*{args} (expr (Name (str{id}{val=get_text_list}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))))))))
(root (FunctionDef (str{name}{val=normalize_newlines}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=text})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=text})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=text}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re_newlines}))) (str{attr}{val=sub}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=text}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=normalize_newlines})))) (expr{value} (Call (expr{func} (Name (str{id}{val=allow_lazy}))) (expr*{args} (expr (Name (str{id}{val=normalize_newlines}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))))))))
(root (FunctionDef (str{name}{val=phone2numeric}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=phone})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=char2number})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=_STR:3_}))) (expr (Str (str{s}{val=_STR:4_}))) (expr (Str (str{s}{val=_STR:5_}))) (expr (Str (str{s}{val=_STR:6_}))) (expr (Str (str{s}{val=h}))) (expr (Str (str{s}{val=i}))) (expr (Str (str{s}{val=j}))) (expr (Str (str{s}{val=k}))) (expr (Str (str{s}{val=l}))) (expr (Str (str{s}{val=m}))) (expr (Str (str{s}{val=n}))) (expr (Str (str{s}{val=o}))) (expr (Str (str{s}{val=p}))) (expr (Str (str{s}{val=q}))) (expr (Str (str{s}{val=r}))) (expr (Str (str{s}{val=s}))) (expr (Str (str{s}{val=t}))) (expr (Str (str{s}{val=u}))) (expr (Str (str{s}{val=v}))) (expr (Str (str{s}{val=w}))) (expr (Str (str{s}{val=x}))) (expr (Str (str{s}{val=y}))) (expr (Str (str{s}{val=z})))) (expr*{values} (expr (Str (str{s}{val=2}))) (expr (Str (str{s}{val=2}))) (expr (Str (str{s}{val=2}))) (expr (Str (str{s}{val=3}))) (expr (Str (str{s}{val=3}))) (expr (Str (str{s}{val=3}))) (expr (Str (str{s}{val=4}))) (expr (Str (str{s}{val=4}))) (expr (Str (str{s}{val=4}))) (expr (Str (str{s}{val=5}))) (expr (Str (str{s}{val=5}))) (expr (Str (str{s}{val=5}))) (expr (Str (str{s}{val=6}))) (expr (Str (str{s}{val=6}))) (expr (Str (str{s}{val=6}))) (expr (Str (str{s}{val=7}))) (expr (Str (str{s}{val=7}))) (expr (Str (str{s}{val=7}))) (expr (Str (str{s}{val=7}))) (expr (Str (str{s}{val=8}))) (expr (Str (str{s}{val=8}))) (expr (Str (str{s}{val=8}))) (expr (Str (str{s}{val=9}))) (expr (Str (str{s}{val=9}))) (expr (Str (str{s}{val=9}))) (expr (Str (str{s}{val=9}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=}))) (str{attr}{val=join}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=char2number}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=c}))) (expr (Name (str{id}{val=c})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=c}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=phone}))) (str{attr}{val=lower}))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=phone2numeric})))) (expr{value} (Call (expr{func} (Name (str{id}{val=allow_lazy}))) (expr*{args} (expr (Name (str{id}{val=phone2numeric}))))))))
(root (FunctionDef (str{name}{val=compress_string}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=s})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=zbuf})))) (expr{value} (Call (expr{func} (Name (str{id}{val=BytesIO})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=zfile})))) (expr{value} (Call (expr{func} (Name (str{id}{val=GzipFile}))) (keyword*{keywords} (keyword (str{arg}{val=mode}) (expr{value} (Str (str{s}{val=_STR:0_})))) (keyword (str{arg}{val=compresslevel}) (expr{value} (Num (int{n}{val=6})))) (keyword (str{arg}{val=fileobj}) (expr{value} (Name (str{id}{val=zbuf})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=zfile}))) (str{attr}{val=write}))) (expr*{args} (expr (Name (str{id}{val=s}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=zfile}))) (str{attr}{val=close})))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=zbuf}))) (str{attr}{val=getvalue})))))))
(root (ClassDef (str{name}{val=StreamingBuffer}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=vals})))) (expr{value} (List (epsilon)))))
(root (FunctionDef (str{name}{val=write}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=val})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=vals}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=val}))))))))
(root (FunctionDef (str{name}{val=read}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ret})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=}))) (str{attr}{val=join}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=vals}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=vals})))) (expr{value} (List (epsilon)))))
(root (Return (expr{value} (Name (str{id}{val=ret})))))
(root (FunctionDef (str{name}{val=flush}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (epsilon)))
(root (FunctionDef (str{name}{val=close}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (epsilon)))
(root (FunctionDef (str{name}{val=compress_sequence}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=sequence})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=buf})))) (expr{value} (Call (expr{func} (Name (str{id}{val=StreamingBuffer})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=zfile})))) (expr{value} (Call (expr{func} (Name (str{id}{val=GzipFile}))) (keyword*{keywords} (keyword (str{arg}{val=mode}) (expr{value} (Str (str{s}{val=_STR:0_})))) (keyword (str{arg}{val=compresslevel}) (expr{value} (Num (int{n}{val=6})))) (keyword (str{arg}{val=fileobj}) (expr{value} (Name (str{id}{val=buf})))))))))
(root (Expr (expr{value} (Yield (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=buf}))) (str{attr}{val=read})))))))))
(root (For (expr{target} (Name (str{id}{val=item}))) (expr{iter} (Name (str{id}{val=sequence}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=zfile}))) (str{attr}{val=write}))) (expr*{args} (expr (Name (str{id}{val=item}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=zfile}))) (str{attr}{val=flush})))))))
(root (Expr (expr{value} (Yield (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=buf}))) (str{attr}{val=read})))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=zfile}))) (str{attr}{val=close})))))))
(root (Expr (expr{value} (Yield (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=buf}))) (str{attr}{val=read})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ustring_re})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=javascript_quote}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=s}))) (expr (Name (str{id}{val=quote_double_quotes})))) (expr*{defaults} (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=msg})))) (expr{value} (Str (str{s}{val=django.utils.text.javascript_quote() is deprecated. Use django.utils.html.escapejs() instead.})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=warnings}))) (str{attr}{val=warn}))) (expr*{args} (expr (Name (str{id}{val=msg}))) (expr (Name (str{id}{val=RemovedInDjango19Warning})))) (keyword*{keywords} (keyword (str{arg}{val=stacklevel}) (expr{value} (Num (int{n}{val=2})))))))))
(root (FunctionDef (str{name}{val=fix}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=match})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Name (str{id}{val=ord}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=match}))) (str{attr}{val=group}))) (expr*{args} (expr (Num (int{n}{val=1})))))))))))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=type}))) (expr*{args} (expr (Name (str{id}{val=s})))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=bytes})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=s})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=s}))) (str{attr}{val=decode}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=type}))) (expr*{args} (expr (Name (str{id}{val=s})))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type})))))) (stmt*{body} (stmt (Pass))))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=TypeError}))) (expr*{args} (expr (Name (str{id}{val=s}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=s})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=s}))) (str{attr}{val=replace}))) (expr*{args} (expr (Str (str{s}{val=\}))) (expr (Str (str{s}{val=\\}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=s})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=s}))) (str{attr}{val=replace}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=s})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=s}))) (str{attr}{val=replace}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=s})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=s}))) (str{attr}{val=replace}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=s})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=s}))) (str{attr}{val=replace}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=s})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=s}))) (str{attr}{val=replace}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))))))))
(root (If (expr{test} (Name (str{id}{val=quote_double_quotes}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=s})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=s}))) (str{attr}{val=replace}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=ustring_re}))) (str{attr}{val=sub}))) (expr*{args} (expr (Name (str{id}{val=fix}))) (expr (Name (str{id}{val=s}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=javascript_quote})))) (expr{value} (Call (expr{func} (Name (str{id}{val=allow_lazy}))) (expr*{args} (expr (Name (str{id}{val=javascript_quote}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=smart_split_re})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=     ((?:         [^\s'"]*         (?:             (?:'_STR:1_'\\]|\\.)*" | '(?:[^'\\]|\\.)*')             [^\s'"]*         )+     ) | \S+) }))) (expr (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=VERBOSE}))))))))
(root (FunctionDef (str{name}{val=smart_split}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=text})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=text})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=text}))))))))
(root (For (expr{target} (Name (str{id}{val=bit}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=smart_split_re}))) (str{attr}{val=finditer}))) (expr*{args} (expr (Name (str{id}{val=text})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Yield (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=bit}))) (str{attr}{val=group}))) (expr*{args} (expr (Num (int{n}{val=0}))))))))))
(root (FunctionDef (str{name}{val=_replace_entity}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=match})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=text})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=match}))) (str{attr}{val=group}))) (expr*{args} (expr (Num (int{n}{val=1}))))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=text}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=text})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=text}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=1})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=text}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=c})))) (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=text}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=1}))))))) (expr (Num (int{n}{val=16}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=c})))) (expr{value} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=text}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=unichr}))) (expr*{args} (expr (Name (str{id}{val=c}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ValueError}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=match}))) (str{attr}{val=group}))) (expr*{args} (expr (Num (int{n}{val=0}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=unichr}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=html_entities}))) (str{attr}{val=name2codepoint}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=text}))))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=ValueError}))) (expr (Name (str{id}{val=KeyError})))))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=match}))) (str{attr}{val=group}))) (expr*{args} (expr (Num (int{n}{val=0}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_entity_re})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=unescape_entities}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=text})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=_entity_re}))) (str{attr}{val=sub}))) (expr*{args} (expr (Name (str{id}{val=_replace_entity}))) (expr (Name (str{id}{val=text}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=unescape_entities})))) (expr{value} (Call (expr{func} (Name (str{id}{val=allow_lazy}))) (expr*{args} (expr (Name (str{id}{val=unescape_entities}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))))))))
(root (FunctionDef (str{name}{val=unescape_string_literal}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=s})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=s}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (expr (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=s}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=-1}))))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Subscript (expr{value} (Name (str{id}{val=s}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=s}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=quote})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=s}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=s}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=1}))) (expr{upper} (Num (int{n}{val=-1}))))))) (str{attr}{val=replace}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=quote}))))) (expr (Name (str{id}{val=quote})))))) (str{attr}{val=replace}))) (expr*{args} (expr (Str (str{s}{val=\\}))) (expr (Str (str{s}{val=\}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=unescape_string_literal})))) (expr{value} (Call (expr{func} (Name (str{id}{val=allow_lazy}))) (expr*{args} (expr (Name (str{id}{val=unescape_string_literal}))))))))
(root (FunctionDef (str{name}{val=slugify}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=unicodedata}))) (str{attr}{val=normalize}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=value})))))) (str{attr}{val=encode}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=ignore})))))) (str{attr}{val=decode}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=sub}))) (expr*{args} (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=}))) (expr (Name (str{id}{val=value})))))) (str{attr}{val=strip}))))) (str{attr}{val=lower})))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=mark_safe}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=sub}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Name (str{id}{val=value})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=slugify})))) (expr{value} (Call (expr{func} (Name (str{id}{val=allow_lazy}))) (expr*{args} (expr (Name (str{id}{val=slugify}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))))))))
(root (FunctionDef (str{name}{val=camel_case_to_spaces}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re_camel_case}))) (str{attr}{val=sub}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=value})))))) (str{attr}{val=strip}))))) (str{attr}{val=lower})))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=datetime})))))
(root (ImportFrom (str{module}{val=django.utils.html}) (alias*{names} (alias (str{name}{val=avoid_wrapping}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.timezone}) (alias*{names} (alias (str{name}{val=is_aware})) (alias (str{name}{val=utc}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.translation}) (alias*{names} (alias (str{name}{val=ugettext})) (alias (str{name}{val=ungettext_lazy}))) (int{level}{val=0})))
(root (FunctionDef (str{name}{val=timesince}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=d}))) (expr (Name (str{id}{val=now}))) (expr (Name (str{id}{val=reversed})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=chunks})))) (expr{value} (Tuple (expr*{elts} (expr (Tuple (expr*{elts} (expr (BinOp (expr{left} (BinOp (expr{left} (BinOp (expr{left} (Num (int{n}{val=60}))) (operator{op} (Mult)) (expr{right} (Num (int{n}{val=60}))))) (operator{op} (Mult)) (expr{right} (Num (int{n}{val=24}))))) (operator{op} (Mult)) (expr{right} (Num (int{n}{val=365}))))) (expr (Call (expr{func} (Name (str{id}{val=ungettext_lazy}))) (expr*{args} (expr (Str (str{s}{val=%d year}))) (expr (Str (str{s}{val=%d years}))))))))) (expr (Tuple (expr*{elts} (expr (BinOp (expr{left} (BinOp (expr{left} (BinOp (expr{left} (Num (int{n}{val=60}))) (operator{op} (Mult)) (expr{right} (Num (int{n}{val=60}))))) (operator{op} (Mult)) (expr{right} (Num (int{n}{val=24}))))) (operator{op} (Mult)) (expr{right} (Num (int{n}{val=30}))))) (expr (Call (expr{func} (Name (str{id}{val=ungettext_lazy}))) (expr*{args} (expr (Str (str{s}{val=%d month}))) (expr (Str (str{s}{val=%d months}))))))))) (expr (Tuple (expr*{elts} (expr (BinOp (expr{left} (BinOp (expr{left} (BinOp (expr{left} (Num (int{n}{val=60}))) (operator{op} (Mult)) (expr{right} (Num (int{n}{val=60}))))) (operator{op} (Mult)) (expr{right} (Num (int{n}{val=24}))))) (operator{op} (Mult)) (expr{right} (Num (int{n}{val=7}))))) (expr (Call (expr{func} (Name (str{id}{val=ungettext_lazy}))) (expr*{args} (expr (Str (str{s}{val=%d week}))) (expr (Str (str{s}{val=%d weeks}))))))))) (expr (Tuple (expr*{elts} (expr (BinOp (expr{left} (BinOp (expr{left} (Num (int{n}{val=60}))) (operator{op} (Mult)) (expr{right} (Num (int{n}{val=60}))))) (operator{op} (Mult)) (expr{right} (Num (int{n}{val=24}))))) (expr (Call (expr{func} (Name (str{id}{val=ungettext_lazy}))) (expr*{args} (expr (Str (str{s}{val=%d day}))) (expr (Str (str{s}{val=%d days}))))))))) (expr (Tuple (expr*{elts} (expr (BinOp (expr{left} (Num (int{n}{val=60}))) (operator{op} (Mult)) (expr{right} (Num (int{n}{val=60}))))) (expr (Call (expr{func} (Name (str{id}{val=ungettext_lazy}))) (expr*{args} (expr (Str (str{s}{val=%d hour}))) (expr (Str (str{s}{val=%d hours}))))))))) (expr (Tuple (expr*{elts} (expr (Num (int{n}{val=60}))) (expr (Call (expr{func} (Name (str{id}{val=ungettext_lazy}))) (expr*{args} (expr (Str (str{s}{val=%d minute}))) (expr (Str (str{s}{val=%d minutes}))))))))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=d}))) (expr (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=datetime})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=d})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=datetime}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=d}))) (str{attr}{val=year}))) (expr (Attribute (expr{value} (Name (str{id}{val=d}))) (str{attr}{val=month}))) (expr (Attribute (expr{value} (Name (str{id}{val=d}))) (str{attr}{val=day}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Name (str{id}{val=now}))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=now}))) (expr (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=datetime}))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=now})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=datetime}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=now}))) (str{attr}{val=year}))) (expr (Attribute (expr{value} (Name (str{id}{val=now}))) (str{attr}{val=month}))) (expr (Attribute (expr{value} (Name (str{id}{val=now}))) (str{attr}{val=day}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=now}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=now})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=datetime}))) (str{attr}{val=now}))) (expr*{args} (expr (IfExp (expr{test} (Call (expr{func} (Name (str{id}{val=is_aware}))) (expr*{args} (expr (Name (str{id}{val=d})))))) (expr{body} (Name (str{id}{val=utc}))) (expr{orelse} (Name (str{id}{val=None}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=delta})))) (expr{value} (IfExp (expr{test} (Name (str{id}{val=reversed}))) (expr{body} (BinOp (expr{left} (Name (str{id}{val=d}))) (operator{op} (Sub)) (expr{right} (Name (str{id}{val=now}))))) (expr{orelse} (BinOp (expr{left} (Name (str{id}{val=now}))) (operator{op} (Sub)) (expr{right} (Name (str{id}{val=d})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=since})))) (expr{value} (BinOp (expr{left} (BinOp (expr{left} (BinOp (expr{left} (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=delta}))) (str{attr}{val=days}))) (operator{op} (Mult)) (expr{right} (Num (int{n}{val=24}))))) (operator{op} (Mult)) (expr{right} (Num (int{n}{val=60}))))) (operator{op} (Mult)) (expr{right} (Num (int{n}{val=60}))))) (operator{op} (Add)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=delta}))) (str{attr}{val=seconds})))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=since}))) (cmpop*{ops} (cmpop (LtE))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=avoid_wrapping}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=ugettext}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=i}))) (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=seconds}))) (expr (Name (str{id}{val=name}))))))))) (expr{iter} (Call (expr{func} (Name (str{id}{val=enumerate}))) (expr*{args} (expr (Name (str{id}{val=chunks})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=count})))) (expr{value} (BinOp (expr{left} (Name (str{id}{val=since}))) (operator{op} (FloorDiv)) (expr{right} (Name (str{id}{val=seconds})))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=count}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Break))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Name (str{id}{val=avoid_wrapping}))) (expr*{args} (expr (BinOp (expr{left} (Name (str{id}{val=name}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=count}))))))))))
(root (If (expr{test} (Compare (expr{left} (BinOp (expr{left} (Name (str{id}{val=i}))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=1}))))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=chunks}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=seconds2}))) (expr (Name (str{id}{val=name2}))))))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=chunks}))) (slice{slice} (Index (expr{value} (BinOp (expr{left} (Name (str{id}{val=i}))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=1})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=count2})))) (expr{value} (BinOp (expr{left} (BinOp (expr{left} (Name (str{id}{val=since}))) (operator{op} (Sub)) (expr{right} (BinOp (expr{left} (Name (str{id}{val=seconds}))) (operator{op} (Mult)) (expr{right} (Name (str{id}{val=count}))))))) (operator{op} (FloorDiv)) (expr{right} (Name (str{id}{val=seconds2})))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=count2}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (AugAssign (expr{target} (Name (str{id}{val=result}))) (operator{op} (Add)) (expr{value} (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=ugettext}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (operator{op} (Add)) (expr{right} (Call (expr{func} (Name (str{id}{val=avoid_wrapping}))) (expr*{args} (expr (BinOp (expr{left} (Name (str{id}{val=name2}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=count2}))))))))))))
(root (Return (expr{value} (Name (str{id}{val=result})))))
(root (FunctionDef (str{name}{val=timeuntil}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=d}))) (expr (Name (str{id}{val=now})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=timesince}))) (expr*{args} (expr (Name (str{id}{val=d}))) (expr (Name (str{id}{val=now})))) (keyword*{keywords} (keyword (str{arg}{val=reversed}) (expr{value} (Name (str{id}{val=True})))))))))
(root (ImportFrom (str{module}{val=datetime}) (alias*{names} (alias (str{name}{val=datetime})) (alias (str{name}{val=timedelta})) (alias (str{name}{val=tzinfo}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=threading}) (alias*{names} (alias (str{name}{val=local}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=sys})))))
(root (Import (alias*{names} (alias (str{name}{val=time}) (str{asname}{val=_time})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Import (alias*{names} (alias (str{name}{val=pytz})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ImportError}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=pytz})))) (expr{value} (Name (str{id}{val=None})))))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__all__})))) (expr{value} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=_STR:3_}))) (expr (Str (str{s}{val=get_current_timezone}))) (expr (Str (str{s}{val=get_current_timezone_name}))) (expr (Str (str{s}{val=activate}))) (expr (Str (str{s}{val=deactivate}))) (expr (Str (str{s}{val=override}))) (expr (Str (str{s}{val=localtime}))) (expr (Str (str{s}{val=now}))) (expr (Str (str{s}{val=is_aware}))) (expr (Str (str{s}{val=is_naive}))) (expr (Str (str{s}{val=make_aware}))) (expr (Str (str{s}{val=make_naive}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ZERO})))) (expr{value} (Call (expr{func} (Name (str{id}{val=timedelta}))) (expr*{args} (expr (Num (int{n}{val=0}))))))))
(root (ClassDef (str{name}{val=UTC}) (expr*{bases} (expr (Name (str{id}{val=tzinfo})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__repr__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (FunctionDef (str{name}{val=utcoffset}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=dt})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=ZERO})))))
(root (FunctionDef (str{name}{val=tzname}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=dt})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (FunctionDef (str{name}{val=dst}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=dt})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=ZERO})))))
(root (ClassDef (str{name}{val=FixedOffset}) (expr*{bases} (expr (Name (str{id}{val=tzinfo})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=offset}))) (expr (Name (str{id}{val=name})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=offset}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__offset})))) (expr{value} (Call (expr{func} (Name (str{id}{val=timedelta}))) (keyword*{keywords} (keyword (str{arg}{val=minutes}) (expr{value} (Name (str{id}{val=offset})))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=name}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__name})))) (expr{value} (Name (str{id}{val=name})))))
(root (FunctionDef (str{name}{val=utcoffset}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=dt})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__offset})))))
(root (FunctionDef (str{name}{val=tzname}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=dt})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__name})))))
(root (FunctionDef (str{name}{val=dst}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=dt})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=ZERO})))))
(root (ClassDef (str{name}{val=ReferenceLocalTimezone}) (expr*{bases} (expr (Name (str{id}{val=tzinfo})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=STDOFFSET})))) (expr{value} (Call (expr{func} (Name (str{id}{val=timedelta}))) (keyword*{keywords} (keyword (str{arg}{val=seconds}) (expr{value} (UnaryOp (unaryop{op} (USub)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=_time}))) (str{attr}{val=timezone})))))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=_time}))) (str{attr}{val=daylight}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=DSTOFFSET})))) (expr{value} (Call (expr{func} (Name (str{id}{val=timedelta}))) (keyword*{keywords} (keyword (str{arg}{val=seconds}) (expr{value} (UnaryOp (unaryop{op} (USub)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=_time}))) (str{attr}{val=altzone})))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=DSTOFFSET})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=STDOFFSET})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=DSTDIFF})))) (expr{value} (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=DSTOFFSET}))) (operator{op} (Sub)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=STDOFFSET})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=tzinfo}))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=self}))))))))
(root (FunctionDef (str{name}{val=utcoffset}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=dt})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_isdst}))) (expr*{args} (expr (Name (str{id}{val=dt})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=DSTOFFSET})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=STDOFFSET})))))
(root (FunctionDef (str{name}{val=dst}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=dt})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_isdst}))) (expr*{args} (expr (Name (str{id}{val=dt})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=DSTDIFF})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=ZERO})))))
(root (FunctionDef (str{name}{val=tzname}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=dt})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=_time}))) (str{attr}{val=tzname}))) (slice{slice} (Index (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_isdst}))) (expr*{args} (expr (Name (str{id}{val=dt}))))))))))))
(root (FunctionDef (str{name}{val=_isdst}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=dt})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=tt})))) (expr{value} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=dt}))) (str{attr}{val=year}))) (expr (Attribute (expr{value} (Name (str{id}{val=dt}))) (str{attr}{val=month}))) (expr (Attribute (expr{value} (Name (str{id}{val=dt}))) (str{attr}{val=day}))) (expr (Attribute (expr{value} (Name (str{id}{val=dt}))) (str{attr}{val=hour}))) (expr (Attribute (expr{value} (Name (str{id}{val=dt}))) (str{attr}{val=minute}))) (expr (Attribute (expr{value} (Name (str{id}{val=dt}))) (str{attr}{val=second}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=dt}))) (str{attr}{val=weekday}))))) (expr (Num (int{n}{val=0}))) (expr (Num (int{n}{val=0}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=stamp})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=_time}))) (str{attr}{val=mktime}))) (expr*{args} (expr (Name (str{id}{val=tt}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=tt})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=_time}))) (str{attr}{val=localtime}))) (expr*{args} (expr (Name (str{id}{val=stamp}))))))))
(root (Return (expr{value} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=tt}))) (str{attr}{val=tm_isdst}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=0}))))))))
(root (ClassDef (str{name}{val=LocalTimezone}) (expr*{bases} (expr (Name (str{id}{val=ReferenceLocalTimezone})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=tzname}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=dt})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=is_dst})))) (expr{value} (IfExp (expr{test} (Compare (expr{left} (Name (str{id}{val=dt}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr{body} (Name (str{id}{val=False}))) (expr{orelse} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_isdst}))) (expr*{args} (expr (Name (str{id}{val=dt}))))))))))
(root (Return (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=_time}))) (str{attr}{val=tzname}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=is_dst})))))))))
(root (FunctionDef (str{name}{val=_isdst}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=dt})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=super}))) (expr*{args} (expr (Name (str{id}{val=LocalTimezone}))) (expr (Name (str{id}{val=self})))))) (str{attr}{val=_isdst}))) (expr*{args} (expr (Name (str{id}{val=dt}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=OverflowError}))) (expr (Name (str{id}{val=ValueError})))))) (expr{name} (Name (str{id}{val=exc}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=exc_type})))) (expr{value} (Call (expr{func} (Name (str{id}{val=type}))) (expr*{args} (expr (Name (str{id}{val=exc}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=exc_value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=exc_type}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=dt}))))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=exc_value}))) (str{attr}{val=__cause__})))) (expr{value} (Name (str{id}{val=exc})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=reraise}))) (expr*{args} (expr (Name (str{id}{val=exc_type}))) (expr (Name (str{id}{val=exc_value}))) (expr (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=exc_info}))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=2}))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=utc})))) (expr{value} (IfExp (expr{test} (Name (str{id}{val=pytz}))) (expr{body} (Attribute (expr{value} (Name (str{id}{val=pytz}))) (str{attr}{val=utc}))) (expr{orelse} (Call (expr{func} (Name (str{id}{val=UTC})))))))))
(root (FunctionDef (str{name}{val=get_fixed_timezone}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=offset})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=offset}))) (expr (Name (str{id}{val=timedelta})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=offset})))) (expr{value} (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=offset}))) (str{attr}{val=seconds}))) (operator{op} (FloorDiv)) (expr{right} (Num (int{n}{val=60})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=sign})))) (expr{value} (IfExp (expr{test} (Compare (expr{left} (Name (str{id}{val=offset}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (expr{body} (Str (str{s}{val=_STR:0_}))) (expr{orelse} (Str (str{s}{val=_STR:1_})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=hhmm})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Name (str{id}{val=divmod}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=abs}))) (expr*{args} (expr (Name (str{id}{val=offset})))))) (expr (Num (int{n}{val=60}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=name})))) (expr{value} (BinOp (expr{left} (Name (str{id}{val=sign}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=hhmm})))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=FixedOffset}))) (expr*{args} (expr (Name (str{id}{val=offset}))) (expr (Name (str{id}{val=name}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_localtime})))) (expr{value} (Name (str{id}{val=None})))))
(root (FunctionDef (str{name}{val=get_default_timezone}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (Global (str*{names} (str{val=_localtime}))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=_localtime}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=TIME_ZONE}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=string_types})))))) (expr (Compare (expr{left} (Name (str{id}{val=pytz}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_localtime})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=pytz}))) (str{attr}{val=timezone}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=TIME_ZONE}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_localtime})))) (expr{value} (Call (expr{func} (Name (str{id}{val=LocalTimezone})))))))
(root (Return (expr{value} (Name (str{id}{val=_localtime})))))
(root (FunctionDef (str{name}{val=get_default_timezone_name}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=_get_timezone_name}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=get_default_timezone}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_active})))) (expr{value} (Call (expr{func} (Name (str{id}{val=local})))))))
(root (FunctionDef (str{name}{val=get_current_timezone}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=_active}))) (expr (Str (str{s}{val=value}))) (expr (Call (expr{func} (Name (str{id}{val=get_default_timezone}))))))))))
(root (FunctionDef (str{name}{val=get_current_timezone_name}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=_get_timezone_name}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=get_current_timezone}))))))))))
(root (FunctionDef (str{name}{val=_get_timezone_name}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=timezone})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=timezone}))) (str{attr}{val=zone})))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=AttributeError}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=timezone}))) (str{attr}{val=tzname}))) (expr*{args} (expr (Name (str{id}{val=None}))))))))
(root (FunctionDef (str{name}{val=activate}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=timezone})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=timezone}))) (expr (Name (str{id}{val=tzinfo})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=_active}))) (str{attr}{val=value})))) (expr{value} (Name (str{id}{val=timezone})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=timezone}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=string_types})))))) (expr (Compare (expr{left} (Name (str{id}{val=pytz}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None}))))))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=_active}))) (str{attr}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=pytz}))) (str{attr}{val=timezone}))) (expr*{args} (expr (Name (str{id}{val=timezone}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=timezone}))))))))))
(root (FunctionDef (str{name}{val=deactivate}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=_active}))) (expr (Str (str{s}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Delete (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=_active}))) (str{attr}{val=value}))))))
(root (ClassDef (str{name}{val=override}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=timezone})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=timezone})))) (expr{value} (Name (str{id}{val=timezone})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=old_timezone})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=_active}))) (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=None}))))))))
(root (FunctionDef (str{name}{val=__enter__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=timezone}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=deactivate})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=activate}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=timezone}))))))))
(root (FunctionDef (str{name}{val=__exit__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=exc_type}))) (expr (Name (str{id}{val=exc_value}))) (expr (Name (str{id}{val=traceback})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=old_timezone}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=deactivate})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=_active}))) (str{attr}{val=value})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=old_timezone})))))
(root (FunctionDef (str{name}{val=template_localtime}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=use_tz})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=should_convert})))) (expr{value} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=datetime})))))) (expr (IfExp (expr{test} (Compare (expr{left} (Name (str{id}{val=use_tz}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr{body} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=USE_TZ}))) (expr{orelse} (Name (str{id}{val=use_tz}))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=is_naive}))) (expr*{args} (expr (Name (str{id}{val=value})))))))) (expr (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Str (str{s}{val=convert_to_local_time}))) (expr (Name (str{id}{val=True})))))))))))
(root (Return (expr{value} (IfExp (expr{test} (Name (str{id}{val=should_convert}))) (expr{body} (Call (expr{func} (Name (str{id}{val=localtime}))) (expr*{args} (expr (Name (str{id}{val=value})))))) (expr{orelse} (Name (str{id}{val=value})))))))
(root (FunctionDef (str{name}{val=localtime}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=timezone})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=timezone}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=timezone})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_current_timezone})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=astimezone}))) (expr*{args} (expr (Name (str{id}{val=timezone}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=timezone}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=timezone}))) (str{attr}{val=normalize}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (Return (expr{value} (Name (str{id}{val=value})))))
(root (FunctionDef (str{name}{val=now}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=USE_TZ}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=utcnow}))))) (str{attr}{val=replace}))) (keyword*{keywords} (keyword (str{arg}{val=tzinfo}) (expr{value} (Name (str{id}{val=utc})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=now})))))))
(root (FunctionDef (str{name}{val=is_aware}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=tzinfo}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=tzinfo}))) (str{attr}{val=utcoffset}))) (expr*{args} (expr (Name (str{id}{val=value})))))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))))))))
(root (FunctionDef (str{name}{val=is_naive}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=tzinfo}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=tzinfo}))) (str{attr}{val=utcoffset}))) (expr*{args} (expr (Name (str{id}{val=value})))))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))))))))
(root (FunctionDef (str{name}{val=make_aware}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=timezone})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=timezone}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=timezone}))) (str{attr}{val=localize}))) (expr*{args} (expr (Name (str{id}{val=value})))) (keyword*{keywords} (keyword (str{arg}{val=is_dst}) (expr{value} (Name (str{id}{val=None})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=is_aware}))) (expr*{args} (expr (Name (str{id}{val=value})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=ValueError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=value}))))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=replace}))) (keyword*{keywords} (keyword (str{arg}{val=tzinfo}) (expr{value} (Name (str{id}{val=timezone})))))))))
(root (FunctionDef (str{name}{val=make_naive}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=value}))) (expr (Name (str{id}{val=timezone})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=astimezone}))) (expr*{args} (expr (Name (str{id}{val=timezone}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=timezone}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=timezone}))) (str{attr}{val=normalize}))) (expr*{args} (expr (Name (str{id}{val=value}))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=value}))) (str{attr}{val=replace}))) (keyword*{keywords} (keyword (str{arg}{val=tzinfo}) (expr{value} (Name (str{id}{val=None})))))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=re})))))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=force_text}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.functional}) (alias*{names} (alias (str{name}{val=lazy}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=__all__})))) (expr{value} (List (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=_STR:3_}))) (expr (Str (str{s}{val=_STR:4_}))) (expr (Str (str{s}{val=get_language_from_request}))) (expr (Str (str{s}{val=get_language_info}))) (expr (Str (str{s}{val=get_language_bidi}))) (expr (Str (str{s}{val=check_for_language}))) (expr (Str (str{s}{val=to_locale}))) (expr (Str (str{s}{val=templatize}))) (expr (Str (str{s}{val=string_concat}))) (expr (Str (str{s}{val=gettext}))) (expr (Str (str{s}{val=gettext_lazy}))) (expr (Str (str{s}{val=gettext_noop}))) (expr (Str (str{s}{val=ugettext}))) (expr (Str (str{s}{val=ugettext_lazy}))) (expr (Str (str{s}{val=ugettext_noop}))) (expr (Str (str{s}{val=ngettext}))) (expr (Str (str{s}{val=ngettext_lazy}))) (expr (Str (str{s}{val=ungettext}))) (expr (Str (str{s}{val=ungettext_lazy}))) (expr (Str (str{s}{val=pgettext}))) (expr (Str (str{s}{val=pgettext_lazy}))) (expr (Str (str{s}{val=npgettext}))) (expr (Str (str{s}{val=npgettext_lazy}))) (expr (Str (str{s}{val=LANGUAGE_SESSION_KEY}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=LANGUAGE_SESSION_KEY})))) (expr{value} (Str (str{s}{val=_STR:22_})))))
(root (ClassDef (str{name}{val=TranslatorCommentWarning}) (expr*{bases} (expr (Name (str{id}{val=SyntaxWarning})))) (stmt*{body} (stmt (Pass)))))
(root (Pass))
(root (ClassDef (str{name}{val=Trans}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__getattr__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=real_name})))))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=USE_I18N}))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=django.utils.translation}) (alias*{names} (alias (str{name}{val=trans_real}) (str{asname}{val=trans}))) (int{level}{val=0})))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=django.utils.translation}) (alias*{names} (alias (str{name}{val=trans_null}) (str{asname}{val=trans}))) (int{level}{val=0})))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=setattr}))) (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=real_name}))) (expr (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=trans}))) (expr (Name (str{id}{val=real_name})))))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=trans}))) (expr (Name (str{id}{val=real_name}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_trans})))) (expr{value} (Call (expr{func} (Name (str{id}{val=Trans})))))))
(root (Delete (expr*{targets} (expr (Name (str{id}{val=Trans}))))))
(root (FunctionDef (str{name}{val=gettext_noop}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=message})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=_trans}))) (str{attr}{val=gettext_noop}))) (expr*{args} (expr (Name (str{id}{val=message}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ugettext_noop})))) (expr{value} (Name (str{id}{val=gettext_noop})))))
(root (FunctionDef (str{name}{val=gettext}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=message})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=_trans}))) (str{attr}{val=gettext}))) (expr*{args} (expr (Name (str{id}{val=message}))))))))
(root (FunctionDef (str{name}{val=ngettext}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=singular}))) (expr (Name (str{id}{val=plural}))) (expr (Name (str{id}{val=number})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=_trans}))) (str{attr}{val=ngettext}))) (expr*{args} (expr (Name (str{id}{val=singular}))) (expr (Name (str{id}{val=plural}))) (expr (Name (str{id}{val=number}))))))))
(root (FunctionDef (str{name}{val=ugettext}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=message})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=_trans}))) (str{attr}{val=ugettext}))) (expr*{args} (expr (Name (str{id}{val=message}))))))))
(root (FunctionDef (str{name}{val=ungettext}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=singular}))) (expr (Name (str{id}{val=plural}))) (expr (Name (str{id}{val=number})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=_trans}))) (str{attr}{val=ungettext}))) (expr*{args} (expr (Name (str{id}{val=singular}))) (expr (Name (str{id}{val=plural}))) (expr (Name (str{id}{val=number}))))))))
(root (FunctionDef (str{name}{val=pgettext}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=context}))) (expr (Name (str{id}{val=message})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=_trans}))) (str{attr}{val=pgettext}))) (expr*{args} (expr (Name (str{id}{val=context}))) (expr (Name (str{id}{val=message}))))))))
(root (FunctionDef (str{name}{val=npgettext}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=context}))) (expr (Name (str{id}{val=singular}))) (expr (Name (str{id}{val=plural}))) (expr (Name (str{id}{val=number})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=_trans}))) (str{attr}{val=npgettext}))) (expr*{args} (expr (Name (str{id}{val=context}))) (expr (Name (str{id}{val=singular}))) (expr (Name (str{id}{val=plural}))) (expr (Name (str{id}{val=number}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=gettext_lazy})))) (expr{value} (Call (expr{func} (Name (str{id}{val=lazy}))) (expr*{args} (expr (Name (str{id}{val=gettext}))) (expr (Name (str{id}{val=str}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ugettext_lazy})))) (expr{value} (Call (expr{func} (Name (str{id}{val=lazy}))) (expr*{args} (expr (Name (str{id}{val=ugettext}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=pgettext_lazy})))) (expr{value} (Call (expr{func} (Name (str{id}{val=lazy}))) (expr*{args} (expr (Name (str{id}{val=pgettext}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))))))))
(root (FunctionDef (str{name}{val=lazy_number}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=func}))) (expr (Name (str{id}{val=resultclass}))) (expr (Name (str{id}{val=number})))) (str{kwarg}{val=kwargs}) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=number}))) (expr (Name (str{id}{val=int})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=kwargs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Name (str{id}{val=number})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=proxy})))) (expr{value} (Call (expr{func} (Call (expr{func} (Name (str{id}{val=lazy}))) (expr*{args} (expr (Name (str{id}{val=func}))) (expr (Name (str{id}{val=resultclass})))))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (ClassDef (str{name}{val=NumberAwareString}) (expr*{bases} (expr (Name (str{id}{val=resultclass})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__mod__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=rhs})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=rhs}))) (expr (Name (str{id}{val=dict})))))) (expr (Name (str{id}{val=number})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=number_value})))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=rhs}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=number})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=KeyError}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=KeyError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=Your dictionary lacks key '%s'. Please provide it, because it is required to determine whether string is singular or plural.}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=number}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=number_value})))) (expr{value} (Name (str{id}{val=rhs})))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=kwargs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_})))))))) (expr{value} (Name (str{id}{val=number_value})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=translated})))) (expr{value} (Call (expr{func} (Name (str{id}{val=func}))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=translated})))) (expr{value} (BinOp (expr{left} (Name (str{id}{val=translated}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=rhs})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=TypeError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (Return (expr{value} (Name (str{id}{val=translated})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=proxy})))) (expr{value} (Call (expr{func} (Call (expr{func} (Name (str{id}{val=lazy}))) (expr*{args} (expr (Lambda (arguments{args} (arguments (str{kwarg}{val=kwargs}))) (expr{body} (Call (expr{func} (Name (str{id}{val=NumberAwareString}))))))) (expr (Name (str{id}{val=NumberAwareString})))))) (expr{kwargs} (Name (str{id}{val=kwargs})))))))
(root (Return (expr{value} (Name (str{id}{val=proxy})))))
(root (FunctionDef (str{name}{val=ngettext_lazy}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=singular}))) (expr (Name (str{id}{val=plural}))) (expr (Name (str{id}{val=number})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=lazy_number}))) (expr*{args} (expr (Name (str{id}{val=ngettext}))) (expr (Name (str{id}{val=str})))) (keyword*{keywords} (keyword (str{arg}{val=singular}) (expr{value} (Name (str{id}{val=singular})))) (keyword (str{arg}{val=plural}) (expr{value} (Name (str{id}{val=plural})))) (keyword (str{arg}{val=number}) (expr{value} (Name (str{id}{val=number})))))))))
(root (FunctionDef (str{name}{val=ungettext_lazy}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=singular}))) (expr (Name (str{id}{val=plural}))) (expr (Name (str{id}{val=number})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=lazy_number}))) (expr*{args} (expr (Name (str{id}{val=ungettext}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type})))) (keyword*{keywords} (keyword (str{arg}{val=singular}) (expr{value} (Name (str{id}{val=singular})))) (keyword (str{arg}{val=plural}) (expr{value} (Name (str{id}{val=plural})))) (keyword (str{arg}{val=number}) (expr{value} (Name (str{id}{val=number})))))))))
(root (FunctionDef (str{name}{val=npgettext_lazy}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=context}))) (expr (Name (str{id}{val=singular}))) (expr (Name (str{id}{val=plural}))) (expr (Name (str{id}{val=number})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=lazy_number}))) (expr*{args} (expr (Name (str{id}{val=npgettext}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type})))) (keyword*{keywords} (keyword (str{arg}{val=context}) (expr{value} (Name (str{id}{val=context})))) (keyword (str{arg}{val=singular}) (expr{value} (Name (str{id}{val=singular})))) (keyword (str{arg}{val=plural}) (expr{value} (Name (str{id}{val=plural})))) (keyword (str{arg}{val=number}) (expr{value} (Name (str{id}{val=number})))))))))
(root (FunctionDef (str{name}{val=activate}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=language})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=_trans}))) (str{attr}{val=activate}))) (expr*{args} (expr (Name (str{id}{val=language}))))))))
(root (FunctionDef (str{name}{val=deactivate}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=_trans}))) (str{attr}{val=deactivate})))))))
(root (ClassDef (str{name}{val=override}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=language}))) (expr (Name (str{id}{val=deactivate})))) (expr*{defaults} (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=language})))) (expr{value} (Name (str{id}{val=language})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=deactivate})))) (expr{value} (Name (str{id}{val=deactivate})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=old_language})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_language})))))))
(root (FunctionDef (str{name}{val=__enter__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=language}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=activate}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=language}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=deactivate_all})))))))
(root (FunctionDef (str{name}{val=__exit__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=exc_type}))) (expr (Name (str{id}{val=exc_value}))) (expr (Name (str{id}{val=traceback})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=deactivate}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=deactivate})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Name (str{id}{val=activate}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=old_language}))))))))
(root (FunctionDef (str{name}{val=get_language}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=_trans}))) (str{attr}{val=get_language})))))))
(root (FunctionDef (str{name}{val=get_language_bidi}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=_trans}))) (str{attr}{val=get_language_bidi})))))))
(root (FunctionDef (str{name}{val=check_for_language}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=lang_code})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=_trans}))) (str{attr}{val=check_for_language}))) (expr*{args} (expr (Name (str{id}{val=lang_code}))))))))
(root (FunctionDef (str{name}{val=to_locale}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=language})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=_trans}))) (str{attr}{val=to_locale}))) (expr*{args} (expr (Name (str{id}{val=language}))))))))
(root (FunctionDef (str{name}{val=get_language_from_request}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=request}))) (expr (Name (str{id}{val=check_path})))) (expr*{defaults} (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=_trans}))) (str{attr}{val=get_language_from_request}))) (expr*{args} (expr (Name (str{id}{val=request}))) (expr (Name (str{id}{val=check_path}))))))))
(root (FunctionDef (str{name}{val=get_language_from_path}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=path})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=_trans}))) (str{attr}{val=get_language_from_path}))) (expr*{args} (expr (Name (str{id}{val=path}))))))))
(root (FunctionDef (str{name}{val=templatize}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=src}))) (expr (Name (str{id}{val=origin})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=_trans}))) (str{attr}{val=templatize}))) (expr*{args} (expr (Name (str{id}{val=src}))) (expr (Name (str{id}{val=origin}))))))))
(root (FunctionDef (str{name}{val=deactivate_all}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=_trans}))) (str{attr}{val=deactivate_all})))))))
(root (FunctionDef (str{name}{val=_string_concat}) (arguments{args} (arguments (str{vararg}{val=strings}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=}))) (str{attr}{val=join}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=s})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=s}))) (expr{iter} (Name (str{id}{val=strings}))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=string_concat})))) (expr{value} (Call (expr{func} (Name (str{id}{val=lazy}))) (expr*{args} (expr (Name (str{id}{val=_string_concat}))) (expr (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=text_type}))))))))
(root (FunctionDef (str{name}{val=get_language_info}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=lang_code})))))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=django.conf.locale}) (alias*{names} (alias (str{name}{val=LANG_INFO}))) (int{level}{val=0})))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Subscript (expr{value} (Name (str{id}{val=LANG_INFO}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=lang_code})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=KeyError}))) (stmt*{body} (stmt (Pass)))))))
(root (If (expr{test} (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=lang_code})))))) (stmt*{body} (stmt (Pass)))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=KeyError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=lang_code}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=generic_lang_code})))) (expr{value} (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=lang_code}))) (str{attr}{val=split}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Subscript (expr{value} (Name (str{id}{val=LANG_INFO}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=generic_lang_code})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=KeyError}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=KeyError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=lang_code}))) (expr (Name (str{id}{val=generic_lang_code})))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=trim_whitespace_re})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=trim_whitespace}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=s})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=trim_whitespace_re}))) (str{attr}{val=sub}))) (expr*{args} (expr (Str (str{s}{val= }))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=s}))) (str{attr}{val=strip}))))))))))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=force_text}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.safestring}) (alias*{names} (alias (str{name}{val=mark_safe})) (alias (str{name}{val=SafeData}))) (int{level}{val=0})))
(root (FunctionDef (str{name}{val=ngettext}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=singular}))) (expr (Name (str{id}{val=plural}))) (expr (Name (str{id}{val=number})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=number}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=1})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=singular})))))
(root (Return (expr{value} (Name (str{id}{val=plural})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ngettext_lazy})))) (expr{value} (Name (str{id}{val=ngettext})))))
(root (FunctionDef (str{name}{val=ungettext}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=singular}))) (expr (Name (str{id}{val=plural}))) (expr (Name (str{id}{val=number})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=ngettext}))) (expr*{args} (expr (Name (str{id}{val=singular}))) (expr (Name (str{id}{val=plural}))) (expr (Name (str{id}{val=number})))))))))))
(root (FunctionDef (str{name}{val=pgettext}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=context}))) (expr (Name (str{id}{val=message})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=ugettext}))) (expr*{args} (expr (Name (str{id}{val=message}))))))))
(root (FunctionDef (str{name}{val=npgettext}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=context}))) (expr (Name (str{id}{val=singular}))) (expr (Name (str{id}{val=plural}))) (expr (Name (str{id}{val=number})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=ungettext}))) (expr*{args} (expr (Name (str{id}{val=singular}))) (expr (Name (str{id}{val=plural}))) (expr (Name (str{id}{val=number}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=activate})))) (expr{value} (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=x})))))) (expr{body} (Name (str{id}{val=None})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=deactivate}))) (expr (Name (str{id}{val=deactivate_all})))) (expr{value} (Lambda (arguments{args} (arguments (epsilon))) (expr{body} (Name (str{id}{val=None})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=get_language})))) (expr{value} (Lambda (arguments{args} (arguments (epsilon))) (expr{body} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=LANGUAGE_CODE})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=get_language_bidi})))) (expr{value} (Lambda (arguments{args} (arguments (epsilon))) (expr{body} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=LANGUAGE_CODE}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=LANGUAGES_BIDI}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=check_for_language})))) (expr{value} (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=x})))))) (expr{body} (Name (str{id}{val=True})))))))
(root (FunctionDef (str{name}{val=gettext}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=message})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=message}))) (expr (Name (str{id}{val=SafeData})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=mark_safe}))) (expr*{args} (expr (Name (str{id}{val=message}))))))))
(root (Return (expr{value} (Name (str{id}{val=message})))))
(root (FunctionDef (str{name}{val=ugettext}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=message})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=gettext}))) (expr*{args} (expr (Name (str{id}{val=message})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=gettext_noop}))) (expr (Name (str{id}{val=gettext_lazy}))) (expr (Name (str{id}{val=_})))) (expr{value} (Name (str{id}{val=gettext})))))
(root (FunctionDef (str{name}{val=to_locale}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=language})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=p})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=language}))) (str{attr}{val=find}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=p}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (BinOp (expr{left} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=language}))) (slice{slice} (Slice (expr{upper} (Name (str{id}{val=p}))))))) (str{attr}{val=lower}))))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=_STR:0_}))))) (operator{op} (Add)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=language}))) (slice{slice} (Slice (expr{lower} (BinOp (expr{left} (Name (str{id}{val=p}))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=1}))))))))) (str{attr}{val=upper})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=language}))) (str{attr}{val=lower})))))))
(root (FunctionDef (str{name}{val=get_language_from_request}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=request}))) (expr (Name (str{id}{val=check_path})))) (expr*{defaults} (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=LANGUAGE_CODE})))))
(root (FunctionDef (str{name}{val=get_language_from_path}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=request})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=None})))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=collections}) (alias*{names} (alias (str{name}{val=OrderedDict}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=os})))))
(root (Import (alias*{names} (alias (str{name}{val=re})))))
(root (Import (alias*{names} (alias (str{name}{val=sys})))))
(root (Import (alias*{names} (alias (str{name}{val=gettext}) (str{asname}{val=gettext_module})))))
(root (ImportFrom (str{module}{val=threading}) (alias*{names} (alias (str{name}{val=local}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=warnings})))))
(root (ImportFrom (str{module}{val=django.apps}) (alias*{names} (alias (str{name}{val=apps}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.conf}) (alias*{names} (alias (str{name}{val=settings}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.core.exceptions}) (alias*{names} (alias (str{name}{val=AppRegistryNotReady}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.dispatch}) (alias*{names} (alias (str{name}{val=receiver}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.test.signals}) (alias*{names} (alias (str{name}{val=setting_changed}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.deprecation}) (alias*{names} (alias (str{name}{val=RemovedInDjango19Warning}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=force_text}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils._os}) (alias*{names} (alias (str{name}{val=upath}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.safestring}) (alias*{names} (alias (str{name}{val=mark_safe})) (alias (str{name}{val=SafeData}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils}) (alias*{names} (alias (str{name}{val=six})) (alias (str{name}{val=lru_cache}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.six}) (alias*{names} (alias (str{name}{val=StringIO}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.translation}) (alias*{names} (alias (str{name}{val=TranslatorCommentWarning})) (alias (str{name}{val=trim_whitespace})) (alias (str{name}{val=LANGUAGE_SESSION_KEY}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_translations})))) (expr{value} (Dict (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_active})))) (expr{value} (Call (expr{func} (Name (str{id}{val=local})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_default})))) (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_supported})))) (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=CONTEXT_SEPARATOR})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=accept_language_re})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=         ([A-Za-z]{1,8}(?:-[A-Za-z0-9]{1,8})*|\*)      # "en", "en-au", "x-y-z", "es-419", "*"         (?:\s*;\s*q=(0(?:\.\d{,3})?|1(?:.0{,3})?))?   # Optional "q=1.00", "q=0.8"         (?:\s*,\s*|$)                                 # Multiple accepts per header.         }))) (expr (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=VERBOSE}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=language_code_re})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=IGNORECASE}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=language_code_prefix_re})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_BROWSERS_DEPRECATED_LOCALES})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:3_})))) (expr*{values} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:2_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_DJANGO_DEPRECATED_LOCALES})))) (expr{value} (Name (str{id}{val=_BROWSERS_DEPRECATED_LOCALES})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Name (str{id}{val=receiver}))) (expr*{args} (expr (Name (str{id}{val=setting_changed})))))))))
(root (FunctionDef (str{name}{val=reset_cache}) (arguments{args} (arguments (str{kwarg}{val=kwargs}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=kwargs}))) (slice{slice} (Index (expr{value} (Str (str{s}{val=_STR:0_}))))))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Global (str*{names} (str{val=_supported}))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_supported})))) (expr{value} (Name (str{id}{val=None})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=check_for_language}))) (str{attr}{val=cache_clear})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=get_supported_language_variant}))) (str{attr}{val=cache_clear})))))))
(root (FunctionDef (str{name}{val=to_locale}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=language}))) (expr (Name (str{id}{val=to_lower})))) (expr*{defaults} (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=p})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=language}))) (str{attr}{val=find}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=p}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=to_lower}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (BinOp (expr{left} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=language}))) (slice{slice} (Slice (expr{upper} (Name (str{id}{val=p}))))))) (str{attr}{val=lower}))))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=_STR:0_}))))) (operator{op} (Add)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=language}))) (slice{slice} (Slice (expr{lower} (BinOp (expr{left} (Name (str{id}{val=p}))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=1}))))))))) (str{attr}{val=lower})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=language}))) (slice{slice} (Slice (expr{lower} (BinOp (expr{left} (Name (str{id}{val=p}))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=1})))))))))))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=2})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (BinOp (expr{left} (BinOp (expr{left} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=language}))) (slice{slice} (Slice (expr{upper} (Name (str{id}{val=p}))))))) (str{attr}{val=lower}))))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=_STR:0_}))))) (operator{op} (Add)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=language}))) (slice{slice} (Index (expr{value} (BinOp (expr{left} (Name (str{id}{val=p}))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=1}))))))))) (str{attr}{val=upper}))))))) (operator{op} (Add)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=language}))) (slice{slice} (Slice (expr{lower} (BinOp (expr{left} (Name (str{id}{val=p}))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=2}))))))))) (str{attr}{val=lower})))))))))
(root (Return (expr{value} (BinOp (expr{left} (BinOp (expr{left} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=language}))) (slice{slice} (Slice (expr{upper} (Name (str{id}{val=p}))))))) (str{attr}{val=lower}))))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=_STR:0_}))))) (operator{op} (Add)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=language}))) (slice{slice} (Slice (expr{lower} (BinOp (expr{left} (Name (str{id}{val=p}))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=1}))))))))) (str{attr}{val=upper})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=language}))) (str{attr}{val=lower})))))))
(root (FunctionDef (str{name}{val=to_language}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=locale})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=p})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=locale}))) (str{attr}{val=find}))) (expr*{args} (expr (Str (str{s}{val=_}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=p}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (BinOp (expr{left} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=locale}))) (slice{slice} (Slice (expr{upper} (Name (str{id}{val=p}))))))) (str{attr}{val=lower}))))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=-}))))) (operator{op} (Add)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Subscript (expr{value} (Name (str{id}{val=locale}))) (slice{slice} (Slice (expr{lower} (BinOp (expr{left} (Name (str{id}{val=p}))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=1}))))))))) (str{attr}{val=lower})))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=locale}))) (str{attr}{val=lower})))))))
(root (ClassDef (str{name}{val=DjangoTranslation}) (expr*{bases} (expr (Attribute (expr{value} (Name (str{id}{val=gettext_module}))) (str{attr}{val=GNUTranslations})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=language})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=gettext_module}))) (str{attr}{val=GNUTranslations}))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=self}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__language})))) (expr{value} (Name (str{id}{val=language})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__to_language})))) (expr{value} (Call (expr{func} (Name (str{id}{val=to_language}))) (expr*{args} (expr (Name (str{id}{val=language}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__locale})))) (expr{value} (Call (expr{func} (Name (str{id}{val=to_locale}))) (expr*{args} (expr (Name (str{id}{val=language}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=plural})))) (expr{value} (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=n})))))) (expr{body} (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Compare (expr{left} (Name (str{id}{val=n}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Num (int{n}{val=1})))))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_init_translation_catalog})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_add_installed_apps_translations})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_add_local_translations})))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_add_fallback})))))))
(root (FunctionDef (str{name}{val=__repr__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__language})))))))
(root (FunctionDef (str{name}{val=_new_gnu_trans}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=localedir}))) (expr (Name (str{id}{val=use_null_fallback})))) (expr*{defaults} (expr (Name (str{id}{val=True})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=translation})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=gettext_module}))) (str{attr}{val=translation}))) (keyword*{keywords} (keyword (str{arg}{val=domain}) (expr{value} (Str (str{s}{val=_STR:0_})))) (keyword (str{arg}{val=localedir}) (expr{value} (Name (str{id}{val=localedir})))) (keyword (str{arg}{val=languages}) (expr{value} (List (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__locale}))))))) (keyword (str{arg}{val=codeset}) (expr{value} (Str (str{s}{val=utf-8})))) (keyword (str{arg}{val=fallback}) (expr{value} (Name (str{id}{val=use_null_fallback})))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=translation}))) (expr (Str (str{s}{val=_STR:1_})))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=translation}))) (str{attr}{val=_catalog})))) (expr{value} (Dict (epsilon)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=translation}))) (str{attr}{val=_info})))) (expr{value} (Dict (epsilon)))))
(root (Return (expr{value} (Name (str{id}{val=translation})))))
(root (FunctionDef (str{name}{val=_init_translation_catalog}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=settingsfile})))) (expr{value} (Call (expr{func} (Name (str{id}{val=upath}))) (expr*{args} (expr (Attribute (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=modules}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=__module__}))))))) (str{attr}{val=__file__}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=localedir})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=dirname}))) (expr*{args} (expr (Name (str{id}{val=settingsfile})))))) (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=use_null_fallback})))) (expr{value} (Name (str{id}{val=True})))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__language}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=LANGUAGE_CODE})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=use_null_fallback})))) (expr{value} (Name (str{id}{val=False})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=translation})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_new_gnu_trans}))) (expr*{args} (expr (Name (str{id}{val=localedir}))) (expr (Name (str{id}{val=use_null_fallback}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_info})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=translation}))) (str{attr}{val=_info}))) (str{attr}{val=copy})))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_catalog})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=translation}))) (str{attr}{val=_catalog}))) (str{attr}{val=copy})))))))
(root (FunctionDef (str{name}{val=_add_installed_apps_translations}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=app_configs})))) (expr{value} (Call (expr{func} (Name (str{id}{val=reversed}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=apps}))) (str{attr}{val=get_app_configs})))))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=AppRegistryNotReady}))) (stmt*{body} (stmt (Pass)))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=AppRegistryNotReady}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_apps registry is ready. Check that you don't make non-lazy gettext calls at import time.}))))))))
(root (For (expr{target} (Name (str{id}{val=app_config}))) (expr{iter} (Name (str{id}{val=app_configs}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=localedir})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=app_config}))) (str{attr}{val=path}))) (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=translation})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_new_gnu_trans}))) (expr*{args} (expr (Name (str{id}{val=localedir}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=merge}))) (expr*{args} (expr (Name (str{id}{val=translation}))))))))
(root (FunctionDef (str{name}{val=_add_local_translations}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=localedir}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=reversed}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=LOCALE_PATHS})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=translation})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_new_gnu_trans}))) (expr*{args} (expr (Name (str{id}{val=localedir}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=merge}))) (expr*{args} (expr (Name (str{id}{val=translation}))))))))
(root (FunctionDef (str{name}{val=_add_fallback}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__language}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=LANGUAGE_CODE})))))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__language}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (epsilon)))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=default_translation})))) (expr{value} (Call (expr{func} (Name (str{id}{val=translation}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=LANGUAGE_CODE}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=add_fallback}))) (expr*{args} (expr (Name (str{id}{val=default_translation}))))))))
(root (FunctionDef (str{name}{val=merge}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=other})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_catalog}))) (str{attr}{val=update}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=other}))) (str{attr}{val=_catalog}))))))))
(root (FunctionDef (str{name}{val=language}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__language})))))
(root (FunctionDef (str{name}{val=to_language}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__to_language})))))
(root (FunctionDef (str{name}{val=translation}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=language})))))) (stmt*{body} (stmt (Pass)))))
(root (Global (str*{names} (str{val=_translations}))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=language}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=_translations})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=_translations}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=language})))))))) (expr{value} (Call (expr{func} (Name (str{id}{val=DjangoTranslation}))) (expr*{args} (expr (Name (str{id}{val=language}))))))))
(root (Return (expr{value} (Subscript (expr{value} (Name (str{id}{val=_translations}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=language})))))))))
(root (FunctionDef (str{name}{val=activate}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=language})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=language}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=_DJANGO_DEPRECATED_LOCALES})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=msg})))) (expr{value} (Str (str{s}{val=The use of the language code '%s' is deprecated. Please use the '%s' translation instead.})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=warnings}))) (str{attr}{val=warn}))) (expr*{args} (expr (BinOp (expr{left} (Name (str{id}{val=msg}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=language}))) (expr (Subscript (expr{value} (Name (str{id}{val=_DJANGO_DEPRECATED_LOCALES}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=language})))))))))))) (expr (Name (str{id}{val=RemovedInDjango19Warning})))) (keyword*{keywords} (keyword (str{arg}{val=stacklevel}) (expr{value} (Num (int{n}{val=2})))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=_active}))) (str{attr}{val=value})))) (expr{value} (Call (expr{func} (Name (str{id}{val=translation}))) (expr*{args} (expr (Name (str{id}{val=language}))))))))
(root (FunctionDef (str{name}{val=deactivate}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=_active}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Delete (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=_active}))) (str{attr}{val=value}))))))
(root (FunctionDef (str{name}{val=deactivate_all}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=_active}))) (str{attr}{val=value})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=gettext_module}))) (str{attr}{val=NullTranslations})))))))
(root (FunctionDef (str{name}{val=get_language}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=t})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=_active}))) (expr (Str (str{s}{val=value}))) (expr (Name (str{id}{val=None}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=t}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=t}))) (str{attr}{val=to_language})))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=AttributeError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=LANGUAGE_CODE})))))
(root (FunctionDef (str{name}{val=get_language_bidi}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=base_lang})))) (expr{value} (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=get_language}))))) (str{attr}{val=split}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))
(root (Return (expr{value} (Compare (expr{left} (Name (str{id}{val=base_lang}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=LANGUAGES_BIDI}))))))))
(root (FunctionDef (str{name}{val=catalog}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (Global (str*{names} (str{val=_default}))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=t})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=_active}))) (expr (Str (str{s}{val=value}))) (expr (Name (str{id}{val=None}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=t}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=t})))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=_default}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_default})))) (expr{value} (Call (expr{func} (Name (str{id}{val=translation}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=LANGUAGE_CODE}))))))))
(root (Return (expr{value} (Name (str{id}{val=_default})))))
(root (FunctionDef (str{name}{val=do_translate}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=message}))) (expr (Name (str{id}{val=translation_function})))))) (stmt*{body} (stmt (Pass)))))
(root (Global (str*{names} (str{val=_default}))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=eol_message})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=message}))) (str{attr}{val=replace}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (expr (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_}))))))))) (str{attr}{val=replace}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Str (str{s}{val=_STR:2_})))))) (expr (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Str (str{s}{val=_STR:1_})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=t})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=_active}))) (expr (Str (str{s}{val=value}))) (expr (Name (str{id}{val=None}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=t}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=t}))) (expr (Name (str{id}{val=translation_function})))))) (expr*{args} (expr (Name (str{id}{val=eol_message}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=_default}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_default})))) (expr{value} (Call (expr{func} (Name (str{id}{val=translation}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=LANGUAGE_CODE}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=_default}))) (expr (Name (str{id}{val=translation_function})))))) (expr*{args} (expr (Name (str{id}{val=eol_message}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=message}))) (expr (Name (str{id}{val=SafeData})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=mark_safe}))) (expr*{args} (expr (Name (str{id}{val=result}))))))))
(root (Return (expr{value} (Name (str{id}{val=result})))))
(root (FunctionDef (str{name}{val=gettext}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=message})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=do_translate}))) (expr*{args} (expr (Name (str{id}{val=message}))) (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=PY3}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ugettext})))) (expr{value} (Name (str{id}{val=gettext})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=ugettext}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=message})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=do_translate}))) (expr*{args} (expr (Name (str{id}{val=message}))) (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=pgettext}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=context}))) (expr (Name (str{id}{val=message})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=msg_with_ctxt})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=%s%s%s}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=context}))) (expr (Name (str{id}{val=CONTEXT_SEPARATOR}))) (expr (Name (str{id}{val=message}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Name (str{id}{val=ugettext}))) (expr*{args} (expr (Name (str{id}{val=msg_with_ctxt}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=CONTEXT_SEPARATOR}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=result})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=message}))))))))
(root (Return (expr{value} (Name (str{id}{val=result})))))
(root (FunctionDef (str{name}{val=gettext_noop}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=message})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=message})))))
(root (FunctionDef (str{name}{val=do_ntranslate}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=singular}))) (expr (Name (str{id}{val=plural}))) (expr (Name (str{id}{val=number}))) (expr (Name (str{id}{val=translation_function})))))) (stmt*{body} (stmt (Pass)))))
(root (Global (str*{names} (str{val=_default}))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=t})))) (expr{value} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=_active}))) (expr (Str (str{s}{val=value}))) (expr (Name (str{id}{val=None}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=t}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=t}))) (expr (Name (str{id}{val=translation_function})))))) (expr*{args} (expr (Name (str{id}{val=singular}))) (expr (Name (str{id}{val=plural}))) (expr (Name (str{id}{val=number}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=_default}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_default})))) (expr{value} (Call (expr{func} (Name (str{id}{val=translation}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=LANGUAGE_CODE}))))))))
(root (Return (expr{value} (Call (expr{func} (Call (expr{func} (Name (str{id}{val=getattr}))) (expr*{args} (expr (Name (str{id}{val=_default}))) (expr (Name (str{id}{val=translation_function})))))) (expr*{args} (expr (Name (str{id}{val=singular}))) (expr (Name (str{id}{val=plural}))) (expr (Name (str{id}{val=number}))))))))
(root (FunctionDef (str{name}{val=ngettext}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=singular}))) (expr (Name (str{id}{val=plural}))) (expr (Name (str{id}{val=number})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=do_ntranslate}))) (expr*{args} (expr (Name (str{id}{val=singular}))) (expr (Name (str{id}{val=plural}))) (expr (Name (str{id}{val=number}))) (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=six}))) (str{attr}{val=PY3}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=ungettext})))) (expr{value} (Name (str{id}{val=ngettext})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=ungettext}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=singular}))) (expr (Name (str{id}{val=plural}))) (expr (Name (str{id}{val=number})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=do_ntranslate}))) (expr*{args} (expr (Name (str{id}{val=singular}))) (expr (Name (str{id}{val=plural}))) (expr (Name (str{id}{val=number}))) (expr (Str (str{s}{val=ungettext}))))))))
(root (FunctionDef (str{name}{val=npgettext}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=context}))) (expr (Name (str{id}{val=singular}))) (expr (Name (str{id}{val=plural}))) (expr (Name (str{id}{val=number})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=msgs_with_ctxt})))) (expr{value} (Tuple (expr*{elts} (expr (BinOp (expr{left} (Str (str{s}{val=%s%s%s}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=context}))) (expr (Name (str{id}{val=CONTEXT_SEPARATOR}))) (expr (Name (str{id}{val=singular})))))))) (expr (BinOp (expr{left} (Str (str{s}{val=%s%s%s}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=context}))) (expr (Name (str{id}{val=CONTEXT_SEPARATOR}))) (expr (Name (str{id}{val=plural})))))))) (expr (Name (str{id}{val=number}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Name (str{id}{val=ungettext}))) (expr{starargs} (Name (str{id}{val=msgs_with_ctxt})))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=CONTEXT_SEPARATOR}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=result})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (Call (expr{func} (Name (str{id}{val=ungettext}))) (expr*{args} (expr (Name (str{id}{val=singular}))) (expr (Name (str{id}{val=plural}))) (expr (Name (str{id}{val=number}))))))))
(root (Return (expr{value} (Name (str{id}{val=result})))))
(root (FunctionDef (str{name}{val=all_locale_paths}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=globalpath})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=join}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=dirname}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=upath}))) (expr*{args} (expr (Attribute (expr{value} (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=sys}))) (str{attr}{val=modules}))) (slice{slice} (Index (expr{value} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=__module__}))))))) (str{attr}{val=__file__}))))))))) (expr (Str (str{s}{val=locale}))))))))
(root (Return (expr{value} (BinOp (expr{left} (List (expr*{elts} (expr (Name (str{id}{val=globalpath})))))) (operator{op} (Add)) (expr{right} (Call (expr{func} (Name (str{id}{val=list}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=LOCALE_PATHS}))))))))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=lru_cache}))) (str{attr}{val=lru_cache}))) (keyword*{keywords} (keyword (str{arg}{val=maxsize}) (expr{value} (Num (int{n}{val=1000}))))))))))
(root (FunctionDef (str{name}{val=check_for_language}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=lang_code})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=language_code_re}))) (str{attr}{val=search}))) (expr*{args} (expr (Name (str{id}{val=lang_code})))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (For (expr{target} (Name (str{id}{val=path}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=all_locale_paths}))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=gettext_module}))) (str{attr}{val=find}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=path}))) (expr (List (expr*{elts} (expr (Call (expr{func} (Name (str{id}{val=to_locale}))) (expr*{args} (expr (Name (str{id}{val=lang_code})))))))))))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=True})))))
(root (Return (expr{value} (Name (str{id}{val=False})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=lru_cache}))) (str{attr}{val=lru_cache}))) (keyword*{keywords} (keyword (str{arg}{val=maxsize}) (expr{value} (Num (int{n}{val=1000}))))))))))
(root (FunctionDef (str{name}{val=get_supported_language_variant}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=lang_code}))) (expr (Name (str{id}{val=strict})))) (expr*{defaults} (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (Global (str*{names} (str{val=_supported}))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=_supported}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_supported})))) (expr{value} (Call (expr{func} (Name (str{id}{val=OrderedDict}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=LANGUAGES}))))))))
(root (If (expr{test} (Name (str{id}{val=lang_code}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=replacement})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=_BROWSERS_DEPRECATED_LOCALES}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=lang_code}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=lang_code}))) (cmpop*{ops} (cmpop (NotIn))) (expr*{comparators} (expr (Name (str{id}{val=_supported})))))) (expr (Compare (expr{left} (Name (str{id}{val=replacement}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=_supported}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=replacement})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=generic_lang_code})))) (expr{value} (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=lang_code}))) (str{attr}{val=split}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))
(root (For (expr{target} (Name (str{id}{val=code}))) (expr{iter} (Tuple (expr*{elts} (expr (Name (str{id}{val=lang_code}))) (expr (Name (str{id}{val=generic_lang_code})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=code}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=_supported})))))) (expr (Call (expr{func} (Name (str{id}{val=check_for_language}))) (expr*{args} (expr (Name (str{id}{val=code}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=code})))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=strict}))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=supported_code}))) (expr{iter} (Name (str{id}{val=_supported}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=supported_code}))) (str{attr}{val=startswith}))) (expr*{args} (expr (BinOp (expr{left} (Name (str{id}{val=generic_lang_code}))) (operator{op} (Add)) (expr{right} (Str (str{s}{val=_STR:0_})))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=supported_code})))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=LookupError}))) (expr*{args} (expr (Name (str{id}{val=lang_code}))))))))
(root (FunctionDef (str{name}{val=get_language_from_path}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=path}))) (expr (Name (str{id}{val=strict})))) (expr*{defaults} (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=regex_match})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=language_code_prefix_re}))) (str{attr}{val=match}))) (expr*{args} (expr (Name (str{id}{val=path}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=regex_match}))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=lang_code})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=regex_match}))) (str{attr}{val=group}))) (expr*{args} (expr (Num (int{n}{val=1}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=get_supported_language_variant}))) (expr*{args} (expr (Name (str{id}{val=lang_code})))) (keyword*{keywords} (keyword (str{arg}{val=strict}) (expr{value} (Name (str{id}{val=strict})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=LookupError}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Name (str{id}{val=None})))))
(root (FunctionDef (str{name}{val=get_language_from_request}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=request}))) (expr (Name (str{id}{val=check_path})))) (expr*{defaults} (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (Global (str*{names} (str{val=_supported}))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=_supported}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=_supported})))) (expr{value} (Call (expr{func} (Name (str{id}{val=OrderedDict}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=LANGUAGES}))))))))
(root (If (expr{test} (Name (str{id}{val=check_path}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=lang_code})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_language_from_path}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=request}))) (str{attr}{val=path_info}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=lang_code}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=lang_code})))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=request}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=lang_code})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=request}))) (str{attr}{val=session}))) (str{attr}{val=get}))) (expr*{args} (expr (Name (str{id}{val=LANGUAGE_SESSION_KEY}))))))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=lang_code}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Name (str{id}{val=_supported})))))) (expr (Compare (expr{left} (Name (str{id}{val=lang_code}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Call (expr{func} (Name (str{id}{val=check_for_language}))) (expr*{args} (expr (Name (str{id}{val=lang_code}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=lang_code})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=lang_code})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=request}))) (str{attr}{val=COOKIES}))) (str{attr}{val=get}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=LANGUAGE_COOKIE_NAME}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=get_supported_language_variant}))) (expr*{args} (expr (Name (str{id}{val=lang_code}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=LookupError}))) (stmt*{body} (stmt (Pass)))))))
(root (Pass))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=accept})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=request}))) (str{attr}{val=META}))) (str{attr}{val=get}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=}))))))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=accept_lang}))) (expr (Name (str{id}{val=unused})))))) (expr{iter} (Call (expr{func} (Name (str{id}{val=parse_accept_lang_header}))) (expr*{args} (expr (Name (str{id}{val=accept})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=accept_lang}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Break))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=language_code_re}))) (str{attr}{val=search}))) (expr*{args} (expr (Name (str{id}{val=accept_lang})))))))) (stmt*{body} (stmt (Pass)))))
(root (Continue))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=get_supported_language_variant}))) (expr*{args} (expr (Name (str{id}{val=accept_lang}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=LookupError}))) (stmt*{body} (stmt (Pass)))))))
(root (Continue))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=get_supported_language_variant}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=LANGUAGE_CODE}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=LookupError}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=LANGUAGE_CODE})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=dot_re})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=blankout}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=src}))) (expr (Name (str{id}{val=char})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=dot_re}))) (str{attr}{val=sub}))) (expr*{args} (expr (Name (str{id}{val=char}))) (expr (Name (str{id}{val=src}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=endblock_re})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=plural_re})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=one_percent_re})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=re}))) (str{attr}{val=compile}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (FunctionDef (str{name}{val=templatize}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=src}))) (expr (Name (str{id}{val=origin})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=django.template}) (alias*{names} (alias (str{name}{val=Lexer})) (alias (str{name}{val=TOKEN_TEXT})) (alias (str{name}{val=TOKEN_VAR})) (alias (str{name}{val=TOKEN_BLOCK})) (alias (str{name}{val=TOKEN_COMMENT})) (alias (str{name}{val=TRANSLATOR_COMMENT_MARK}))) (int{level}{val=0})))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=src})))) (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Name (str{id}{val=src}))) (expr (Attribute (expr{value} (Name (str{id}{val=settings}))) (str{attr}{val=FILE_CHARSET}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=out})))) (expr{value} (Call (expr{func} (Name (str{id}{val=StringIO}))) (expr*{args} (expr (Str (str{s}{val=}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=message_context})))) (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=intrans})))) (expr{value} (Name (str{id}{val=False})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=inplural})))) (expr{value} (Name (str{id}{val=False})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=trimmed})))) (expr{value} (Name (str{id}{val=False})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=singular})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=plural})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=incomment})))) (expr{value} (Name (str{id}{val=False})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=comment})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=lineno_comment_map})))) (expr{value} (Dict (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=comment_lineno_cache})))) (expr{value} (Name (str{id}{val=None})))))
(root (FunctionDef (str{name}{val=join_tokens}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=tokens}))) (expr (Name (str{id}{val=trim})))) (expr*{defaults} (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=message})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=tokens}))))))))
(root (If (expr{test} (Name (str{id}{val=trim}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=message})))) (expr{value} (Call (expr{func} (Name (str{id}{val=trim_whitespace}))) (expr*{args} (expr (Name (str{id}{val=message}))))))))
(root (Return (expr{value} (Name (str{id}{val=message})))))
(root (For (expr{target} (Name (str{id}{val=t}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=Lexer}))) (expr*{args} (expr (Name (str{id}{val=src}))) (expr (Name (str{id}{val=origin})))))) (str{attr}{val=tokenize}))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=incomment}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=t}))) (str{attr}{val=token_type}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=TOKEN_BLOCK})))))) (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=t}))) (str{attr}{val=contents}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=content})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=}))) (str{attr}{val=join}))) (expr*{args} (expr (Name (str{id}{val=comment}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=translators_comment_start})))) (expr{value} (Name (str{id}{val=None})))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=lineno}))) (expr (Name (str{id}{val=line})))))) (expr{iter} (Call (expr{func} (Name (str{id}{val=enumerate}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=content}))) (str{attr}{val=splitlines}))) (expr*{args} (expr (Name (str{id}{val=True}))))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=line}))) (str{attr}{val=lstrip}))))) (str{attr}{val=startswith}))) (expr*{args} (expr (Name (str{id}{val=TRANSLATOR_COMMENT_MARK})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=translators_comment_start})))) (expr{value} (Name (str{id}{val=lineno})))))
(root (For (expr{target} (Tuple (expr*{elts} (expr (Name (str{id}{val=lineno}))) (expr (Name (str{id}{val=line})))))) (expr{iter} (Call (expr{func} (Name (str{id}{val=enumerate}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=content}))) (str{attr}{val=splitlines}))) (expr*{args} (expr (Name (str{id}{val=True}))))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Name (str{id}{val=translators_comment_start}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr (Compare (expr{left} (Name (str{id}{val=lineno}))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Name (str{id}{val=translators_comment_start}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=out}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=line}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=out}))) (str{attr}{val=write}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=incomment})))) (expr{value} (Name (str{id}{val=False})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=comment})))) (expr{value} (List (epsilon)))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=comment}))) (str{attr}{val=append}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=t}))) (str{attr}{val=contents}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Name (str{id}{val=intrans}))) (stmt*{body} (stmt (Pass))))))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=t}))) (str{attr}{val=token_type}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=TOKEN_BLOCK})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=endbmatch})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=endblock_re}))) (str{attr}{val=match}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=t}))) (str{attr}{val=contents}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=pluralmatch})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=plural_re}))) (str{attr}{val=match}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=t}))) (str{attr}{val=contents}))))))))
(root (If (expr{test} (Name (str{id}{val=endbmatch}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=inplural}))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=message_context}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=out}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:1_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=message_context}))) (expr (Call (expr{func} (Name (str{id}{val=join_tokens}))) (expr*{args} (expr (Name (str{id}{val=singular}))) (expr (Name (str{id}{val=trimmed})))))) (expr (Call (expr{func} (Name (str{id}{val=join_tokens}))) (expr*{args} (expr (Name (str{id}{val=plural}))) (expr (Name (str{id}{val=trimmed}))))))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=out}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:1_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Call (expr{func} (Name (str{id}{val=join_tokens}))) (expr*{args} (expr (Name (str{id}{val=singular}))) (expr (Name (str{id}{val=trimmed})))))) (expr (Call (expr{func} (Name (str{id}{val=join_tokens}))) (expr*{args} (expr (Name (str{id}{val=plural}))) (expr (Name (str{id}{val=trimmed}))))))))))))))))
(root (For (expr{target} (Name (str{id}{val=part}))) (expr{iter} (Name (str{id}{val=singular}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=out}))) (str{attr}{val=write}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=blankout}))) (expr*{args} (expr (Name (str{id}{val=part}))) (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (For (expr{target} (Name (str{id}{val=part}))) (expr{iter} (Name (str{id}{val=plural}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=out}))) (str{attr}{val=write}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=blankout}))) (expr*{args} (expr (Name (str{id}{val=part}))) (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (If (expr{test} (Name (str{id}{val=message_context}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=out}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:1_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=message_context}))) (expr (Call (expr{func} (Name (str{id}{val=join_tokens}))) (expr*{args} (expr (Name (str{id}{val=singular}))) (expr (Name (str{id}{val=trimmed}))))))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=out}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:1_}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Name (str{id}{val=join_tokens}))) (expr*{args} (expr (Name (str{id}{val=singular}))) (expr (Name (str{id}{val=trimmed})))))))))))))
(root (For (expr{target} (Name (str{id}{val=part}))) (expr{iter} (Name (str{id}{val=singular}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=out}))) (str{attr}{val=write}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=blankout}))) (expr*{args} (expr (Name (str{id}{val=part}))) (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=message_context})))) (expr{value} (Name (str{id}{val=None})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=intrans})))) (expr{value} (Name (str{id}{val=False})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=inplural})))) (expr{value} (Name (str{id}{val=False})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=singular})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=plural})))) (expr{value} (List (epsilon)))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Name (str{id}{val=pluralmatch}))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=inplural})))) (expr{value} (Name (str{id}{val=True})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=filemsg})))) (expr{value} (Str (str{s}{val=})))))
(root (If (expr{test} (Name (str{id}{val=origin}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=filemsg})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=origin})))))))
(root (Raise (expr{type} (Call (expr{func} (Name (str{id}{val=SyntaxError}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=t}))) (str{attr}{val=contents}))) (expr (Name (str{id}{val=filemsg}))) (expr (Attribute (expr{value} (Name (str{id}{val=t}))) (str{attr}{val=lineno})))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=t}))) (str{attr}{val=token_type}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=TOKEN_VAR})))))) (stmt*{body} (stmt (Pass))))))))
(root (If (expr{test} (Name (str{id}{val=inplural}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=plural}))) (str{attr}{val=append}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=t}))) (str{attr}{val=contents}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=singular}))) (str{attr}{val=append}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Attribute (expr{value} (Name (str{id}{val=t}))) (str{attr}{val=contents}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=t}))) (str{attr}{val=token_type}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=TOKEN_TEXT})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=contents})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=one_percent_re}))) (str{attr}{val=sub}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Attribute (expr{value} (Name (str{id}{val=t}))) (str{attr}{val=contents}))))))))
(root (If (expr{test} (Name (str{id}{val=inplural}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=plural}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=contents}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=singular}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=contents}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=comment_lineno_cache}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cur_lineno})))) (expr{value} (BinOp (expr{left} (Attribute (expr{value} (Name (str{id}{val=t}))) (str{attr}{val=lineno}))) (operator{op} (Add)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=t}))) (str{attr}{val=contents}))) (str{attr}{val=count}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=comment_lineno_cache}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=cur_lineno})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=t}))) (str{attr}{val=token_type}))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Name (str{id}{val=TOKEN_COMMENT})))))) (stmt*{body} (stmt (Pass)))))
(root (For (expr{target} (Name (str{id}{val=c}))) (expr{iter} (Subscript (expr{value} (Name (str{id}{val=lineno_comment_map}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=comment_lineno_cache}))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=filemsg})))) (expr{value} (Str (str{s}{val=})))))
(root (If (expr{test} (Name (str{id}{val=origin}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=filemsg})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=origin})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=warn_msg})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=The translator-targeted comment '%s' (%sline %d) was ignored, because it wasn't the last item on the line.}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=c}))) (expr (Name (str{id}{val=filemsg}))) (expr (Name (str{id}{val=comment_lineno_cache}))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=warnings}))) (str{attr}{val=warn}))) (expr*{args} (expr (Name (str{id}{val=warn_msg}))) (expr (Name (str{id}{val=TranslatorCommentWarning}))))))))
(root (Assign (expr*{targets} (expr (Subscript (expr{value} (Name (str{id}{val=lineno_comment_map}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=comment_lineno_cache})))))))) (expr{value} (List (epsilon)))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=out}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=# %s}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=_STR:0_}))) (str{attr}{val=join}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=lineno_comment_map}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=comment_lineno_cache})))))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=comment_lineno_cache})))) (expr{value} (Name (str{id}{val=None})))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=t}))) (str{attr}{val=token_type}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=TOKEN_BLOCK})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=imatch})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=inline_re}))) (str{attr}{val=match}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=t}))) (str{attr}{val=contents}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=bmatch})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=block_re}))) (str{attr}{val=match}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=t}))) (str{attr}{val=contents}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cmatches})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=constant_re}))) (str{attr}{val=findall}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=t}))) (str{attr}{val=contents}))))))))
(root (If (expr{test} (Name (str{id}{val=imatch}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=g})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=imatch}))) (str{attr}{val=group}))) (expr*{args} (expr (Num (int{n}{val=1}))))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=g}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=g})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=g}))) (str{attr}{val=strip}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=g}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=g})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=g}))) (str{attr}{val=strip}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=g})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=one_percent_re}))) (str{attr}{val=sub}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=g}))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=imatch}))) (str{attr}{val=group}))) (expr*{args} (expr (Num (int{n}{val=2})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=context_match})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=context_re}))) (str{attr}{val=match}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=imatch}))) (str{attr}{val=group}))) (expr*{args} (expr (Num (int{n}{val=2})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=message_context})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=context_match}))) (str{attr}{val=group}))) (expr*{args} (expr (Num (int{n}{val=1}))))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=message_context}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=message_context})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=message_context}))) (str{attr}{val=strip}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=message_context}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=message_context})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=message_context}))) (str{attr}{val=strip}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=out}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=message_context}))) (expr (Name (str{id}{val=g})))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=message_context})))) (expr{value} (Name (str{id}{val=None})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=out}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=g}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Name (str{id}{val=bmatch}))) (stmt*{body} (stmt (Pass))))))))
(root (For (expr{target} (Name (str{id}{val=fmatch}))) (expr{iter} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=constant_re}))) (str{attr}{val=findall}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=t}))) (str{attr}{val=contents})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=out}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=fmatch}))))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=bmatch}))) (str{attr}{val=group}))) (expr*{args} (expr (Num (int{n}{val=1})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=context_match})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=context_re}))) (str{attr}{val=match}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=bmatch}))) (str{attr}{val=group}))) (expr*{args} (expr (Num (int{n}{val=1})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=message_context})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=context_match}))) (str{attr}{val=group}))) (expr*{args} (expr (Num (int{n}{val=1}))))))))
(root (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=message_context}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=message_context})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=message_context}))) (str{attr}{val=strip}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=message_context}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=message_context})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=message_context}))) (str{attr}{val=strip}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=intrans})))) (expr{value} (Name (str{id}{val=True})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=inplural})))) (expr{value} (Name (str{id}{val=False})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=trimmed})))) (expr{value} (Compare (expr{left} (Str (str{s}{val=_STR:0_}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=t}))) (str{attr}{val=split_contents}))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=singular})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=plural})))) (expr{value} (List (epsilon)))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Name (str{id}{val=cmatches}))) (stmt*{body} (stmt (Pass))))))))
(root (For (expr{target} (Name (str{id}{val=cmatch}))) (expr{iter} (Name (str{id}{val=cmatches}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=out}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=cmatch}))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=t}))) (str{attr}{val=contents}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=incomment})))) (expr{value} (Name (str{id}{val=True})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=out}))) (str{attr}{val=write}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=blankout}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=t}))) (str{attr}{val=contents}))) (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=t}))) (str{attr}{val=token_type}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=TOKEN_VAR})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=parts})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=t}))) (str{attr}{val=contents}))) (str{attr}{val=split}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=cmatch})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=constant_re}))) (str{attr}{val=match}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=parts}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0}))))))))))))
(root (If (expr{test} (Name (str{id}{val=cmatch}))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=out}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=cmatch}))) (str{attr}{val=group}))) (expr*{args} (expr (Num (int{n}{val=1})))))))))))))
(root (For (expr{target} (Name (str{id}{val=p}))) (expr{iter} (Subscript (expr{value} (Name (str{id}{val=parts}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=1}))))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=p}))) (str{attr}{val=find}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))))) (cmpop*{ops} (cmpop (GtE))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=out}))) (str{attr}{val=write}))) (expr*{args} (expr (BinOp (expr{left} (Str (str{s}{val= %s }))) (operator{op} (Mod)) (expr{right} (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=p}))) (str{attr}{val=split}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Num (int{n}{val=1})))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1}))))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=out}))) (str{attr}{val=write}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=blankout}))) (expr*{args} (expr (Name (str{id}{val=p}))) (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=t}))) (str{attr}{val=token_type}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=TOKEN_COMMENT})))))) (stmt*{body} (stmt (Pass))))))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=t}))) (str{attr}{val=contents}))) (str{attr}{val=lstrip}))))) (str{attr}{val=startswith}))) (expr*{args} (expr (Name (str{id}{val=TRANSLATOR_COMMENT_MARK})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=lineno_comment_map}))) (str{attr}{val=setdefault}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=t}))) (str{attr}{val=lineno}))) (expr (List (epsilon)))))) (str{attr}{val=append}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=t}))) (str{attr}{val=contents}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=comment_lineno_cache})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=t}))) (str{attr}{val=lineno})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=out}))) (str{attr}{val=write}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=blankout}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=t}))) (str{attr}{val=contents}))) (expr (Str (str{s}{val=_STR:0_})))))))))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=out}))) (str{attr}{val=getvalue})))))))
(root (FunctionDef (str{name}{val=parse_accept_lang_header}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=lang_string})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=result})))) (expr{value} (List (epsilon)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=pieces})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=accept_language_re}))) (str{attr}{val=split}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=lang_string}))) (str{attr}{val=lower}))))))))))
(root (If (expr{test} (Subscript (expr{value} (Name (str{id}{val=pieces}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=-1}))))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (List (epsilon)))))
(root (For (expr{target} (Name (str{id}{val=i}))) (expr{iter} (Call (expr{func} (Name (str{id}{val=range}))) (expr*{args} (expr (Num (int{n}{val=0}))) (expr (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=pieces})))))) (operator{op} (Sub)) (expr{right} (Num (int{n}{val=1}))))) (expr (Num (int{n}{val=3})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=first}))) (expr (Name (str{id}{val=lang}))) (expr (Name (str{id}{val=priority}))))))) (expr{value} (Subscript (expr{value} (Name (str{id}{val=pieces}))) (slice{slice} (Slice (expr{lower} (Name (str{id}{val=i}))) (expr{upper} (BinOp (expr{left} (Name (str{id}{val=i}))) (operator{op} (Add)) (expr{right} (Num (int{n}{val=3})))))))))))
(root (If (expr{test} (Name (str{id}{val=first}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (List (epsilon)))))
(root (If (expr{test} (Name (str{id}{val=priority}))) (stmt*{body} (stmt (Pass)))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=priority})))) (expr{value} (Call (expr{func} (Name (str{id}{val=float}))) (expr*{args} (expr (Name (str{id}{val=priority}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ValueError}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (List (epsilon)))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=priority}))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=priority})))) (expr{value} (Num (float{n}{val=1.0})))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=result}))) (str{attr}{val=append}))) (expr*{args} (expr (Tuple (expr*{elts} (expr (Name (str{id}{val=lang}))) (expr (Name (str{id}{val=priority})))))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=result}))) (str{attr}{val=sort}))) (keyword*{keywords} (keyword (str{arg}{val=key}) (expr{value} (Lambda (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=k})))))) (expr{body} (Subscript (expr{value} (Name (str{id}{val=k}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=1})))))))))) (keyword (str{arg}{val=reverse}) (expr{value} (Name (str{id}{val=True})))))))))
(root (Return (expr{value} (Name (str{id}{val=result})))))
(root (Import (alias*{names} (alias (str{name}{val=copy})))))
(root (ClassDef (str{name}{val=Node}) (expr*{bases} (expr (Name (str{id}{val=object})))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=default})))) (expr{value} (Str (str{s}{val=_STR:0_})))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=children}))) (expr (Name (str{id}{val=connector}))) (expr (Name (str{id}{val=negated})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=children})))) (expr{value} (IfExp (expr{test} (Name (str{id}{val=children}))) (expr{body} (Subscript (expr{value} (Name (str{id}{val=children}))) (slice{slice} (Slice (epsilon))))) (expr{orelse} (List (epsilon)))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=connector})))) (expr{value} (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Name (str{id}{val=connector}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=default}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=negated})))) (expr{value} (Name (str{id}{val=negated})))))
(root (FunctionDef (str{name}{val=dummy}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass))) (expr*{decorator_list} (expr (Name (str{id}{val=classmethod}))))))
(root (FunctionDef (str{name}{val=_new_instance}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=cls}))) (expr (Name (str{id}{val=children}))) (expr (Name (str{id}{val=connector}))) (expr (Name (str{id}{val=negated})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=False})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=obj})))) (expr{value} (Call (expr{func} (Name (str{id}{val=Node}))) (expr*{args} (expr (Name (str{id}{val=children}))) (expr (Name (str{id}{val=connector}))) (expr (Name (str{id}{val=negated}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=obj}))) (str{attr}{val=__class__})))) (expr{value} (Name (str{id}{val=cls})))))
(root (Return (expr{value} (Name (str{id}{val=obj})))))
(root (FunctionDef (str{name}{val=__str__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=negated}))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=connector}))) (expr (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=_STR:1_}))) (str{attr}{val=join}))) (expr*{args} (expr (ListComp (expr{elt} (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Name (str{id}{val=c})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=c}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=children})))))))))))))))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=connector}))) (expr (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=_STR:1_}))) (str{attr}{val=join}))) (expr*{args} (expr (ListComp (expr{elt} (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Name (str{id}{val=c})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=c}))) (expr{iter} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=children})))))))))))))))))
(root (FunctionDef (str{name}{val=__repr__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__class__}))) (str{attr}{val=__name__}))) (expr (Name (str{id}{val=self}))))))))))
(root (FunctionDef (str{name}{val=__deepcopy__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=memodict})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=obj})))) (expr{value} (Call (expr{func} (Name (str{id}{val=Node}))) (keyword*{keywords} (keyword (str{arg}{val=connector}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=connector})))) (keyword (str{arg}{val=negated}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=negated})))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=obj}))) (str{attr}{val=__class__})))) (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__class__})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=obj}))) (str{attr}{val=children})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=copy}))) (str{attr}{val=deepcopy}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=children}))) (expr (Name (str{id}{val=memodict}))))))))
(root (Return (expr{value} (Name (str{id}{val=obj})))))
(root (FunctionDef (str{name}{val=__len__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=children}))))))))
(root (FunctionDef (str{name}{val=__bool__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=bool}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=children}))))))))
(root (FunctionDef (str{name}{val=__nonzero__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Attribute (expr{value} (Call (expr{func} (Name (str{id}{val=type}))) (expr*{args} (expr (Name (str{id}{val=self})))))) (str{attr}{val=__bool__}))) (expr*{args} (expr (Name (str{id}{val=self}))))))))
(root (FunctionDef (str{name}{val=__contains__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=other})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Compare (expr{left} (Name (str{id}{val=other}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=children}))))))))
(root (FunctionDef (str{name}{val=_prepare_data}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=data})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=data})))))
(root (FunctionDef (str{name}{val=add}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=data}))) (expr (Name (str{id}{val=conn_type}))) (expr (Name (str{id}{val=squash})))) (expr*{defaults} (expr (Name (str{id}{val=True})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=data}))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=children})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Name (str{id}{val=data})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=data})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_prepare_data}))) (expr*{args} (expr (Name (str{id}{val=data}))))))))
(root (If (expr{test} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Name (str{id}{val=squash}))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=children}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=data}))))))))
(root (Return (expr{value} (Name (str{id}{val=data})))))
(root (If (expr{test} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=connector}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=conn_type})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=data}))) (expr (Name (str{id}{val=Node})))))) (expr (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=data}))) (str{attr}{val=negated}))))) (expr (BoolOp (boolop{op} (Or)) (expr*{values} (expr (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=data}))) (str{attr}{val=connector}))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Name (str{id}{val=conn_type})))))) (expr (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=data})))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=1})))))))))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=children}))) (str{attr}{val=extend}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=data}))) (str{attr}{val=children}))))))))
(root (Return (expr{value} (Name (str{id}{val=self})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=children}))) (str{attr}{val=append}))) (expr*{args} (expr (Name (str{id}{val=data}))))))))
(root (Return (expr{value} (Name (str{id}{val=data})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=obj})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_new_instance}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=children}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=connector}))) (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=negated}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=connector})))) (expr{value} (Name (str{id}{val=conn_type})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=children})))) (expr{value} (List (expr*{elts} (expr (Name (str{id}{val=obj}))) (expr (Name (str{id}{val=data}))))))))
(root (Return (expr{value} (Name (str{id}{val=data})))))
(root (FunctionDef (str{name}{val=negate}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=negated})))) (expr{value} (UnaryOp (unaryop{op} (Not)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=negated})))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=datetime}) (alias*{names} (alias (str{name}{val=timedelta})) (alias (str{name}{val=tzinfo}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=time})))))
(root (Import (alias*{names} (alias (str{name}{val=warnings})))))
(root (ImportFrom (str{module}{val=django.utils.deprecation}) (alias*{names} (alias (str{name}{val=RemovedInDjango19Warning}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=django.utils.encoding}) (alias*{names} (alias (str{name}{val=force_str})) (alias (str{name}{val=force_text})) (alias (str{name}{val=DEFAULT_LOCALE_ENCODING}))) (int{level}{val=0})))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=warnings}))) (str{attr}{val=warn}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_Use django.utils.timezone instead.}))) (expr (Name (str{id}{val=RemovedInDjango19Warning})))) (keyword*{keywords} (keyword (str{arg}{val=stacklevel}) (expr{value} (Num (int{n}{val=2})))))))))
(root (ClassDef (str{name}{val=FixedOffset}) (expr*{bases} (expr (Name (str{id}{val=tzinfo})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=offset})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=warnings}))) (str{attr}{val=warn}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_Use django.utils.timezone.get_fixed_timezone instead.}))) (expr (Name (str{id}{val=RemovedInDjango19Warning}))))))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=isinstance}))) (expr*{args} (expr (Name (str{id}{val=offset}))) (expr (Name (str{id}{val=timedelta})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__offset})))) (expr{value} (Name (str{id}{val=offset})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=offset})))) (expr{value} (BinOp (expr{left} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__offset}))) (str{attr}{val=seconds}))) (operator{op} (FloorDiv)) (expr{right} (Num (int{n}{val=60})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__offset})))) (expr{value} (Call (expr{func} (Name (str{id}{val=timedelta}))) (keyword*{keywords} (keyword (str{arg}{val=minutes}) (expr{value} (Name (str{id}{val=offset})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=sign})))) (expr{value} (IfExp (expr{test} (Compare (expr{left} (Name (str{id}{val=offset}))) (cmpop*{ops} (cmpop (Lt))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (expr{body} (Str (str{s}{val=_STR:0_}))) (expr{orelse} (Str (str{s}{val=_STR:1_})))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__name})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=_STR:0_}))) (operator{op} (Mod)) (expr{right} (Tuple (expr*{elts} (expr (Name (str{id}{val=sign}))) (expr (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=abs}))) (expr*{args} (expr (Name (str{id}{val=offset})))))) (operator{op} (Div)) (expr{right} (Num (float{n}{val=60.0}))))) (expr (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=abs}))) (expr*{args} (expr (Name (str{id}{val=offset})))))) (operator{op} (Mod)) (expr{right} (Num (int{n}{val=60}))))))))))))
(root (FunctionDef (str{name}{val=__repr__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__name})))))
(root (FunctionDef (str{name}{val=__getinitargs__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__offset}))))))))
(root (FunctionDef (str{name}{val=utcoffset}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=dt})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__offset})))))
(root (FunctionDef (str{name}{val=tzname}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=dt})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__name})))))
(root (FunctionDef (str{name}{val=dst}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=dt})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=timedelta}))) (expr*{args} (expr (Num (int{n}{val=0}))))))))
(root (ClassDef (str{name}{val=LocalTimezone}) (expr*{bases} (expr (Name (str{id}{val=tzinfo})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=__init__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=dt})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=warnings}))) (str{attr}{val=warn}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_Use django.utils.timezone.get_default_timezone instead.}))) (expr (Name (str{id}{val=RemovedInDjango19Warning}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=tzinfo}))) (str{attr}{val=__init__}))) (expr*{args} (expr (Name (str{id}{val=self}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__dt})))) (expr{value} (Name (str{id}{val=dt})))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_tzname})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=tzname}))) (expr*{args} (expr (Name (str{id}{val=dt}))))))))
(root (FunctionDef (str{name}{val=__repr__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=force_str}))) (expr*{args} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_tzname}))))))))
(root (FunctionDef (str{name}{val=__getinitargs__}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=__dt}))))))))
(root (FunctionDef (str{name}{val=utcoffset}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=dt})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_isdst}))) (expr*{args} (expr (Name (str{id}{val=dt})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=timedelta}))) (keyword*{keywords} (keyword (str{arg}{val=seconds}) (expr{value} (UnaryOp (unaryop{op} (USub)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=time}))) (str{attr}{val=altzone})))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=timedelta}))) (keyword*{keywords} (keyword (str{arg}{val=seconds}) (expr{value} (UnaryOp (unaryop{op} (USub)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=time}))) (str{attr}{val=timezone})))))))))))
(root (FunctionDef (str{name}{val=dst}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=dt})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_isdst}))) (expr*{args} (expr (Name (str{id}{val=dt})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (BinOp (expr{left} (Call (expr{func} (Name (str{id}{val=timedelta}))) (keyword*{keywords} (keyword (str{arg}{val=seconds}) (expr{value} (UnaryOp (unaryop{op} (USub)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=time}))) (str{attr}{val=altzone}))))))))) (operator{op} (Sub)) (expr{right} (Call (expr{func} (Name (str{id}{val=timedelta}))) (keyword*{keywords} (keyword (str{arg}{val=seconds}) (expr{value} (UnaryOp (unaryop{op} (USub)) (expr{operand} (Attribute (expr{value} (Name (str{id}{val=time}))) (str{attr}{val=timezone})))))))))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=timedelta}))) (expr*{args} (expr (Num (int{n}{val=0}))))))))
(root (FunctionDef (str{name}{val=tzname}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=dt})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=is_dst})))) (expr{value} (IfExp (expr{test} (Compare (expr{left} (Name (str{id}{val=dt}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (expr{body} (Name (str{id}{val=False}))) (expr{orelse} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=_isdst}))) (expr*{args} (expr (Name (str{id}{val=dt}))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=force_text}))) (expr*{args} (expr (Subscript (expr{value} (Attribute (expr{value} (Name (str{id}{val=time}))) (str{attr}{val=tzname}))) (slice{slice} (Index (expr{value} (Name (str{id}{val=is_dst}))))))) (expr (Name (str{id}{val=DEFAULT_LOCALE_ENCODING}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=UnicodeDecodeError}))) (stmt*{body} (stmt (Pass)))))))
(root (Return (expr{value} (Name (str{id}{val=None})))))
(root (FunctionDef (str{name}{val=_isdst}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=dt})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=tt})))) (expr{value} (Tuple (expr*{elts} (expr (Attribute (expr{value} (Name (str{id}{val=dt}))) (str{attr}{val=year}))) (expr (Attribute (expr{value} (Name (str{id}{val=dt}))) (str{attr}{val=month}))) (expr (Attribute (expr{value} (Name (str{id}{val=dt}))) (str{attr}{val=day}))) (expr (Attribute (expr{value} (Name (str{id}{val=dt}))) (str{attr}{val=hour}))) (expr (Attribute (expr{value} (Name (str{id}{val=dt}))) (str{attr}{val=minute}))) (expr (Attribute (expr{value} (Name (str{id}{val=dt}))) (str{attr}{val=second}))) (expr (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=dt}))) (str{attr}{val=weekday}))))) (expr (Num (int{n}{val=0}))) (expr (Num (int{n}{val=0}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=stamp})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=time}))) (str{attr}{val=mktime}))) (expr*{args} (expr (Name (str{id}{val=tt}))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Tuple (expr*{elts} (expr (Name (str{id}{val=OverflowError}))) (expr (Name (str{id}{val=ValueError})))))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=tt})))) (expr{value} (BinOp (expr{left} (Tuple (expr*{elts} (expr (Num (int{n}{val=2037})))))) (operator{op} (Add)) (expr{right} (Subscript (expr{value} (Name (str{id}{val=tt}))) (slice{slice} (Slice (expr{lower} (Num (int{n}{val=1})))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=stamp})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=time}))) (str{attr}{val=mktime}))) (expr*{args} (expr (Name (str{id}{val=tt}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=tt})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=time}))) (str{attr}{val=localtime}))) (expr*{args} (expr (Name (str{id}{val=stamp}))))))))
(root (Return (expr{value} (Compare (expr{left} (Attribute (expr{value} (Name (str{id}{val=tt}))) (str{attr}{val=tm_isdst}))) (cmpop*{ops} (cmpop (Gt))) (expr*{comparators} (expr (Num (int{n}{val=0}))))))))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=absolute_import}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=warnings})))))
(root (ImportFrom (str{module}{val=django.utils.deprecation}) (alias*{names} (alias (str{name}{val=RemovedInDjango19Warning}))) (int{level}{val=0})))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=warnings}))) (str{attr}{val=warn}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))) (expr (Name (str{id}{val=RemovedInDjango19Warning})))) (keyword*{keywords} (keyword (str{arg}{val=stacklevel}) (expr{value} (Num (int{n}{val=2})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (ImportFrom (str{module}{val=unittest2}) (alias*{names} (alias (str{name}{val=*}))) (int{level}{val=0})))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ImportError}))) (stmt*{body} (stmt (Pass)))))))
(root (ImportFrom (str{module}{val=unittest}) (alias*{names} (alias (str{name}{val=*}))) (int{level}{val=0})))
(root (ImportFrom (str{module}{val=__future__}) (alias*{names} (alias (str{name}{val=unicode_literals}))) (int{level}{val=0})))
(root (Import (alias*{names} (alias (str{name}{val=datetime})))))
(root (Import (alias*{names} (alias (str{name}{val=os})))))
(root (Import (alias*{names} (alias (str{name}{val=subprocess})))))
(root (FunctionDef (str{name}{val=get_version}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=version})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_complete_version}))) (expr*{args} (expr (Name (str{id}{val=version}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=major})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_major_version}))) (expr*{args} (expr (Name (str{id}{val=version}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=sub})))) (expr{value} (Str (str{s}{val=})))))
(root (If (expr{test} (BoolOp (boolop{op} (And)) (expr*{values} (expr (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=version}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=3}))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (expr (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=version}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=4}))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=0}))))))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=git_changeset})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_git_changeset})))))))
(root (If (expr{test} (Name (str{id}{val=git_changeset}))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=sub})))) (expr{value} (BinOp (expr{left} (Str (str{s}{val=.dev%s}))) (operator{op} (Mod)) (expr{right} (Name (str{id}{val=git_changeset})))))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (If (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=version}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=3}))))))) (cmpop*{ops} (cmpop (NotEq))) (expr*{comparators} (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=mapping})))) (expr{value} (Dict (expr*{keys} (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:3_}))) (expr (Str (str{s}{val=_STR:5_})))) (expr*{values} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=_STR:4_}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=sub})))) (expr{value} (BinOp (expr{left} (Subscript (expr{value} (Name (str{id}{val=mapping}))) (slice{slice} (Index (expr{value} (Subscript (expr{value} (Name (str{id}{val=version}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=3}))))))))))) (operator{op} (Add)) (expr{right} (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Subscript (expr{value} (Name (str{id}{val=version}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=4}))))))))))))))
(root (Return (expr{value} (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (BinOp (expr{left} (Name (str{id}{val=major}))) (operator{op} (Add)) (expr{right} (Name (str{id}{val=sub}))))))))))
(root (FunctionDef (str{name}{val=get_major_version}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=version})))) (expr{value} (Call (expr{func} (Name (str{id}{val=get_complete_version}))) (expr*{args} (expr (Name (str{id}{val=version}))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=parts})))) (expr{value} (IfExp (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=version}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=2}))))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=0})))))) (expr{body} (Num (int{n}{val=2}))) (expr{orelse} (Num (int{n}{val=3})))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=major})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Str (str{s}{val=_STR:0_}))) (str{attr}{val=join}))) (expr*{args} (expr (GeneratorExp (expr{elt} (Call (expr{func} (Name (str{id}{val=str}))) (expr*{args} (expr (Name (str{id}{val=x})))))) (comprehension*{generators} (comprehension (expr{target} (Name (str{id}{val=x}))) (expr{iter} (Subscript (expr{value} (Name (str{id}{val=version}))) (slice{slice} (Slice (expr{upper} (Name (str{id}{val=parts}))))))))))))))))
(root (Return (expr{value} (Name (str{id}{val=major})))))
(root (FunctionDef (str{name}{val=get_complete_version}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=version})))) (expr*{defaults} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=version}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (ImportFrom (str{module}{val=django}) (alias*{names} (alias (str{name}{val=VERSION}) (str{asname}{val=version}))) (int{level}{val=0})))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assert (expr{test} (Compare (expr{left} (Call (expr{func} (Name (str{id}{val=len}))) (expr*{args} (expr (Name (str{id}{val=version})))))) (cmpop*{ops} (cmpop (Eq))) (expr*{comparators} (expr (Num (int{n}{val=5}))))))))
(root (Assert (expr{test} (Compare (expr{left} (Subscript (expr{value} (Name (str{id}{val=version}))) (slice{slice} (Index (expr{value} (Num (int{n}{val=3}))))))) (cmpop*{ops} (cmpop (In))) (expr*{comparators} (expr (Tuple (expr*{elts} (expr (Str (str{s}{val=_STR:0_}))) (expr (Str (str{s}{val=_STR:1_}))) (expr (Str (str{s}{val=_STR:2_}))) (expr (Str (str{s}{val=_STR:3_})))))))))))
(root (Return (expr{value} (Name (str{id}{val=version})))))
(root (FunctionDef (str{name}{val=get_git_changeset}) (arguments{args} (arguments (epsilon))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Call (expr{func} (Name (str{id}{val=hasattr}))) (expr*{args} (expr (Name (str{id}{val=get_git_changeset}))) (expr (Str (str{s}{val=_STR:0_})))))) (stmt*{body} (stmt (Pass)))))
(root (Return (expr{value} (Attribute (expr{value} (Name (str{id}{val=get_git_changeset}))) (str{attr}{val=cache})))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=repo_dir})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=dirname}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=dirname}))) (expr*{args} (expr (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=os}))) (str{attr}{val=path}))) (str{attr}{val=abspath}))) (expr*{args} (expr (Name (str{id}{val=__file__}))))))))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=git_log})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=subprocess}))) (str{attr}{val=Popen}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_})))) (keyword*{keywords} (keyword (str{arg}{val=stdout}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=subprocess}))) (str{attr}{val=PIPE})))) (keyword (str{arg}{val=stderr}) (expr{value} (Attribute (expr{value} (Name (str{id}{val=subprocess}))) (str{attr}{val=PIPE})))) (keyword (str{arg}{val=shell}) (expr{value} (Name (str{id}{val=True})))) (keyword (str{arg}{val=cwd}) (expr{value} (Name (str{id}{val=repo_dir})))) (keyword (str{arg}{val=universal_newlines}) (expr{value} (Name (str{id}{val=True})))))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=timestamp})))) (expr{value} (Subscript (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=git_log}))) (str{attr}{val=communicate}))))) (slice{slice} (Index (expr{value} (Num (int{n}{val=0})))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=timestamp})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Attribute (expr{value} (Name (str{id}{val=datetime}))) (str{attr}{val=datetime}))) (str{attr}{val=utcfromtimestamp}))) (expr*{args} (expr (Call (expr{func} (Name (str{id}{val=int}))) (expr*{args} (expr (Name (str{id}{val=timestamp})))))))))))
(root (TryExcept (stmt*{body} (stmt (Pass))) (excepthandler*{handlers} (ExceptHandler (expr{type} (Name (str{id}{val=ValueError}))) (stmt*{body} (stmt (Pass)))))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=changeset})))) (expr{value} (Name (str{id}{val=None})))))
(root (If (expr{test} (Name (str{id}{val=True}))) (stmt*{body} (stmt (Pass))) (stmt*{orelse} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=changeset})))) (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=timestamp}))) (str{attr}{val=strftime}))) (expr*{args} (expr (Str (str{s}{val=_STR:0_}))))))))
(root (Assign (expr*{targets} (expr (Attribute (expr{value} (Name (str{id}{val=get_git_changeset}))) (str{attr}{val=cache})))) (expr{value} (Name (str{id}{val=changeset})))))
(root (Return (expr{value} (Name (str{id}{val=changeset})))))
(root (ImportFrom (str{module}{val=xml.sax.saxutils}) (alias*{names} (alias (str{name}{val=XMLGenerator}))) (int{level}{val=0})))
(root (ClassDef (str{name}{val=SimplerXMLGenerator}) (expr*{bases} (expr (Name (str{id}{val=XMLGenerator})))) (stmt*{body} (stmt (Pass)))))
(root (FunctionDef (str{name}{val=addQuickElement}) (arguments{args} (arguments (expr*{args} (expr (Name (str{id}{val=self}))) (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=contents}))) (expr (Name (str{id}{val=attrs})))) (expr*{defaults} (expr (Name (str{id}{val=None}))) (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=attrs}))) (cmpop*{ops} (cmpop (Is))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Assign (expr*{targets} (expr (Name (str{id}{val=attrs})))) (expr{value} (Dict (epsilon)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=startElement}))) (expr*{args} (expr (Name (str{id}{val=name}))) (expr (Name (str{id}{val=attrs}))))))))
(root (If (expr{test} (Compare (expr{left} (Name (str{id}{val=contents}))) (cmpop*{ops} (cmpop (IsNot))) (expr*{comparators} (expr (Name (str{id}{val=None})))))) (stmt*{body} (stmt (Pass)))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=characters}))) (expr*{args} (expr (Name (str{id}{val=contents}))))))))
(root (Expr (expr{value} (Call (expr{func} (Attribute (expr{value} (Name (str{id}{val=self}))) (str{attr}{val=endElement}))) (expr*{args} (expr (Name (str{id}{val=name}))))))))
