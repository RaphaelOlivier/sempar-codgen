class Archmage ( Minion Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Archmage " , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# def create_minion ( self , player ) : #NEWLINE# return Minion ( 4 , 7 , spell_damage = 1 )
class Booty Bay Bodyguard ( Minion Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Booty Bay Bodyguard " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# def create_minion ( self , player ) : #NEWLINE# return Minion ( 5 , 4 , taunt = True )
class Darkscale Healer ( Minion Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Darkscale Healer " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 2 ) , Character Selector ( ) ) ) #NEWLINE# #NEWLINE# def create_minion ( self , player ) : #NEWLINE# return Minion ( 4 , 5 )
class Fiery War Axe ( Weapon Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Fiery War Axe " , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE ) #NEWLINE# #NEWLINE# def create_weapon ( self , player ) : #NEWLINE# return Weapon ( 3 , 2 )
class Frostwolf Warlord ( Minion Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Frostwolf Warlord " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( Count ( Minion Selector ( ) ) ) ) , Buff ( Change Health ( Count ( Minion Selector ( ) ) ) ) ] ) , Self Selector ( ) ) ) #NEWLINE# #NEWLINE# def create_minion ( self , player ) : #NEWLINE# return Minion ( 4 , 4 )
class Hellfire ( Spell Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Hellfire " , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE ) #NEWLINE# #NEWLINE# def use ( self , player , game ) : #NEWLINE# super ( ) . use ( player , game ) #NEWLINE# targets = copy . copy ( game . other_player . minions ) #NEWLINE# targets . extend ( game . current_player . minions ) #NEWLINE# targets . append ( game . other_player . hero ) #NEWLINE# targets . append ( game . current_player . hero ) #NEWLINE# for minion in targets : #NEWLINE# minion . damage ( player . effective_spell_damage ( 3 ) , self )
class Innervate ( Spell Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Innervate " , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE ) #NEWLINE# #NEWLINE# def use ( self , player , game ) : #NEWLINE# super ( ) . use ( player , game ) #NEWLINE# if player . mana < 8 : #NEWLINE# player . mana += 2 #NEWLINE# else : #NEWLINE# player . mana = 10
class Magma Rager ( Minion Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Magma Rager " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) #NEWLINE# #NEWLINE# def create_minion ( self , player ) : #NEWLINE# return Minion ( 5 , 1 )
class Mortal Coil ( Spell Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Mortal Coil " , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# def use ( self , player , game ) : #NEWLINE# super ( ) . use ( player , game ) #NEWLINE# if self . target . health <= player . effective_spell_damage ( 1 ) and not self . target . divine_shield : #NEWLINE# self . target . damage ( player . effective_spell_damage ( 1 ) , self ) #NEWLINE# player . draw ( ) #NEWLINE# else : #NEWLINE# self . target . damage ( player . effective_spell_damage ( 1 ) , self )
class Polymorph ( Spell Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Polymorph " , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# def use ( self , player , game ) : #NEWLINE# super ( ) . use ( player , game ) #NEWLINE# from hearthbreaker . cards . minions . mage import Sheep #NEWLINE# sheep = Sheep ( ) #NEWLINE# minion = sheep . create_minion ( None ) #NEWLINE# minion . card = sheep #NEWLINE# self . target . replace ( minion )
class Searing Totem ( Minion Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Searing Totem " , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) #NEWLINE# #NEWLINE# def create_minion ( self , player ) : #NEWLINE# return Minion ( 1 , 1 )
class Silverback Patriarch ( Minion Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Silverback Patriarch " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# def create_minion ( self , player ) : #NEWLINE# return Minion ( 1 , 4 , taunt = True )
class Stormwind Knight ( Minion Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Stormwind Knight " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# def create_minion ( self , player ) : #NEWLINE# return Minion ( 2 , 5 , charge = True )
class Voodoo Doctor ( Minion Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Voodoo Doctor " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Heal ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) #NEWLINE# #NEWLINE# def create_minion ( self , player ) : #NEWLINE# return Minion ( 2 , 1 )
class Wrath Of Air Totem ( Minion Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Wrath of Air Totem " , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) #NEWLINE# #NEWLINE# def create_minion ( self , player ) : #NEWLINE# return Minion ( 0 , 2 , spell_damage = 1 )
class Astral Communion ( Spell Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Astral Communion " , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# def use ( self , player , game ) : #NEWLINE# super ( ) . use ( player , game ) #NEWLINE# for card in player . hand : #NEWLINE# card . unattach ( ) #NEWLINE# player . trigger ( " card_discarded " , card ) #NEWLINE# player . hand = [ ] #NEWLINE# player . max_mana = 10 #NEWLINE# player . mana = 10
class Annoyo Tron ( Minion Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Annoy-o-Tron " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# def create_minion ( self , player ) : #NEWLINE# return Minion ( 1 , 2 , divine_shield = True , taunt = True )
class Burly Rockjaw Trogg ( Minion Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Burly Rockjaw Trogg " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# def create_minion ( self , player ) : #NEWLINE# return Minion ( 3 , 5 , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( Give ( Change Attack ( 2 ) ) , Self Selector ( ) ) ) ] )
class Cogmasters Wrench ( Weapon Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Cogmaster's Wrench " , 3 , CHARACTER_CLASS . ROGUE , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# def create_weapon ( self , player ) : #NEWLINE# return Weapon ( 1 , 3 , buffs = [ Buff ( Change Attack ( 2 ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) ] )
class Echo Of Medivh ( Spell Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Echo of Medivh " , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# def use ( self , player , game ) : #NEWLINE# super ( ) . use ( player , game ) #NEWLINE# for minion in sorted ( copy . copy ( player . minions ) , key = lambda minion : minion . born ) : #NEWLINE# if len ( player . hand ) < 10 : #NEWLINE# player . hand . append ( minion . card )
class Floating Watcher ( Minion Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Floating Watcher " , 5 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON ) #NEWLINE# #NEWLINE# def create_minion ( self , player ) : #NEWLINE# return Minion ( 4 , 4 , effects = [ Effect ( Character Damaged ( And ( Is Hero ( ) , Owners Turn ( ) ) ) , Action Tag ( Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) ] ) , Self Selector ( ) ) ) ] )
class Gnomish Experimenter ( Minion Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Gnomish Experimenter " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = ( Battlecry ( Draw ( ) , Player Selector ( ) ) , Battlecry ( Transform ( Gnomish Chicken ( ) ) , Last Drawn Selector ( ) , Matches ( Last Drawn Selector ( ) , Is Minion ( ) ) ) ) ) #NEWLINE# #NEWLINE# def create_minion ( self , player ) : #NEWLINE# return Minion ( 3 , 2 )
class Iron Juggernaut ( Minion Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Iron Juggernaut " , 6 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Add Card ( Burrowing Mine ( ) , add_to_deck = True ) , Player Selector ( Enemy Player ( ) ) ) ) #NEWLINE# #NEWLINE# def create_minion ( self , player ) : #NEWLINE# return Minion ( 6 , 5 )
class Madder Bomber ( Minion Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Madder Bomber " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = Random Picker ( 6 ) ) ) ) #NEWLINE# #NEWLINE# def create_minion ( self , player ) : #NEWLINE# return Minion ( 5 , 4 )
class Mini Mage ( Minion Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Mini-Mage " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# def create_minion ( self , player ) : #NEWLINE# return Minion ( 4 , 1 , stealth = True , spell_damage = 1 )
class Piloted Sky Golem ( Minion Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Piloted Sky Golem " , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# def create_minion ( self , player ) : #NEWLINE# return Minion ( 6 , 4 , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ Mana Cost ( 4 ) , Is Minion ( ) ] ) ) , Player Selector ( ) ) )
class Scarlet Purifier ( Minion Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Scarlet Purifier " , 3 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 2 ) , Minion Selector ( Minion Has Deathrattle ( ) , Both Player ( ) ) ) ) #NEWLINE# #NEWLINE# def create_minion ( self , player ) : #NEWLINE# return Minion ( 4 , 3 )
class Siltfin Spiritwalker ( Minion Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Siltfin Spiritwalker " , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MURLOC , overload = 1 ) #NEWLINE# #NEWLINE# def create_minion ( self , player ) : #NEWLINE# return Minion ( 2 , 5 , effects = [ Effect ( Minion Died ( Is Type ( MINION_TYPE . MURLOC ) ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )
class Tinkertown Technician ( Minion Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# from hearthbreaker . cards . spells . neutral import spare_part_list #NEWLINE# super ( ) . __init__ ( " Tinkertown Technician " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = ( Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) , Battlecry ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) ) ) #NEWLINE# #NEWLINE# def create_minion ( self , player ) : #NEWLINE# return Minion ( 3 , 3 )
class Voljin ( Minion Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Vol'jin " , 5 , CHARACTER_CLASS . PRIEST , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Swap Stats ( " health " , " health " , True ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) #NEWLINE# #NEWLINE# def create_minion ( self , player ) : #NEWLINE# return Minion ( 6 , 2 )
class Deaths Bite ( Weapon Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Death's Bite " , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# def create_weapon ( self , player ) : #NEWLINE# return Weapon ( 4 , 2 , deathrattle = Deathrattle ( Damage ( 1 ) , Minion Selector ( players = Both Player ( ) ) ) )
class Maexxna ( Minion Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Maexxna " , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# def create_minion ( self , player ) : #NEWLINE# return Minion ( 2 , 8 , effects = [ Effect ( Did Damage ( ) , Action Tag ( Kill ( ) , Target Selector ( Is Minion ( ) ) ) ) ] )
class Sludge Belcher ( Minion Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Sludge Belcher " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# def create_minion ( self , player ) : #NEWLINE# return Minion ( 3 , 5 , taunt = True , deathrattle = Deathrattle ( Summon ( Slime ( ) ) , Player Selector ( ) ) )
class Voidcaller ( Minion Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Voidcaller " , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON ) #NEWLINE# #NEWLINE# def create_minion ( self , player ) : #NEWLINE# return Minion ( 3 , 4 , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ Is Type ( MINION_TYPE . DEMON ) ] , source = CARD_SOURCE . MY_HAND ) ) , Player Selector ( ) ) )
class Alexstrasza ( Minion Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Alexstrasza " , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Set Health ( 15 ) , Hero Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) #NEWLINE# #NEWLINE# def create_minion ( self , player ) : #NEWLINE# return Minion ( 8 , 8 )
class Arcane Golem ( Minion Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Arcane Golem " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give Mana Crystal ( ) , Player Selector ( players = Enemy Player ( ) ) ) ) #NEWLINE# #NEWLINE# def create_minion ( self , player ) : #NEWLINE# return Minion ( 4 , 2 , charge = True )
class Baine Bloodhoof ( Minion Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Baine Bloodhoof " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , False ) #NEWLINE# #NEWLINE# def create_minion ( self , player ) : #NEWLINE# return Minion ( 4 , 5 )
class Blade Flurry ( Spell Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Blade Flurry " , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# def use ( self , player , game ) : #NEWLINE# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# if player . weapon is not None : #NEWLINE# attack_power = player . effective_spell_damage ( player . hero . calculate_attack ( ) ) #NEWLINE# player . weapon . destroy ( ) #NEWLINE# #NEWLINE# for minion in copy . copy ( game . other_player . minions ) : #NEWLINE# minion . damage ( attack_power , self ) #NEWLINE# #NEWLINE# game . other_player . hero . damage ( attack_power , self )
class Brawl ( Spell Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Brawl " , 5 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# def can_use ( self , player , game ) : #NEWLINE# return super ( ) . can_use ( player , game ) and len ( player . minions ) + len ( player . opponent . minions ) >= 2 #NEWLINE# #NEWLINE# def use ( self , player , game ) : #NEWLINE# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# minions = copy . copy ( player . minions ) #NEWLINE# minions . extend ( game . other_player . minions ) #NEWLINE# #NEWLINE# if len ( minions ) > 1 : #NEWLINE# survivor = game . random_choice ( minions ) #NEWLINE# for minion in minions : #NEWLINE# if minion is not survivor : #NEWLINE# minion . die ( self )
class Conceal ( Spell Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Conceal " , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# def use ( self , player , game ) : #NEWLINE# super ( ) . use ( player , game ) #NEWLINE# for minion in player . minions : #NEWLINE# if not minion . stealth : #NEWLINE# minion . add_buff ( Buff Until ( Stealth ( ) , Turn Started ( ) ) )
class Defender Minion ( Minion Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Defender " , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# def create_minion ( self , p ) : #NEWLINE# return Minion ( 2 , 1 )
class Doomguard ( Minion Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Doomguard " , 5 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Discard ( amount = 2 ) , Player Selector ( ) ) ) #NEWLINE# #NEWLINE# def create_minion ( self , player ) : #NEWLINE# return Minion ( 5 , 7 , charge = True )
class Earth Elemental ( Minion Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Earth Elemental " , 5 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . EPIC , overload = 3 ) #NEWLINE# #NEWLINE# def create_minion ( self , player ) : #NEWLINE# return Minion ( 7 , 8 , taunt = True )
class Explosive Trap ( Secret Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Explosive Trap " , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# def activate ( self , player ) : #NEWLINE# player . opponent . bind ( " character_attack " , self . _reveal ) #NEWLINE# #NEWLINE# def deactivate ( self , player ) : #NEWLINE# player . opponent . unbind ( " character_attack " , self . _reveal ) #NEWLINE# #NEWLINE# def _reveal ( self , attacker , target ) : #NEWLINE# if isinstance ( target , Hero ) : #NEWLINE# game = attacker . player . game #NEWLINE# enemies = copy . copy ( game . current_player . minions ) #NEWLINE# enemies . append ( game . current_player . hero ) #NEWLINE# for enemy in enemies : #NEWLINE# enemy . damage ( 2 , None ) #NEWLINE# game . check_delayed ( ) #NEWLINE# super ( ) . reveal ( )
class Flame Of Azzinoth ( Minion Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Flame of Azzinoth " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) #NEWLINE# #NEWLINE# def create_minion ( self , player ) : #NEWLINE# return Minion ( 2 , 1 )
class Gnoll ( Minion Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Gnoll " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) #NEWLINE# #NEWLINE# def create_minion ( self , player ) : #NEWLINE# return Minion ( 2 , 2 , taunt = True )
class Holy Wrath ( Spell Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Holy Wrath " , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# def use ( self , player , game ) : #NEWLINE# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# fatigue = False #NEWLINE# if player . deck . left == 0 : #NEWLINE# fatigue = True #NEWLINE# #NEWLINE# player . draw ( ) #NEWLINE# if not fatigue : #NEWLINE# cost = player . hand [ - 1 ] . mana #NEWLINE# self . target . damage ( player . effective_spell_damage ( cost ) , self )
class Infernal ( Minion Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Infernal " , 6 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DEMON ) #NEWLINE# #NEWLINE# def create_minion ( self , player ) : #NEWLINE# return Minion ( 6 , 6 )
class Kirin Tor Mage ( Minion Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Kirin Tor Mage " , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE , battlecry = Battlecry ( Give Aura ( [ Aura Until ( Mana Change ( - 100 ) , Card Selector ( condition = Is Secret ( ) ) , Card Played ( Is Secret ( ) ) ) ] ) , Player Selector ( ) ) ) #NEWLINE# #NEWLINE# def create_minion ( self , player ) : #NEWLINE# return Minion ( 4 , 3 )
class Lightwarden ( Minion Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Lightwarden " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# def create_minion ( self , player ) : #NEWLINE# return Minion ( 1 , 2 , effects = [ Effect ( Character Healed ( player = Both Player ( ) ) , Action Tag ( Give ( Change Attack ( 2 ) ) , Self Selector ( ) ) ) ] )
class Mana Wraith ( Minion Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Mana Wraith " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# def create_minion ( self , player ) : #NEWLINE# return Minion ( 2 , 2 , auras = [ Aura ( Mana Change ( 1 ) , Card Selector ( Both Player ( ) , Is Minion ( ) ) ) ] )
class Misdirection ( Secret Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Misdirection " , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# def activate ( self , player ) : #NEWLINE# player . opponent . bind ( " character_attack " , self . _reveal ) #NEWLINE# #NEWLINE# def deactivate ( self , player ) : #NEWLINE# player . opponent . unbind ( " character_attack " , self . _reveal ) #NEWLINE# #NEWLINE# def _reveal ( self , character , target ) : #NEWLINE# if isinstance ( target , Hero ) and not character . removed : #NEWLINE# game = character . player . game #NEWLINE# possibilities = copy . copy ( game . current_player . minions ) #NEWLINE# possibilities . extend ( game . other_player . minions ) #NEWLINE# possibilities . append ( game . current_player . hero ) #NEWLINE# possibilities . append ( game . other_player . hero ) #NEWLINE# possibilities . remove ( character . current_target ) #NEWLINE# character . current_target = game . random_choice ( possibilities ) #NEWLINE# #NEWLINE# super ( ) . reveal ( )
class Noble Sacrifice ( Secret Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Noble Sacrifice " , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# def _reveal ( self , attacker , target ) : #NEWLINE# player = attacker . player . game . other_player #NEWLINE# if len ( player . minions ) < 7 and not attacker . removed : #NEWLINE# from hearthbreaker . cards . minions . paladin import Defender Minion #NEWLINE# defender = Defender Minion ( ) #NEWLINE# defender . summon ( player , player . game , len ( player . minions ) ) #NEWLINE# attacker . current_target = player . minions [ - 1 ] #NEWLINE# super ( ) . reveal ( ) #NEWLINE# #NEWLINE# def activate ( self , player ) : #NEWLINE# player . opponent . bind ( " character_attack " , self . _reveal ) #NEWLINE# #NEWLINE# def deactivate ( self , player ) : #NEWLINE# player . opponent . unbind ( " character_attack " , self . _reveal )
class Power Of The Wild ( Spell Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Power of the Wild " , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# def use ( self , player , game ) : #NEWLINE# super ( ) . use ( player , game ) #NEWLINE# option = player . agent . choose_option ( [ Leader Of The Pack ( ) , Summon Panther ( ) ] , player ) #NEWLINE# option . use ( player , game )
class Redemption ( Secret Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Redemption " , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# def _reveal ( self , minion , by ) : #NEWLINE# resurrection = minion . card . summon ( minion . player , minion . game , min ( minion . index , len ( minion . player . minions ) ) ) #NEWLINE# if resurrection : #NEWLINE# resurrection . health = 1 #NEWLINE# super ( ) . reveal ( ) #NEWLINE# #NEWLINE# def activate ( self , player ) : #NEWLINE# player . bind ( " minion_died " , self . _reveal ) #NEWLINE# #NEWLINE# def deactivate ( self , player ) : #NEWLINE# player . unbind ( " minion_died " , self . _reveal )
class Shadow Madness ( Spell Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Shadow Madness " , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target , filter_func = lambda target : target . calculate_attack ( ) <= 3 and target . spell_targetable ( ) ) #NEWLINE# #NEWLINE# def use ( self , player , game ) : #NEWLINE# #NEWLINE# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# minion = self . target . copy ( player ) #NEWLINE# minion . active = True #NEWLINE# minion . exhausted = False #NEWLINE# #NEWLINE# self . target . remove_from_board ( ) #NEWLINE# minion . add_to_board ( len ( player . minions ) ) #NEWLINE# #NEWLINE# minion . add_buff ( Buff Until ( Stolen ( ) , Turn Ended ( ) ) ) #NEWLINE# #NEWLINE# def can_use ( self , player , game ) : #NEWLINE# return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7
class Siphon Soul ( Spell Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Siphon Soul " , 6 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# def use ( self , player , game ) : #NEWLINE# super ( ) . use ( player , game ) #NEWLINE# self . target . die ( self ) #NEWLINE# player . hero . heal ( player . effective_heal_power ( 3 ) , self )
class Spellbender ( Secret Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Spellbender " , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC ) #NEWLINE# self . player = None #NEWLINE# #NEWLINE# def _reveal ( self , card , index ) : #NEWLINE# if card . is_spell ( ) and len ( self . player . minions ) < 7 and card . target and card . target . is_minion ( ) : #NEWLINE# Spellbender Minion ( ) . summon ( self . player , self . player . game , len ( self . player . minions ) ) #NEWLINE# card . target = self . player . minions [ - 1 ] #NEWLINE# super ( ) . reveal ( ) #NEWLINE# #NEWLINE# def activate ( self , player ) : #NEWLINE# player . game . current_player . bind ( " card_played " , self . _reveal ) #NEWLINE# self . player = player #NEWLINE# #NEWLINE# def deactivate ( self , player ) : #NEWLINE# player . game . current_player . unbind ( " card_played " , self . _reveal ) #NEWLINE# self . player = None
class Summoning Portal ( Minion Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Summoning Portal " , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# def create_minion ( self , player ) : #NEWLINE# return Minion ( 0 , 4 , auras = [ Aura ( Mana Change ( - 2 , 1 , minimum = 1 ) , Card Selector ( condition = Is Minion ( ) ) ) ] )
class Thrallmar Farseer ( Minion Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Thrallmar Farseer " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# def create_minion ( self , player ) : #NEWLINE# return Minion ( 2 , 3 , windfury = True )
class Upgrade ( Spell Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Upgrade! " , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# def use ( self , player , game ) : #NEWLINE# super ( ) . use ( player , game ) #NEWLINE# from hearthbreaker . cards . weapons . warrior import Heavy Axe #NEWLINE# if player . weapon : #NEWLINE# player . weapon . durability += 1 #NEWLINE# player . weapon . base_attack += 1 #NEWLINE# else : #NEWLINE# heavy_axe = Heavy Axe ( ) . create_weapon ( player ) #NEWLINE# heavy_axe . equip ( player )
class Wisp ( Minion Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Wisp " , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# def create_minion ( self , player ) : #NEWLINE# return Minion ( 1 , 1 )
class Black Whelp ( Minion Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Black Whelp " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . DRAGON ) #NEWLINE# #NEWLINE# def create_minion ( self , player ) : #NEWLINE# return Minion ( 2 , 1 )
class Dragonkin Sorcerer ( Minion Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Dragonkin Sorcerer " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON ) #NEWLINE# #NEWLINE# def create_minion ( self , player ) : #NEWLINE# return Minion ( 3 , 5 , effects = [ Effect ( Spell Targeted ( ) , [ Action Tag ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) ) ] ) ] )
class Hungry Dragon ( Minion Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Hungry Dragon " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Summon ( Card Query ( conditions = [ Mana Cost ( 1 ) , Is Minion ( ) ] ) ) , Player Selector ( Enemy Player ( ) ) ) ) ) #NEWLINE# #NEWLINE# def create_minion ( self , player ) : #NEWLINE# return Minion ( 5 , 6 )
class Solemn Vigil ( Spell Card ) : #NEWLINE# def __init__ ( self ) : #NEWLINE# super ( ) . __init__ ( " Solemn Vigil " , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , buffs = [ Buff ( Mana Change ( Count ( Dead Minion Selector ( players = Both Player ( ) ) ) , - 1 ) ) ] ) #NEWLINE# #NEWLINE# def use ( self , player , game ) : #NEWLINE# super ( ) . use ( player , game ) #NEWLINE# for n in range ( 0 , 2 ) : #NEWLINE# player . draw ( )
