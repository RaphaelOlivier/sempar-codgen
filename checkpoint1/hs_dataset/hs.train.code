class Acidic #MERGE# Swamp #MERGE# Ooze ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Acidic Swamp Ooze " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Destroy ( ) , Weapon #MERGE# Selector ( Enemy #MERGE# Player ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 2 )
class Ancestral #MERGE# Healing ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ancestral Healing " , 0 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . heal ( player . effective_heal_power ( self . target . calculate_max_health ( ) ) , self ) #NEWLINE# #INDENT# #INDENT# self . target . taunt = True
class Animal #MERGE# Companion ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Animal Companion " , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# beast_list = [ hearthbreaker . cards . minions . hunter . Huffer ( ) , hearthbreaker . cards . minions . hunter . Misha ( ) , hearthbreaker . cards . minions . hunter . Leokk ( ) ] #NEWLINE# #INDENT# #INDENT# card = game . random_choice ( beast_list ) #NEWLINE# #INDENT# #INDENT# card . summon ( player , player . game , len ( player . minions ) ) #NEWLINE# #NEWLINE# #INDENT# def can_use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7
class Arcane #MERGE# Explosion ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Arcane Explosion " , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# for minion in copy . copy ( game . other_player . minions ) : #NEWLINE# #INDENT# #INDENT# #INDENT# minion . damage ( player . effective_spell_damage ( 1 ) , self )
class Arcane #MERGE# Intellect ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Arcane Intellect " , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# for c in range ( 0 , 2 ) : #NEWLINE# #INDENT# #INDENT# #INDENT# player . draw ( )
class Arcane #MERGE# Missiles ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Arcane Missiles " , 1 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# for i in range ( 0 , player . effective_spell_damage ( 3 ) ) : #NEWLINE# #INDENT# #INDENT# #INDENT# targets = copy . copy ( game . other_player . minions ) #NEWLINE# #INDENT# #INDENT# #INDENT# targets . append ( game . other_player . hero ) #NEWLINE# #INDENT# #INDENT# #INDENT# target = game . random_choice ( targets ) #NEWLINE# #INDENT# #INDENT# #INDENT# target . damage ( 1 , self )
class Arcane #MERGE# Shot ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Arcane Shot " , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 2 ) , self )
class Arcanite #MERGE# Reaper ( Weapon #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Arcanite Reaper " , 5 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_weapon ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Weapon ( 5 , 2 )
class Assassinate ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Assassinate " , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . die ( self )
class Backstab ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Backstab " , 0 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . health == target . calculate_max_health ( ) and target . spell_targetable ( ) ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 2 ) , self )
class Blessing #MERGE# Of #MERGE# Kings ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Blessing of Kings " , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . change_attack ( 4 ) #NEWLINE# #INDENT# #INDENT# self . target . increase_health ( 4 )
class Blessing #MERGE# Of #MERGE# Might ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Blessing of Might " , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . change_attack ( 3 )
class Bloodfen #MERGE# Raptor ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Bloodfen Raptor " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 2 )
class Bloodlust ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Bloodlust " , 5 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# for minion in player . minions : #NEWLINE# #INDENT# #INDENT# #INDENT# minion . change_temp_attack ( 3 )
class Bluegill #MERGE# Warrior ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Bluegill Warrior " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 1 , charge = True )
class Boar ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Boar " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 )
class Charge ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Charge " , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . change_attack ( 2 ) #NEWLINE# #INDENT# #INDENT# self . target . add_buff ( Buff ( _Charge ( ) ) )
class Chillwind #MERGE# Yeti ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Chillwind Yeti " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 5 )
class Claw ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Claw " , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# player . hero . change_temp_attack ( 2 ) #NEWLINE# #INDENT# #INDENT# player . hero . increase_armor ( 2 )
class Cleave ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Cleave " , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# minions = copy . copy ( game . other_player . minions ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# for i in range ( 0 , 2 ) : #NEWLINE# #INDENT# #INDENT# #INDENT# minion = game . random_choice ( minions ) #NEWLINE# #INDENT# #INDENT# #INDENT# minions . remove ( minion ) #NEWLINE# #INDENT# #INDENT# #INDENT# minion . damage ( player . effective_spell_damage ( 2 ) , self ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def can_use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) >= 2
class Consecration ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Consecration " , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# for minion in copy . copy ( game . other_player . minions ) : #NEWLINE# #INDENT# #INDENT# #INDENT# minion . damage ( player . effective_spell_damage ( 2 ) , self ) #NEWLINE# #INDENT# #INDENT# game . other_player . hero . damage ( player . effective_spell_damage ( 2 ) , self )
class Core #MERGE# Hound ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Core Hound " , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 9 , 5 )
class Corruption ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Corruption " , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . add_effect ( Effect ( Turn #MERGE# Started ( player = Enemy #MERGE# Player ( ) ) , Action #MERGE# Tag ( Kill ( ) , Self #MERGE# Selector ( ) ) ) )
class Dalaran #MERGE# Mage ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Dalaran Mage " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 4 , spell_damage = 1 )
class Divine #MERGE# Spirit ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Divine Spirit " , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . increase_health ( self . target . health )
class Dragonling #MERGE# Mechanic ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Dragonling Mechanic " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Mechanical #MERGE# Dragonling ( ) ) , Player #MERGE# Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 4 )
class Drain #MERGE# Life ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Drain Life " , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 2 ) , self ) #NEWLINE# #INDENT# #INDENT# player . hero . heal ( player . effective_heal_power ( 2 ) , self )
class Dread #MERGE# Infernal ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Dread Infernal " , 6 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 1 ) , Character #MERGE# Selector ( players = Both #MERGE# Player ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 6 , 6 )
class Elven #MERGE# Archer ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Elven Archer " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 1 ) , Character #MERGE# Selector ( players = Both #MERGE# Player ( ) , picker = User #MERGE# Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 )
class Excess #MERGE# Mana ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Excess Mana " , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# player . draw ( )
class Execute ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Execute " , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target , filter_func = lambda target : target . health != target . calculate_max_health ( ) and target . spell_targetable ( ) ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . die ( self )
class Fan #MERGE# Of #MERGE# Knives ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Fan of Knives " , 3 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# for minion in copy . copy ( game . other_player . minions ) : #NEWLINE# #INDENT# #INDENT# #INDENT# minion . damage ( player . effective_spell_damage ( 1 ) , self ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# player . draw ( )
class Fireball ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Fireball " , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 6 ) , self )
class Flamestrike ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Flamestrike " , 7 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# for minion in copy . copy ( game . other_player . minions ) : #NEWLINE# #INDENT# #INDENT# #INDENT# minion . damage ( player . effective_spell_damage ( 4 ) , self )
class Flametongue #MERGE# Totem ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Flametongue Totem " , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , minion_type = MINION_TYPE . TOTEM ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 0 , 3 , auras = [ Aura ( Change #MERGE# Attack ( 2 ) , Minion #MERGE# Selector ( Adjacent ( ) ) ) ] )
class Frog ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Frog " , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , p ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 0 , 1 , taunt = True )
class Frost #MERGE# Nova ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Frost Nova " , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# for minion in game . other_player . minions : #NEWLINE# #INDENT# #INDENT# #INDENT# minion . add_buff ( Buff ( Frozen ( ) ) )
class Frost #MERGE# Shock ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Frost Shock " , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 1 ) , self ) #NEWLINE# #INDENT# #INDENT# self . target . add_buff ( Buff ( Frozen ( ) ) )
class Frostbolt ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Frostbolt " , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 3 ) , self ) #NEWLINE# #INDENT# #INDENT# self . target . add_buff ( Buff ( Frozen ( ) ) )
class Frostwolf #MERGE# Grunt ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Frostwolf Grunt " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 , taunt = True )
class Goldshire #MERGE# Footman ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Goldshire Footman " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 2 , taunt = True )
class Grimscale #MERGE# Oracle ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Grimscale Oracle " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 , auras = [ Aura ( Change #MERGE# Attack ( 1 ) , Minion #MERGE# Selector ( Is #MERGE# Type ( MINION_TYPE . MURLOC ) , Both #MERGE# Player ( ) ) ) ] )
class Guardian #MERGE# Of #MERGE# Kings ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Guardian of Kings " , 7 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 6 ) , Hero #MERGE# Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 6 )
class Gurubashi #MERGE# Berserker ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Gurubashi Berserker " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 7 , effects = [ #NEWLINE# #INDENT# #INDENT# Effect ( Character #MERGE# Damaged ( condition = Minion #MERGE# Is #MERGE# Target ( ) ) , Action #MERGE# Tag ( Give ( Change #MERGE# Attack ( 3 ) ) , Self #MERGE# Selector ( ) ) ) ] )
class Hammer #MERGE# Of #MERGE# Wrath ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Hammer of Wrath " , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 3 ) , self ) #NEWLINE# #INDENT# #INDENT# player . draw ( )
class Hand #MERGE# Of #MERGE# Protection ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Hand of Protection " , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . divine_shield = True
class Healing #MERGE# Totem ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Healing Totem " , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 0 , 2 , effects = [ Effect ( Turn #MERGE# Ended ( ) , Action #MERGE# Tag ( Heal ( 1 ) , Minion #MERGE# Selector ( condition = None ) ) ) ] )
class Healing #MERGE# Touch ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Healing Touch " , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . heal ( player . effective_heal_power ( 8 ) , self )
class Hex ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Hex " , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# frog = hearthbreaker . cards . minions . neutral . Frog ( ) #NEWLINE# #INDENT# #INDENT# minion = frog . create_minion ( None ) #NEWLINE# #INDENT# #INDENT# minion . card = frog #NEWLINE# #INDENT# #INDENT# self . target . replace ( minion )
class Holy #MERGE# Light ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Holy Light " , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . heal ( player . effective_heal_power ( 6 ) , self )
class Holy #MERGE# Nova ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Holy Nova " , 5 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# for minion in copy . copy ( game . other_player . minions ) : #NEWLINE# #INDENT# #INDENT# #INDENT# minion . damage ( player . effective_spell_damage ( 2 ) , self ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# for minion in player . minions : #NEWLINE# #INDENT# #INDENT# #INDENT# minion . heal ( player . effective_heal_power ( 2 ) , self )
class Holy #MERGE# Smite ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Holy Smite " , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 2 ) , self )
class Houndmaster ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Houndmaster " , 4 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Give ( [ Buff ( Change #MERGE# Health ( 2 ) ) , Buff ( Change #MERGE# Attack ( 2 ) ) , Buff ( Taunt ( ) ) ] ) , Minion #MERGE# Selector ( Is #MERGE# Type ( MINION_TYPE . BEAST ) , picker = User #MERGE# Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 3 )
class Huffer ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Huffer " , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 2 , charge = True )
class Humility ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Humility " , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . change_attack ( 1 - self . target . calculate_attack ( ) )
class Hunters #MERGE# Mark ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Hunter's Mark " , 0 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . set_health_to ( 1 )
class Ironforge #MERGE# Rifleman ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ironforge Rifleman " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Damage ( 1 ) , Character #MERGE# Selector ( players = Both #MERGE# Player ( ) , picker = User #MERGE# Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 )
class Ironfur #MERGE# Grizzly ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ironfur Grizzly " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 3 , taunt = True )
class Kill #MERGE# Command ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Kill Command " , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# beasts = hearthbreaker . targeting . find_friendly_minion_battlecry_target ( #NEWLINE# #INDENT# #INDENT# player . game , lambda x : x . card . minion_type is MINION_TYPE . BEAST ) #NEWLINE# #INDENT# #INDENT# if beasts is None : #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 3 ) , self ) #NEWLINE# #INDENT# #INDENT# else : #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 5 ) , self )
class Kobold #MERGE# Geomancer ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Kobold Geomancer " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 , spell_damage = 1 )
class Korkron #MERGE# Elite ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Kor'kron Elite " , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 3 , charge = True )
class Leokk ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Leokk " , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 4 , auras = [ Aura ( Change #MERGE# Attack ( 1 ) , Minion #MERGE# Selector ( ) ) ] )
class Lights #MERGE# Justice ( Weapon #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Light's Justice " , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE ) #NEWLINE# #NEWLINE# #INDENT# def create_weapon ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Weapon ( 1 , 4 )
class Lord #MERGE# Of #MERGE# The #MERGE# Arena ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Lord of the Arena " , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 6 , 5 , taunt = True )
class Mechanical #MERGE# Dragonling ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mechanical Dragonling " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 1 )
class Mind #MERGE# Blast ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mind Blast " , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# game . other_player . hero . damage ( player . effective_spell_damage ( 5 ) , self )
class Mind #MERGE# Control ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mind Control " , 10 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# new_minion = self . target . copy ( player ) #NEWLINE# #INDENT# #INDENT# self . target . remove_from_board ( ) #NEWLINE# #INDENT# #INDENT# new_minion . add_to_board ( len ( player . minions ) ) #NEWLINE# #NEWLINE# #INDENT# def can_use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7
class Mind #MERGE# Vision ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mind Vision " , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# if ( len ( game . other_player . hand ) > 0 ) : #NEWLINE# #INDENT# #INDENT# #INDENT# card = copy . deepcopy ( game . random_choice ( game . other_player . hand ) ) #NEWLINE# #INDENT# #INDENT# #INDENT# player . hand . append ( card ) #NEWLINE# #INDENT# #INDENT# #INDENT# card . player = player
class Mirror #MERGE# Image ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mirror Image " , 1 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# for i in range ( 0 , 2 ) : #NEWLINE# #INDENT# #INDENT# #INDENT# Mirror #MERGE# Image #MERGE# Minion ( ) . summon ( player , game , len ( player . minions ) ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def can_use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7
class Mirror #MERGE# Image ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mirror Image " , 1 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# for i in range ( 0 , 2 ) : #NEWLINE# #INDENT# #INDENT# #INDENT# Mirror #MERGE# Image #MERGE# Minion ( ) . summon ( player , game , len ( player . minions ) ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def can_use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7
class Misha ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Misha " , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 4 , taunt = True )
class Moonfire ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Moonfire " , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 1 ) , self )
class Murloc #MERGE# Raider ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Murloc Raider " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . MURLOC ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 1 )
class Murloc #MERGE# Scout ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Murloc Scout " , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MURLOC ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 )
class Murloc #MERGE# Tidehunter ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Murloc Tidehunter " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Summon ( Murloc #MERGE# Scout ( ) ) , Player #MERGE# Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 1 )
class Nightblade ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Nightblade " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Damage ( 3 ) , Hero #MERGE# Selector ( Enemy #MERGE# Player ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 4 )
class Northshire #MERGE# Cleric ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Northshire Cleric " , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 3 , effects = [ Effect ( Character #MERGE# Healed ( condition = Is #MERGE# Minion ( ) , player = Both #MERGE# Player ( ) ) , Action #MERGE# Tag ( Draw ( ) , Player #MERGE# Selector ( ) ) ) ] )
class Novice #MERGE# Engineer ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Novice Engineer " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Draw ( ) , Player #MERGE# Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 )
class Oasis #MERGE# Snapjaw ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Oasis Snapjaw " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 7 )
class Ogre #MERGE# Magi ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ogre Magi " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 4 , spell_damage = 1 )
class Raid #MERGE# Leader ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Raid Leader " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 , auras = [ Aura ( Change #MERGE# Attack ( 1 ) , Minion #MERGE# Selector ( ) ) ] )
class Razorfen #MERGE# Hunter ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Razorfen Hunter " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Boar ( ) ) , Player #MERGE# Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 3 )
class Reckless #MERGE# Rocketeer ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Reckless Rocketeer " , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 2 , charge = True )
class River #MERGE# Crocolisk ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " River Crocolisk " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 3 )
class Rockbiter #MERGE# Weapon ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Rockbiter Weapon " , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_friendly_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . change_temp_attack ( 3 )
class Sacrificial #MERGE# Pact ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Sacrificial Pact " , 0 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target , filter_func = lambda character : character . card . minion_type == MINION_TYPE . DEMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . die ( self ) #NEWLINE# #INDENT# #INDENT# player . hero . heal ( player . effective_heal_power ( 5 ) , self )
class Sap ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Sap " , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . bounce ( )
class Savage #MERGE# Roar ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Savage Roar " , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# for minion in player . minions : #NEWLINE# #INDENT# #INDENT# #INDENT# minion . change_temp_attack ( 2 ) #NEWLINE# #INDENT# #INDENT# player . hero . change_temp_attack ( 2 )
class Shadow #MERGE# Bolt ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Shadow Bolt " , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 4 ) , self )
class Shadow #MERGE# Word #MERGE# Death ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Shadow Word: Death " , 3 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . calculate_attack ( ) >= 5 and target . spell_targetable ( ) ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . die ( self )
class Shadow #MERGE# Word #MERGE# Pain ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Shadow Word: Pain " , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . calculate_attack ( ) <= 3 and target . spell_targetable ( ) ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . die ( self )
class Shattered #MERGE# Sun #MERGE# Cleric ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Shattered Sun Cleric " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( [ Buff ( Change #MERGE# Attack ( 1 ) ) , Buff ( Change #MERGE# Health ( 1 ) ) ] ) , Minion #MERGE# Selector ( picker = User #MERGE# Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 2 )
class Sheep ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Sheep " , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , p ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 )
class Shield #MERGE# Block ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Shield Block " , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# player . hero . increase_armor ( 5 ) #NEWLINE# #INDENT# #INDENT# player . draw ( )
class Shiv ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Shiv " , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 1 ) , self ) #NEWLINE# #INDENT# #INDENT# player . draw ( )
class Silver #MERGE# Hand #MERGE# Recruit ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Silver Hand Recruit " , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , False ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 )
class Soulfire ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Soulfire " , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 4 ) , self ) #NEWLINE# #INDENT# #INDENT# player . discard ( )
class Sprint ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Sprint " , 7 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# for i in range ( 0 , 4 ) : #NEWLINE# #INDENT# #INDENT# #INDENT# player . draw ( )
class Starfire ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Starfire " , 6 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 5 ) , self ) #NEWLINE# #INDENT# #INDENT# player . draw ( )
class Starving #MERGE# Buzzard ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Starving Buzzard " , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 2 , effects = [ Effect ( Minion #MERGE# Placed ( Is #MERGE# Type ( MINION_TYPE . BEAST ) ) , Action #MERGE# Tag ( Draw ( ) , Player #MERGE# Selector ( ) ) ) ] )
class Stoneclaw #MERGE# Totem ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Stoneclaw Totem " , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 0 , 2 , taunt = True )
class Stonetusk #MERGE# Boar ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Stonetusk Boar " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 , charge = True )
class Stormpike #MERGE# Commando ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Stormpike Commando " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 2 ) , Character #MERGE# Selector ( players = Both #MERGE# Player ( ) , picker = User #MERGE# Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 2 )
class Stormwind #MERGE# Champion ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Stormwind Champion " , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 6 , 6 , auras = [ Aura ( Change #MERGE# Attack ( 1 ) , Minion #MERGE# Selector ( ) ) , Aura ( Change #MERGE# Health ( 1 ) , Minion #MERGE# Selector ( ) ) ] )
class Swipe ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Swipe " , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_enemy_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . damage ( 4 , self ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# for minion in copy . copy ( game . other_player . minions ) : #NEWLINE# #INDENT# #INDENT# #INDENT# if minion is not self . target : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# minion . damage ( player . effective_spell_damage ( 1 ) , self ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# if self . target is not game . other_player . hero : #NEWLINE# #INDENT# #INDENT# #INDENT# game . other_player . hero . damage ( player . effective_spell_damage ( 1 ) , self )
class Timber #MERGE# Wolf ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Timber Wolf " , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 , auras = [ Aura ( Change #MERGE# Attack ( 1 ) , Minion #MERGE# Selector ( Is #MERGE# Type ( MINION_TYPE . BEAST ) ) ) ] )
class Totemic #MERGE# Might ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Totemic Might " , 0 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# for minion in player . minions : #NEWLINE# #INDENT# #INDENT# #INDENT# if minion . card . minion_type == MINION_TYPE . TOTEM : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# minion . increase_health ( 2 )
class Tracking ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Tracking " , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# cards = [ ] #NEWLINE# #INDENT# #INDENT# for card_index in range ( 0 , 3 ) : #NEWLINE# #INDENT# #INDENT# #INDENT# if player . can_draw ( ) : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# cards . append ( player . deck . draw ( game ) ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# if len ( cards ) > 0 : #NEWLINE# #INDENT# #INDENT# #INDENT# chosen_card = player . agent . choose_option ( cards , player ) #NEWLINE# #INDENT# #INDENT# #INDENT# player . hand . append ( chosen_card ) #NEWLINE# #INDENT# #INDENT# #INDENT# player . hand [ - 1 ] . player = player #NEWLINE# #INDENT# #INDENT# #INDENT# player . trigger ( " card_drawn " , chosen_card )
class Truesilver #MERGE# Champion ( Weapon #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Truesilver Champion " , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_weapon ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Weapon ( 4 , 2 , effects = [ Effect ( Character #MERGE# Attack ( Is #MERGE# Hero ( ) ) , Action #MERGE# Tag ( Heal ( 2 ) , Hero #MERGE# Selector ( ) ) ) ] )
class Tundra #MERGE# Rhino ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Tundra Rhino " , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 5 , charge = True , auras = [ Aura ( Charge ( ) , Minion #MERGE# Selector ( Is #MERGE# Type ( MINION_TYPE . BEAST ) ) ) ] )
class Vanish ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Vanish " , 6 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# targets = copy . copy ( game . other_player . minions ) #NEWLINE# #INDENT# #INDENT# targets . extend ( player . minions ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# for minion in sorted ( targets , key = lambda m : m . born ) : #NEWLINE# #INDENT# #INDENT# #INDENT# minion . bounce ( )
class Voidwalker ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Voidwalker " , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , minion_type = MINION_TYPE . DEMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 3 , taunt = True )
class Warsong #MERGE# Commander ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Warsong Commander " , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 3 , effects = [ Effect ( Minion #MERGE# Placed ( Attack #MERGE# Less #MERGE# Than #MERGE# Or #MERGE# Equal #MERGE# To ( 3 ) ) , Action #MERGE# Tag ( Give ( Charge ( ) ) , Target #MERGE# Selector ( ) ) ) ] )
class Water #MERGE# Elemental ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Water Elemental " , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 6 , effects = [ Effect ( Did #MERGE# Damage ( ) , Action #MERGE# Tag ( Give ( Frozen ( ) ) , Target #MERGE# Selector ( ) ) ) ] )
class Whirlwind ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Whirlwind " , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# targets = copy . copy ( game . other_player . minions ) #NEWLINE# #INDENT# #INDENT# targets . extend ( game . current_player . minions ) #NEWLINE# #INDENT# #INDENT# for minion in targets : #NEWLINE# #INDENT# #INDENT# #INDENT# minion . damage ( player . effective_spell_damage ( 1 ) , self )
class Wicked #MERGE# Knife ( Weapon #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Wicked Knife " , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , False ) #NEWLINE# #NEWLINE# #INDENT# def create_weapon ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Weapon ( 1 , 2 )
class Wild #MERGE# Growth ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Wild Growth " , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# if player . max_mana < 10 : #NEWLINE# #INDENT# #INDENT# #INDENT# player . max_mana += 1 #NEWLINE# #INDENT# #INDENT# else : #NEWLINE# #INDENT# #INDENT# #INDENT# player . hand . append ( Excess #MERGE# Mana ( ) ) #NEWLINE# #INDENT# #INDENT# #INDENT# player . hand [ - 1 ] . player = player
class Windfury ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Windfury " , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . add_buff ( Buff ( _Windfury ( ) ) )
class Windspeaker ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Windspeaker " , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Windfury ( ) ) , Minion #MERGE# Selector ( picker = User #MERGE# Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 3 )
class Wolfrider ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Wolfrider " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 1 , charge = True )
class Alexstraszas #MERGE# Champion ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Alexstrasza's Champion " , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , battlecry = ( Battlecry ( Give ( [ Buff ( Change #MERGE# Attack ( 1 ) ) , Buff ( Charge ( ) ) ] ) , Self #MERGE# Selector ( ) , Greater #MERGE# Than ( Count ( Card #MERGE# Selector ( condition = Is #MERGE# Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 3 )
class Ancestral #MERGE# Knowledge ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ancestral Knowledge " , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 2 ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# for c in range ( 0 , 2 ) : #NEWLINE# #INDENT# #INDENT# #INDENT# player . draw ( )
class Anubarak ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Anub'arak " , 9 , CHARACTER_CLASS . ROGUE , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 8 , 4 , deathrattle = [ Deathrattle ( Bounce ( ) , Self #MERGE# Selector ( ) ) , Deathrattle ( Summon ( Nerubian ( ) ) , Player #MERGE# Selector ( ) ) ] )
class Arcane #MERGE# Blast ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Arcane Blast " , 1 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 2 + player . spell_damage ) , self )
class Argent #MERGE# Horserider ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Argent Horserider " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 1 , charge = True , divine_shield = True )
class Argent #MERGE# Lance ( Weapon #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Argent Lance " , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , battlecry = Battlecry ( Joust ( Increase #MERGE# Durability ( ) ) , Self #MERGE# Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_weapon ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Weapon ( 2 , 2 )
class Argent #MERGE# Watchman ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Argent Watchman " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 4 , buffs = [ Buff ( Cant #MERGE# Attack ( ) ) ] , effects = [ Effect ( Used #MERGE# Power ( ) , Action #MERGE# Tag ( Give ( Buff #MERGE# Until ( Can #MERGE# Attack ( ) , Turn #MERGE# Ended ( ) ) ) , Self #MERGE# Selector ( ) ) ) ] )
class Armored #MERGE# Warhorse ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Armored Warhorse " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Joust ( Give ( Buff ( Charge ( ) ) ) ) , Self #MERGE# Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 3 )
class Healing #MERGE# Totem ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Healing Totem " , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 0 , 2 , effects = [ Effect ( Turn #MERGE# Ended ( ) , Action #MERGE# Tag ( Heal ( 1 ) , Minion #MERGE# Selector ( condition = None ) ) ) ] )
class Nerubian ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Nerubian " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , p ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 4 )
class Searing #MERGE# Totem ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Searing Totem " , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 )
class Stoneclaw #MERGE# Totem ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Stoneclaw Totem " , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 0 , 2 , taunt = True )
class Tournament #MERGE# Medic ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Tournament Medic " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 8 , effects = [ Effect ( Used #MERGE# Power ( ) , Action #MERGE# Tag ( Heal ( 2 ) , Hero #MERGE# Selector ( ) ) ) ] )
class Wrath #MERGE# Of #MERGE# Air #MERGE# Totem ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Wrath of Air Totem " , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 0 , 2 , spell_damage = 1 )
class Ancestors #MERGE# Call ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ancestor's Call " , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# #INDENT# def can_use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# return super ( ) . can_use ( player , game ) and ( len ( player . minions ) < 7 or len ( player . opponent . minions ) < 7 ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# for player in game . players : #NEWLINE# #INDENT# #INDENT# #INDENT# minions = [ card for card in player . hand if card . is_minion ( ) ] #NEWLINE# #INDENT# #INDENT# #INDENT# if len ( minions ) and len ( player . minions ) < 7 : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# minion_card = game . random_choice ( minions ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# minion_card . unattach ( ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# player . hand . remove ( minion_card ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# minion_card . summon ( player , game , len ( player . minions ) )
class Anima #MERGE# Golem ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Anima Golem " , 6 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 9 , 9 , effects = [ Effect ( Turn #MERGE# Ended ( Minion #MERGE# Count #MERGE# Is ( 1 ) , Both #MERGE# Player ( ) ) , Action #MERGE# Tag ( Kill ( ) , Self #MERGE# Selector ( ) ) ) ] )
class Antique #MERGE# Healbot ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Antique Healbot " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Heal ( 8 ) , Hero #MERGE# Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 3 )
class Arcane #MERGE# Nullifier #MERGE# X21 ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Arcane Nullifier X-21 " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 5 , taunt = True , spell_targetable = False )
class Armor #MERGE# Plating ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Armor Plating " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . increase_health ( 1 )
class Blingtron3000 ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Blingtron 3000 " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Equip ( Card #MERGE# Query ( conditions = [ Is #MERGE# Weapon ( ) ] ) ) , Player #MERGE# Selector ( players = Both #MERGE# Player ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 4 )
class Bolvar #MERGE# Fordragon ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Bolvar Fordragon " , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . LEGENDARY , effects = [ Effect ( Minion #MERGE# Died ( ) , Action #MERGE# Tag ( Give ( Change #MERGE# Attack ( 1 ) ) , Self #MERGE# Selector ( ) ) ) ] ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 7 )
class Bomb #MERGE# Lobber ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Bomb Lobber " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Minion #MERGE# Selector ( None , Enemy #MERGE# Player ( ) , Random #MERGE# Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 3 )
class Boom #MERGE# Bot ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Boom Bot " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 , deathrattle = Deathrattle ( Damage ( Random #MERGE# Amount ( 1 , 4 ) ) , Character #MERGE# Selector ( players = Enemy #MERGE# Player ( ) , picker = Random #MERGE# Picker ( ) ) ) )
class Bouncing #MERGE# Blade ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Bouncing Blade " , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# #INDENT# def can_use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# return super ( ) . can_use ( player , game ) and len ( player . minions ) + len ( player . opponent . minions ) >= 1 #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# targets = player . minions [ : ] + player . opponent . minions [ : ] #NEWLINE# #INDENT# #INDENT# if len ( targets ) : #NEWLINE# #INDENT# #INDENT# #INDENT# for bounces in range ( 80 ) : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# target = game . random_choice ( targets ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# target . damage ( player . effective_spell_damage ( 1 ) , self ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# if target . dead : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# break
class Call #MERGE# Pet ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Call Pet " , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# def reduce_cost ( card ) : #NEWLINE# #INDENT# #INDENT# #INDENT# if card . is_minion ( ) and card . minion_type == MINION_TYPE . BEAST : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# card . add_buff ( Buff ( Mana #MERGE# Change ( - 4 ) ) ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# player . bind_once ( " card_drawn " , reduce_cost ) #NEWLINE# #INDENT# #INDENT# player . draw ( )
class Chicken ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Chicken " , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , p ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 )
class Clockwork #MERGE# Giant ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Clockwork Giant " , 12 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH , buffs = [ Buff ( Mana #MERGE# Change ( Count ( Card #MERGE# Selector ( Enemy #MERGE# Player ( ) ) ) , - 1 ) ) ] ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 8 , 8 )
class Clockwork #MERGE# Gnome ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Clockwork Gnome " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# from hearthbreaker . cards . spells . neutral import spare_part_list #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 1 , deathrattle = Deathrattle ( Add #MERGE# Card ( Card #MERGE# Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player #MERGE# Selector ( ) ) )
class Cobalt #MERGE# Guardian ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Cobalt Guardian " , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 6 , 3 , effects = [ Effect ( Minion #MERGE# Summoned ( Is #MERGE# Type ( MINION_TYPE . MECH ) ) , Action #MERGE# Tag ( Give ( Divine #MERGE# Shield ( ) ) , Self #MERGE# Selector ( ) ) ) ] )
class Cobra #MERGE# Shot ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Cobra Shot " , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 3 ) , self ) #NEWLINE# #INDENT# #INDENT# game . other_player . hero . damage ( player . effective_spell_damage ( 3 ) , self )
class Coghammer ( Weapon #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Coghammer " , 3 , CHARACTER_CLASS . PALADIN , CARD_RARITY . EPIC , battlecry = Battlecry ( Give ( [ Buff ( Divine #MERGE# Shield ( ) ) , Buff ( Taunt ( ) ) ] ) , Minion #MERGE# Selector ( picker = Random #MERGE# Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_weapon ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Weapon ( 2 , 3 )
class Cogmaster ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Cogmaster " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 2 , auras = [ Aura ( Change #MERGE# Attack ( 2 ) , Self #MERGE# Selector ( ) , Greater #MERGE# Than ( Count ( Minion #MERGE# Selector ( Is #MERGE# Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) ] )
class Crush ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Crush " , 7 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target , buffs = [ Buff ( Mana #MERGE# Change ( - 4 ) , Greater #MERGE# Than ( Count ( Minion #MERGE# Selector ( Is #MERGE# Damaged ( ) ) ) , value = 0 ) ) ] ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . die ( self )
class Dark #MERGE# Wispers ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Dark Wispers " , 6 , CHARACTER_CLASS . DRUID , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# #INDENT# def can_use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# return ( super ( ) . can_use ( player , game ) and ( len ( player . minions ) < 7 or hearthbreaker . targeting . find_minion_spell_target ( game , lambda t : t . spell_targetable ( ) ) is not None ) ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# class Buff5 ( Choice #MERGE# Card ) : #NEWLINE# #INDENT# #INDENT# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# super ( ) . __init__ ( " Give a minion +5/+5 and Taunt " , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def can_use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# return hearthbreaker . targeting . find_minion_spell_target ( game , lambda t : t . spell_targetable ( ) ) is not None #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# targets = hearthbreaker . targeting . find_minion_spell_target ( game , lambda t : t . spell_targetable ( ) ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# target = player . agent . choose_target ( targets ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# target . change_attack ( 5 ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# target . increase_health ( 5 ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# target . taunt = True #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# class Wisps5 ( Choice #MERGE# Card ) : #NEWLINE# #INDENT# #INDENT# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# super ( ) . __init__ ( " Summon 5 Wisps " , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def can_use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# return len ( player . minions ) < 7 #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# from hearthbreaker . cards . minions . neutral import Wisp #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# for i in range ( 0 , 5 ) : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# wisp = Wisp ( ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# wisp . summon ( player , game , len ( player . minions ) ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# if len ( hearthbreaker . targeting . find_minion_spell_target ( game , lambda t : t . spell_targetable ( ) ) ) == 0 : #NEWLINE# #INDENT# #INDENT# #INDENT# option = Wisps5 ( ) #NEWLINE# #INDENT# #INDENT# else : #NEWLINE# #INDENT# #INDENT# #INDENT# option = player . agent . choose_option ( [ Wisps5 ( ) , Buff5 ( ) ] , player ) #NEWLINE# #INDENT# #INDENT# option . use ( player , game )
class Darkbomb ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Darkbomb " , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 3 ) , self )
class Demonheart ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Demonheart " , 5 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# targets = copy . copy ( player . game . current_player . minions ) #NEWLINE# #INDENT# #INDENT# if self . target . card . minion_type is MINION_TYPE . DEMON and self . target in targets : #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . change_attack ( 5 ) #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . increase_health ( 5 ) #NEWLINE# #INDENT# #INDENT# else : #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 5 ) , self )
class Doctor #MERGE# Boom ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Dr. Boom " , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Summon ( Boom #MERGE# Bot ( ) , 2 ) , Player #MERGE# Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 7 , 7 )
class Druid #MERGE# Of #MERGE# The #MERGE# Fang ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Druid of the Fang " , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , battlecry = Battlecry ( Transform ( Cobra #MERGE# Form ( ) ) , Self #MERGE# Selector ( ) , Greater #MERGE# Than ( Count ( Minion #MERGE# Selector ( Is #MERGE# Type ( MINION_TYPE . BEAST ) ) ) , value = 0 ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 4 )
class Druid #MERGE# Of #MERGE# The #MERGE# Fang ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Druid of the Fang " , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , battlecry = Battlecry ( Transform ( Cobra #MERGE# Form ( ) ) , Self #MERGE# Selector ( ) , Greater #MERGE# Than ( Count ( Minion #MERGE# Selector ( Is #MERGE# Type ( MINION_TYPE . BEAST ) ) ) , value = 0 ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 4 )
class Dunemaul #MERGE# Shaman ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Dunemaul Shaman " , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , overload = 1 ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 4 , windfury = True , effects = [ Effect ( Attack ( ) , Action #MERGE# Tag ( Change #MERGE# Target ( Character #MERGE# Selector ( Not #MERGE# Current #MERGE# Target ( ) , Enemy #MERGE# Player ( ) , Random #MERGE# Picker ( ) ) ) , Self #MERGE# Selector ( ) , And ( One #MERGE# In ( 2 ) , Opponent #MERGE# Minion #MERGE# Count #MERGE# Is #MERGE# Greater #MERGE# Than ( 0 ) ) ) ) ] )
class Enhanceo #MERGE# Mechano ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Enhance-o Mechano " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Give ( [ Buff ( Windfury ( ) ) , Buff ( Taunt ( ) ) , Buff ( Divine #MERGE# Shield ( ) ) ] , Random #MERGE# Picker ( ) ) , Minion #MERGE# Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 2 )
class Explosive #MERGE# Sheep ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Explosive Sheep " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 , deathrattle = Deathrattle ( Damage ( 2 ) , Character #MERGE# Selector ( players = Both #MERGE# Player ( ) ) ) , taunt = True )
class Feign #MERGE# Death ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Feign Death " , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# for minion in sorted ( player . minions , key = lambda m : m . born ) : #NEWLINE# #INDENT# #INDENT# #INDENT# for deathrattle in minion . deathrattle : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# deathrattle . do ( minion ) #NEWLINE# #INDENT# #INDENT# #INDENT# if player . double_deathrattle : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# for deathrattle in minion . deathrattle : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# deathrattle . do ( minion )
class Fel #MERGE# Cannon ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Fel Cannon " , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 5 , effects = [ Effect ( Turn #MERGE# Ended ( ) , Action #MERGE# Tag ( Damage ( 2 ) , Minion #MERGE# Selector ( Not ( Is #MERGE# Type ( MINION_TYPE . MECH , True ) ) , Both #MERGE# Player ( ) , Random #MERGE# Picker ( ) ) ) ) ] )
class Fel #MERGE# Reaver ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Fel Reaver " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 8 , 8 , effects = [ Effect ( Card #MERGE# Played ( player = Enemy #MERGE# Player ( ) ) , Action #MERGE# Tag ( Discard ( 3 , query = Card #MERGE# Query ( source = CARD_SOURCE . MY_DECK ) ) , Player #MERGE# Selector ( ) ) ) ] )
class Finicky #MERGE# Cloakfield ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Finicky Cloakfield " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . add_buff ( Buff #MERGE# Until ( Stealth ( ) , Turn #MERGE# Started ( ) ) )
class Flame #MERGE# Leviathan ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Flame Leviathan " , 7 , CHARACTER_CLASS . MAGE , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . MECH , effects = [ Effect ( Drawn ( ) , Action #MERGE# Tag ( Damage ( 2 ) , Character #MERGE# Selector ( None , Both #MERGE# Player ( ) ) ) ) ] ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 7 , 7 )
class Flamecannon ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Flamecannon " , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# targets = hearthbreaker . targeting . find_enemy_minion_battlecry_target ( player . game , lambda x : True ) #NEWLINE# #INDENT# #INDENT# target = game . random_choice ( targets ) #NEWLINE# #INDENT# #INDENT# target . damage ( player . effective_spell_damage ( 4 ) , self ) #NEWLINE# #NEWLINE# #INDENT# def can_use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) >= 1
class Foe #MERGE# Reaper4000 ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Foe Reaper 4000 " , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 6 , 9 , effects = [ Effect ( Attack ( Is #MERGE# Minion ( ) ) , Action #MERGE# Tag ( Damage ( Attribute ( " attack " , Self #MERGE# Selector ( ) ) ) , Minion #MERGE# Selector ( Target #MERGE# Adjacent ( ) , Enemy #MERGE# Player ( ) ) ) ) ] )
class Force #MERGE# Tank #MERGE# MAX ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Force-Tank MAX " , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 7 , 7 , divine_shield = True )
class Gahzrilla ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Gahz'rilla " , 7 , CHARACTER_CLASS . HUNTER , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 6 , 9 , effects = [ Effect ( Damaged ( ) , Action #MERGE# Tag ( Give ( Buff ( Double #MERGE# Attack ( ) ) ) , Self #MERGE# Selector ( ) ) ) ] )
class Gallywixs #MERGE# Coin ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Gallywix's Coin " , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# if player . mana < 10 : #NEWLINE# #INDENT# #INDENT# #INDENT# player . mana += 1
class Gazlowe ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Gazlowe " , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 6 , effects = [ Effect ( Spell #MERGE# Cast ( Mana #MERGE# Cost ( 1 ) ) , Action #MERGE# Tag ( Add #MERGE# Card ( Card #MERGE# Query ( conditions = [ Is #MERGE# Type ( MINION_TYPE . MECH ) ] ) ) , Player #MERGE# Selector ( ) ) ) ] )
class Gilblin #MERGE# Stalker ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Gilblin Stalker " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 3 , stealth = True )
class Glaivezooka ( Weapon #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Glaivezooka " , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Change #MERGE# Attack ( 1 ) ) , Minion #MERGE# Selector ( None , picker = Random #MERGE# Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_weapon ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Weapon ( 2 , 2 )
class Gnomeregan #MERGE# Infantry ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Gnomeregan Infantry " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 4 , charge = True , taunt = True )
class Goblin #MERGE# Blastmage ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Goblin Blastmage " , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 1 ) , Character #MERGE# Selector ( None , Enemy #MERGE# Player ( ) , Random #MERGE# Picker ( 4 ) ) , Greater #MERGE# Than ( Count ( Minion #MERGE# Selector ( Is #MERGE# Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 4 )
class Goblin #MERGE# Sapper ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Goblin Sapper " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 4 , buffs = [ Buff ( Change #MERGE# Attack ( 4 ) , Greater #MERGE# Than ( Count ( Card #MERGE# Selector ( Enemy #MERGE# Player ( ) ) ) , value = 5 ) ) ] )
class Grove #MERGE# Tender ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Grove Tender " , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , choices = [ #NEWLINE# #INDENT# #INDENT# Choice ( Gift #MERGE# Of #MERGE# Mana ( ) , Give #MERGE# Mana #MERGE# Crystal ( ) , Player #MERGE# Selector ( players = Both #MERGE# Player ( ) ) ) , #NEWLINE# #INDENT# #INDENT# Choice ( Gift #MERGE# Of #MERGE# Cards ( ) , Draw ( ) , Player #MERGE# Selector ( players = Both #MERGE# Player ( ) ) ) #NEWLINE# #INDENT# #INDENT# ] ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 4 )
class Hemet #MERGE# Nesingwary ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Hemet Nesingwary " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Kill ( ) , Minion #MERGE# Selector ( Is #MERGE# Type ( MINION_TYPE . BEAST ) , players = Both #MERGE# Player ( ) , picker = User #MERGE# Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 6 , 3 )
class Hobgoblin ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Hobgoblin " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 3 , effects = [ Effect ( Minion #MERGE# Placed ( Base #MERGE# Attack #MERGE# Equal #MERGE# To ( 1 ) ) , Action #MERGE# Tag ( Give ( [ Buff ( Change #MERGE# Health ( 2 ) ) , Buff ( Change #MERGE# Attack ( 2 ) ) ] ) , Target #MERGE# Selector ( ) ) ) ] )
class Illuminator ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Illuminator " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 4 , effects = [ Effect ( Turn #MERGE# Ended ( Has #MERGE# Secret ( ) ) , Action #MERGE# Tag ( Heal ( 4 ) , Hero #MERGE# Selector ( ) ) ) ] )
class Imp ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Imp " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False , minion_type = MINION_TYPE . DEMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 )
class Implosion ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Imp-losion " , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# amount = player . effective_spell_damage ( game . random_amount ( 2 , 4 ) ) #NEWLINE# #INDENT# #INDENT# had_shield = self . target . divine_shield #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . damage ( amount , self ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# if not had_shield : #NEWLINE# #INDENT# #INDENT# #INDENT# for i in range ( 0 , amount ) : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# imp = Imp ( ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# imp . summon ( player , game , len ( player . minions ) )
class Jeeves ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Jeeves " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 4 , effects = [ Effect ( Turn #MERGE# Ended ( player = Both #MERGE# Player ( ) ) , Action #MERGE# Tag ( Draw ( Difference ( Count ( Card #MERGE# Selector ( players = Current #MERGE# Player ( ) ) ) , value = 3 ) ) , Player #MERGE# Selector ( Current #MERGE# Player ( ) ) ) ) ] )
class Junkbot ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Junkbot " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 5 , effects = [ Effect ( Minion #MERGE# Died ( Is #MERGE# Type ( MINION_TYPE . MECH ) ) , Action #MERGE# Tag ( Give ( [ Buff ( Change #MERGE# Attack ( 2 ) ) , Buff ( Change #MERGE# Health ( 2 ) ) ] ) , Self #MERGE# Selector ( ) ) ) ] )
class Kezan #MERGE# Mystic ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Kezan Mystic " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Apply #MERGE# Secret ( CARD_SOURCE . ENEMY_SECRETS ) , Player #MERGE# Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 3 )
class King #MERGE# Of #MERGE# Beasts ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " King of Beasts " , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Give ( Buff ( Change #MERGE# Attack ( Count ( Minion #MERGE# Selector ( Is #MERGE# Type ( MINION_TYPE . BEAST ) ) ) ) ) ) , Self #MERGE# Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 6 , taunt = True )
class Light #MERGE# Of #MERGE# The #MERGE# Naaru ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Light of the Naaru " , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . heal ( player . effective_heal_power ( 3 ) , self ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# lightwarden = Lightwarden ( ) #NEWLINE# #INDENT# #INDENT# if self . target is None : #NEWLINE# #INDENT# #INDENT# #INDENT# lightwarden . summon ( player , game , len ( player . minions ) ) #NEWLINE# #INDENT# #INDENT# elif self . target . health != self . target . calculate_max_health ( ) : #NEWLINE# #INDENT# #INDENT# #INDENT# lightwarden . summon ( player , game , len ( player . minions ) )
class Lightbomb ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Lightbomb " , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# targets = copy . copy ( game . other_player . minions ) #NEWLINE# #INDENT# #INDENT# targets . extend ( player . minions ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# for minion in targets : #NEWLINE# #INDENT# #INDENT# #INDENT# minion . damage ( player . effective_spell_damage ( minion . calculate_attack ( ) ) , self )
class Lil #MERGE# Exorcist ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Lil' Exorcist " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( [ Buff ( Change #MERGE# Attack ( Count ( Minion #MERGE# Selector ( Minion #MERGE# Has #MERGE# Deathrattle ( ) , Enemy #MERGE# Player ( ) ) ) ) ) , Buff ( Change #MERGE# Health ( Count ( Minion #MERGE# Selector ( Minion #MERGE# Has #MERGE# Deathrattle ( ) , Enemy #MERGE# Player ( ) ) ) ) ) ] ) , Self #MERGE# Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 3 , taunt = True )
class Lost #MERGE# Tallstrider ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Lost Tallstrider " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 4 )
class Malorne ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Malorne " , 7 , CHARACTER_CLASS . DRUID , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 9 , 7 , deathrattle = [ Deathrattle ( Add #MERGE# Card ( Card #MERGE# Query ( source = CARD_SOURCE . MINION , minion = Self #MERGE# Selector ( ) ) , add_to_deck = True ) , Player #MERGE# Selector ( ) ) , Deathrattle ( Remove ( ) , Self #MERGE# Selector ( ) ) ] )
class Mech #MERGE# Bear #MERGE# Cat ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mech-Bear-Cat " , 6 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 7 , 6 , effects = [ Effect ( Damaged ( ) , Action #MERGE# Tag ( Add #MERGE# Card ( Card #MERGE# Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player #MERGE# Selector ( ) ) ) ] )
class Mechanical #MERGE# Yeti ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mechanical Yeti " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# from hearthbreaker . cards . spells . neutral import spare_part_list #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 5 , deathrattle = Deathrattle ( Add #MERGE# Card ( Card #MERGE# Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player #MERGE# Selector ( Both #MERGE# Player ( ) ) ) )
class Mechwarper ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mechwarper " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 3 , auras = [ Aura ( Mana #MERGE# Change ( - 1 ) , Card #MERGE# Selector ( condition = Is #MERGE# Type ( MINION_TYPE . MECH ) ) ) ] )
class Mekgineer #MERGE# Thermaplugg ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mekgineer Thermaplugg " , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 9 , 7 , effects = [ Effect ( Minion #MERGE# Died ( player = Enemy #MERGE# Player ( ) ) , Action #MERGE# Tag ( Summon ( Leper #MERGE# Gnome ( ) ) , Player #MERGE# Selector ( ) ) ) ] )
class Metaltooth #MERGE# Leaper ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Metaltooth Leaper " , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Give ( Buff ( Change #MERGE# Attack ( 2 ) ) ) , Minion #MERGE# Selector ( Is #MERGE# Type ( MINION_TYPE . MECH ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 3 )
class Micro #MERGE# Machine ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Micro Machine " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 2 , effects = [ Effect ( Turn #MERGE# Started ( player = Both #MERGE# Player ( ) ) , Action #MERGE# Tag ( Give ( Change #MERGE# Attack ( 1 ) ) , Self #MERGE# Selector ( ) ) ) ] )
class Mimirons #MERGE# Head ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mimiron's Head " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 5 , effects = [ Effect ( Turn #MERGE# Started ( ) , [ Action #MERGE# Tag ( Kill ( ) , Minion #MERGE# Selector ( Is #MERGE# Type ( MINION_TYPE . MECH , True ) ) , Greater #MERGE# Than ( Count ( Minion #MERGE# Selector ( Is #MERGE# Type ( MINION_TYPE . MECH , True ) ) ) , value = 2 ) ) , Action #MERGE# Tag ( Summon ( V07TR0N ( ) ) , Player #MERGE# Selector ( ) ) ] ) ] )
class Mogor #MERGE# The #MERGE# Ogre ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mogor the Ogre " , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 7 , 6 , effects = [ Effect ( Character #MERGE# Attack ( None , Both #MERGE# Player ( ) ) , Action #MERGE# Tag ( Change #MERGE# Target ( #NEWLINE# #INDENT# #INDENT# Character #MERGE# Selector ( Not #MERGE# Current #MERGE# Target ( ) , Enemy #MERGE# Player ( ) , Random #MERGE# Picker ( ) ) ) , Target #MERGE# Selector ( ) , #NEWLINE# #INDENT# #INDENT# And ( One #MERGE# In ( 2 ) , Opponent #MERGE# Minion #MERGE# Count #MERGE# Is #MERGE# Greater #MERGE# Than ( 0 ) ) ) ) ] )
class Muster #MERGE# For #MERGE# Battle ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Muster for Battle " , 3 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# for i in range ( 0 , 3 ) : #NEWLINE# #INDENT# #INDENT# #INDENT# dude = Silver #MERGE# Hand #MERGE# Recruit ( ) #NEWLINE# #INDENT# #INDENT# #INDENT# dude . summon ( player , player . game , len ( player . minions ) ) #NEWLINE# #INDENT# #INDENT# justice = Lights #MERGE# Justice ( ) #NEWLINE# #INDENT# #INDENT# hammer = justice . create_weapon ( player ) #NEWLINE# #INDENT# #INDENT# hammer . card = justice #NEWLINE# #INDENT# #INDENT# hammer . equip ( player )
class Neptulon ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# from hearthbreaker . cards . minions . neutral import Bluegill #MERGE# Warrior , Coldlight #MERGE# Oracle , Coldlight #MERGE# Seer , Grimscale #MERGE# Oracle , Murloc #MERGE# Raider , Murloc #MERGE# Tidecaller , Murloc #MERGE# Tidehunter , Murloc #MERGE# Warleader , Old #MERGE# Murk #MERGE# Eye , Puddlestomper #NEWLINE# #INDENT# #INDENT# murloc_list = [ Bluegill #MERGE# Warrior ( ) , Coldlight #MERGE# Oracle ( ) , Coldlight #MERGE# Seer ( ) , Grimscale #MERGE# Oracle ( ) , Murloc #MERGE# Raider ( ) , Murloc #MERGE# Tidecaller ( ) , Murloc #MERGE# Tidehunter ( ) , Murloc #MERGE# Warleader ( ) , Old #MERGE# Murk #MERGE# Eye ( ) , Puddlestomper ( ) , Siltfin #MERGE# Spiritwalker ( ) ] #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Neptulon " , 7 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . LEGENDARY , overload = 3 , battlecry = Battlecry ( Add #MERGE# Card ( Card #MERGE# Query ( source = CARD_SOURCE . LIST , source_list = murloc_list ) , 4 ) , Player #MERGE# Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 7 , 7 )
class Ogre #MERGE# Brute ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ogre Brute " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 4 , effects = [ Effect ( Attack ( ) , Action #MERGE# Tag ( Change #MERGE# Target ( Character #MERGE# Selector ( Not #MERGE# Current #MERGE# Target ( ) , Enemy #MERGE# Player ( ) , Random #MERGE# Picker ( ) ) ) , Self #MERGE# Selector ( ) , And ( One #MERGE# In ( 2 ) , Opponent #MERGE# Minion #MERGE# Count #MERGE# Is #MERGE# Greater #MERGE# Than ( 0 ) ) ) ) ] )
class Ogre #MERGE# Ninja ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ogre Ninja " , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 6 , 6 , stealth = True , effects = [ Effect ( Attack ( ) , Action #MERGE# Tag ( Change #MERGE# Target ( Character #MERGE# Selector ( Not #MERGE# Current #MERGE# Target ( ) , Enemy #MERGE# Player ( ) , Random #MERGE# Picker ( ) ) ) , Self #MERGE# Selector ( ) , And ( One #MERGE# In ( 2 ) , Opponent #MERGE# Minion #MERGE# Count #MERGE# Is #MERGE# Greater #MERGE# Than ( 0 ) ) ) ) ] )
class Ogre #MERGE# Warmaul ( Weapon #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ogre Warmaul " , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_weapon ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Weapon ( 4 , 2 , effects = [ Effect ( Character #MERGE# Attack ( Is #MERGE# Hero ( ) ) , Action #MERGE# Tag ( Change #MERGE# Target ( Character #MERGE# Selector ( Not #MERGE# Current #MERGE# Target ( ) , Enemy #MERGE# Player ( ) , Random #MERGE# Picker ( ) ) ) , Hero #MERGE# Selector ( ) , And ( One #MERGE# In ( 2 ) , Opponent #MERGE# Minion #MERGE# Count #MERGE# Is #MERGE# Greater #MERGE# Than ( 0 ) ) ) ) ] )
class Oneeyed #MERGE# Cheat ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " One-eyed Cheat " , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE , minion_type = MINION_TYPE . PIRATE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 1 , effects = [ Effect ( Minion #MERGE# Summoned ( Is #MERGE# Type ( MINION_TYPE . PIRATE ) ) , Action #MERGE# Tag ( Give ( Stealth ( ) ) , Self #MERGE# Selector ( ) ) ) ] )
class Piloted #MERGE# Shredder ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Piloted Shredder " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 3 , deathrattle = Deathrattle ( Summon ( Card #MERGE# Query ( conditions = [ Mana #MERGE# Cost ( 2 ) , Is #MERGE# Minion ( ) ] ) ) , Player #MERGE# Selector ( ) ) )
class Puddlestomper ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Puddlestomper " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 2 )
class Quartermaster ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Quartermaster " , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . EPIC , battlecry = Battlecry ( Give ( [ Buff ( Change #MERGE# Attack ( 2 ) ) , Buff ( Change #MERGE# Health ( 2 ) ) ] ) , Minion #MERGE# Selector ( Has #MERGE# Card #MERGE# Name ( " Silver Hand Recruit " ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 5 )
class Recombobulator ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Recombobulator " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = Battlecry ( Transform ( Card #MERGE# Query ( conditions = [ Mana #MERGE# Cost ( Attribute ( " mana " , Self #MERGE# Selector ( ) ) ) , Is #MERGE# Minion ( ) ] ) ) , Minion #MERGE# Selector ( picker = User #MERGE# Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 2 )
class Recycle ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Recycle " , 6 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# player . opponent . deck . put_back ( self . target ) #NEWLINE# #INDENT# #INDENT# self . target . remove_from_board ( )
class Reversing #MERGE# Switch ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Reversing Switch " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# temp_attack = self . target . calculate_attack ( ) #NEWLINE# #INDENT# #INDENT# temp_health = self . target . health #NEWLINE# #INDENT# #INDENT# if temp_attack == 0 : #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . die ( None ) #NEWLINE# #INDENT# #INDENT# else : #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . set_attack_to ( temp_health ) #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . set_health_to ( temp_attack )
class Rusty #MERGE# Horn ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Rusty Horn " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . add_buff ( Buff ( Taunt ( ) ) )
class Sabotage ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Sabotage " , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# targets = hearthbreaker . targeting . find_enemy_minion_battlecry_target ( player . game , lambda x : True ) #NEWLINE# #INDENT# #INDENT# target = game . random_choice ( targets ) #NEWLINE# #INDENT# #INDENT# target . die ( None ) #NEWLINE# #INDENT# #INDENT# game . check_delayed ( ) #NEWLINE# #INDENT# #INDENT# if player . cards_played > 0 and game . other_player . weapon is not None : #NEWLINE# #INDENT# #INDENT# #INDENT# game . other_player . weapon . destroy ( ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def can_use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) >= 1
class Salty #MERGE# Dog ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Salty Dog " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . PIRATE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 7 , 4 )
class Seal #MERGE# Of #MERGE# Light ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Seal of Light " , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# player . hero . heal ( player . effective_heal_power ( 4 ) , self ) #NEWLINE# #INDENT# #INDENT# player . hero . change_temp_attack ( 2 )
class Shadowbomber ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Shadowbomber " , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC , battlecry = Battlecry ( Damage ( 3 ) , Hero #MERGE# Selector ( players = Both #MERGE# Player ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 1 )
class Shadowboxer ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Shadowboxer " , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 3 , effects = [ Effect ( Character #MERGE# Healed ( player = Both #MERGE# Player ( ) ) , Action #MERGE# Tag ( Damage ( 1 ) , Character #MERGE# Selector ( players = Enemy #MERGE# Player ( ) , picker = Random #MERGE# Picker ( ) , condition = None ) ) ) ] )
class Shielded #MERGE# Minibot ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Shielded Minibot " , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 , divine_shield = True )
class Shieldmaiden ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Shieldmaiden " , 6 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , battlecry = Battlecry ( Increase #MERGE# Armor ( 5 ) , Hero #MERGE# Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 5 )
class Ships #MERGE# Cannon ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ship's Cannon " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 3 , effects = [ Effect ( Minion #MERGE# Summoned ( Is #MERGE# Type ( MINION_TYPE . PIRATE ) ) , Action #MERGE# Tag ( Damage ( 2 ) , Character #MERGE# Selector ( None , Enemy #MERGE# Player ( ) , Random #MERGE# Picker ( ) ) ) ) ] )
class Shrinkmeister ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Shrinkmeister " , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff #MERGE# Until ( Change #MERGE# Attack ( - 2 ) , Turn #MERGE# Ended ( player = Current #MERGE# Player ( ) ) ) ) , Minion #MERGE# Selector ( players = Both #MERGE# Player ( ) , picker = User #MERGE# Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 2 )
class Siege #MERGE# Engine ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Siege Engine " , 5 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 5 , effects = [ Effect ( Armor #MERGE# Increased ( ) , Action #MERGE# Tag ( Give ( Change #MERGE# Attack ( 1 ) ) , Self #MERGE# Selector ( ) ) ) ] )
class Snowchugger ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Snowchugger " , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 3 , effects = [ Effect ( Did #MERGE# Damage ( ) , Action #MERGE# Tag ( Give ( Frozen ( ) ) , Target #MERGE# Selector ( ) ) ) ] )
class Soot #MERGE# Spewer ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Soot Spewer " , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 3 , spell_damage = 1 )
class Spider #MERGE# Tank ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Spider Tank " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 4 )
class Steamwheedle #MERGE# Sniper ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Steamwheedle Sniper " , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 3 , auras = [ Aura ( Power #MERGE# Targets #MERGE# Minions ( ) , Hero #MERGE# Selector ( ) ) ] )
class Stonesplinter #MERGE# Trogg ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Stonesplinter Trogg " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 3 , effects = [ Effect ( Spell #MERGE# Cast ( player = Enemy #MERGE# Player ( ) ) , Action #MERGE# Tag ( Give ( Change #MERGE# Attack ( 1 ) ) , Self #MERGE# Selector ( ) ) ) ] )
class Target #MERGE# Dummy ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Target Dummy " , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 0 , 2 , taunt = True )
class Time #MERGE# Rewinder ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Time Rewinder " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . bounce ( )
class Tinkers #MERGE# Sharpsword #MERGE# Oil ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Tinker's Sharpsword Oil " , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# player . weapon . base_attack += 3 #NEWLINE# #INDENT# #INDENT# player . hero . change_temp_attack ( 3 ) #NEWLINE# #INDENT# #INDENT# if player . cards_played > 0 : #NEWLINE# #INDENT# #INDENT# #INDENT# targets = hearthbreaker . targeting . find_friendly_minion_battlecry_target ( player . game , lambda x : x ) #NEWLINE# #INDENT# #INDENT# #INDENT# if targets is not None : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# target = player . game . random_choice ( targets ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# target . add_buff ( Buff ( Change #MERGE# Attack ( 3 ) ) ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# def can_use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# return super ( ) . can_use ( player , game ) and player . weapon is not None
class Trade #MERGE# Prince #MERGE# Gallywix ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Trade Prince Gallywix " , 6 , CHARACTER_CLASS . ROGUE , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 8 , effects = [ Effect ( Spell #MERGE# Cast ( Not ( Has #MERGE# Card #MERGE# Name ( " Gallywix's Coin " ) ) , Enemy #MERGE# Player ( ) ) , Action #MERGE# Tag ( Add #MERGE# Card ( Card #MERGE# Query ( source = CARD_SOURCE . LAST_CARD ) ) , Player #MERGE# Selector ( Friendly #MERGE# Player ( ) ) ) ) , Effect ( Spell #MERGE# Cast ( Not ( Has #MERGE# Card #MERGE# Name ( " Gallywix's Coin " ) ) , Enemy #MERGE# Player ( ) ) , Action #MERGE# Tag ( Add #MERGE# Card ( Gallywixs #MERGE# Coin ( ) ) , Player #MERGE# Selector ( Enemy #MERGE# Player ( ) ) ) ) ] )
class Tree #MERGE# Of #MERGE# Life ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Tree of Life " , 9 , CHARACTER_CLASS . DRUID , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# targets = copy . copy ( game . other_player . minions ) #NEWLINE# #INDENT# #INDENT# targets . extend ( game . current_player . minions ) #NEWLINE# #INDENT# #INDENT# targets . append ( game . other_player . hero ) #NEWLINE# #INDENT# #INDENT# targets . append ( game . current_player . hero ) #NEWLINE# #INDENT# #INDENT# for target in targets : #NEWLINE# #INDENT# #INDENT# #INDENT# target . heal ( player . effective_heal_power ( target . calculate_max_health ( ) ) , self )
class Troggzor #MERGE# The #MERGE# Earthinator ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Troggzor the Earthinator " , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 6 , 6 , effects = [ Effect ( Spell #MERGE# Cast ( player = Enemy #MERGE# Player ( ) ) , Action #MERGE# Tag ( Summon ( Burly #MERGE# Rockjaw #MERGE# Trogg ( ) ) , Player #MERGE# Selector ( ) ) ) ] )
class Unstable #MERGE# Portal ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Unstable Portal " , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# query = Card #MERGE# Query ( conditions = [ Is #MERGE# Minion ( ) ] ) #NEWLINE# #INDENT# #INDENT# new_minon = query . get_card ( player , player , self ) #NEWLINE# #INDENT# #INDENT# new_minon . add_buff ( Buff ( Mana #MERGE# Change ( - 3 ) ) ) #NEWLINE# #INDENT# #INDENT# player . hand . append ( new_minon )
class Upgraded #MERGE# Repair #MERGE# Bot ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Upgraded Repair Bot " , 5 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Give ( Change #MERGE# Health ( 4 ) ) , Minion #MERGE# Selector ( Is #MERGE# Type ( MINION_TYPE . MECH ) , picker = User #MERGE# Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 5 )
class V07TR0N ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " V-07-TR-0N " , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , False , MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 8 , charge = True , buffs = [ Buff ( Mega #MERGE# Windfury ( ) ) ] )
class Velens #MERGE# Chosen ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Velen's Chosen " , 3 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . change_attack ( 2 ) #NEWLINE# #INDENT# #INDENT# self . target . increase_health ( 4 ) #NEWLINE# #INDENT# #INDENT# self . target . add_buff ( Buff ( Spell #MERGE# Damage ( 1 ) ) )
class Vitality #MERGE# Totem ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Vitality Totem " , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , minion_type = MINION_TYPE . TOTEM ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 0 , 3 , effects = [ Effect ( Turn #MERGE# Ended ( ) , Action #MERGE# Tag ( Heal ( 4 ) , Hero #MERGE# Selector ( ) ) ) ] )
class Wee #MERGE# Spellstopper ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Wee Spellstopper " , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 5 , auras = [ Aura ( No #MERGE# Spell #MERGE# Target ( ) , Minion #MERGE# Selector ( Adjacent ( ) ) ) ] )
class Whirling #MERGE# Blades ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Whirling Blades " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . change_attack ( 1 )
class Whirling #MERGE# Zapomatic ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Whirling Zap-o-matic " , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , p ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 2 , windfury = True )
class Anubar #MERGE# Ambusher ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Anub'ar Ambusher " , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 5 , deathrattle = Deathrattle ( Bounce ( ) , Minion #MERGE# Selector ( picker = Random #MERGE# Picker ( ) ) ) )
class Avenge ( Secret #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Avenge " , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def _reveal ( self , dead_minion , attacker ) : #NEWLINE# #INDENT# #INDENT# if len ( [ minion for minion in self . player . minions if not minion . dead ] ) > 0 : #NEWLINE# #INDENT# #INDENT# #INDENT# target = self . player . game . random_choice ( self . player . minions ) #NEWLINE# #INDENT# #INDENT# #INDENT# target . change_attack ( 3 ) #NEWLINE# #INDENT# #INDENT# #INDENT# target . increase_health ( 2 ) #NEWLINE# #INDENT# #INDENT# #INDENT# super ( ) . reveal ( ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def activate ( self , player ) : #NEWLINE# #INDENT# #INDENT# player . bind ( " minion_died " , self . _reveal ) #NEWLINE# #NEWLINE# #INDENT# def deactivate ( self , player ) : #NEWLINE# #INDENT# #INDENT# player . unbind ( " minion_died " , self . _reveal )
class Baron #MERGE# Rivendare ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Baron Rivendare " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 7 , auras = [ Aura ( Double #MERGE# Deathrattle ( ) , Player #MERGE# Selector ( ) ) ] )
class Dancing #MERGE# Swords ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Dancing Swords " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 4 , deathrattle = Deathrattle ( Draw ( ) , Player #MERGE# Selector ( Enemy #MERGE# Player ( ) ) ) )
class Dark #MERGE# Cultist ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Dark Cultist " , 3 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 4 , deathrattle = Deathrattle ( Give ( Change #MERGE# Health ( 3 ) ) , Minion #MERGE# Selector ( picker = Random #MERGE# Picker ( ) ) ) )
class Duplicate ( Secret #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Duplicate " , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) #NEWLINE# #INDENT# #INDENT# self . player = None #NEWLINE# #NEWLINE# #INDENT# def activate ( self , player ) : #NEWLINE# #INDENT# #INDENT# player . bind ( " minion_died " , self . _reveal ) #NEWLINE# #INDENT# #INDENT# self . player = player #NEWLINE# #NEWLINE# #INDENT# def deactivate ( self , player ) : #NEWLINE# #INDENT# #INDENT# player . unbind ( " minion_died " , self . _reveal ) #NEWLINE# #INDENT# #INDENT# self . player = None #NEWLINE# #NEWLINE# #INDENT# def _reveal ( self , minion , by ) : #NEWLINE# #INDENT# #INDENT# for c in range ( 0 , 2 ) : #NEWLINE# #INDENT# #INDENT# #INDENT# if len ( self . player . hand ) < 10 : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# new_card = type ( minion . card ) ( ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# self . player . hand . append ( new_card ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# new_card . attach ( new_card , self . player ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# super ( ) . reveal ( )
class Echoing #MERGE# Ooze ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Echoing Ooze " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = Battlecry ( Give #MERGE# Effect ( Effect ( Turn #MERGE# Ended ( ) , Action #MERGE# Tag ( Duplicate ( Self #MERGE# Selector ( ) ) , Player #MERGE# Selector ( ) ) ) ) , Player #MERGE# Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 2 )
class Feugen ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Feugen " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 7 , deathrattle = Deathrattle ( Summon ( Thaddius ( ) ) , Player #MERGE# Selector ( ) , In #MERGE# Graveyard ( Stalagg ( ) ) ) )
class Feugen ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Feugen " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 7 , deathrattle = Deathrattle ( Summon ( Thaddius ( ) ) , Player #MERGE# Selector ( ) , In #MERGE# Graveyard ( Stalagg ( ) ) ) )
class Haunted #MERGE# Creeper ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Haunted Creeper " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 2 , deathrattle = Deathrattle ( Summon ( Spectral #MERGE# Spider ( ) , 2 ) , Player #MERGE# Selector ( ) ) )
class Kel #MERGE# Thuzad ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Kel'Thuzad " , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 6 , 8 , effects = [ Effect ( Turn #MERGE# Ended ( player = Both #MERGE# Player ( ) ) , Action #MERGE# Tag ( Resurrect #MERGE# Friendly ( ) , Player #MERGE# Selector ( ) ) ) ] )
class Loatheb ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Loatheb " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Give #MERGE# Aura ( Aura #MERGE# Until ( Mana #MERGE# Change ( 5 ) , Card #MERGE# Selector ( condition = Is #MERGE# Spell ( ) ) , Turn #MERGE# Ended ( ) ) ) , Player #MERGE# Selector ( players = Enemy #MERGE# Player ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 5 )
class Mad #MERGE# Scientist ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mad Scientist " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 , deathrattle = Deathrattle ( Apply #MERGE# Secret ( CARD_SOURCE . MY_DECK ) , Player #MERGE# Selector ( ) ) )
class Nerubian ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Nerubian " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , p ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 4 )
class Nerubian ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Nerubian " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , p ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 4 )
class Nerubian ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Nerubian " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , p ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 4 )
class Nerubian #MERGE# Egg ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Nerubian Egg " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 0 , 2 , deathrattle = Deathrattle ( Summon ( Nerubian ( ) ) , Player #MERGE# Selector ( ) ) )
class Poison #MERGE# Seeds ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Poison Seeds " , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# from hearthbreaker . cards . minions . druid import Poison #MERGE# Seeds #MERGE# Treant #NEWLINE# #INDENT# #INDENT# targets = hearthbreaker . targeting . find_minion_spell_target ( game , lambda m : True ) #NEWLINE# #INDENT# #INDENT# for target in targets : #NEWLINE# #INDENT# #INDENT# #INDENT# target . die ( None ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# game . check_delayed ( ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# for target in targets : #NEWLINE# #INDENT# #INDENT# #INDENT# Poison #MERGE# Seeds #MERGE# Treant ( ) . summon ( target . player , target . game , len ( target . player . minions ) )
class Reincarnate ( Spell #MERGE# Card ) : #NEWLINE# #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Reincarnate " , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . die ( self ) #NEWLINE# #INDENT# #INDENT# game . check_delayed ( ) #NEWLINE# #INDENT# #INDENT# self . target . card . summon ( self . target . player , game , len ( self . target . player . minions ) )
class Shade #MERGE# Of #MERGE# Naxxramas ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Shade of Naxxramas " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 , stealth = True , effects = [ Effect ( Turn #MERGE# Started ( ) , Action #MERGE# Tag ( Give ( [ Buff ( Change #MERGE# Attack ( 1 ) ) , Buff ( Change #MERGE# Health ( 1 ) ) ] ) , Self #MERGE# Selector ( ) ) ) ] )
class Slime ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Slime " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , p ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 2 , taunt = True )
class Spectral #MERGE# Spider ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Spectral Spider " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 )
class Stalagg ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Stalagg " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 7 , 4 , deathrattle = Deathrattle ( Summon ( Thaddius ( ) ) , Player #MERGE# Selector ( ) , In #MERGE# Graveyard ( Feugen ( ) ) ) )
class Stalagg ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Stalagg " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 7 , 4 , deathrattle = Deathrattle ( Summon ( Thaddius ( ) ) , Player #MERGE# Selector ( ) , In #MERGE# Graveyard ( Feugen ( ) ) ) )
class Stoneskin #MERGE# Gargoyle ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Stoneskin Gargoyle " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 4 , effects = [ Effect ( Turn #MERGE# Started ( ) , Action #MERGE# Tag ( Heal ( 10000 ) , Self #MERGE# Selector ( ) ) ) ] )
class Thaddius ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Thaddius " , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , False ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 11 , 11 )
class Treant ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Treant " , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , _ ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 )
class Undertaker ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Undertaker " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 2 , effects = [ Effect ( Minion #MERGE# Summoned ( Minion #MERGE# Has #MERGE# Deathrattle ( ) ) , Action #MERGE# Tag ( Give ( Change #MERGE# Attack ( 1 ) ) , Self #MERGE# Selector ( ) ) ) ] )
class Unstable #MERGE# Ghoul ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Unstable Ghoul " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 3 , deathrattle = Deathrattle ( Damage ( 1 ) , Minion #MERGE# Selector ( players = Both #MERGE# Player ( ) ) ) , taunt = True )
class Webspinner ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Webspinner " , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 , deathrattle = Deathrattle ( Add #MERGE# Card ( Card #MERGE# Query ( conditions = [ Is #MERGE# Type ( MINION_TYPE . BEAST ) ] ) ) , Player #MERGE# Selector ( ) ) )
class Zombie #MERGE# Chow ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Zombie Chow " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 3 , deathrattle = Deathrattle ( Heal ( 5 ) , Hero #MERGE# Selector ( Enemy #MERGE# Player ( ) ) ) )
class Abomination ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Abomination " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 4 , deathrattle = Deathrattle ( Damage ( 2 ) , Character #MERGE# Selector ( players = Both #MERGE# Player ( ) ) ) , taunt = True )
class Abusive #MERGE# Sergeant ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Abusive Sergeant " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff #MERGE# Until ( Change #MERGE# Attack ( 2 ) , Turn #MERGE# Ended ( player = Current #MERGE# Player ( ) ) ) ) , Minion #MERGE# Selector ( players = Both #MERGE# Player ( ) , picker = User #MERGE# Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 1 )
class Acolyte #MERGE# Of #MERGE# Pain ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Acolyte of Pain " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 3 , effects = [ Effect ( Damaged ( ) , Action #MERGE# Tag ( Draw ( ) , Player #MERGE# Selector ( ) ) ) ] )
class Al #MERGE# Akir #MERGE# The #MERGE# Windlord ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Al'Akir the Windlord " , 8 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 5 , windfury = True , charge = True , divine_shield = True , taunt = True )
class Alarmo #MERGE# Bot ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Alarm-o-Bot " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 0 , 3 , effects = [ Effect ( Turn #MERGE# Started ( ) , Action #MERGE# Tag ( Swap #MERGE# With #MERGE# Hand ( ) , Player #MERGE# Selector ( ) ) ) ] )
class Aldor #MERGE# Peacekeeper ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Aldor Peacekeeper " , 3 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( Set #MERGE# Attack ( 1 ) ) , Minion #MERGE# Selector ( condition = None , players = Enemy #MERGE# Player ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 3 )
class Ancestral #MERGE# Spirit ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ancestral Spirit " , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . deathrattle . append ( Deathrattle ( Summon ( self . target . card ) , Player #MERGE# Selector ( ) ) )
class Ancient #MERGE# Brewmaster ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ancient Brewmaster " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Bounce ( ) , Minion #MERGE# Selector ( picker = User #MERGE# Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 4 )
class Ancient #MERGE# Mage ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ancient Mage " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( Spell #MERGE# Damage ( 1 ) ) , Minion #MERGE# Selector ( condition = Adjacent ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 5 )
class Ancient #MERGE# Watcher ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ancient Watcher " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 5 , buffs = [ Buff ( Cant #MERGE# Attack ( ) ) ] )
class Ancient #MERGE# Of #MERGE# Lore ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ancient of Lore " , 7 , CHARACTER_CLASS . DRUID , CARD_RARITY . EPIC , choices = [ #NEWLINE# #INDENT# #INDENT# Choice ( Ancient #MERGE# Secrets ( ) , Heal ( 5 ) , Hero #MERGE# Selector ( ) ) , #NEWLINE# #INDENT# #INDENT# Choice ( Ancient #MERGE# Teachings ( ) , Draw ( 3 ) , Player #MERGE# Selector ( ) ) #NEWLINE# #INDENT# #INDENT# ] ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 5 )
class Ancient #MERGE# Of #MERGE# War ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ancient of War " , 7 , CHARACTER_CLASS . DRUID , CARD_RARITY . EPIC , choices = [ #NEWLINE# #INDENT# #INDENT# Choice ( Health ( ) , Give ( [ Buff ( Change #MERGE# Health ( 5 ) ) , Buff ( Taunt ( ) ) ] ) , Self #MERGE# Selector ( ) ) , #NEWLINE# #INDENT# #INDENT# Choice ( Attack ( ) , Give ( [ Buff ( Change #MERGE# Attack ( 5 ) ) ] ) , Self #MERGE# Selector ( ) ) , #NEWLINE# #INDENT# #INDENT# ] ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 5 )
class Angry #MERGE# Chicken ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Angry Chicken " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 , enrage = [ Aura ( Change #MERGE# Attack ( 5 ) , Self #MERGE# Selector ( ) ) ] )
class Arathi #MERGE# Weaponsmith ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Arathi Weaponsmith " , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , battlecry = Battlecry ( Equip ( Battle #MERGE# Axe ( ) ) , Player #MERGE# Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 3 )
class Argent #MERGE# Commander ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Argent Commander " , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 2 , divine_shield = True , charge = True )
class Argent #MERGE# Protector ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Argent Protector " , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Divine #MERGE# Shield ( ) ) , Minion #MERGE# Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 )
class Argent #MERGE# Squire ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Argent Squire " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 , divine_shield = True )
class Armorsmith ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Armorsmith " , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 4 , effects = [ Effect ( Character #MERGE# Damaged ( condition = Is #MERGE# Minion ( ) ) , Action #MERGE# Tag ( Increase #MERGE# Armor ( ) , Hero #MERGE# Selector ( ) ) ) ] )
class Ashbringer ( Weapon #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ashbringer " , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . LEGENDARY , False ) #NEWLINE# #NEWLINE# #INDENT# def create_weapon ( self , player ) : #NEWLINE# #INDENT# #INDENT# weapon = Weapon ( 5 , 3 ) #NEWLINE# #INDENT# #INDENT# return weapon
class Auchenai #MERGE# Soulpriest ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Auchenai Soulpriest " , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 5 , auras = [ Aura ( Heal #MERGE# As #MERGE# Damage ( ) , Player #MERGE# Selector ( ) ) ] )
class Avenging #MERGE# Wrath ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Avenging Wrath " , 6 , CHARACTER_CLASS . PALADIN , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# for i in range ( 0 , player . effective_spell_damage ( 8 ) ) : #NEWLINE# #INDENT# #INDENT# #INDENT# targets = copy . copy ( game . other_player . minions ) #NEWLINE# #INDENT# #INDENT# #INDENT# targets . append ( game . other_player . hero ) #NEWLINE# #INDENT# #INDENT# #INDENT# target = game . random_choice ( targets ) #NEWLINE# #INDENT# #INDENT# #INDENT# target . damage ( 1 , self )
class Azure #MERGE# Drake ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Azure Drake " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Draw ( ) , Player #MERGE# Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 4 , spell_damage = 1 )
class Bane #MERGE# Of #MERGE# Doom ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Bane of Doom " , 5 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# if self . target . health <= player . effective_spell_damage ( 2 ) and ( isinstance ( self . target , Minion ) and not self . target . divine_shield ) : #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 2 ) , self ) #NEWLINE# #INDENT# #INDENT# #INDENT# demons = Card #MERGE# Query ( conditions = [ Is #MERGE# Type ( MINION_TYPE . DEMON ) ] ) #NEWLINE# #INDENT# #INDENT# #INDENT# demons . get_card ( player , player , self ) . summon ( player , game , len ( player . minions ) ) #NEWLINE# #INDENT# #INDENT# else : #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 2 ) , self )
class Baron #MERGE# Geddon ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Baron Geddon " , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 7 , 5 , effects = [ Effect ( Turn #MERGE# Ended ( ) , Action #MERGE# Tag ( Damage ( 2 ) , Character #MERGE# Selector ( players = Both #MERGE# Player ( ) ) ) ) ] )
class Battle #MERGE# Axe ( Weapon #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Battle Axe " , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , False ) #NEWLINE# #NEWLINE# #INDENT# def create_weapon ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Weapon ( 2 , 2 )
class Battle #MERGE# Rage ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Battle Rage " , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# def damaged_character ( character ) : #NEWLINE# #INDENT# #INDENT# #INDENT# return character . health < character . calculate_max_health ( ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# characters = copy . copy ( player . minions ) #NEWLINE# #INDENT# #INDENT# characters . append ( player . hero ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# characters = [ character for character in characters if damaged_character ( character ) ] #NEWLINE# #NEWLINE# #INDENT# #INDENT# for i in range ( 0 , len ( characters ) ) : #NEWLINE# #INDENT# #INDENT# #INDENT# player . draw ( )
class Bestial #MERGE# Wrath ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Bestial Wrath " , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target , filter_func = lambda minion : minion . card . minion_type is MINION_TYPE . BEAST and minion . spell_targetable ( ) ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . add_buff ( Buff #MERGE# Until ( Immune ( ) , Turn #MERGE# Ended ( player = Current #MERGE# Player ( ) ) ) ) #NEWLINE# #INDENT# #INDENT# self . target . change_temp_attack ( 2 )
class Betrayal ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Betrayal " , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# left_minion = None #NEWLINE# #INDENT# #INDENT# right_minion = None #NEWLINE# #NEWLINE# #INDENT# #INDENT# index = self . target . index #NEWLINE# #INDENT# #INDENT# if index > 0 : #NEWLINE# #INDENT# #INDENT# #INDENT# left_minion = game . other_player . minions [ index - 1 ] #NEWLINE# #INDENT# #INDENT# if index < min ( len ( game . other_player . minions ) - 1 , 6 ) : #NEWLINE# #INDENT# #INDENT# #INDENT# right_minion = game . other_player . minions [ index + 1 ] #NEWLINE# #NEWLINE# #INDENT# #INDENT# original_immune = self . target . immune #NEWLINE# #INDENT# #INDENT# self . target . immune = True #NEWLINE# #INDENT# #INDENT# if left_minion is not None : #NEWLINE# #INDENT# #INDENT# #INDENT# left_minion . damage ( self . target . calculate_attack ( ) , self . target ) #NEWLINE# #INDENT# #INDENT# if right_minion is not None : #NEWLINE# #INDENT# #INDENT# #INDENT# right_minion . damage ( self . target . calculate_attack ( ) , self . target ) #NEWLINE# #INDENT# #INDENT# self . target . immune = original_immune
class Big #MERGE# Game #MERGE# Hunter ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Big Game Hunter " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = Battlecry ( Kill ( ) , Minion #MERGE# Selector ( Attack #MERGE# Greater #MERGE# Than ( 6 ) , Both #MERGE# Player ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 2 )
class Bite ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Bite " , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# player . hero . change_temp_attack ( 4 ) #NEWLINE# #INDENT# #INDENT# player . hero . increase_armor ( 4 )
class Blessing #MERGE# Of #MERGE# Wisdom ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Blessing of Wisdom " , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# if player is game . players [ 0 ] : #NEWLINE# #INDENT# #INDENT# #INDENT# draw_player = Player #MERGE# One ( ) #NEWLINE# #INDENT# #INDENT# else : #NEWLINE# #INDENT# #INDENT# #INDENT# draw_player = Player #MERGE# Two ( ) #NEWLINE# #INDENT# #INDENT# self . target . add_effect ( Effect ( Attack ( ) , Action #MERGE# Tag ( Draw ( ) , Player #MERGE# Selector ( draw_player ) ) ) )
class Blizzard ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Blizzard " , 6 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# for minion in copy . copy ( game . other_player . minions ) : #NEWLINE# #INDENT# #INDENT# #INDENT# minion . damage ( player . effective_spell_damage ( 2 ) , self ) #NEWLINE# #INDENT# #INDENT# for minion in game . other_player . minions : #NEWLINE# #INDENT# #INDENT# #INDENT# minion . add_buff ( Buff ( Frozen ( ) ) )
class Blood #MERGE# Fury ( Weapon #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Blood Fury " , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , False ) #NEWLINE# #NEWLINE# #INDENT# def create_weapon ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Weapon ( 3 , 8 )
class Blood #MERGE# Imp ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Blood Imp " , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 0 , 1 , stealth = True , effects = [ Effect ( Turn #MERGE# Ended ( ) , Action #MERGE# Tag ( Give ( Change #MERGE# Health ( 1 ) ) , Minion #MERGE# Selector ( picker = Random #MERGE# Picker ( ) ) ) ) ] )
class Blood #MERGE# Knight ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Blood Knight " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = ( Battlecry ( [ Give ( [ Buff ( Change #MERGE# Attack ( Count ( Minion #MERGE# Selector ( Has #MERGE# Divine #MERGE# Shield ( ) , Both #MERGE# Player ( ) ) ) , 3 ) ) , Buff ( Change #MERGE# Health ( Count ( Minion #MERGE# Selector ( Has #MERGE# Divine #MERGE# Shield ( ) , Both #MERGE# Player ( ) ) ) , 3 ) ) ] ) ] , Self #MERGE# Selector ( ) ) , Battlecry ( Remove #MERGE# Divine #MERGE# Shields ( ) , ( Minion #MERGE# Selector ( Has #MERGE# Divine #MERGE# Shield ( ) , Both #MERGE# Player ( ) ) ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 3 )
class Bloodmage #MERGE# Thalnos ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Bloodmage Thalnos " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 , spell_damage = 1 , deathrattle = Deathrattle ( Draw ( ) , Player #MERGE# Selector ( ) ) )
class Bloodsail #MERGE# Corsair ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Bloodsail Corsair " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Decrease #MERGE# Durability ( ) , Weapon #MERGE# Selector ( Enemy #MERGE# Player ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 2 )
class Bloodsail #MERGE# Raider ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Bloodsail Raider " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Give ( Buff ( Change #MERGE# Attack ( Attribute ( " base_attack " , Weapon #MERGE# Selector ( ) ) ) ) ) , Self #MERGE# Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 3 )
class Cairne #MERGE# Bloodhoof ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Cairne Bloodhoof " , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 5 , deathrattle = Deathrattle ( Summon ( Baine #MERGE# Bloodhoof ( ) ) , Player #MERGE# Selector ( ) ) )
class Captain #MERGE# Greenskin ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Captain Greenskin " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( [ Increase #MERGE# Weapon #MERGE# Attack ( 1 ) , Increase #MERGE# Durability ( ) ] , Weapon #MERGE# Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 4 )
class Cenarius ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Cenarius " , 9 , CHARACTER_CLASS . DRUID , CARD_RARITY . LEGENDARY , choices = [ #NEWLINE# #INDENT# #INDENT# Choice ( Increase #MERGE# Stats ( ) , Give ( [ Buff ( Change #MERGE# Attack ( 2 ) ) , Buff ( Change #MERGE# Health ( 2 ) ) , Buff ( Taunt ( ) ) ] ) , Minion #MERGE# Selector ( ) ) , #NEWLINE# #INDENT# #INDENT# Choice ( Summon #MERGE# Treants ( ) , Summon ( Taunt #MERGE# Treant ( ) , 2 ) , Player #MERGE# Selector ( ) ) #NEWLINE# #INDENT# #INDENT# ] ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 8 )
class Circle #MERGE# Of #MERGE# Healing ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Circle of Healing " , 0 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# targets = copy . copy ( game . other_player . minions ) #NEWLINE# #INDENT# #INDENT# targets . extend ( player . minions ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# for minion in targets : #NEWLINE# #INDENT# #INDENT# #INDENT# minion . heal ( player . effective_heal_power ( 4 ) , self )
class Cold #MERGE# Blood ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Cold Blood " , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# if player . cards_played > 0 : #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . change_attack ( 4 ) #NEWLINE# #INDENT# #INDENT# else : #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . change_attack ( 2 )
class Coldlight #MERGE# Oracle ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Coldlight Oracle " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Draw ( 2 ) , Player #MERGE# Selector ( players = Both #MERGE# Player ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 )
class Coldlight #MERGE# Seer ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Coldlight Seer " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Give ( Change #MERGE# Health ( 2 ) ) , Minion #MERGE# Selector ( Is #MERGE# Type ( MINION_TYPE . MURLOC ) , Both #MERGE# Player ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 3 )
class Commanding #MERGE# Shout ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Commanding Shout " , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# player . add_aura ( Aura #MERGE# Until ( Minimum #MERGE# Health ( 1 ) , Minion #MERGE# Selector ( ) , Turn #MERGE# Ended ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# player . draw ( )
class Counterspell ( Secret #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Counterspell " , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# def _reveal ( self , card , index ) : #NEWLINE# #INDENT# #INDENT# if card . is_spell ( ) : #NEWLINE# #INDENT# #INDENT# #INDENT# card . cancel = True #NEWLINE# #INDENT# #INDENT# #INDENT# super ( ) . reveal ( ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def activate ( self , player ) : #NEWLINE# #INDENT# #INDENT# player . game . current_player . bind ( " card_played " , self . _reveal ) #NEWLINE# #NEWLINE# #INDENT# def deactivate ( self , player ) : #NEWLINE# #INDENT# #INDENT# player . game . current_player . unbind ( " card_played " , self . _reveal )
class Crazed #MERGE# Alchemist ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Crazed Alchemist " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Swap #MERGE# Stats ( ' health ' , ' attack ' , False ) , Minion #MERGE# Selector ( players = Both #MERGE# Player ( ) , picker = User #MERGE# Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 )
class Cruel #MERGE# Taskmaster ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Cruel Taskmaster " , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , battlecry = Battlecry ( [ Damage ( 1 ) , Give ( Change #MERGE# Attack ( 2 ) ) ] , Minion #MERGE# Selector ( players = Both #MERGE# Player ( ) , picker = User #MERGE# Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 )
class Cult #MERGE# Master ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Cult Master " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 2 , effects = [ Effect ( Minion #MERGE# Died ( ) , Action #MERGE# Tag ( Draw ( ) , Player #MERGE# Selector ( ) ) ) ] )
class Damaged #MERGE# Golem ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Damaged Golem " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 1 )
class Dark #MERGE# Iron #MERGE# Dwarf ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Dark Iron Dwarf " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff #MERGE# Until ( Change #MERGE# Attack ( 2 ) , Turn #MERGE# Ended ( player = Current #MERGE# Player ( ) ) ) ) , Minion #MERGE# Selector ( players = Both #MERGE# Player ( ) , picker = User #MERGE# Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 4 )
class Deadly #MERGE# Shot ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Deadly Shot " , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# targets = hearthbreaker . targeting . find_enemy_minion_battlecry_target ( player . game , lambda x : True ) #NEWLINE# #INDENT# #INDENT# target = game . random_choice ( targets ) #NEWLINE# #INDENT# #INDENT# target . die ( None ) #NEWLINE# #INDENT# #INDENT# game . check_delayed ( ) #NEWLINE# #NEWLINE# #INDENT# def can_use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) >= 1
class Deathwing ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Deathwing " , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Kill ( ) , Minion #MERGE# Selector ( players = Both #MERGE# Player ( ) ) ) , Battlecry ( Discard ( amount = Count ( Card #MERGE# Selector ( ) ) ) , Player #MERGE# Selector ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 12 , 12 )
class Defias #MERGE# Bandit ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Defias Bandit " , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , False ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 1 )
class Defias #MERGE# Ringleader ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Defias Ringleader " , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , combo = Battlecry ( Summon ( Defias #MERGE# Bandit ( ) ) , Player #MERGE# Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 )
class Demolisher ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Demolisher " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 4 , effects = [ Effect ( Turn #MERGE# Started ( ) , Action #MERGE# Tag ( Damage ( 2 ) , Character #MERGE# Selector ( players = Enemy #MERGE# Player ( ) , picker = Random #MERGE# Picker ( ) ) ) ) ] )
class Demonfire ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Demonfire " , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# targets = copy . copy ( player . game . current_player . minions ) #NEWLINE# #INDENT# #INDENT# if self . target . card . minion_type is MINION_TYPE . DEMON and self . target in targets : #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . change_attack ( 2 ) #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . increase_health ( 2 ) #NEWLINE# #INDENT# #INDENT# else : #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 2 ) , self )
class Demonfire ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Demonfire " , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# targets = copy . copy ( player . game . current_player . minions ) #NEWLINE# #INDENT# #INDENT# if self . target . card . minion_type is MINION_TYPE . DEMON and self . target in targets : #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . change_attack ( 2 ) #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . increase_health ( 2 ) #NEWLINE# #INDENT# #INDENT# else : #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 2 ) , self )
class Devilsaur ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Devilsaur " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 5 )
class Dire #MERGE# Wolf #MERGE# Alpha ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Dire Wolf Alpha " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 , auras = [ Aura ( Change #MERGE# Attack ( 1 ) , Minion #MERGE# Selector ( Adjacent ( ) ) ) ] )
class Divine #MERGE# Favor ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Divine Favor " , 3 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# difference = len ( game . other_player . hand ) - len ( player . hand ) #NEWLINE# #INDENT# #INDENT# for i in range ( 0 , difference ) : #NEWLINE# #INDENT# #INDENT# #INDENT# player . draw ( )
class Doomsayer ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Doomsayer " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 0 , 7 , effects = [ Effect ( Turn #MERGE# Started ( ) , Action #MERGE# Tag ( Kill ( ) , Minion #MERGE# Selector ( condition = None , players = Both #MERGE# Player ( ) ) ) ) ] )
class Dread #MERGE# Corsair ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Dread Corsair " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . PIRATE , buffs = [ Buff ( Mana #MERGE# Change ( Attribute ( " attack " , Weapon #MERGE# Selector ( ) ) , - 1 ) ) ] ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 3 , taunt = True )
class Dream ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Dream " , 0 , CHARACTER_CLASS . DREAM , CARD_RARITY . COMMON , False , hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . bounce ( )
class Druid #MERGE# Of #MERGE# The #MERGE# Claw ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Druid of the Claw " , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ #NEWLINE# #INDENT# #INDENT# Choice ( Cat #MERGE# Form ( ) , Transform ( Cat #MERGE# Druid ( ) ) , Self #MERGE# Selector ( ) ) , #NEWLINE# #INDENT# #INDENT# Choice ( Bear #MERGE# Form ( ) , Transform ( Bear #MERGE# Druid ( ) ) , Self #MERGE# Selector ( ) ) #NEWLINE# #INDENT# #INDENT# ] ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 4 )
class Druid #MERGE# Of #MERGE# The #MERGE# Claw ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Druid of the Claw " , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ #NEWLINE# #INDENT# #INDENT# Choice ( Cat #MERGE# Form ( ) , Transform ( Cat #MERGE# Druid ( ) ) , Self #MERGE# Selector ( ) ) , #NEWLINE# #INDENT# #INDENT# Choice ( Bear #MERGE# Form ( ) , Transform ( Bear #MERGE# Druid ( ) ) , Self #MERGE# Selector ( ) ) #NEWLINE# #INDENT# #INDENT# ] ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 4 )
class Druid #MERGE# Of #MERGE# The #MERGE# Claw ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Druid of the Claw " , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ #NEWLINE# #INDENT# #INDENT# Choice ( Cat #MERGE# Form ( ) , Transform ( Cat #MERGE# Druid ( ) ) , Self #MERGE# Selector ( ) ) , #NEWLINE# #INDENT# #INDENT# Choice ( Bear #MERGE# Form ( ) , Transform ( Bear #MERGE# Druid ( ) ) , Self #MERGE# Selector ( ) ) #NEWLINE# #INDENT# #INDENT# ] ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 4 )
class Dust #MERGE# Devil ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Dust Devil " , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 2 ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 1 , windfury = True )
class Eaglehorn #MERGE# Bow ( Weapon #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Eaglehorn Bow " , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_weapon ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Weapon ( 3 , 2 , effects = [ Effect ( Secret #MERGE# Revealed ( ) , Action #MERGE# Tag ( Increase #MERGE# Durability ( ) , Weapon #MERGE# Selector ( ) ) ) ] )
class Earthen #MERGE# Ring #MERGE# Farseer ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Earthen Ring Farseer " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 3 ) , Character #MERGE# Selector ( players = Both #MERGE# Player ( ) , picker = User #MERGE# Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 3 )
class Edwin #MERGE# Van #MERGE# Cleef ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Edwin Van #MERGE# Cleef " , 3 , CHARACTER_CLASS . ROGUE , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Give ( [ Buff ( Change #MERGE# Attack ( Attribute ( " cards_played " , Player #MERGE# Selector ( ) ) , 2 ) ) , Buff ( Change #MERGE# Health ( Attribute ( " cards_played " , Player #MERGE# Selector ( ) ) , 2 ) ) ] ) , Self #MERGE# Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 )
class Emerald #MERGE# Drake ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Emerald Drake " , 4 , CHARACTER_CLASS . DREAM , CARD_RARITY . COMMON , False , MINION_TYPE . DRAGON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 7 , 6 )
class Emperor #MERGE# Cobra ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Emperor Cobra " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 3 , effects = [ Effect ( Did #MERGE# Damage ( ) , Action #MERGE# Tag ( Kill ( ) , Target #MERGE# Selector ( Is #MERGE# Minion ( ) ) ) ) ] )
class Equality ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Equality " , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# targets = copy . copy ( game . other_player . minions ) #NEWLINE# #INDENT# #INDENT# targets . extend ( player . minions ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# for minion in targets : #NEWLINE# #INDENT# #INDENT# #INDENT# minion . set_health_to ( 1 ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def can_use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# return super ( ) . can_use ( player , game ) and ( len ( player . minions ) > 0 or len ( game . other_player . minions ) > 0 )
class Ethereal #MERGE# Arcanist ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ethereal Arcanist " , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 3 , effects = [ Effect ( Turn #MERGE# Ended ( Has #MERGE# Secret ( ) ) , Action #MERGE# Tag ( Give ( Change #MERGE# Attack ( 2 ) ) , Self #MERGE# Selector ( ) ) ) , Effect ( Turn #MERGE# Ended ( Has #MERGE# Secret ( ) ) , Action #MERGE# Tag ( Give ( Change #MERGE# Health ( 2 ) ) , Self #MERGE# Selector ( ) ) ) ] )
class Eviscerate ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Eviscerate " , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# if player . cards_played > 0 : #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 4 ) , self ) #NEWLINE# #INDENT# #INDENT# else : #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 2 ) , self )
class Explosive #MERGE# Shot ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Explosive Shot " , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# index = self . target . index #NEWLINE# #INDENT# #INDENT# if self . target . index < len ( self . target . player . minions ) - 1 : #NEWLINE# #INDENT# #INDENT# #INDENT# minion = self . target . player . minions [ index + 1 ] #NEWLINE# #INDENT# #INDENT# #INDENT# minion . damage ( player . effective_spell_damage ( 2 ) , self ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 5 ) , self ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# if self . target . index > 0 : #NEWLINE# #INDENT# #INDENT# #INDENT# minion = self . target . player . minions [ index - 1 ] #NEWLINE# #INDENT# #INDENT# #INDENT# minion . damage ( player . effective_spell_damage ( 2 ) , self )
class Faceless #MERGE# Manipulator ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Faceless Manipulator " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = Battlecry ( Replace ( ) , Minion #MERGE# Selector ( players = Both #MERGE# Player ( ) , picker = User #MERGE# Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 3 )
class Faerie #MERGE# Dragon ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Faerie Dragon " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 2 , spell_targetable = False )
class Far #MERGE# Sight ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Far Sight " , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# def reduce_cost ( card ) : #NEWLINE# #INDENT# #INDENT# #INDENT# card . add_buff ( Buff ( Mana #MERGE# Change ( - 3 ) ) ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# player . bind_once ( " card_drawn " , reduce_cost ) #NEWLINE# #INDENT# #INDENT# player . draw ( )
class Felguard ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Felguard " , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Destroy #MERGE# Mana #MERGE# Crystal ( ) , Player #MERGE# Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 5 , taunt = True )
class Fen #MERGE# Creeper ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Fen Creeper " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 6 , taunt = True )
class Feral #MERGE# Spirit ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Feral Spirit " , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , overload = 2 ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# for i in range ( 0 , 2 ) : #NEWLINE# #INDENT# #INDENT# #INDENT# spirit_wolf = hearthbreaker . cards . minions . shaman . Spirit #MERGE# Wolf ( ) #NEWLINE# #INDENT# #INDENT# #INDENT# spirit_wolf . summon ( player , game , len ( player . minions ) ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def can_use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7
class Finkle #MERGE# Einhorn ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Finkle Einhorn " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , False ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 3 )
class Flame #MERGE# Imp ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Flame Imp " , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 3 ) , Hero #MERGE# Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 2 )
class Flesheating #MERGE# Ghoul ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Flesheating Ghoul " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 3 , effects = [ Effect ( Minion #MERGE# Died ( player = Both #MERGE# Player ( ) ) , Action #MERGE# Tag ( Give ( Change #MERGE# Attack ( 1 ) ) , Self #MERGE# Selector ( ) ) ) ] )
class Force #MERGE# Of #MERGE# Nature ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Force of Nature " , 6 , CHARACTER_CLASS . DRUID , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# from hearthbreaker . cards . minions . druid import Charge #MERGE# Treant #NEWLINE# #INDENT# #INDENT# for i in [ 0 , 1 , 2 ] : #NEWLINE# #INDENT# #INDENT# #INDENT# treant_card = Charge #MERGE# Treant ( ) #NEWLINE# #INDENT# #INDENT# #INDENT# treant_card . summon ( player , game , len ( player . minions ) ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def can_use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7
class Forked #MERGE# Lightning ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Forked Lightning " , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 2 ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# minions = copy . copy ( game . other_player . minions ) #NEWLINE# #INDENT# #INDENT# for i in range ( 0 , 2 ) : #NEWLINE# #INDENT# #INDENT# #INDENT# minion = game . random_choice ( minions ) #NEWLINE# #INDENT# #INDENT# #INDENT# minions . remove ( minion ) #NEWLINE# #INDENT# #INDENT# #INDENT# minion . damage ( player . effective_spell_damage ( 3 ) , self ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def can_use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) >= 2
class Freezing #MERGE# Trap ( Secret #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Freezing Trap " , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def activate ( self , player ) : #NEWLINE# #INDENT# #INDENT# player . game . current_player . bind ( " character_attack " , self . _reveal ) #NEWLINE# #NEWLINE# #INDENT# def deactivate ( self , player ) : #NEWLINE# #INDENT# #INDENT# player . game . current_player . unbind ( " character_attack " , self . _reveal ) #NEWLINE# #NEWLINE# #INDENT# def _reveal ( self , attacker , target ) : #NEWLINE# #INDENT# #INDENT# if isinstance ( attacker , Minion ) and not attacker . removed : #NEWLINE# #INDENT# #INDENT# #INDENT# attacker . bounce ( ) #NEWLINE# #INDENT# #INDENT# #INDENT# attacker . card . add_buff ( Buff ( Mana #MERGE# Change ( 2 ) ) ) #NEWLINE# #INDENT# #INDENT# #INDENT# super ( ) . reveal ( )
class Frost #MERGE# Elemental ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Frost Elemental " , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Frozen ( ) ) , Character #MERGE# Selector ( players = Both #MERGE# Player ( ) , picker = User #MERGE# Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 5 )
class Frothing #MERGE# Berserker ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Frothing Berserker " , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 4 , effects = [ Effect ( Character #MERGE# Damaged ( player = Both #MERGE# Player ( ) , condition = Is #MERGE# Minion ( ) ) , Action #MERGE# Tag ( Give ( Change #MERGE# Attack ( 1 ) ) , Self #MERGE# Selector ( ) ) ) ] )
class Gadgetzan #MERGE# Auctioneer ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Gadgetzan Auctioneer " , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 4 , effects = [ Effect ( Spell #MERGE# Cast ( ) , Action #MERGE# Tag ( Draw ( ) , Player #MERGE# Selector ( ) ) ) ] )
class Gladiators #MERGE# Longbow ( Weapon #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Gladiator's Longbow " , 7 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# #INDENT# def create_weapon ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Weapon ( 5 , 2 , effects = [ Effect ( Character #MERGE# Attack ( Is #MERGE# Hero ( ) ) , Action #MERGE# Tag ( Give ( Buff #MERGE# Until ( Immune ( ) , Attack #MERGE# Completed ( ) ) ) , Hero #MERGE# Selector ( ) ) ) ] )
class Grommash #MERGE# Hellscream ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Grommash Hellscream " , 8 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 9 , charge = True , enrage = [ Aura ( Change #MERGE# Attack ( 6 ) , Self #MERGE# Selector ( ) ) ] )
class Gruul ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Gruul " , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 7 , 7 , effects = [ Effect ( Turn #MERGE# Ended ( player = Both #MERGE# Player ( ) ) , Action #MERGE# Tag ( Give ( [ Buff ( Change #MERGE# Attack ( 1 ) ) , Buff ( Change #MERGE# Health ( 1 ) ) ] ) , Self #MERGE# Selector ( ) ) ) ] )
class Harrison #MERGE# Jones ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Harrison Jones " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = ( Battlecry ( Draw ( Attribute ( " durability " , Weapon #MERGE# Selector ( Enemy #MERGE# Player ( ) ) ) ) , Player #MERGE# Selector ( ) ) , Battlecry ( Destroy ( ) , Weapon #MERGE# Selector ( Enemy #MERGE# Player ( ) ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 4 )
class Harvest #MERGE# Golem ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Harvest Golem " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 3 , deathrattle = Deathrattle ( Summon ( Damaged #MERGE# Golem ( ) ) , Player #MERGE# Selector ( ) ) )
class Headcrack ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Headcrack " , 3 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# game . other_player . hero . damage ( player . effective_spell_damage ( 2 ) , self ) #NEWLINE# #INDENT# #INDENT# if player . cards_played > 0 : #NEWLINE# #INDENT# #INDENT# #INDENT# player . add_effect ( Effect ( Turn #MERGE# Ended ( ) , Action #MERGE# Tag ( Add #MERGE# Card ( self ) , Player #MERGE# Selector ( ) ) ) )
class Heavy #MERGE# Axe ( Weapon #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Heavy Axe " , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , False ) #NEWLINE# #NEWLINE# #INDENT# def create_weapon ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Weapon ( 1 , 3 )
class Hogger ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Hogger " , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 4 , effects = [ Effect ( Turn #MERGE# Ended ( ) , Action #MERGE# Tag ( Summon ( Gnoll ( ) ) , Player #MERGE# Selector ( ) ) ) ] )
class Holy #MERGE# Fire ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Holy Fire " , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 5 ) , self ) #NEWLINE# #INDENT# #INDENT# player . hero . heal ( player . effective_heal_power ( 5 ) , self )
class Hungry #MERGE# Crab ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Hungry Crab " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . BEAST , battlecry = ( Battlecry ( Kill ( ) , Minion #MERGE# Selector ( Is #MERGE# Type ( MINION_TYPE . MURLOC ) , Both #MERGE# Player ( ) ) ) , Battlecry ( Give ( [ Buff ( Change #MERGE# Attack ( 2 ) ) , Buff ( Change #MERGE# Health ( 2 ) ) ] ) , Self #MERGE# Selector ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 2 )
class Hyena ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Hyena " , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , False , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 )
class Ice #MERGE# Barrier ( Secret #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ice Barrier " , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def _reveal ( self , attacker , target ) : #NEWLINE# #INDENT# #INDENT# if target is self . player . hero and not attacker . removed : #NEWLINE# #INDENT# #INDENT# #INDENT# attacker . player . game . other_player . hero . armor += 8 #NEWLINE# #INDENT# #INDENT# #INDENT# super ( ) . reveal ( ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def activate ( self , player ) : #NEWLINE# #INDENT# #INDENT# player . opponent . bind ( " character_attack " , self . _reveal ) #NEWLINE# #NEWLINE# #INDENT# def deactivate ( self , player ) : #NEWLINE# #INDENT# #INDENT# player . opponent . unbind ( " character_attack " , self . _reveal )
class Ice #MERGE# Block ( Secret #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ice Block " , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC ) #NEWLINE# #INDENT# #INDENT# self . player = None #NEWLINE# #NEWLINE# #INDENT# def _reveal ( self , character , attacker , amount ) : #NEWLINE# #INDENT# #INDENT# if character . is_hero ( ) : #NEWLINE# #INDENT# #INDENT# #INDENT# if character . health - amount <= 0 : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# character . add_buff ( Buff #MERGE# Until ( Immune ( ) , Turn #MERGE# Ended ( player = Current #MERGE# Player ( ) ) ) ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# super ( ) . reveal ( ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# def activate ( self , player ) : #NEWLINE# #INDENT# #INDENT# player . bind ( " pre_damage " , self . _reveal ) #NEWLINE# #NEWLINE# #INDENT# def deactivate ( self , player ) : #NEWLINE# #INDENT# #INDENT# player . unbind ( " pre_damage " , self . _reveal )
class Ice #MERGE# Lance ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ice Lance " , 1 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# if self . target . frozen : #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . damage ( 4 , self ) #NEWLINE# #INDENT# #INDENT# else : #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . add_buff ( Buff ( Frozen ( ) ) )
class Illidan #MERGE# Stormrage ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Illidan Stormrage " , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DEMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 7 , 5 , effects = [ Effect ( Card #MERGE# Played ( ) , Action #MERGE# Tag ( Summon ( Flame #MERGE# Of #MERGE# Azzinoth ( ) ) , Player #MERGE# Selector ( ) ) ) ] )
class Imp ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Imp " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False , minion_type = MINION_TYPE . DEMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 )
class Imp #MERGE# Master ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Imp Master " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 5 , effects = [ Effect ( Turn #MERGE# Ended ( ) , Action #MERGE# Tag ( Damage ( 1 ) , Self #MERGE# Selector ( ) ) ) , Effect ( Turn #MERGE# Ended ( ) , Action #MERGE# Tag ( Summon ( Imp ( ) ) , Player #MERGE# Selector ( ) ) ) ] )
class Inner #MERGE# Fire ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Inner Fire " , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# delta = self . target . health - self . target . calculate_attack ( ) #NEWLINE# #INDENT# #INDENT# self . target . change_attack ( delta )
class Inner #MERGE# Rage ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Inner Rage " , 0 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . damage ( 1 , self ) #NEWLINE# #INDENT# #INDENT# self . target . change_attack ( 2 )
class Ironbeak #MERGE# Owl ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ironbeak Owl " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Silence ( ) , Minion #MERGE# Selector ( players = Both #MERGE# Player ( ) , picker = User #MERGE# Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 1 )
class Jungle #MERGE# Panther ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Jungle Panther " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 2 , stealth = True )
class Keeper #MERGE# Of #MERGE# The #MERGE# Grove ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Keeper of the Grove " , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , choices = [ #NEWLINE# #INDENT# #INDENT# Choice ( Moonfire ( ) , Damage ( 2 ) , Character #MERGE# Selector ( players = Both #MERGE# Player ( ) , picker = User #MERGE# Picker ( ) ) ) , #NEWLINE# #INDENT# #INDENT# Choice ( Dispel ( ) , Silence ( ) , Minion #MERGE# Selector ( players = Both #MERGE# Player ( ) , picker = User #MERGE# Picker ( ) ) ) #NEWLINE# #INDENT# #INDENT# ] ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 4 )
class Kidnapper ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Kidnapper " , 6 , CHARACTER_CLASS . ROGUE , CARD_RARITY . EPIC , combo = Battlecry ( Bounce ( ) , Minion #MERGE# Selector ( picker = User #MERGE# Picker ( ) , players = Both #MERGE# Player ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 3 )
class King #MERGE# Krush ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " King Krush " , 9 , CHARACTER_CLASS . HUNTER , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 8 , 8 , charge = True )
class King #MERGE# Mukla ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " King Mukla " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add #MERGE# Card ( Bananas ( ) , 2 ) , Player #MERGE# Selector ( Enemy #MERGE# Player ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 5 )
class Laughing #MERGE# Sister ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Laughing Sister " , 3 , CHARACTER_CLASS . DREAM , CARD_RARITY . COMMON , False ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 5 , spell_targetable = False )
class Lava #MERGE# Burst ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Lava Burst " , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target , overload = 2 ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 5 ) , self )
class Lay #MERGE# On #MERGE# Hands ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Lay on Hands " , 8 , CHARACTER_CLASS . PALADIN , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . heal ( player . effective_heal_power ( 8 ) , self ) #NEWLINE# #INDENT# #INDENT# player . draw ( ) #NEWLINE# #INDENT# #INDENT# player . draw ( ) #NEWLINE# #INDENT# #INDENT# player . draw ( )
class Leeroy #MERGE# Jenkins ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Leeroy Jenkins " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Summon ( Whelp ( ) , 2 ) , Player #MERGE# Selector ( players = Enemy #MERGE# Player ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 6 , 2 , charge = True )
class Leper #MERGE# Gnome ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Leper Gnome " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 1 , deathrattle = Deathrattle ( Damage ( 2 ) , Hero #MERGE# Selector ( Enemy #MERGE# Player ( ) ) ) )
class Lightning #MERGE# Bolt ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Lightning Bolt " , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target , overload = 1 ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 3 ) , self )
class Lightning #MERGE# Storm ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Lightning Storm " , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , overload = 2 ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# for minion in copy . copy ( game . other_player . minions ) : #NEWLINE# #INDENT# #INDENT# #INDENT# minion . damage ( player . effective_spell_damage ( game . random_amount ( 2 , 3 ) ) , self )
class Lightspawn ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Lightspawn " , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 0 , 5 , buffs = [ Buff ( Attack #MERGE# Equals #MERGE# Health ( ) ) ] )
class Loot #MERGE# Hoarder ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Loot Hoarder " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 1 , deathrattle = Deathrattle ( Draw ( ) , Player #MERGE# Selector ( ) ) )
class Lord #MERGE# Jaraxxus ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Lord Jaraxxus " , 9 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DEMON , battlecry = ( Battlecry ( Replace #MERGE# Hero #MERGE# With #MERGE# Minion ( Jaraxxus ( ) ) , Hero #MERGE# Selector ( ) ) , Battlecry ( Remove ( ) , Self #MERGE# Selector ( ) ) , Battlecry ( Equip ( Blood #MERGE# Fury ( ) ) , Player #MERGE# Selector ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 15 )
class Lord #MERGE# Jaraxxus ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Lord Jaraxxus " , 9 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DEMON , battlecry = ( Battlecry ( Replace #MERGE# Hero #MERGE# With #MERGE# Minion ( Jaraxxus ( ) ) , Hero #MERGE# Selector ( ) ) , Battlecry ( Remove ( ) , Self #MERGE# Selector ( ) ) , Battlecry ( Equip ( Blood #MERGE# Fury ( ) ) , Player #MERGE# Selector ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 15 )
class Lorewalker #MERGE# Cho ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Lorewalker Cho " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 0 , 4 , effects = [ Effect ( Spell #MERGE# Cast ( player = Both #MERGE# Player ( ) ) , Action #MERGE# Tag ( Add #MERGE# Card ( Card #MERGE# Query ( source = CARD_SOURCE . LAST_CARD ) ) , Player #MERGE# Selector ( Other #MERGE# Player ( ) ) ) ) ] )
class Mad #MERGE# Bomber ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mad Bomber " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 1 ) , Character #MERGE# Selector ( players = Both #MERGE# Player ( ) , picker = Random #MERGE# Picker ( 3 ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 2 )
class Malygos ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Malygos " , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 12 , spell_damage = 5 )
class Mana #MERGE# Addict ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mana Addict " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 3 , effects = [ Effect ( Spell #MERGE# Cast ( ) , Action #MERGE# Tag ( Give ( Buff #MERGE# Until ( Change #MERGE# Attack ( 2 ) , Turn #MERGE# Ended ( ) ) ) , Self #MERGE# Selector ( ) ) ) ] )
class Mana #MERGE# Tide #MERGE# Totem ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mana Tide Totem " , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , minion_type = MINION_TYPE . TOTEM ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 0 , 3 , effects = [ Effect ( Turn #MERGE# Ended ( ) , Action #MERGE# Tag ( Draw ( ) , Player #MERGE# Selector ( ) ) ) ] )
class Mark #MERGE# Of #MERGE# Nature ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mark of Nature " , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# class Mark #MERGE# Of #MERGE# Nature #MERGE# Attack ( Choice #MERGE# Card ) : #NEWLINE# #INDENT# #INDENT# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# super ( ) . __init__ ( " Mark of Nature +4 Attack " , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# target . change_attack ( 4 ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# class Mark #MERGE# Of #MERGE# Nature #MERGE# Health ( Choice #MERGE# Card ) : #NEWLINE# #INDENT# #INDENT# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# super ( ) . __init__ ( " Mark of Nature +4 Health " , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# target . increase_health ( 4 ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# target . taunt = True #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# target = self . target #NEWLINE# #INDENT# #INDENT# option = game . current_player . agent . choose_option ( [ Mark #MERGE# Of #MERGE# Nature #MERGE# Attack ( ) , Mark #MERGE# Of #MERGE# Nature #MERGE# Health ( ) ] , player ) #NEWLINE# #INDENT# #INDENT# option . use ( player , game )
class Mass #MERGE# Dispel ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mass Dispel " , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# for minion in game . other_player . minions : #NEWLINE# #INDENT# #INDENT# #INDENT# minion . silence ( ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# player . draw ( )
class Master #MERGE# Swordsmith ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Master Swordsmith " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 3 , effects = [ Effect ( Turn #MERGE# Ended ( ) , Action #MERGE# Tag ( Give ( Change #MERGE# Attack ( 1 ) ) , Minion #MERGE# Selector ( picker = Random #MERGE# Picker ( ) ) ) ) ] )
class Master #MERGE# Of #MERGE# Disguise ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Master of Disguise " , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( Stealth ( ) ) , Minion #MERGE# Selector ( picker = User #MERGE# Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 4 )
class Millhouse #MERGE# Manastorm ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Millhouse Manastorm " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Give #MERGE# Aura ( Aura #MERGE# Until ( Mana #MERGE# Change ( - 100 ) , Card #MERGE# Selector ( condition = Is #MERGE# Spell ( ) ) , Turn #MERGE# Ended ( ) ) ) , Player #MERGE# Selector ( players = Enemy #MERGE# Player ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 4 )
class Mind #MERGE# Control #MERGE# Tech ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mind Control Tech " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Steal ( ) , Minion #MERGE# Selector ( players = Enemy #MERGE# Player ( ) , condition = None , picker = Random #MERGE# Picker ( ) ) , Opponent #MERGE# Minion #MERGE# Count #MERGE# Is #MERGE# Greater #MERGE# Than ( 3 ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 3 )
class Mindgames ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mindgames " , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# minion_card = game . random_draw ( game . other_player . deck . cards , lambda c : not c . drawn and isinstance ( c , Minion #MERGE# Card ) ) #NEWLINE# #INDENT# #INDENT# if not minion_card : #NEWLINE# #INDENT# #INDENT# #INDENT# minion_card = Shadow #MERGE# Of #MERGE# Nothing ( ) #NEWLINE# #INDENT# #INDENT# else : #NEWLINE# #INDENT# #INDENT# #INDENT# minion_card = copy . copy ( minion_card ) #NEWLINE# #INDENT# #INDENT# minion_card . drawn = True #NEWLINE# #INDENT# #INDENT# minion_card . summon ( player , game , 0 ) #NEWLINE# #NEWLINE# #INDENT# def can_use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7
class Mirror #MERGE# Entity ( Secret #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mirror Entity " , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) #NEWLINE# #INDENT# #INDENT# self . player = None #NEWLINE# #NEWLINE# #INDENT# def _reveal ( self , minion ) : #NEWLINE# #INDENT# #INDENT# if len ( self . player . minions ) < 7 : #NEWLINE# #INDENT# #INDENT# #INDENT# mirror = minion . copy ( self . player ) #NEWLINE# #INDENT# #INDENT# #INDENT# mirror . add_to_board ( len ( self . player . minions ) ) #NEWLINE# #INDENT# #INDENT# #INDENT# minion . player . trigger ( " minion_summoned " , mirror ) #NEWLINE# #INDENT# #INDENT# #INDENT# minion . player . trigger ( " after_added " , mirror ) #NEWLINE# #INDENT# #INDENT# #INDENT# super ( ) . reveal ( ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def activate ( self , player ) : #NEWLINE# #INDENT# #INDENT# player . game . current_player . bind ( " minion_played " , self . _reveal ) #NEWLINE# #INDENT# #INDENT# self . player = player #NEWLINE# #NEWLINE# #INDENT# def deactivate ( self , player ) : #NEWLINE# #INDENT# #INDENT# player . game . current_player . unbind ( " minion_played " , self . _reveal ) #NEWLINE# #INDENT# #INDENT# self . player = None
class Molten #MERGE# Giant ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Molten Giant " , 20 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , buffs = [ Buff ( Mana #MERGE# Change ( Attribute ( " damage " , Hero #MERGE# Selector ( ) ) , - 1 ) ) ] ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 8 , 8 )
class Mortal #MERGE# Strike ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mortal Strike " , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# if player . hero . health <= 12 : #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 6 ) , self ) #NEWLINE# #INDENT# #INDENT# else : #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 4 ) , self )
class Mountain #MERGE# Giant ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mountain Giant " , 12 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , buffs = [ Buff ( Mana #MERGE# Change ( Count ( Card #MERGE# Selector ( ) ) , - 1 ) ) ] ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 8 , 8 )
class Murloc #MERGE# Tidecaller ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Murloc Tidecaller " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 2 , effects = [ ( Effect ( Minion #MERGE# Summoned ( Is #MERGE# Type ( MINION_TYPE . MURLOC ) , player = Both #MERGE# Player ( ) ) , Action #MERGE# Tag ( Give ( Change #MERGE# Attack ( 1 ) ) , Self #MERGE# Selector ( ) ) ) ) ] )
class Murloc #MERGE# Warleader ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Murloc Warleader " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MURLOC ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 3 , auras = [ Aura ( Change #MERGE# Attack ( 2 ) , Minion #MERGE# Selector ( Is #MERGE# Type ( MINION_TYPE . MURLOC ) , Both #MERGE# Player ( ) ) ) , Aura ( Change #MERGE# Health ( 1 ) , Minion #MERGE# Selector ( Is #MERGE# Type ( MINION_TYPE . MURLOC ) , Both #MERGE# Player ( ) ) ) ] )
class Nat #MERGE# Pagle ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Nat Pagle " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 0 , 4 , effects = [ Effect ( Turn #MERGE# Started ( ) , Action #MERGE# Tag ( Draw ( ) , Player #MERGE# Selector ( ) , One #MERGE# In ( 2 ) ) ) ] )
class Naturalize ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Naturalize " , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . die ( self ) #NEWLINE# #INDENT# #INDENT# game . other_player . draw ( ) #NEWLINE# #INDENT# #INDENT# game . other_player . draw ( )
class Nightmare ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Nightmare " , 0 , CHARACTER_CLASS . DREAM , CARD_RARITY . COMMON , False , hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . add_buff ( Buff ( Change #MERGE# Attack ( 5 ) ) ) #NEWLINE# #INDENT# #INDENT# self . target . add_buff ( Buff ( Change #MERGE# Health ( 5 ) ) ) #NEWLINE# #INDENT# #INDENT# self . target . add_effect ( Effect ( Turn #MERGE# Started ( player = Current #MERGE# Player ( ) ) , Action #MERGE# Tag ( Kill ( ) , Self #MERGE# Selector ( ) ) ) )
class Nozdormu ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Nozdormu " , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 8 , 8 )
class Onyxia ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Onyxia " , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Summon ( Whelp ( ) , 6 ) , Player #MERGE# Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 8 , 8 )
class Panther ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Panther " , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , _ ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 2 , MINION_TYPE . BEAST )
class Patient #MERGE# Assassin ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Patient Assassin " , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 , stealth = True , effects = [ Effect ( Did #MERGE# Damage ( ) , Action #MERGE# Tag ( Kill ( ) , Target #MERGE# Selector ( Is #MERGE# Minion ( ) ) ) ) ] )
class Perditions #MERGE# Blade ( Weapon #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Perdition's Blade " , 3 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 1 ) , Character #MERGE# Selector ( None , picker = User #MERGE# Picker ( ) ) ) , combo = Battlecry ( Damage ( 2 ) , Character #MERGE# Selector ( None , picker = User #MERGE# Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_weapon ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Weapon ( 2 , 2 )
class Pint #MERGE# Sized #MERGE# Summoner ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Pint-Sized Summoner " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 , effects = [ Effect ( Turn #MERGE# Started ( ) , Action #MERGE# Tag ( Give #MERGE# Aura ( Aura #MERGE# Until ( Mana #MERGE# Change ( - 1 ) , Card #MERGE# Selector ( condition = Is #MERGE# Minion ( ) ) , Minion #MERGE# Placed ( ) ) ) , Player #MERGE# Selector ( ) ) ) ] )
class Pit #MERGE# Lord ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Pit Lord " , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 5 ) , Hero #MERGE# Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 6 )
class Power #MERGE# Overwhelming ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Power Overwhelming " , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . add_effect ( Effect ( Turn #MERGE# Ended ( ) , Action #MERGE# Tag ( Kill ( ) , Self #MERGE# Selector ( ) ) ) ) #NEWLINE# #INDENT# #INDENT# self . target . change_attack ( 4 ) #NEWLINE# #INDENT# #INDENT# self . target . increase_health ( 4 )
class Priestess #MERGE# Of #MERGE# Elune ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Priestess of Elune " , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 4 ) , Hero #MERGE# Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 4 )
class Prophet #MERGE# Velen ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Prophet Velen " , 7 , CHARACTER_CLASS . PRIEST , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 7 , 7 , auras = [ Aura ( Multiply #MERGE# Spell #MERGE# Damage ( 2 ) , Player #MERGE# Selector ( ) ) , Aura ( Multiply #MERGE# Heal #MERGE# Amount ( 2 ) , Player #MERGE# Selector ( ) ) ] )
class Pyroblast ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Pyroblast " , 10 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 10 ) , self )
class Questing #MERGE# Adventurer ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Questing Adventurer " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 , effects = [ Effect ( Card #MERGE# Played ( ) , Action #MERGE# Tag ( Give ( [ Buff ( Change #MERGE# Attack ( 1 ) ) , Buff ( Change #MERGE# Health ( 1 ) ) ] ) , Self #MERGE# Selector ( ) ) ) ] )
class Raging #MERGE# Worgen ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Raging Worgen " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 3 , enrage = [ Aura ( Change #MERGE# Attack ( 1 ) , Self #MERGE# Selector ( ) ) , Aura ( Windfury ( ) , Self #MERGE# Selector ( ) ) ] )
class Ragnaros #MERGE# The #MERGE# Firelord ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ragnaros the Firelord " , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 8 , 8 , effects = [ Effect ( Turn #MERGE# Ended ( ) , Action #MERGE# Tag ( Damage ( 8 ) , Character #MERGE# Selector ( players = Enemy #MERGE# Player ( ) , picker = Random #MERGE# Picker ( ) ) ) ) ] , buffs = [ Buff ( Cant #MERGE# Attack ( ) ) ] )
class Rampage ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Rampage " , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . health != target . calculate_max_health ( ) and target . spell_targetable ( ) ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . change_attack ( 3 ) #NEWLINE# #INDENT# #INDENT# self . target . increase_health ( 3 )
class Ravenholdt #MERGE# Assassin ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ravenholdt Assassin " , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 7 , 5 , stealth = True )
class SI7Agent ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " SI:7 Agent " , 3 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE , combo = Battlecry ( Damage ( 2 ) , Character #MERGE# Selector ( players = Both #MERGE# Player ( ) , picker = User #MERGE# Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 3 )
class Savagery ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Savagery " , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( player . hero . calculate_attack ( ) ) , self )
class Savannah #MERGE# Highmane ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Savannah Highmane " , 6 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 6 , 5 , deathrattle = Deathrattle ( Summon ( Hyena ( ) , 2 ) , Player #MERGE# Selector ( ) ) )
class Scarlet #MERGE# Crusader ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Scarlet Crusader " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 1 , divine_shield = True )
class Scavenging #MERGE# Hyena ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Scavenging Hyena " , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 , effects = [ Effect ( Minion #MERGE# Died ( Is #MERGE# Type ( MINION_TYPE . BEAST ) ) , Action #MERGE# Tag ( Give ( Change #MERGE# Attack ( 2 ) ) , Self #MERGE# Selector ( ) ) ) , Effect ( Minion #MERGE# Died ( Is #MERGE# Type ( MINION_TYPE . BEAST ) ) , Action #MERGE# Tag ( Give ( Change #MERGE# Health ( 1 ) ) , Self #MERGE# Selector ( ) ) ) ] )
class Sea #MERGE# Giant ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Sea Giant " , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , buffs = [ Buff ( Mana #MERGE# Change ( Count ( Minion #MERGE# Selector ( None , Both #MERGE# Player ( ) ) ) , - 1 ) ) ] ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 8 , 8 )
class Secretkeeper ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Secretkeeper " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 2 , effects = [ Effect ( Spell #MERGE# Cast ( Is #MERGE# Secret ( ) , Both #MERGE# Player ( ) ) , Action #MERGE# Tag ( Give ( [ Buff ( Change #MERGE# Attack ( 1 ) ) , Buff ( Change #MERGE# Health ( 1 ) ) ] ) , Self #MERGE# Selector ( ) ) ) ] )
class Sense #MERGE# Demons ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Sense Demons " , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# for i in range ( 0 , 2 ) : #NEWLINE# #INDENT# #INDENT# #INDENT# demon_card = game . random_draw ( game . current_player . deck . cards , lambda c : not c . drawn and c . is_minion ( ) and c . minion_type == MINION_TYPE . DEMON ) #NEWLINE# #INDENT# #INDENT# #INDENT# if demon_card : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# demon_card . drawn = True #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# player . deck . left -= 1 #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# if len ( player . hand ) < 10 : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# player . hand . append ( demon_card ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# demon_card . player = player #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# self . trigger ( " card_drawn " , demon_card ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# else : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# player . trigger ( " card_destroyed " , demon_card ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# else : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# if len ( player . hand ) < 10 : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# player . hand . append ( hearthbreaker . cards . minions . warlock . Worthless #MERGE# Imp ( ) ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# player . hand [ - 1 ] . player = player #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# self . trigger ( " card_drawn " , hearthbreaker . cards . minions . warlock . Worthless #MERGE# Imp ( ) )
class Shadowflame ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Shadowflame " , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# shadowflame_damage = self . target . calculate_attack ( ) #NEWLINE# #INDENT# #INDENT# self . target . die ( self ) #NEWLINE# #INDENT# #INDENT# for minion in game . other_player . minions : #NEWLINE# #INDENT# #INDENT# #INDENT# minion . damage ( player . effective_spell_damage ( shadowflame_damage ) , self )
class Shadowform ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Shadowform " , 3 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# if type ( player . hero . power ) is not hearthbreaker . powers . Mind #MERGE# Shatter and type ( player . hero . power ) is not hearthbreaker . powers . Mind #MERGE# Spike : #NEWLINE# #INDENT# #INDENT# #INDENT# player . hero . power = hearthbreaker . powers . Mind #MERGE# Spike ( ) #NEWLINE# #INDENT# #INDENT# #INDENT# player . hero . power . hero = player . hero #NEWLINE# #INDENT# #INDENT# elif type ( player . hero . power ) is hearthbreaker . powers . Mind #MERGE# Spike : #NEWLINE# #INDENT# #INDENT# #INDENT# player . hero . power = hearthbreaker . powers . Mind #MERGE# Shatter ( ) #NEWLINE# #INDENT# #INDENT# #INDENT# player . hero . power . hero = player . hero
class Shadowstep ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Shadowstep " , 0 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . bounce ( ) #NEWLINE# #INDENT# #INDENT# self . target . card . add_buff ( Buff ( Mana #MERGE# Change ( - 3 ) ) )
class Shield #MERGE# Slam ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Shield Slam " , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( player . hero . armor ) , self )
class Shieldbearer ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Shieldbearer " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 0 , 4 , taunt = True )
class Silence ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Silence " , 0 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . silence ( )
class Silver #MERGE# Hand #MERGE# Knight ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Silver Hand Knight " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Squire ( ) ) , Player #MERGE# Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 4 )
class Silvermoon #MERGE# Guardian ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Silvermoon Guardian " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 3 , divine_shield = True )
class Snake ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Snake " , 0 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 )
class Snake #MERGE# Trap ( Secret #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Snake Trap " , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# #INDENT# def activate ( self , player ) : #NEWLINE# #INDENT# #INDENT# player . game . current_player . bind ( " character_attack " , self . _reveal ) #NEWLINE# #NEWLINE# #INDENT# def deactivate ( self , player ) : #NEWLINE# #INDENT# #INDENT# player . game . current_player . unbind ( " character_attack " , self . _reveal ) #NEWLINE# #NEWLINE# #INDENT# def _reveal ( self , attacker , target ) : #NEWLINE# #INDENT# #INDENT# if isinstance ( target , Minion ) : #NEWLINE# #INDENT# #INDENT# #INDENT# snake = hearthbreaker . cards . minions . hunter . Snake ( ) #NEWLINE# #INDENT# #INDENT# #INDENT# player = target . player . game . other_player #NEWLINE# #INDENT# #INDENT# #INDENT# for i in range ( 0 , 3 ) : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# snake . summon ( player , player . game , len ( player . minions ) ) #NEWLINE# #INDENT# #INDENT# #INDENT# super ( ) . reveal ( )
class Snipe ( Secret #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Snipe " , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def activate ( self , player ) : #NEWLINE# #INDENT# #INDENT# player . game . current_player . bind ( " minion_played " , self . _reveal ) #NEWLINE# #NEWLINE# #INDENT# def deactivate ( self , player ) : #NEWLINE# #INDENT# #INDENT# player . game . current_player . unbind ( " minion_played " , self . _reveal ) #NEWLINE# #NEWLINE# #INDENT# def _reveal ( self , minion ) : #NEWLINE# #INDENT# #INDENT# minion . damage ( 4 , None ) #NEWLINE# #INDENT# #INDENT# super ( ) . reveal ( )
class Sorcerers #MERGE# Apprentice ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Sorcerer's Apprentice " , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 2 , auras = [ Aura ( Mana #MERGE# Change ( - 1 ) , Card #MERGE# Selector ( condition = Is #MERGE# Spell ( ) ) ) ] )
class Soul #MERGE# Of #MERGE# The #MERGE# Forest ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Soul of the Forest " , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# from hearthbreaker . cards . minions . druid import Treant #NEWLINE# #INDENT# #INDENT# for minion in player . minions : #NEWLINE# #INDENT# #INDENT# #INDENT# minion . deathrattle . append ( Deathrattle ( Summon ( Treant ( ) ) , Player #MERGE# Selector ( ) ) )
class Southsea #MERGE# Captain ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Southsea Captain " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . PIRATE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 3 , auras = [ Aura ( Change #MERGE# Attack ( 1 ) , Minion #MERGE# Selector ( Is #MERGE# Type ( MINION_TYPE . PIRATE ) ) ) , Aura ( Change #MERGE# Health ( 1 ) , Minion #MERGE# Selector ( Is #MERGE# Type ( MINION_TYPE . PIRATE ) ) ) ] )
class Southsea #MERGE# Deckhand ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Southsea Deckhand " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . PIRATE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 1 , buffs = [ Buff ( Charge ( ) , Greater #MERGE# Than ( Count ( Weapon #MERGE# Selector ( ) ) , value = 0 ) ) ] )
class Spellbender ( Secret #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Spellbender " , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC ) #NEWLINE# #INDENT# #INDENT# self . player = None #NEWLINE# #NEWLINE# #INDENT# def _reveal ( self , card , index ) : #NEWLINE# #INDENT# #INDENT# if card . is_spell ( ) and len ( self . player . minions ) < 7 and card . target and card . target . is_minion ( ) : #NEWLINE# #INDENT# #INDENT# #INDENT# Spellbender #MERGE# Minion ( ) . summon ( self . player , self . player . game , len ( self . player . minions ) ) #NEWLINE# #INDENT# #INDENT# #INDENT# card . target = self . player . minions [ - 1 ] #NEWLINE# #INDENT# #INDENT# #INDENT# super ( ) . reveal ( ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def activate ( self , player ) : #NEWLINE# #INDENT# #INDENT# player . game . current_player . bind ( " card_played " , self . _reveal ) #NEWLINE# #INDENT# #INDENT# self . player = player #NEWLINE# #NEWLINE# #INDENT# def deactivate ( self , player ) : #NEWLINE# #INDENT# #INDENT# player . game . current_player . unbind ( " card_played " , self . _reveal ) #NEWLINE# #INDENT# #INDENT# self . player = None
class Spirit #MERGE# Wolf ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Spirit Wolf " , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , False ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , p ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 3 , taunt = True )
class Spiteful #MERGE# Smith ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Spiteful Smith " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 6 , enrage = [ Aura ( Change #MERGE# Attack ( 2 ) , Weapon #MERGE# Selector ( ) ) ] )
class Squire ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Squire " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 )
class Squirrel ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Squirrel " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 )
class Stampeding #MERGE# Kodo ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Stampeding Kodo " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Kill ( ) , Minion #MERGE# Selector ( Attack #MERGE# Less #MERGE# Than #MERGE# Or #MERGE# Equal #MERGE# To ( 2 ) , Enemy #MERGE# Player ( ) , Random #MERGE# Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 5 )
class Starfall ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Starfall " , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def can_use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > 0 #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# option = player . agent . choose_option ( [ Damage #MERGE# All ( ) , Damage #MERGE# One ( ) ] , player ) #NEWLINE# #INDENT# #INDENT# option . use ( player , game )
class Stormforged #MERGE# Axe ( Weapon #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Stormforged Axe " , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 1 ) #NEWLINE# #NEWLINE# #INDENT# def create_weapon ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Weapon ( 2 , 3 )
class Stranglethorn #MERGE# Tiger ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Stranglethorn Tiger " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 5 , stealth = True )
class Sunwalker ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Sunwalker " , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 5 , divine_shield = True , taunt = True )
class Sword #MERGE# Of #MERGE# Justice ( Weapon #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Sword of Justice " , 3 , CHARACTER_CLASS . PALADIN , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# #INDENT# def create_weapon ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Weapon ( 1 , 5 , effects = [ Effect ( Minion #MERGE# Summoned ( ) , Action #MERGE# Tag ( Give ( [ Buff ( Change #MERGE# Attack ( 1 ) ) , Buff ( Change #MERGE# Health ( 1 ) ) ] ) , Target #MERGE# Selector ( ) ) ) , Effect ( Minion #MERGE# Summoned ( ) , Action #MERGE# Tag ( Decrease #MERGE# Durability ( ) , Weapon #MERGE# Selector ( ) ) ) ] )
class Sylvanas #MERGE# Windrunner ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Sylvanas Windrunner " , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 5 , deathrattle = Deathrattle ( Steal ( ) , Minion #MERGE# Selector ( players = Enemy #MERGE# Player ( ) , picker = Random #MERGE# Picker ( ) ) ) )
class Tauren #MERGE# Warrior ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Tauren Warrior " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 3 , taunt = True , enrage = [ Aura ( Change #MERGE# Attack ( 3 ) , Self #MERGE# Selector ( ) ) ] )
class Temple #MERGE# Enforcer ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Temple Enforcer " , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Change #MERGE# Health ( 3 ) ) , Minion #MERGE# Selector ( picker = User #MERGE# Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 6 , 6 )
class The #MERGE# Beast ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " The Beast " , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 9 , 7 , deathrattle = Deathrattle ( Summon ( Finkle #MERGE# Einhorn ( ) ) , Player #MERGE# Selector ( Enemy #MERGE# Player ( ) ) ) )
class The #MERGE# Black #MERGE# Knight ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " The Black Knight " , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Kill ( ) , Minion #MERGE# Selector ( Has #MERGE# Status ( " taunt " ) , Enemy #MERGE# Player ( ) , User #MERGE# Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 5 )
class Thoughtsteal ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Thoughtsteal " , 3 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# for i in range ( 0 , 2 ) : #NEWLINE# #INDENT# #INDENT# #INDENT# new_card = game . random_draw ( game . other_player . deck . cards , lambda c : not c . drawn ) #NEWLINE# #INDENT# #INDENT# #INDENT# if new_card : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# new_card = copy . copy ( new_card ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# new_card . drawn = True #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# if len ( player . hand ) < 10 : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# player . hand . append ( new_card ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# new_card . player = player #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# self . trigger ( " card_drawn " , new_card ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# else : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# player . trigger ( " card_destroyed " , new_card )
class Tirion #MERGE# Fordring ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Tirion Fordring " , 8 , CHARACTER_CLASS . PALADIN , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 6 , 6 , divine_shield = True , taunt = True , deathrattle = Deathrattle ( Equip ( Ashbringer ( ) ) , Player #MERGE# Selector ( ) ) )
class Treant ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Treant " , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , _ ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 )
class Treant ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Treant " , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , _ ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 )
class Treant ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Treant " , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , _ ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 )
class Twilight #MERGE# Drake ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Twilight Drake " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Give ( Buff ( Change #MERGE# Health ( Count ( Card #MERGE# Selector ( ) ) ) ) ) , Self #MERGE# Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 1 )
class Twisting #MERGE# Nether ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Twisting Nether " , 8 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# targets = copy . copy ( game . other_player . minions ) #NEWLINE# #INDENT# #INDENT# targets . extend ( game . current_player . minions ) #NEWLINE# #INDENT# #INDENT# for minion in targets : #NEWLINE# #INDENT# #INDENT# #INDENT# minion . die ( self )
class Unbound #MERGE# Elemental ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Unbound Elemental " , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 4 , effects = [ Effect ( Card #MERGE# Played ( Has #MERGE# Overload ( ) ) , Action #MERGE# Tag ( Give ( Change #MERGE# Attack ( 1 ) ) , Self #MERGE# Selector ( ) ) ) , Effect ( Card #MERGE# Played ( Has #MERGE# Overload ( ) ) , Action #MERGE# Tag ( Give ( Change #MERGE# Health ( 1 ) ) , Self #MERGE# Selector ( ) ) ) ] )
class Unleash #MERGE# The #MERGE# Hounds ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Unleash the Hounds " , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# for target in hearthbreaker . targeting . find_enemy_minion_spell_target ( player . game , lambda x : True ) : #NEWLINE# #INDENT# #INDENT# #INDENT# hound = hearthbreaker . cards . minions . hunter . Hound ( ) #NEWLINE# #INDENT# #INDENT# #INDENT# hound . summon ( player , game , len ( player . minions ) ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def can_use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) >= 1 and len ( player . minions ) < 7
class Venture #MERGE# Co #MERGE# Mercenary ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Venture Co. Mercenary " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 7 , 6 , auras = [ Aura ( Mana #MERGE# Change ( 3 ) , Card #MERGE# Selector ( condition = Is #MERGE# Minion ( ) ) ) ] )
class Violet #MERGE# Apprentice ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Violet Apprentice " , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 )
class Violet #MERGE# Teacher ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Violet Teacher " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 5 , effects = [ Effect ( Spell #MERGE# Cast ( ) , Action #MERGE# Tag ( Summon ( Violet #MERGE# Apprentice ( ) ) , Player #MERGE# Selector ( ) ) ) ] )
class Void #MERGE# Terror ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Void Terror " , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . DEMON , battlecry = ( Battlecry ( Give ( [ Buff ( Change #MERGE# Health ( Attribute ( " health " , Minion #MERGE# Selector ( Adjacent ( ) ) ) ) ) , Buff ( Change #MERGE# Attack ( Attribute ( " attack " , Minion #MERGE# Selector ( Adjacent ( ) ) ) ) ) ] ) , Self #MERGE# Selector ( ) ) , Battlecry ( Kill ( ) , Minion #MERGE# Selector ( Adjacent ( ) ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 3 )
class Whelp ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Whelp " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 )
class Whelp ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Whelp " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 )
class Wild #MERGE# Pyromancer ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Wild Pyromancer " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 2 , effects = [ Effect ( Card #MERGE# Used ( Is #MERGE# Spell ( ) ) , Action #MERGE# Tag ( Damage ( 1 ) , Minion #MERGE# Selector ( condition = None , players = Both #MERGE# Player ( ) ) ) ) ] )
class Windfury #MERGE# Harpy ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Windfury Harpy " , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 5 , windfury = True )
class Worthless #MERGE# Imp ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Worthless Imp " , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , False , MINION_TYPE . DEMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , p ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 )
class Wrath ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Wrath " , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# class Wrath #MERGE# One ( Choice #MERGE# Card ) : #NEWLINE# #INDENT# #INDENT# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# super ( ) . __init__ ( " Wrath 1 Damage " , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# target . damage ( player . effective_spell_damage ( 1 ) , wrath ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# player . draw ( ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# class Wrath #MERGE# Three ( Choice #MERGE# Card ) : #NEWLINE# #INDENT# #INDENT# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# super ( ) . __init__ ( " Wrath 3 Damage " , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# target . damage ( player . effective_spell_damage ( 3 ) , wrath ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# option = game . current_player . agent . choose_option ( [ Wrath #MERGE# One ( ) , Wrath #MERGE# Three ( ) ] , player ) #NEWLINE# #INDENT# #INDENT# target = self . target #NEWLINE# #INDENT# #INDENT# wrath = self #NEWLINE# #INDENT# #INDENT# option . use ( player , game )
class Young #MERGE# Dragonhawk ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Young Dragonhawk " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 , windfury = True )
class Young #MERGE# Priestess ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Young Priestess " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 1 , effects = [ Effect ( Turn #MERGE# Ended ( ) , Action #MERGE# Tag ( Give ( Change #MERGE# Health ( 1 ) ) , Minion #MERGE# Selector ( picker = Random #MERGE# Picker ( ) ) ) ) ] )
class Youthful #MERGE# Brewmaster ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Youthful Brewmaster " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Bounce ( ) , Minion #MERGE# Selector ( picker = User #MERGE# Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 2 )
class Ysera ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ysera " , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# dream_card_list = [ Emerald #MERGE# Drake ( ) , Laughing #MERGE# Sister ( ) , Nightmare ( ) , Ysera #MERGE# Awakens ( ) , Dream ( ) ] #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 12 , effects = [ Effect ( Turn #MERGE# Ended ( ) , Action #MERGE# Tag ( Add #MERGE# Card ( Card #MERGE# Query ( source = CARD_SOURCE . LIST , source_list = dream_card_list ) ) , Player #MERGE# Selector ( ) ) ) ] )
class Ysera #MERGE# Awakens ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ysera Awakens " , 2 , CHARACTER_CLASS . DREAM , CARD_RARITY . COMMON , False ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# targets = copy . copy ( player . game . other_player . minions ) #NEWLINE# #INDENT# #INDENT# targets . extend ( player . game . current_player . minions ) #NEWLINE# #INDENT# #INDENT# targets . append ( player . game . other_player . hero ) #NEWLINE# #INDENT# #INDENT# targets . append ( player . game . current_player . hero ) #NEWLINE# #INDENT# #INDENT# targets = filter ( lambda m : not m . is_minion ( ) or m . card . name != " Ysera " , targets ) #NEWLINE# #INDENT# #INDENT# for minion in targets : #NEWLINE# #INDENT# #INDENT# #INDENT# minion . damage ( player . effective_spell_damage ( 5 ) , self )
class Axe #MERGE# Flinger ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Axe Flinger " , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 5 , effects = [ Effect ( Damaged ( ) , Action #MERGE# Tag ( Damage ( 2 ) , Hero #MERGE# Selector ( Enemy #MERGE# Player ( ) ) ) ) ] )
class Blackwing #MERGE# Technician ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Blackwing Technician " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = ( Battlecry ( Give ( [ Buff ( Change #MERGE# Attack ( 1 ) ) , Buff ( Change #MERGE# Health ( 1 ) ) ] ) , Self #MERGE# Selector ( ) , Greater #MERGE# Than ( Count ( Card #MERGE# Selector ( condition = Is #MERGE# Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 4 )
class Chromaggus ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Chromaggus " , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 6 , 8 , effects = [ Effect ( Card #MERGE# Drawn ( ) , [ Action #MERGE# Tag ( Add #MERGE# Card ( Card #MERGE# Query ( source = CARD_SOURCE . LAST_DRAWN , make_copy = True ) ) , Player #MERGE# Selector ( ) ) ] ) ] )
class Core #MERGE# Rager ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Core Rager " , 4 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST , battlecry = ( Battlecry ( Give ( [ Buff ( Change #MERGE# Attack ( 3 ) ) , Buff ( Change #MERGE# Health ( 3 ) ) ] ) , Self #MERGE# Selector ( ) , Not ( Greater #MERGE# Than ( Count ( Card #MERGE# Selector ( ) ) , value = 0 ) ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 4 )
class Dark #MERGE# Iron #MERGE# Skulker ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Dark Iron Skulker " , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 2 ) , Minion #MERGE# Selector ( condition = Not ( Is #MERGE# Damaged ( ) ) , players = Enemy #MERGE# Player ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 3 )
class Demonwrath ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Demonwrath " , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# targets = copy . copy ( game . other_player . minions ) #NEWLINE# #INDENT# #INDENT# targets . extend ( game . current_player . minions ) #NEWLINE# #INDENT# #INDENT# for minion in targets : #NEWLINE# #INDENT# #INDENT# #INDENT# if minion . card . minion_type is not MINION_TYPE . DEMON : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# minion . damage ( player . effective_spell_damage ( 2 ) , self )
class Dragon #MERGE# Consort ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Dragon Consort " , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Give #MERGE# Aura ( [ Aura #MERGE# Until ( Mana #MERGE# Change ( - 3 ) , Card #MERGE# Selector ( condition = Is #MERGE# Type ( MINION_TYPE . DRAGON ) ) , Card #MERGE# Played ( Is #MERGE# Type ( MINION_TYPE . DRAGON ) ) , False ) ] ) , Player #MERGE# Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 5 )
class Dragon #MERGE# Egg ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Dragon Egg " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 0 , 2 , effects = [ Effect ( Damaged ( ) , Action #MERGE# Tag ( Summon ( Black #MERGE# Whelp ( ) ) , Player #MERGE# Selector ( ) ) ) ] )
class Dragons #MERGE# Breath ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Dragon's Breath " , 5 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target , buffs = [ Buff ( Mana #MERGE# Change ( Count ( Dead #MERGE# Minion #MERGE# Selector ( players = Both #MERGE# Player ( ) ) ) , - 1 ) ) ] ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 4 ) , self )
class Druid #MERGE# Of #MERGE# The #MERGE# Flame ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Druid of the Flame " , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ #NEWLINE# #INDENT# #INDENT# Choice ( Flame #MERGE# Cat #MERGE# Form ( ) , Transform ( Flame #MERGE# Cat ( ) ) , Self #MERGE# Selector ( ) ) , #NEWLINE# #INDENT# #INDENT# Choice ( Flame #MERGE# Bird #MERGE# Form ( ) , Transform ( Flame #MERGE# Bird ( ) ) , Self #MERGE# Selector ( ) ) #NEWLINE# #INDENT# #INDENT# ] ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 )
class Druid #MERGE# Of #MERGE# The #MERGE# Flame ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Druid of the Flame " , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ #NEWLINE# #INDENT# #INDENT# Choice ( Flame #MERGE# Cat #MERGE# Form ( ) , Transform ( Flame #MERGE# Cat ( ) ) , Self #MERGE# Selector ( ) ) , #NEWLINE# #INDENT# #INDENT# Choice ( Flame #MERGE# Bird #MERGE# Form ( ) , Transform ( Flame #MERGE# Bird ( ) ) , Self #MERGE# Selector ( ) ) #NEWLINE# #INDENT# #INDENT# ] ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 )
class Druid #MERGE# Of #MERGE# The #MERGE# Flame ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Druid of the Flame " , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ #NEWLINE# #INDENT# #INDENT# Choice ( Flame #MERGE# Cat #MERGE# Form ( ) , Transform ( Flame #MERGE# Cat ( ) ) , Self #MERGE# Selector ( ) ) , #NEWLINE# #INDENT# #INDENT# Choice ( Flame #MERGE# Bird #MERGE# Form ( ) , Transform ( Flame #MERGE# Bird ( ) ) , Self #MERGE# Selector ( ) ) #NEWLINE# #INDENT# #INDENT# ] ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 )
class Emperor #MERGE# Thaurissan ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Emperor Thaurissan " , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 5 , effects = [ Effect ( Turn #MERGE# Ended ( ) , [ Action #MERGE# Tag ( Give ( Buff ( Mana #MERGE# Change ( - 1 ) ) ) , Card #MERGE# Selector ( ) ) ] ) ] )
class Fireguard #MERGE# Destroyer ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Fireguard Destroyer " , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 1 , battlecry = Battlecry ( Give ( Buff ( Change #MERGE# Attack ( Random #MERGE# Amount ( 1 , 4 ) ) ) ) , Self #MERGE# Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 6 )
class Flamewaker ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Flamewaker " , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 4 , effects = [ Effect ( Card #MERGE# Used ( Is #MERGE# Spell ( ) ) , Action #MERGE# Tag ( Damage ( 1 ) , Character #MERGE# Selector ( None , Enemy #MERGE# Player ( ) , Random #MERGE# Picker ( 2 ) ) ) ) ] )
class Gang #MERGE# Up ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Gang Up " , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# for i in range ( 3 ) : #NEWLINE# #INDENT# #INDENT# #INDENT# player . put_back ( type ( self . target . card ) ( ) )
class Grim #MERGE# Patron ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Grim Patron " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 3 , effects = [ Effect ( Damaged ( ) , [ Action #MERGE# Tag ( Summon ( Grim #MERGE# Patron ( ) ) , Player #MERGE# Selector ( ) , Greater #MERGE# Than ( Attribute ( " health " , Self #MERGE# Selector ( ) ) , value = 0 ) ) ] ) ] )
class Imp #MERGE# Gang #MERGE# Boss ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Imp Gang Boss " , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 4 , effects = [ Effect ( Damaged ( ) , Action #MERGE# Tag ( Summon ( Imp ( ) ) , Player #MERGE# Selector ( ) ) ) ] )
class Lava #MERGE# Shock ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Lava Shock " , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . damage ( 2 , self ) #NEWLINE# #INDENT# #INDENT# player . upcoming_overload = 0 #NEWLINE# #INDENT# #INDENT# player . mana += player . current_overload #NEWLINE# #INDENT# #INDENT# player . current_overload = 0
class Majordomo #MERGE# Executus ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Majordomo Executus " , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 9 , 7 , deathrattle = [ Deathrattle ( Transform ( Ragnaros ( ) ) , Hero #MERGE# Selector ( ) ) ] )
class Nefarian ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Nefarian " , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Add #MERGE# Card ( Card #MERGE# Query ( conditions = [ Is #MERGE# Class ( Attribute ( " character_class " , Hero #MERGE# Selector ( Enemy #MERGE# Player ( ) ) ) ) , Is #MERGE# Spell ( ) ] ) , 2 ) , Player #MERGE# Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 8 , 8 )
class Quick #MERGE# Shot ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Quick Shot " , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . damage ( 3 , self ) #NEWLINE# #INDENT# #INDENT# if len ( player . hand ) == 0 : #NEWLINE# #INDENT# #INDENT# #INDENT# player . draw ( )
class Rend #MERGE# Blackhand ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Rend Blackhand " , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = ( Battlecry ( Kill ( ) , Minion #MERGE# Selector ( And ( Minion #MERGE# Is #MERGE# Not #MERGE# Target ( ) , Is #MERGE# Rarity ( CARD_RARITY . LEGENDARY ) ) , Both #MERGE# Player ( ) , User #MERGE# Picker ( ) ) , Greater #MERGE# Than ( Count ( Card #MERGE# Selector ( condition = Is #MERGE# Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 8 , 4 )
class Resurrect ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Resurrect " , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# from hearthbreaker . engine import card_lookup #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# if len ( player . graveyard ) > 0 and len ( player . minions ) < 7 : #NEWLINE# #INDENT# #INDENT# #INDENT# card_name = game . random_choice ( player . graveyard ) #NEWLINE# #INDENT# #INDENT# #INDENT# card = card_lookup ( card_name ) #NEWLINE# #INDENT# #INDENT# #INDENT# card . summon ( player , game , len ( player . minions ) )
class Revenge ( Spell #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Revenge " , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# targets = copy . copy ( game . other_player . minions ) #NEWLINE# #INDENT# #INDENT# targets . extend ( game . current_player . minions ) #NEWLINE# #INDENT# #INDENT# if player . hero . health <= 12 : #NEWLINE# #INDENT# #INDENT# #INDENT# for minion in targets : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# minion . damage ( player . effective_spell_damage ( 3 ) , self ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# else : #NEWLINE# #INDENT# #INDENT# #INDENT# for minion in targets : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# minion . damage ( player . effective_spell_damage ( 1 ) , self )
class Volcanic #MERGE# Drake ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Volcanic Drake " , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , buffs = [ Buff ( Mana #MERGE# Change ( Count ( Dead #MERGE# Minion #MERGE# Selector ( players = Both #MERGE# Player ( ) ) ) , - 1 ) ) ] ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 6 , 4 )
class Volcanic #MERGE# Lumberer ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Volcanic Lumberer " , 9 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , buffs = [ Buff ( Mana #MERGE# Change ( Count ( Dead #MERGE# Minion #MERGE# Selector ( players = Both #MERGE# Player ( ) ) ) , - 1 ) ) ] ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 7 , 8 , taunt = True )
class Whelp ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Whelp " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 )
class Whelp ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Whelp " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 )
class Whelp ( Minion #MERGE# Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Whelp " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 )
