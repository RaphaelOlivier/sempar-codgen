class Assassins Blade ( Weapon Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Assassin's Blade " , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_weapon ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Weapon ( 3 , 4 )
class Boulderfist Ogre ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Boulderfist Ogre " , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 6 , 7 )
class Deadly Poison ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Deadly Poison " , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# player . weapon . base_attack += 2 #NEWLINE# #INDENT# #INDENT# player . hero . change_temp_attack ( 2 ) #NEWLINE# #NEWLINE# #INDENT# def can_use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# return super ( ) . can_use ( player , game ) and player . weapon is not None
class Fire Elemental ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Fire Elemental " , 6 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 3 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 6 , 5 )
class Gnomish Inventor ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Gnomish Inventor " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Draw ( ) , Player Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 4 )
class Heroic Strike ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Heroic Strike " , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# player . hero . change_temp_attack ( 4 )
class Ironbark Protector ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ironbark Protector " , 8 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 8 , 8 , taunt = True )
class Mark Of The Wild ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mark of the Wild " , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . change_attack ( 2 ) #NEWLINE# #INDENT# #INDENT# self . target . increase_health ( 2 ) #NEWLINE# #INDENT# #INDENT# self . target . taunt = True
class Multi Shot ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Multi-Shot " , 4 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# targets = copy . copy ( game . other_player . minions ) #NEWLINE# #INDENT# #INDENT# for i in range ( 0 , 2 ) : #NEWLINE# #INDENT# #INDENT# #INDENT# target = game . random_choice ( targets ) #NEWLINE# #INDENT# #INDENT# #INDENT# targets . remove ( target ) #NEWLINE# #INDENT# #INDENT# #INDENT# target . damage ( player . effective_spell_damage ( 3 ) , self ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def can_use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) >= 2
class Power Word Shield ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Power Word: Shield " , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . increase_health ( 2 ) #NEWLINE# #INDENT# #INDENT# player . draw ( )
class Senjin Shieldmasta ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Sen'jin Shieldmasta " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 5 , taunt = True )
class Sinister Strike ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Sinister Strike " , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# game . other_player . hero . damage ( player . effective_spell_damage ( 3 ) , self )
class Succubus ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Succubus " , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Discard ( ) , Player Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 3 )
class War Golem ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " War Golem " , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 7 , 7 )
class Acidmaw ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Acidmaw " , 7 , CHARACTER_CLASS . HUNTER , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 2 , effects = [ Effect ( Character Damaged ( Minion Is Not Target ( ) , Both Player ( ) ) , [ Action Tag ( Kill ( ) , Target Selector ( ) ) ] ) ] )
class Boar ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Boar " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 )
class Anodized Robo Cub ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Anodized Robo Cub " , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH , choices = [ Choice ( Attack Mode ( ) , Give ( [ Buff ( Change Attack ( 1 ) ) ] ) , Self Selector ( ) ) , Choice ( Tank Mode ( ) , Give ( [ Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) ) ] ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 , taunt = True )
class Burrowing Mine ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Burrowing Mine " , 0 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , False , effects = [ Effect ( Drawn ( ) , Action Tag ( Damage ( 10 ) , Hero Selector ( ) ) ) , Effect ( Drawn ( ) , Action Tag ( Discard ( query = Card Query ( source = CARD_SOURCE . LAST_DRAWN ) ) , Player Selector ( ) ) ) , Effect ( Drawn ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game )
class Crackle ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Crackle " , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target , overload = 1 ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( game . random_amount ( 3 , 6 ) ) , self )
class Emergency Coolant ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Emergency Coolant " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . add_buff ( Buff ( Frozen ( ) ) )
class Flying Machine ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Flying Machine " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 4 , windfury = True )
class Goblin Auto Barber ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Goblin Auto-Barber " , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Increase Weapon Attack ( 1 ) , Weapon Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 2 )
class Iron Sensei ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Iron Sensei " , 3 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) ] ) , Minion Selector ( Is Type ( MINION_TYPE . MECH ) , picker = Random Picker ( ) ) ) ) ] )
class Mal Ganis ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mal'Ganis " , 9 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DEMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 9 , 7 , auras = [ Aura ( Change Health ( 2 ) , Minion Selector ( Is Type ( MINION_TYPE . DEMON ) ) ) , Aura ( Change Attack ( 2 ) , Minion Selector ( Is Type ( MINION_TYPE . DEMON ) ) ) , Aura ( Immune ( ) , Hero Selector ( ) ) ] )
class Mistress Of Pain ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mistress of Pain " , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . DEMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 4 , effects = [ Effect ( Did Damage ( ) , Action Tag ( Heal ( Event Value ( ) ) , Hero Selector ( ) ) ) ] )
class Powermace ( Weapon Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Powermace " , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_weapon ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Weapon ( 3 , 2 , deathrattle = Deathrattle ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) ] ) , Minion Selector ( Is Type ( MINION_TYPE . MECH ) , picker = Random Picker ( ) ) ) )
class Screwjank Clunker ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Screwjank Clunker " , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) ] ) , Minion Selector ( Is Type ( MINION_TYPE . MECH ) , picker = User Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 5 )
class Sneeds Old Shredder ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Sneed's Old Shredder " , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 7 , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ Is Rarity ( CARD_RARITY . LEGENDARY ) , Is Minion ( ) ] ) ) , Player Selector ( ) ) )
class Toshley ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# from hearthbreaker . cards . spells . neutral import spare_part_list #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Toshley " , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# from hearthbreaker . cards . spells . neutral import spare_part_list #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 7 , deathrattle = Deathrattle ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( ) ) )
class Warbot ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Warbot " , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 3 , enrage = [ Aura ( Change Attack ( 1 ) , Self Selector ( ) ) ] )
class Deathlord ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Deathlord " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 8 , taunt = True , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ Is Minion ( ) ] , source = CARD_SOURCE . MY_DECK ) ) , Player Selector ( Enemy Player ( ) ) ) )
class Nerubar Weblord ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Nerub'ar Weblord " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 4 , auras = [ Aura ( Mana Change ( 2 ) , Card Selector ( Both Player ( ) , Has Battlecry ( ) ) ) ] )
class Spectral Knight ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Spectral Knight " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 6 , spell_targetable = False )
class Wailing Soul ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Wailing Soul " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Silence ( ) , Minion Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 5 )
class Amani Berserker ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Amani Berserker " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 3 , enrage = [ Aura ( Change Attack ( 3 ) , Self Selector ( ) ) ] )
class Archmage Antonidas ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Archmage Antonidas " , 7 , CHARACTER_CLASS . MAGE , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 7 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Add Card ( hearthbreaker . cards . Fireball ( ) ) , Player Selector ( ) ) ) ] )
class Bananas ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Bananas " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . change_attack ( 1 ) #NEWLINE# #INDENT# #INDENT# self . target . increase_health ( 1 )
class Blessed Champion ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Blessed Champion " , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . add_buff ( Buff ( Double Attack ( ) ) )
class Cabal Shadow Priest ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Cabal Shadow Priest " , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC , battlecry = Battlecry ( Steal ( ) , Minion Selector ( Attack Less Than Or Equal To ( 2 ) , players = Enemy Player ( ) , picker = User Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 5 )
class Cone Of Cold ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Cone of Cold " , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . add_buff ( Buff ( Frozen ( ) ) ) #NEWLINE# #INDENT# #INDENT# index = self . target . index #NEWLINE# #NEWLINE# #INDENT# #INDENT# if self . target . index < len ( self . target . player . minions ) - 1 : #NEWLINE# #INDENT# #INDENT# #INDENT# minion = self . target . player . minions [ index + 1 ] #NEWLINE# #INDENT# #INDENT# #INDENT# minion . damage ( player . effective_spell_damage ( 1 ) , self ) #NEWLINE# #INDENT# #INDENT# #INDENT# minion . add_buff ( Buff ( Frozen ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 1 ) , self ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# if self . target . index > 0 : #NEWLINE# #INDENT# #INDENT# #INDENT# minion = self . target . player . minions [ index - 1 ] #NEWLINE# #INDENT# #INDENT# #INDENT# minion . damage ( player . effective_spell_damage ( 1 ) , self ) #NEWLINE# #INDENT# #INDENT# #INDENT# minion . add_buff ( Buff ( Frozen ( ) ) )
class Defender Of Argus ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Defender of Argus " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( [ Buff ( Taunt ( ) ) , Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Minion Selector ( Adjacent ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 3 )
class Doomhammer ( Weapon Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Doomhammer " , 5 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . EPIC , overload = 2 ) #NEWLINE# #NEWLINE# #INDENT# def create_weapon ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Weapon ( 2 , 8 , buffs = [ Buff ( Windfury ( ) ) ] )
class Earth Shock ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Earth Shock " , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . silence ( ) #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 1 ) , self )
class Eye For An Eye ( Secret Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Eye for an Eye " , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def _reveal ( self , character , attacker , amount ) : #NEWLINE# #INDENT# #INDENT# if character . is_hero ( ) : #NEWLINE# #INDENT# #INDENT# #INDENT# character . player . opponent . hero . damage ( amount , self ) #NEWLINE# #INDENT# #INDENT# super ( ) . reveal ( ) #NEWLINE# #NEWLINE# #INDENT# def activate ( self , player ) : #NEWLINE# #INDENT# #INDENT# player . bind ( " character_damaged " , self . _reveal ) #NEWLINE# #NEWLINE# #INDENT# def deactivate ( self , player ) : #NEWLINE# #INDENT# #INDENT# player . unbind ( " character_damaged " , self . _reveal )
class Flare ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Flare " , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# for minion in hearthbreaker . targeting . find_minion_spell_target ( game , lambda m : m . stealth ) : #NEWLINE# #INDENT# #INDENT# #INDENT# minion . stealth = False #NEWLINE# #NEWLINE# #INDENT# #INDENT# for secret in game . other_player . secrets : #NEWLINE# #INDENT# #INDENT# #INDENT# secret . deactivate ( game . other_player ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# game . other_player . secrets = [ ] #NEWLINE# #INDENT# #INDENT# player . draw ( )
class Gorehowl ( Weapon Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Gorehowl " , 7 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# #INDENT# def create_weapon ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Weapon ( 7 , 1 , effects = [ Effect ( Character Attack ( And ( Is Hero ( ) , Target Is Minion ( ) ) ) , [ Action Tag ( Increase Durability ( ) , Weapon Selector ( ) ) , Action Tag ( Increase Weapon Attack ( - 1 ) , Weapon Selector ( ) ) , Action Tag ( Give ( Buff Until ( Change Attack ( 1 ) , Attack Completed ( ) ) ) , Hero Selector ( ) ) ] ) ] )
class Hound ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Hound " , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 , charge = True )
class Injured Blademaster ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Injured Blademaster " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Self Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 7 )
class Knife Juggler ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Knife Juggler " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 2 , effects = [ Effect ( After Added ( ) , Action Tag ( Damage ( 1 ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) , condition = None ) ) ) ] )
class Lightwell ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Lightwell " , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 0 , 5 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Heal ( 3 ) , Character Selector ( condition = Is Damaged ( ) , picker = Random Picker ( ) ) ) ) ] )
class Mana Wyrm ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mana Wyrm " , 1 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 3 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )
class Mogushan Warden ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mogu'shan Warden " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 7 , taunt = True )
class Nourish ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Nourish " , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# class Gain2 ( Choice Card ) : #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# super ( ) . __init__ ( " Gain 2 mana crystals " , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# if player . max_mana < 8 : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# player . max_mana += 2 #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# player . mana += 2 #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# else : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# player . max_mana = 10 #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# player . mana += 2 #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# class Draw3 ( Choice Card ) : #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# super ( ) . __init__ ( " Draw three cards " , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# player . draw ( ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# player . draw ( ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# player . draw ( ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# option = player . agent . choose_option ( [ Gain2 ( ) , Draw3 ( ) ] , player ) #NEWLINE# #INDENT# #INDENT# option . use ( player , game )
class Preparation ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Preparation " , 0 , CHARACTER_CLASS . ROGUE , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# player . add_aura ( Aura Until ( Mana Change ( - 3 ) , Card Selector ( condition = Is Spell ( ) ) , Spell Cast ( ) ) )
class Repentance ( Secret Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Repentance " , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def _reveal ( self , minion ) : #NEWLINE# #NEWLINE# #INDENT# #INDENT# minion . set_health_to ( 1 ) #NEWLINE# #INDENT# #INDENT# super ( ) . reveal ( ) #NEWLINE# #NEWLINE# #INDENT# def activate ( self , player ) : #NEWLINE# #INDENT# #INDENT# player . game . current_player . bind ( " minion_played " , self . _reveal ) #NEWLINE# #NEWLINE# #INDENT# def deactivate ( self , player ) : #NEWLINE# #INDENT# #INDENT# player . game . current_player . unbind ( " minion_played " , self . _reveal )
class Shadow Of Nothing ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Shadow of Nothing " , 0 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC , False ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , p ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 0 , 1 )
class Slam ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Slam " , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# if self . target . health > player . effective_spell_damage ( 2 ) or self . target . divine_shield : #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 2 ) , self ) #NEWLINE# #INDENT# #INDENT# #INDENT# player . draw ( ) #NEWLINE# #INDENT# #INDENT# else : #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 2 ) , self )
class Spellbreaker ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Spellbreaker " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Silence ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 3 )
class Sunfury Protector ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Sunfury Protector " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( Buff ( Taunt ( ) ) ) , Minion Selector ( Adjacent ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 3 )
class Tinkmaster Overspark ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Tinkmaster Overspark " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Transform ( Card Query ( source = CARD_SOURCE . LIST , source_list = [ Devilsaur ( ) , Squirrel ( ) ] ) ) , Minion Selector ( players = Both Player ( ) , picker = Random Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 3 )
class Vaporize ( Secret Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Vaporize " , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def _reveal ( self , attacker , target ) : #NEWLINE# #INDENT# #INDENT# if target is self . player . hero and attacker . is_minion ( ) and not attacker . removed : #NEWLINE# #INDENT# #INDENT# #INDENT# attacker . die ( self ) #NEWLINE# #INDENT# #INDENT# #INDENT# attacker . game . check_delayed ( ) #NEWLINE# #INDENT# #INDENT# #INDENT# super ( ) . reveal ( ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def activate ( self , player ) : #NEWLINE# #INDENT# #INDENT# player . opponent . bind ( " character_attack " , self . _reveal ) #NEWLINE# #NEWLINE# #INDENT# def deactivate ( self , player ) : #NEWLINE# #INDENT# #INDENT# player . opponent . unbind ( " character_attack " , self . _reveal )
class Worgen Infiltrator ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Worgen Infiltrator " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 1 , stealth = True )
class Blackwing Corruptor ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Blackwing Corruptor " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 3 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 4 )
class Drakonid Crusher ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Drakonid Crusher " , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Give ( [ Buff ( Change Attack ( 3 ) ) , Buff ( Change Health ( 3 ) ) ] ) , Self Selector ( ) , Not ( Greater Than ( Attribute ( ' health ' , Hero Selector ( Enemy Player ( ) ) ) , value = 15 ) ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 6 , 6 )
class Imp ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Imp " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False , minion_type = MINION_TYPE . DEMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 )
class Twilight Whelp ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Twilight Whelp " , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Give ( Buff ( Change Health ( 2 ) ) ) , Self Selector ( ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 1 )
