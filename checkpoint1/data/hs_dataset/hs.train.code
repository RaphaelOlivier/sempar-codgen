class Acidic Swamp Ooze ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Acidic Swamp Ooze " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Destroy ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 2 )
class Ancestral Healing ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ancestral Healing " , 0 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . heal ( player . effective_heal_power ( self . target . calculate_max_health ( ) ) , self ) #NEWLINE# #INDENT# #INDENT# self . target . taunt = True
class Animal Companion ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Animal Companion " , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# beast_list = [ hearthbreaker . cards . minions . hunter . Huffer ( ) , hearthbreaker . cards . minions . hunter . Misha ( ) , hearthbreaker . cards . minions . hunter . Leokk ( ) ] #NEWLINE# #INDENT# #INDENT# card = game . random_choice ( beast_list ) #NEWLINE# #INDENT# #INDENT# card . summon ( player , player . game , len ( player . minions ) ) #NEWLINE# #NEWLINE# #INDENT# def can_use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7
class Arcane Explosion ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Arcane Explosion " , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# for minion in copy . copy ( game . other_player . minions ) : #NEWLINE# #INDENT# #INDENT# #INDENT# minion . damage ( player . effective_spell_damage ( 1 ) , self )
class Arcane Intellect ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Arcane Intellect " , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# for c in range ( 0 , 2 ) : #NEWLINE# #INDENT# #INDENT# #INDENT# player . draw ( )
class Arcane Missiles ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Arcane Missiles " , 1 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# for i in range ( 0 , player . effective_spell_damage ( 3 ) ) : #NEWLINE# #INDENT# #INDENT# #INDENT# targets = copy . copy ( game . other_player . minions ) #NEWLINE# #INDENT# #INDENT# #INDENT# targets . append ( game . other_player . hero ) #NEWLINE# #INDENT# #INDENT# #INDENT# target = game . random_choice ( targets ) #NEWLINE# #INDENT# #INDENT# #INDENT# target . damage ( 1 , self )
class Arcane Shot ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Arcane Shot " , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 2 ) , self )
class Arcanite Reaper ( Weapon Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Arcanite Reaper " , 5 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_weapon ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Weapon ( 5 , 2 )
class Assassinate ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Assassinate " , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . die ( self )
class Backstab ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Backstab " , 0 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . health == target . calculate_max_health ( ) and target . spell_targetable ( ) ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 2 ) , self )
class Blessing Of Kings ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Blessing of Kings " , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . change_attack ( 4 ) #NEWLINE# #INDENT# #INDENT# self . target . increase_health ( 4 )
class Blessing Of Might ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Blessing of Might " , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . change_attack ( 3 )
class Bloodfen Raptor ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Bloodfen Raptor " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 2 )
class Bloodlust ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Bloodlust " , 5 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# for minion in player . minions : #NEWLINE# #INDENT# #INDENT# #INDENT# minion . change_temp_attack ( 3 )
class Bluegill Warrior ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Bluegill Warrior " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 1 , charge = True )
class Boar ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Boar " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 )
class Charge ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Charge " , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . change_attack ( 2 ) #NEWLINE# #INDENT# #INDENT# self . target . add_buff ( Buff ( _Charge ( ) ) )
class Chillwind Yeti ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Chillwind Yeti " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 5 )
class Claw ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Claw " , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# player . hero . change_temp_attack ( 2 ) #NEWLINE# #INDENT# #INDENT# player . hero . increase_armor ( 2 )
class Cleave ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Cleave " , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# minions = copy . copy ( game . other_player . minions ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# for i in range ( 0 , 2 ) : #NEWLINE# #INDENT# #INDENT# #INDENT# minion = game . random_choice ( minions ) #NEWLINE# #INDENT# #INDENT# #INDENT# minions . remove ( minion ) #NEWLINE# #INDENT# #INDENT# #INDENT# minion . damage ( player . effective_spell_damage ( 2 ) , self ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def can_use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) >= 2
class Consecration ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Consecration " , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# for minion in copy . copy ( game . other_player . minions ) : #NEWLINE# #INDENT# #INDENT# #INDENT# minion . damage ( player . effective_spell_damage ( 2 ) , self ) #NEWLINE# #INDENT# #INDENT# game . other_player . hero . damage ( player . effective_spell_damage ( 2 ) , self )
class Core Hound ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Core Hound " , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 9 , 5 )
class Corruption ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Corruption " , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . add_effect ( Effect ( Turn Started ( player = Enemy Player ( ) ) , Action Tag ( Kill ( ) , Self Selector ( ) ) ) )
class Dalaran Mage ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Dalaran Mage " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 4 , spell_damage = 1 )
class Divine Spirit ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Divine Spirit " , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . increase_health ( self . target . health )
class Dragonling Mechanic ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Dragonling Mechanic " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Mechanical Dragonling ( ) ) , Player Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 4 )
class Drain Life ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Drain Life " , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 2 ) , self ) #NEWLINE# #INDENT# #INDENT# player . hero . heal ( player . effective_heal_power ( 2 ) , self )
class Dread Infernal ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Dread Infernal " , 6 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 6 , 6 )
class Elven Archer ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Elven Archer " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 )
class Excess Mana ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Excess Mana " , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# player . draw ( )
class Execute ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Execute " , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target , filter_func = lambda target : target . health != target . calculate_max_health ( ) and target . spell_targetable ( ) ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . die ( self )
class Fan Of Knives ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Fan of Knives " , 3 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# for minion in copy . copy ( game . other_player . minions ) : #NEWLINE# #INDENT# #INDENT# #INDENT# minion . damage ( player . effective_spell_damage ( 1 ) , self ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# player . draw ( )
class Fireball ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Fireball " , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 6 ) , self )
class Flamestrike ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Flamestrike " , 7 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# for minion in copy . copy ( game . other_player . minions ) : #NEWLINE# #INDENT# #INDENT# #INDENT# minion . damage ( player . effective_spell_damage ( 4 ) , self )
class Flametongue Totem ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Flametongue Totem " , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , minion_type = MINION_TYPE . TOTEM ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 0 , 3 , auras = [ Aura ( Change Attack ( 2 ) , Minion Selector ( Adjacent ( ) ) ) ] )
class Frog ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Frog " , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , p ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 0 , 1 , taunt = True )
class Frost Nova ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Frost Nova " , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# for minion in game . other_player . minions : #NEWLINE# #INDENT# #INDENT# #INDENT# minion . add_buff ( Buff ( Frozen ( ) ) )
class Frost Shock ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Frost Shock " , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 1 ) , self ) #NEWLINE# #INDENT# #INDENT# self . target . add_buff ( Buff ( Frozen ( ) ) )
class Frostbolt ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Frostbolt " , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 3 ) , self ) #NEWLINE# #INDENT# #INDENT# self . target . add_buff ( Buff ( Frozen ( ) ) )
class Frostwolf Grunt ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Frostwolf Grunt " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 , taunt = True )
class Goldshire Footman ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Goldshire Footman " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 2 , taunt = True )
class Grimscale Oracle ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Grimscale Oracle " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) ] )
class Guardian Of Kings ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Guardian of Kings " , 7 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 6 ) , Hero Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 6 )
class Gurubashi Berserker ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Gurubashi Berserker " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 7 , effects = [ #NEWLINE# #INDENT# #INDENT# Effect ( Character Damaged ( condition = Minion Is Target ( ) ) , Action Tag ( Give ( Change Attack ( 3 ) ) , Self Selector ( ) ) ) ] )
class Hammer Of Wrath ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Hammer of Wrath " , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 3 ) , self ) #NEWLINE# #INDENT# #INDENT# player . draw ( )
class Hand Of Protection ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Hand of Protection " , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . divine_shield = True
class Healing Totem ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Healing Totem " , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 0 , 2 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Heal ( 1 ) , Minion Selector ( condition = None ) ) ) ] )
class Healing Touch ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Healing Touch " , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . heal ( player . effective_heal_power ( 8 ) , self )
class Hex ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Hex " , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# frog = hearthbreaker . cards . minions . neutral . Frog ( ) #NEWLINE# #INDENT# #INDENT# minion = frog . create_minion ( None ) #NEWLINE# #INDENT# #INDENT# minion . card = frog #NEWLINE# #INDENT# #INDENT# self . target . replace ( minion )
class Holy Light ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Holy Light " , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . heal ( player . effective_heal_power ( 6 ) , self )
class Holy Nova ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Holy Nova " , 5 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# for minion in copy . copy ( game . other_player . minions ) : #NEWLINE# #INDENT# #INDENT# #INDENT# minion . damage ( player . effective_spell_damage ( 2 ) , self ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# for minion in player . minions : #NEWLINE# #INDENT# #INDENT# #INDENT# minion . heal ( player . effective_heal_power ( 2 ) , self )
class Holy Smite ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Holy Smite " , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 2 ) , self )
class Houndmaster ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Houndmaster " , 4 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) , Buff ( Taunt ( ) ) ] ) , Minion Selector ( Is Type ( MINION_TYPE . BEAST ) , picker = User Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 3 )
class Huffer ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Huffer " , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 2 , charge = True )
class Humility ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Humility " , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . change_attack ( 1 - self . target . calculate_attack ( ) )
class Hunters Mark ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Hunter's Mark " , 0 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . set_health_to ( 1 )
class Ironforge Rifleman ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ironforge Rifleman " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . NONE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 )
class Ironfur Grizzly ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ironfur Grizzly " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 3 , taunt = True )
class Kill Command ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Kill Command " , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# beasts = hearthbreaker . targeting . find_friendly_minion_battlecry_target ( #NEWLINE# #INDENT# #INDENT# player . game , lambda x : x . card . minion_type is MINION_TYPE . BEAST ) #NEWLINE# #INDENT# #INDENT# if beasts is None : #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 3 ) , self ) #NEWLINE# #INDENT# #INDENT# else : #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 5 ) , self )
class Kobold Geomancer ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Kobold Geomancer " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 , spell_damage = 1 )
class Korkron Elite ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Kor'kron Elite " , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 3 , charge = True )
class Leokk ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Leokk " , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 4 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( ) ) ] )
class Lights Justice ( Weapon Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Light's Justice " , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE ) #NEWLINE# #NEWLINE# #INDENT# def create_weapon ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Weapon ( 1 , 4 )
class Lord Of The Arena ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Lord of the Arena " , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 6 , 5 , taunt = True )
class Mechanical Dragonling ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mechanical Dragonling " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 1 )
class Mind Blast ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mind Blast " , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# game . other_player . hero . damage ( player . effective_spell_damage ( 5 ) , self )
class Mind Control ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mind Control " , 10 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# new_minion = self . target . copy ( player ) #NEWLINE# #INDENT# #INDENT# self . target . remove_from_board ( ) #NEWLINE# #INDENT# #INDENT# new_minion . add_to_board ( len ( player . minions ) ) #NEWLINE# #NEWLINE# #INDENT# def can_use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7
class Mind Vision ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mind Vision " , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# if ( len ( game . other_player . hand ) > 0 ) : #NEWLINE# #INDENT# #INDENT# #INDENT# card = copy . deepcopy ( game . random_choice ( game . other_player . hand ) ) #NEWLINE# #INDENT# #INDENT# #INDENT# player . hand . append ( card ) #NEWLINE# #INDENT# #INDENT# #INDENT# card . player = player
class Mirror Image ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mirror Image " , 1 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# for i in range ( 0 , 2 ) : #NEWLINE# #INDENT# #INDENT# #INDENT# Mirror Image Minion ( ) . summon ( player , game , len ( player . minions ) ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def can_use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7
class Mirror Image ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mirror Image " , 1 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# for i in range ( 0 , 2 ) : #NEWLINE# #INDENT# #INDENT# #INDENT# Mirror Image Minion ( ) . summon ( player , game , len ( player . minions ) ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def can_use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7
class Misha ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Misha " , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 4 , taunt = True )
class Moonfire ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Moonfire " , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 1 ) , self )
class Murloc Raider ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Murloc Raider " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . MURLOC ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 1 )
class Murloc Scout ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Murloc Scout " , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MURLOC ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 )
class Murloc Tidehunter ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Murloc Tidehunter " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Summon ( Murloc Scout ( ) ) , Player Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 1 )
class Nightblade ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Nightblade " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( Enemy Player ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 4 )
class Northshire Cleric ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Northshire Cleric " , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 3 , effects = [ Effect ( Character Healed ( condition = Is Minion ( ) , player = Both Player ( ) ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )
class Novice Engineer ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Novice Engineer " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , battlecry = Battlecry ( Draw ( ) , Player Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 )
class Oasis Snapjaw ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Oasis Snapjaw " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 7 )
class Ogre Magi ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ogre Magi " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 4 , spell_damage = 1 )
class Raid Leader ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Raid Leader " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( ) ) ] )
class Razorfen Hunter ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Razorfen Hunter " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Boar ( ) ) , Player Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 3 )
class Reckless Rocketeer ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Reckless Rocketeer " , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 2 , charge = True )
class River Crocolisk ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " River Crocolisk " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 3 )
class Rockbiter Weapon ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Rockbiter Weapon " , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_friendly_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . change_temp_attack ( 3 )
class Sacrificial Pact ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Sacrificial Pact " , 0 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target , filter_func = lambda character : character . card . minion_type == MINION_TYPE . DEMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . die ( self ) #NEWLINE# #INDENT# #INDENT# player . hero . heal ( player . effective_heal_power ( 5 ) , self )
class Sap ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Sap " , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . bounce ( )
class Savage Roar ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Savage Roar " , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# for minion in player . minions : #NEWLINE# #INDENT# #INDENT# #INDENT# minion . change_temp_attack ( 2 ) #NEWLINE# #INDENT# #INDENT# player . hero . change_temp_attack ( 2 )
class Shadow Bolt ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Shadow Bolt " , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 4 ) , self )
class Shadow Word Death ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Shadow Word: Death " , 3 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . calculate_attack ( ) >= 5 and target . spell_targetable ( ) ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . die ( self )
class Shadow Word Pain ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Shadow Word: Pain " , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . calculate_attack ( ) <= 3 and target . spell_targetable ( ) ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . die ( self )
class Shattered Sun Cleric ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Shattered Sun Cleric " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Minion Selector ( picker = User Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 2 )
class Sheep ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Sheep " , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , p ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 )
class Shield Block ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Shield Block " , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# player . hero . increase_armor ( 5 ) #NEWLINE# #INDENT# #INDENT# player . draw ( )
class Shiv ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Shiv " , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 1 ) , self ) #NEWLINE# #INDENT# #INDENT# player . draw ( )
class Silver Hand Recruit ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Silver Hand Recruit " , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . FREE , False ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 )
class Soulfire ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Soulfire " , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 4 ) , self ) #NEWLINE# #INDENT# #INDENT# player . discard ( )
class Sprint ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Sprint " , 7 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# for i in range ( 0 , 4 ) : #NEWLINE# #INDENT# #INDENT# #INDENT# player . draw ( )
class Starfire ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Starfire " , 6 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 5 ) , self ) #NEWLINE# #INDENT# #INDENT# player . draw ( )
class Starving Buzzard ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Starving Buzzard " , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 2 , effects = [ Effect ( Minion Placed ( Is Type ( MINION_TYPE . BEAST ) ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )
class Stoneclaw Totem ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Stoneclaw Totem " , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 0 , 2 , taunt = True )
class Stonetusk Boar ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Stonetusk Boar " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 , charge = True )
class Stormpike Commando ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Stormpike Commando " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 2 )
class Stormwind Champion ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Stormwind Champion " , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 6 , 6 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( ) ) , Aura ( Change Health ( 1 ) , Minion Selector ( ) ) ] )
class Swipe ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Swipe " , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_enemy_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . damage ( 4 , self ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# for minion in copy . copy ( game . other_player . minions ) : #NEWLINE# #INDENT# #INDENT# #INDENT# if minion is not self . target : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# minion . damage ( player . effective_spell_damage ( 1 ) , self ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# if self . target is not game . other_player . hero : #NEWLINE# #INDENT# #INDENT# #INDENT# game . other_player . hero . damage ( player . effective_spell_damage ( 1 ) , self )
class Timber Wolf ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Timber Wolf " , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( Is Type ( MINION_TYPE . BEAST ) ) ) ] )
class Totemic Might ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Totemic Might " , 0 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# for minion in player . minions : #NEWLINE# #INDENT# #INDENT# #INDENT# if minion . card . minion_type == MINION_TYPE . TOTEM : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# minion . increase_health ( 2 )
class Tracking ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Tracking " , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . FREE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# cards = [ ] #NEWLINE# #INDENT# #INDENT# for card_index in range ( 0 , 3 ) : #NEWLINE# #INDENT# #INDENT# #INDENT# if player . can_draw ( ) : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# cards . append ( player . deck . draw ( game ) ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# if len ( cards ) > 0 : #NEWLINE# #INDENT# #INDENT# #INDENT# chosen_card = player . agent . choose_option ( cards , player ) #NEWLINE# #INDENT# #INDENT# #INDENT# player . hand . append ( chosen_card ) #NEWLINE# #INDENT# #INDENT# #INDENT# player . hand [ - 1 ] . player = player #NEWLINE# #INDENT# #INDENT# #INDENT# player . trigger ( " card_drawn " , chosen_card )
class Truesilver Champion ( Weapon Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Truesilver Champion " , 4 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_weapon ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Weapon ( 4 , 2 , effects = [ Effect ( Character Attack ( Is Hero ( ) ) , Action Tag ( Heal ( 2 ) , Hero Selector ( ) ) ) ] )
class Tundra Rhino ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Tundra Rhino " , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 5 , charge = True , auras = [ Aura ( Charge ( ) , Minion Selector ( Is Type ( MINION_TYPE . BEAST ) ) ) ] )
class Vanish ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Vanish " , 6 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# targets = copy . copy ( game . other_player . minions ) #NEWLINE# #INDENT# #INDENT# targets . extend ( player . minions ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# for minion in sorted ( targets , key = lambda m : m . born ) : #NEWLINE# #INDENT# #INDENT# #INDENT# minion . bounce ( )
class Voidwalker ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Voidwalker " , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . FREE , minion_type = MINION_TYPE . DEMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 3 , taunt = True )
class Warsong Commander ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Warsong Commander " , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . FREE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 3 , effects = [ Effect ( Minion Placed ( Attack Less Than Or Equal To ( 3 ) ) , Action Tag ( Give ( Charge ( ) ) , Target Selector ( ) ) ) ] )
class Water Elemental ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Water Elemental " , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 6 , effects = [ Effect ( Did Damage ( ) , Action Tag ( Give ( Frozen ( ) ) , Target Selector ( ) ) ) ] )
class Whirlwind ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Whirlwind " , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# targets = copy . copy ( game . other_player . minions ) #NEWLINE# #INDENT# #INDENT# targets . extend ( game . current_player . minions ) #NEWLINE# #INDENT# #INDENT# for minion in targets : #NEWLINE# #INDENT# #INDENT# #INDENT# minion . damage ( player . effective_spell_damage ( 1 ) , self )
class Wicked Knife ( Weapon Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Wicked Knife " , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . FREE , False ) #NEWLINE# #NEWLINE# #INDENT# def create_weapon ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Weapon ( 1 , 2 )
class Wild Growth ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Wild Growth " , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . FREE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# if player . max_mana < 10 : #NEWLINE# #INDENT# #INDENT# #INDENT# player . max_mana += 1 #NEWLINE# #INDENT# #INDENT# else : #NEWLINE# #INDENT# #INDENT# #INDENT# player . hand . append ( Excess Mana ( ) ) #NEWLINE# #INDENT# #INDENT# #INDENT# player . hand [ - 1 ] . player = player
class Windfury ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Windfury " , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . add_buff ( Buff ( _Windfury ( ) ) )
class Windspeaker ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Windspeaker " , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Windfury ( ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 3 )
class Wolfrider ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Wolfrider " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . FREE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 1 , charge = True )
class Alexstraszas Champion ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Alexstrasza's Champion " , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , battlecry = ( Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Charge ( ) ) ] ) , Self Selector ( ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 3 )
class Ancestral Knowledge ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ancestral Knowledge " , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 2 ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# for c in range ( 0 , 2 ) : #NEWLINE# #INDENT# #INDENT# #INDENT# player . draw ( )
class Anubarak ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Anub'arak " , 9 , CHARACTER_CLASS . ROGUE , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 8 , 4 , deathrattle = [ Deathrattle ( Bounce ( ) , Self Selector ( ) ) , Deathrattle ( Summon ( Nerubian ( ) ) , Player Selector ( ) ) ] )
class Arcane Blast ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Arcane Blast " , 1 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 2 + player . spell_damage ) , self )
class Argent Horserider ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Argent Horserider " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 1 , charge = True , divine_shield = True )
class Argent Lance ( Weapon Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Argent Lance " , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , battlecry = Battlecry ( Joust ( Increase Durability ( ) ) , Self Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_weapon ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Weapon ( 2 , 2 )
class Argent Watchman ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Argent Watchman " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 4 , buffs = [ Buff ( Cant Attack ( ) ) ] , effects = [ Effect ( Used Power ( ) , Action Tag ( Give ( Buff Until ( Can Attack ( ) , Turn Ended ( ) ) ) , Self Selector ( ) ) ) ] )
class Armored Warhorse ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Armored Warhorse " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Joust ( Give ( Buff ( Charge ( ) ) ) ) , Self Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 3 )
class Healing Totem ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Healing Totem " , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 0 , 2 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Heal ( 1 ) , Minion Selector ( condition = None ) ) ) ] )
class Nerubian ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Nerubian " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , p ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 4 )
class Searing Totem ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Searing Totem " , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 )
class Stoneclaw Totem ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Stoneclaw Totem " , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 0 , 2 , taunt = True )
class Tournament Medic ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Tournament Medic " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 8 , effects = [ Effect ( Used Power ( ) , Action Tag ( Heal ( 2 ) , Hero Selector ( ) ) ) ] )
class Wrath Of Air Totem ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Wrath of Air Totem " , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . FREE , False , MINION_TYPE . TOTEM ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 0 , 2 , spell_damage = 1 )
class Ancestors Call ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ancestor's Call " , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# #INDENT# def can_use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# return super ( ) . can_use ( player , game ) and ( len ( player . minions ) < 7 or len ( player . opponent . minions ) < 7 ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# for player in game . players : #NEWLINE# #INDENT# #INDENT# #INDENT# minions = [ card for card in player . hand if card . is_minion ( ) ] #NEWLINE# #INDENT# #INDENT# #INDENT# if len ( minions ) and len ( player . minions ) < 7 : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# minion_card = game . random_choice ( minions ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# minion_card . unattach ( ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# player . hand . remove ( minion_card ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# minion_card . summon ( player , game , len ( player . minions ) )
class Anima Golem ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Anima Golem " , 6 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 9 , 9 , effects = [ Effect ( Turn Ended ( Minion Count Is ( 1 ) , Both Player ( ) ) , Action Tag ( Kill ( ) , Self Selector ( ) ) ) ] )
class Antique Healbot ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Antique Healbot " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Heal ( 8 ) , Hero Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 3 )
class Arcane Nullifier X21 ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Arcane Nullifier X-21 " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 5 , taunt = True , spell_targetable = False )
class Armor Plating ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Armor Plating " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . increase_health ( 1 )
class Blingtron3000 ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Blingtron 3000 " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Equip ( Card Query ( conditions = [ Is Weapon ( ) ] ) ) , Player Selector ( players = Both Player ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 4 )
class Bolvar Fordragon ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Bolvar Fordragon " , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . LEGENDARY , effects = [ Effect ( Minion Died ( ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 7 )
class Bomb Lobber ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Bomb Lobber " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 4 ) , Minion Selector ( None , Enemy Player ( ) , Random Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 3 )
class Boom Bot ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Boom Bot " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 , deathrattle = Deathrattle ( Damage ( Random Amount ( 1 , 4 ) ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) )
class Bouncing Blade ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Bouncing Blade " , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# #INDENT# def can_use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# return super ( ) . can_use ( player , game ) and len ( player . minions ) + len ( player . opponent . minions ) >= 1 #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# targets = player . minions [ : ] + player . opponent . minions [ : ] #NEWLINE# #INDENT# #INDENT# if len ( targets ) : #NEWLINE# #INDENT# #INDENT# #INDENT# for bounces in range ( 80 ) : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# target = game . random_choice ( targets ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# target . damage ( player . effective_spell_damage ( 1 ) , self ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# if target . dead : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# break
class Call Pet ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Call Pet " , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# def reduce_cost ( card ) : #NEWLINE# #INDENT# #INDENT# #INDENT# if card . is_minion ( ) and card . minion_type == MINION_TYPE . BEAST : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# card . add_buff ( Buff ( Mana Change ( - 4 ) ) ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# player . bind_once ( " card_drawn " , reduce_cost ) #NEWLINE# #INDENT# #INDENT# player . draw ( )
class Chicken ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Chicken " , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , p ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 )
class Clockwork Giant ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Clockwork Giant " , 12 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH , buffs = [ Buff ( Mana Change ( Count ( Card Selector ( Enemy Player ( ) ) ) , - 1 ) ) ] ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 8 , 8 )
class Clockwork Gnome ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Clockwork Gnome " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# from hearthbreaker . cards . spells . neutral import spare_part_list #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 1 , deathrattle = Deathrattle ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( ) ) )
class Cobalt Guardian ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Cobalt Guardian " , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 6 , 3 , effects = [ Effect ( Minion Summoned ( Is Type ( MINION_TYPE . MECH ) ) , Action Tag ( Give ( Divine Shield ( ) ) , Self Selector ( ) ) ) ] )
class Cobra Shot ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Cobra Shot " , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 3 ) , self ) #NEWLINE# #INDENT# #INDENT# game . other_player . hero . damage ( player . effective_spell_damage ( 3 ) , self )
class Coghammer ( Weapon Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Coghammer " , 3 , CHARACTER_CLASS . PALADIN , CARD_RARITY . EPIC , battlecry = Battlecry ( Give ( [ Buff ( Divine Shield ( ) ) , Buff ( Taunt ( ) ) ] ) , Minion Selector ( picker = Random Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_weapon ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Weapon ( 2 , 3 )
class Cogmaster ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Cogmaster " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 2 , auras = [ Aura ( Change Attack ( 2 ) , Self Selector ( ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) ] )
class Crush ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Crush " , 7 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target , buffs = [ Buff ( Mana Change ( - 4 ) , Greater Than ( Count ( Minion Selector ( Is Damaged ( ) ) ) , value = 0 ) ) ] ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . die ( self )
class Dark Wispers ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Dark Wispers " , 6 , CHARACTER_CLASS . DRUID , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# #INDENT# def can_use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# return ( super ( ) . can_use ( player , game ) and ( len ( player . minions ) < 7 or hearthbreaker . targeting . find_minion_spell_target ( game , lambda t : t . spell_targetable ( ) ) is not None ) ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# class Buff5 ( Choice Card ) : #NEWLINE# #INDENT# #INDENT# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# super ( ) . __init__ ( " Give a minion +5/+5 and Taunt " , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def can_use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# return hearthbreaker . targeting . find_minion_spell_target ( game , lambda t : t . spell_targetable ( ) ) is not None #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# targets = hearthbreaker . targeting . find_minion_spell_target ( game , lambda t : t . spell_targetable ( ) ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# target = player . agent . choose_target ( targets ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# target . change_attack ( 5 ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# target . increase_health ( 5 ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# target . taunt = True #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# class Wisps5 ( Choice Card ) : #NEWLINE# #INDENT# #INDENT# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# super ( ) . __init__ ( " Summon 5 Wisps " , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def can_use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# return len ( player . minions ) < 7 #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# from hearthbreaker . cards . minions . neutral import Wisp #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# for i in range ( 0 , 5 ) : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# wisp = Wisp ( ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# wisp . summon ( player , game , len ( player . minions ) ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# if len ( hearthbreaker . targeting . find_minion_spell_target ( game , lambda t : t . spell_targetable ( ) ) ) == 0 : #NEWLINE# #INDENT# #INDENT# #INDENT# option = Wisps5 ( ) #NEWLINE# #INDENT# #INDENT# else : #NEWLINE# #INDENT# #INDENT# #INDENT# option = player . agent . choose_option ( [ Wisps5 ( ) , Buff5 ( ) ] , player ) #NEWLINE# #INDENT# #INDENT# option . use ( player , game )
class Darkbomb ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Darkbomb " , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 3 ) , self )
class Demonheart ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Demonheart " , 5 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# targets = copy . copy ( player . game . current_player . minions ) #NEWLINE# #INDENT# #INDENT# if self . target . card . minion_type is MINION_TYPE . DEMON and self . target in targets : #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . change_attack ( 5 ) #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . increase_health ( 5 ) #NEWLINE# #INDENT# #INDENT# else : #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 5 ) , self )
class Doctor Boom ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Dr. Boom " , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Summon ( Boom Bot ( ) , 2 ) , Player Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 7 , 7 )
class Druid Of The Fang ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Druid of the Fang " , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , battlecry = Battlecry ( Transform ( Cobra Form ( ) ) , Self Selector ( ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . BEAST ) ) ) , value = 0 ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 4 )
class Druid Of The Fang ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Druid of the Fang " , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , battlecry = Battlecry ( Transform ( Cobra Form ( ) ) , Self Selector ( ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . BEAST ) ) ) , value = 0 ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 4 )
class Dunemaul Shaman ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Dunemaul Shaman " , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , overload = 1 ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 4 , windfury = True , effects = [ Effect ( Attack ( ) , Action Tag ( Change Target ( Character Selector ( Not Current Target ( ) , Enemy Player ( ) , Random Picker ( ) ) ) , Self Selector ( ) , And ( One In ( 2 ) , Opponent Minion Count Is Greater Than ( 0 ) ) ) ) ] )
class Enhanceo Mechano ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Enhance-o Mechano " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Give ( [ Buff ( Windfury ( ) ) , Buff ( Taunt ( ) ) , Buff ( Divine Shield ( ) ) ] , Random Picker ( ) ) , Minion Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 2 )
class Explosive Sheep ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Explosive Sheep " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 , deathrattle = Deathrattle ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) ) ) , taunt = True )
class Feign Death ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Feign Death " , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# for minion in sorted ( player . minions , key = lambda m : m . born ) : #NEWLINE# #INDENT# #INDENT# #INDENT# for deathrattle in minion . deathrattle : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# deathrattle . do ( minion ) #NEWLINE# #INDENT# #INDENT# #INDENT# if player . double_deathrattle : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# for deathrattle in minion . deathrattle : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# deathrattle . do ( minion )
class Fel Cannon ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Fel Cannon " , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 5 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Damage ( 2 ) , Minion Selector ( Not ( Is Type ( MINION_TYPE . MECH , True ) ) , Both Player ( ) , Random Picker ( ) ) ) ) ] )
class Fel Reaver ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Fel Reaver " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 8 , 8 , effects = [ Effect ( Card Played ( player = Enemy Player ( ) ) , Action Tag ( Discard ( 3 , query = Card Query ( source = CARD_SOURCE . MY_DECK ) ) , Player Selector ( ) ) ) ] )
class Finicky Cloakfield ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Finicky Cloakfield " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . add_buff ( Buff Until ( Stealth ( ) , Turn Started ( ) ) )
class Flame Leviathan ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Flame Leviathan " , 7 , CHARACTER_CLASS . MAGE , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . MECH , effects = [ Effect ( Drawn ( ) , Action Tag ( Damage ( 2 ) , Character Selector ( None , Both Player ( ) ) ) ) ] ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 7 , 7 )
class Flamecannon ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Flamecannon " , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# targets = hearthbreaker . targeting . find_enemy_minion_battlecry_target ( player . game , lambda x : True ) #NEWLINE# #INDENT# #INDENT# target = game . random_choice ( targets ) #NEWLINE# #INDENT# #INDENT# target . damage ( player . effective_spell_damage ( 4 ) , self ) #NEWLINE# #NEWLINE# #INDENT# def can_use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) >= 1
class Foe Reaper4000 ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Foe Reaper 4000 " , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 6 , 9 , effects = [ Effect ( Attack ( Is Minion ( ) ) , Action Tag ( Damage ( Attribute ( " attack " , Self Selector ( ) ) ) , Minion Selector ( Target Adjacent ( ) , Enemy Player ( ) ) ) ) ] )
class Force Tank MAX ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Force-Tank MAX " , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 7 , 7 , divine_shield = True )
class Gahzrilla ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Gahz'rilla " , 7 , CHARACTER_CLASS . HUNTER , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 6 , 9 , effects = [ Effect ( Damaged ( ) , Action Tag ( Give ( Buff ( Double Attack ( ) ) ) , Self Selector ( ) ) ) ] )
class Gallywixs Coin ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Gallywix's Coin " , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# if player . mana < 10 : #NEWLINE# #INDENT# #INDENT# #INDENT# player . mana += 1
class Gazlowe ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Gazlowe " , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 6 , effects = [ Effect ( Spell Cast ( Mana Cost ( 1 ) ) , Action Tag ( Add Card ( Card Query ( conditions = [ Is Type ( MINION_TYPE . MECH ) ] ) ) , Player Selector ( ) ) ) ] )
class Gilblin Stalker ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Gilblin Stalker " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 3 , stealth = True )
class Glaivezooka ( Weapon Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Glaivezooka " , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Change Attack ( 1 ) ) , Minion Selector ( None , picker = Random Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_weapon ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Weapon ( 2 , 2 )
class Gnomeregan Infantry ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Gnomeregan Infantry " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 4 , charge = True , taunt = True )
class Goblin Blastmage ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Goblin Blastmage " , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( None , Enemy Player ( ) , Random Picker ( 4 ) ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) , value = 0 ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 4 )
class Goblin Sapper ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Goblin Sapper " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 4 , buffs = [ Buff ( Change Attack ( 4 ) , Greater Than ( Count ( Card Selector ( Enemy Player ( ) ) ) , value = 5 ) ) ] )
class Grove Tender ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Grove Tender " , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , choices = [ #NEWLINE# #INDENT# #INDENT# Choice ( Gift Of Mana ( ) , Give Mana Crystal ( ) , Player Selector ( players = Both Player ( ) ) ) , #NEWLINE# #INDENT# #INDENT# Choice ( Gift Of Cards ( ) , Draw ( ) , Player Selector ( players = Both Player ( ) ) ) #NEWLINE# #INDENT# #INDENT# ] ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 4 )
class Hemet Nesingwary ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Hemet Nesingwary " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Is Type ( MINION_TYPE . BEAST ) , players = Both Player ( ) , picker = User Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 6 , 3 )
class Hobgoblin ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Hobgoblin " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 3 , effects = [ Effect ( Minion Placed ( Base Attack Equal To ( 1 ) ) , Action Tag ( Give ( [ Buff ( Change Health ( 2 ) ) , Buff ( Change Attack ( 2 ) ) ] ) , Target Selector ( ) ) ) ] )
class Illuminator ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Illuminator " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 4 , effects = [ Effect ( Turn Ended ( Has Secret ( ) ) , Action Tag ( Heal ( 4 ) , Hero Selector ( ) ) ) ] )
class Imp ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Imp " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False , minion_type = MINION_TYPE . DEMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 )
class Implosion ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Imp-losion " , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# amount = player . effective_spell_damage ( game . random_amount ( 2 , 4 ) ) #NEWLINE# #INDENT# #INDENT# had_shield = self . target . divine_shield #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . damage ( amount , self ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# if not had_shield : #NEWLINE# #INDENT# #INDENT# #INDENT# for i in range ( 0 , amount ) : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# imp = Imp ( ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# imp . summon ( player , game , len ( player . minions ) )
class Jeeves ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Jeeves " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 4 , effects = [ Effect ( Turn Ended ( player = Both Player ( ) ) , Action Tag ( Draw ( Difference ( Count ( Card Selector ( players = Current Player ( ) ) ) , value = 3 ) ) , Player Selector ( Current Player ( ) ) ) ) ] )
class Junkbot ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Junkbot " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 5 , effects = [ Effect ( Minion Died ( Is Type ( MINION_TYPE . MECH ) ) , Action Tag ( Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) ] ) , Self Selector ( ) ) ) ] )
class Kezan Mystic ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Kezan Mystic " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Apply Secret ( CARD_SOURCE . ENEMY_SECRETS ) , Player Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 3 )
class King Of Beasts ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " King of Beasts " , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Give ( Buff ( Change Attack ( Count ( Minion Selector ( Is Type ( MINION_TYPE . BEAST ) ) ) ) ) ) , Self Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 6 , taunt = True )
class Light Of The Naaru ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Light of the Naaru " , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . heal ( player . effective_heal_power ( 3 ) , self ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# lightwarden = Lightwarden ( ) #NEWLINE# #INDENT# #INDENT# if self . target is None : #NEWLINE# #INDENT# #INDENT# #INDENT# lightwarden . summon ( player , game , len ( player . minions ) ) #NEWLINE# #INDENT# #INDENT# elif self . target . health != self . target . calculate_max_health ( ) : #NEWLINE# #INDENT# #INDENT# #INDENT# lightwarden . summon ( player , game , len ( player . minions ) )
class Lightbomb ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Lightbomb " , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# targets = copy . copy ( game . other_player . minions ) #NEWLINE# #INDENT# #INDENT# targets . extend ( player . minions ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# for minion in targets : #NEWLINE# #INDENT# #INDENT# #INDENT# minion . damage ( player . effective_spell_damage ( minion . calculate_attack ( ) ) , self )
class Lil Exorcist ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Lil' Exorcist " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( Count ( Minion Selector ( Minion Has Deathrattle ( ) , Enemy Player ( ) ) ) ) ) , Buff ( Change Health ( Count ( Minion Selector ( Minion Has Deathrattle ( ) , Enemy Player ( ) ) ) ) ) ] ) , Self Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 3 , taunt = True )
class Lost Tallstrider ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Lost Tallstrider " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 4 )
class Malorne ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Malorne " , 7 , CHARACTER_CLASS . DRUID , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 9 , 7 , deathrattle = [ Deathrattle ( Add Card ( Card Query ( source = CARD_SOURCE . MINION , minion = Self Selector ( ) ) , add_to_deck = True ) , Player Selector ( ) ) , Deathrattle ( Remove ( ) , Self Selector ( ) ) ] )
class Mech Bear Cat ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mech-Bear-Cat " , 6 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 7 , 6 , effects = [ Effect ( Damaged ( ) , Action Tag ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( ) ) ) ] )
class Mechanical Yeti ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mechanical Yeti " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# from hearthbreaker . cards . spells . neutral import spare_part_list #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 5 , deathrattle = Deathrattle ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = spare_part_list ) ) , Player Selector ( Both Player ( ) ) ) )
class Mechwarper ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mechwarper " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 3 , auras = [ Aura ( Mana Change ( - 1 ) , Card Selector ( condition = Is Type ( MINION_TYPE . MECH ) ) ) ] )
class Mekgineer Thermaplugg ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mekgineer Thermaplugg " , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 9 , 7 , effects = [ Effect ( Minion Died ( player = Enemy Player ( ) ) , Action Tag ( Summon ( Leper Gnome ( ) ) , Player Selector ( ) ) ) ] )
class Metaltooth Leaper ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Metaltooth Leaper " , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Give ( Buff ( Change Attack ( 2 ) ) ) , Minion Selector ( Is Type ( MINION_TYPE . MECH ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 3 )
class Micro Machine ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Micro Machine " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 2 , effects = [ Effect ( Turn Started ( player = Both Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )
class Mimirons Head ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mimiron's Head " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 5 , effects = [ Effect ( Turn Started ( ) , [ Action Tag ( Kill ( ) , Minion Selector ( Is Type ( MINION_TYPE . MECH , True ) ) , Greater Than ( Count ( Minion Selector ( Is Type ( MINION_TYPE . MECH , True ) ) ) , value = 2 ) ) , Action Tag ( Summon ( V07TR0N ( ) ) , Player Selector ( ) ) ] ) ] )
class Mogor The Ogre ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mogor the Ogre " , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 7 , 6 , effects = [ Effect ( Character Attack ( None , Both Player ( ) ) , Action Tag ( Change Target ( #NEWLINE# #INDENT# #INDENT# Character Selector ( Not Current Target ( ) , Enemy Player ( ) , Random Picker ( ) ) ) , Target Selector ( ) , #NEWLINE# #INDENT# #INDENT# And ( One In ( 2 ) , Opponent Minion Count Is Greater Than ( 0 ) ) ) ) ] )
class Muster For Battle ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Muster for Battle " , 3 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# for i in range ( 0 , 3 ) : #NEWLINE# #INDENT# #INDENT# #INDENT# dude = Silver Hand Recruit ( ) #NEWLINE# #INDENT# #INDENT# #INDENT# dude . summon ( player , player . game , len ( player . minions ) ) #NEWLINE# #INDENT# #INDENT# justice = Lights Justice ( ) #NEWLINE# #INDENT# #INDENT# hammer = justice . create_weapon ( player ) #NEWLINE# #INDENT# #INDENT# hammer . card = justice #NEWLINE# #INDENT# #INDENT# hammer . equip ( player )
class Neptulon ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# from hearthbreaker . cards . minions . neutral import Bluegill Warrior , Coldlight Oracle , Coldlight Seer , Grimscale Oracle , Murloc Raider , Murloc Tidecaller , Murloc Tidehunter , Murloc Warleader , Old Murk Eye , Puddlestomper #NEWLINE# #INDENT# #INDENT# murloc_list = [ Bluegill Warrior ( ) , Coldlight Oracle ( ) , Coldlight Seer ( ) , Grimscale Oracle ( ) , Murloc Raider ( ) , Murloc Tidecaller ( ) , Murloc Tidehunter ( ) , Murloc Warleader ( ) , Old Murk Eye ( ) , Puddlestomper ( ) , Siltfin Spiritwalker ( ) ] #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Neptulon " , 7 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . LEGENDARY , overload = 3 , battlecry = Battlecry ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = murloc_list ) , 4 ) , Player Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 7 , 7 )
class Ogre Brute ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ogre Brute " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 4 , effects = [ Effect ( Attack ( ) , Action Tag ( Change Target ( Character Selector ( Not Current Target ( ) , Enemy Player ( ) , Random Picker ( ) ) ) , Self Selector ( ) , And ( One In ( 2 ) , Opponent Minion Count Is Greater Than ( 0 ) ) ) ) ] )
class Ogre Ninja ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ogre Ninja " , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 6 , 6 , stealth = True , effects = [ Effect ( Attack ( ) , Action Tag ( Change Target ( Character Selector ( Not Current Target ( ) , Enemy Player ( ) , Random Picker ( ) ) ) , Self Selector ( ) , And ( One In ( 2 ) , Opponent Minion Count Is Greater Than ( 0 ) ) ) ) ] )
class Ogre Warmaul ( Weapon Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ogre Warmaul " , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_weapon ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Weapon ( 4 , 2 , effects = [ Effect ( Character Attack ( Is Hero ( ) ) , Action Tag ( Change Target ( Character Selector ( Not Current Target ( ) , Enemy Player ( ) , Random Picker ( ) ) ) , Hero Selector ( ) , And ( One In ( 2 ) , Opponent Minion Count Is Greater Than ( 0 ) ) ) ) ] )
class Oneeyed Cheat ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " One-eyed Cheat " , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE , minion_type = MINION_TYPE . PIRATE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 1 , effects = [ Effect ( Minion Summoned ( Is Type ( MINION_TYPE . PIRATE ) ) , Action Tag ( Give ( Stealth ( ) ) , Self Selector ( ) ) ) ] )
class Piloted Shredder ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Piloted Shredder " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 3 , deathrattle = Deathrattle ( Summon ( Card Query ( conditions = [ Mana Cost ( 2 ) , Is Minion ( ) ] ) ) , Player Selector ( ) ) )
class Puddlestomper ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Puddlestomper " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MURLOC ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 2 )
class Quartermaster ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Quartermaster " , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . EPIC , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) ] ) , Minion Selector ( Has Card Name ( " Silver Hand Recruit " ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 5 )
class Recombobulator ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Recombobulator " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = Battlecry ( Transform ( Card Query ( conditions = [ Mana Cost ( Attribute ( " mana " , Self Selector ( ) ) ) , Is Minion ( ) ] ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 2 )
class Recycle ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Recycle " , 6 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# player . opponent . deck . put_back ( self . target ) #NEWLINE# #INDENT# #INDENT# self . target . remove_from_board ( )
class Reversing Switch ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Reversing Switch " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# temp_attack = self . target . calculate_attack ( ) #NEWLINE# #INDENT# #INDENT# temp_health = self . target . health #NEWLINE# #INDENT# #INDENT# if temp_attack == 0 : #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . die ( None ) #NEWLINE# #INDENT# #INDENT# else : #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . set_attack_to ( temp_health ) #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . set_health_to ( temp_attack )
class Rusty Horn ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Rusty Horn " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . add_buff ( Buff ( Taunt ( ) ) )
class Sabotage ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Sabotage " , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# targets = hearthbreaker . targeting . find_enemy_minion_battlecry_target ( player . game , lambda x : True ) #NEWLINE# #INDENT# #INDENT# target = game . random_choice ( targets ) #NEWLINE# #INDENT# #INDENT# target . die ( None ) #NEWLINE# #INDENT# #INDENT# game . check_delayed ( ) #NEWLINE# #INDENT# #INDENT# if player . cards_played > 0 and game . other_player . weapon is not None : #NEWLINE# #INDENT# #INDENT# #INDENT# game . other_player . weapon . destroy ( ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def can_use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) >= 1
class Salty Dog ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Salty Dog " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . PIRATE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 7 , 4 )
class Seal Of Light ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Seal of Light " , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# player . hero . heal ( player . effective_heal_power ( 4 ) , self ) #NEWLINE# #INDENT# #INDENT# player . hero . change_temp_attack ( 2 )
class Shadowbomber ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Shadowbomber " , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( players = Both Player ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 1 )
class Shadowboxer ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Shadowboxer " , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 3 , effects = [ Effect ( Character Healed ( player = Both Player ( ) ) , Action Tag ( Damage ( 1 ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) , condition = None ) ) ) ] )
class Shielded Minibot ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Shielded Minibot " , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 , divine_shield = True )
class Shieldmaiden ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Shieldmaiden " , 6 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , battlecry = Battlecry ( Increase Armor ( 5 ) , Hero Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 5 )
class Ships Cannon ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ship's Cannon " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 3 , effects = [ Effect ( Minion Summoned ( Is Type ( MINION_TYPE . PIRATE ) ) , Action Tag ( Damage ( 2 ) , Character Selector ( None , Enemy Player ( ) , Random Picker ( ) ) ) ) ] )
class Shrinkmeister ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Shrinkmeister " , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( - 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 2 )
class Siege Engine ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Siege Engine " , 5 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 5 , effects = [ Effect ( Armor Increased ( ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )
class Snowchugger ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Snowchugger " , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 3 , effects = [ Effect ( Did Damage ( ) , Action Tag ( Give ( Frozen ( ) ) , Target Selector ( ) ) ) ] )
class Soot Spewer ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Soot Spewer " , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 3 , spell_damage = 1 )
class Spider Tank ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Spider Tank " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 4 )
class Steamwheedle Sniper ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Steamwheedle Sniper " , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 3 , auras = [ Aura ( Power Targets Minions ( ) , Hero Selector ( ) ) ] )
class Stonesplinter Trogg ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Stonesplinter Trogg " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 3 , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )
class Target Dummy ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Target Dummy " , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 0 , 2 , taunt = True )
class Time Rewinder ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Time Rewinder " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . bounce ( )
class Tinkers Sharpsword Oil ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Tinker's Sharpsword Oil " , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# player . weapon . base_attack += 3 #NEWLINE# #INDENT# #INDENT# player . hero . change_temp_attack ( 3 ) #NEWLINE# #INDENT# #INDENT# if player . cards_played > 0 : #NEWLINE# #INDENT# #INDENT# #INDENT# targets = hearthbreaker . targeting . find_friendly_minion_battlecry_target ( player . game , lambda x : x ) #NEWLINE# #INDENT# #INDENT# #INDENT# if targets is not None : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# target = player . game . random_choice ( targets ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# target . add_buff ( Buff ( Change Attack ( 3 ) ) ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# def can_use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# return super ( ) . can_use ( player , game ) and player . weapon is not None
class Trade Prince Gallywix ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Trade Prince Gallywix " , 6 , CHARACTER_CLASS . ROGUE , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 8 , effects = [ Effect ( Spell Cast ( Not ( Has Card Name ( " Gallywix's Coin " ) ) , Enemy Player ( ) ) , Action Tag ( Add Card ( Card Query ( source = CARD_SOURCE . LAST_CARD ) ) , Player Selector ( Friendly Player ( ) ) ) ) , Effect ( Spell Cast ( Not ( Has Card Name ( " Gallywix's Coin " ) ) , Enemy Player ( ) ) , Action Tag ( Add Card ( Gallywixs Coin ( ) ) , Player Selector ( Enemy Player ( ) ) ) ) ] )
class Tree Of Life ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Tree of Life " , 9 , CHARACTER_CLASS . DRUID , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# targets = copy . copy ( game . other_player . minions ) #NEWLINE# #INDENT# #INDENT# targets . extend ( game . current_player . minions ) #NEWLINE# #INDENT# #INDENT# targets . append ( game . other_player . hero ) #NEWLINE# #INDENT# #INDENT# targets . append ( game . current_player . hero ) #NEWLINE# #INDENT# #INDENT# for target in targets : #NEWLINE# #INDENT# #INDENT# #INDENT# target . heal ( player . effective_heal_power ( target . calculate_max_health ( ) ) , self )
class Troggzor The Earthinator ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Troggzor the Earthinator " , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 6 , 6 , effects = [ Effect ( Spell Cast ( player = Enemy Player ( ) ) , Action Tag ( Summon ( Burly Rockjaw Trogg ( ) ) , Player Selector ( ) ) ) ] )
class Unstable Portal ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Unstable Portal " , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# query = Card Query ( conditions = [ Is Minion ( ) ] ) #NEWLINE# #INDENT# #INDENT# new_minon = query . get_card ( player , player , self ) #NEWLINE# #INDENT# #INDENT# new_minon . add_buff ( Buff ( Mana Change ( - 3 ) ) ) #NEWLINE# #INDENT# #INDENT# player . hand . append ( new_minon )
class Upgraded Repair Bot ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Upgraded Repair Bot " , 5 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH , battlecry = Battlecry ( Give ( Change Health ( 4 ) ) , Minion Selector ( Is Type ( MINION_TYPE . MECH ) , picker = User Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 5 )
class V07TR0N ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " V-07-TR-0N " , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , False , MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 8 , charge = True , buffs = [ Buff ( Mega Windfury ( ) ) ] )
class Velens Chosen ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Velen's Chosen " , 3 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . change_attack ( 2 ) #NEWLINE# #INDENT# #INDENT# self . target . increase_health ( 4 ) #NEWLINE# #INDENT# #INDENT# self . target . add_buff ( Buff ( Spell Damage ( 1 ) ) )
class Vitality Totem ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Vitality Totem " , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , minion_type = MINION_TYPE . TOTEM ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 0 , 3 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Heal ( 4 ) , Hero Selector ( ) ) ) ] )
class Wee Spellstopper ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Wee Spellstopper " , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 5 , auras = [ Aura ( No Spell Target ( ) , Minion Selector ( Adjacent ( ) ) ) ] )
class Whirling Blades ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Whirling Blades " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . change_attack ( 1 )
class Whirling Zapomatic ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Whirling Zap-o-matic " , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , p ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 2 , windfury = True )
class Anubar Ambusher ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Anub'ar Ambusher " , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 5 , deathrattle = Deathrattle ( Bounce ( ) , Minion Selector ( picker = Random Picker ( ) ) ) )
class Avenge ( Secret Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Avenge " , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def _reveal ( self , dead_minion , attacker ) : #NEWLINE# #INDENT# #INDENT# if len ( [ minion for minion in self . player . minions if not minion . dead ] ) > 0 : #NEWLINE# #INDENT# #INDENT# #INDENT# target = self . player . game . random_choice ( self . player . minions ) #NEWLINE# #INDENT# #INDENT# #INDENT# target . change_attack ( 3 ) #NEWLINE# #INDENT# #INDENT# #INDENT# target . increase_health ( 2 ) #NEWLINE# #INDENT# #INDENT# #INDENT# super ( ) . reveal ( ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def activate ( self , player ) : #NEWLINE# #INDENT# #INDENT# player . bind ( " minion_died " , self . _reveal ) #NEWLINE# #NEWLINE# #INDENT# def deactivate ( self , player ) : #NEWLINE# #INDENT# #INDENT# player . unbind ( " minion_died " , self . _reveal )
class Baron Rivendare ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Baron Rivendare " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 7 , auras = [ Aura ( Double Deathrattle ( ) , Player Selector ( ) ) ] )
class Dancing Swords ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Dancing Swords " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 4 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( Enemy Player ( ) ) ) )
class Dark Cultist ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Dark Cultist " , 3 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 4 , deathrattle = Deathrattle ( Give ( Change Health ( 3 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) )
class Duplicate ( Secret Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Duplicate " , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) #NEWLINE# #INDENT# #INDENT# self . player = None #NEWLINE# #NEWLINE# #INDENT# def activate ( self , player ) : #NEWLINE# #INDENT# #INDENT# player . bind ( " minion_died " , self . _reveal ) #NEWLINE# #INDENT# #INDENT# self . player = player #NEWLINE# #NEWLINE# #INDENT# def deactivate ( self , player ) : #NEWLINE# #INDENT# #INDENT# player . unbind ( " minion_died " , self . _reveal ) #NEWLINE# #INDENT# #INDENT# self . player = None #NEWLINE# #NEWLINE# #INDENT# def _reveal ( self , minion , by ) : #NEWLINE# #INDENT# #INDENT# for c in range ( 0 , 2 ) : #NEWLINE# #INDENT# #INDENT# #INDENT# if len ( self . player . hand ) < 10 : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# new_card = type ( minion . card ) ( ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# self . player . hand . append ( new_card ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# new_card . attach ( new_card , self . player ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# super ( ) . reveal ( )
class Echoing Ooze ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Echoing Ooze " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = Battlecry ( Give Effect ( Effect ( Turn Ended ( ) , Action Tag ( Duplicate ( Self Selector ( ) ) , Player Selector ( ) ) ) ) , Player Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 2 )
class Feugen ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Feugen " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 7 , deathrattle = Deathrattle ( Summon ( Thaddius ( ) ) , Player Selector ( ) , In Graveyard ( Stalagg ( ) ) ) )
class Feugen ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Feugen " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 7 , deathrattle = Deathrattle ( Summon ( Thaddius ( ) ) , Player Selector ( ) , In Graveyard ( Stalagg ( ) ) ) )
class Haunted Creeper ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Haunted Creeper " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 2 , deathrattle = Deathrattle ( Summon ( Spectral Spider ( ) , 2 ) , Player Selector ( ) ) )
class Kel Thuzad ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Kel'Thuzad " , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 6 , 8 , effects = [ Effect ( Turn Ended ( player = Both Player ( ) ) , Action Tag ( Resurrect Friendly ( ) , Player Selector ( ) ) ) ] )
class Loatheb ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Loatheb " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Give Aura ( Aura Until ( Mana Change ( 5 ) , Card Selector ( condition = Is Spell ( ) ) , Turn Ended ( ) ) ) , Player Selector ( players = Enemy Player ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 5 )
class Mad Scientist ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mad Scientist " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 , deathrattle = Deathrattle ( Apply Secret ( CARD_SOURCE . MY_DECK ) , Player Selector ( ) ) )
class Nerubian ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Nerubian " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , p ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 4 )
class Nerubian ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Nerubian " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , p ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 4 )
class Nerubian ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Nerubian " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , p ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 4 )
class Nerubian Egg ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Nerubian Egg " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 0 , 2 , deathrattle = Deathrattle ( Summon ( Nerubian ( ) ) , Player Selector ( ) ) )
class Poison Seeds ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Poison Seeds " , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# from hearthbreaker . cards . minions . druid import Poison Seeds Treant #NEWLINE# #INDENT# #INDENT# targets = hearthbreaker . targeting . find_minion_spell_target ( game , lambda m : True ) #NEWLINE# #INDENT# #INDENT# for target in targets : #NEWLINE# #INDENT# #INDENT# #INDENT# target . die ( None ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# game . check_delayed ( ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# for target in targets : #NEWLINE# #INDENT# #INDENT# #INDENT# Poison Seeds Treant ( ) . summon ( target . player , target . game , len ( target . player . minions ) )
class Reincarnate ( Spell Card ) : #NEWLINE# #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Reincarnate " , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . die ( self ) #NEWLINE# #INDENT# #INDENT# game . check_delayed ( ) #NEWLINE# #INDENT# #INDENT# self . target . card . summon ( self . target . player , game , len ( self . target . player . minions ) )
class Shade Of Naxxramas ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Shade of Naxxramas " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 , stealth = True , effects = [ Effect ( Turn Started ( ) , Action Tag ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) ) ) ] )
class Slime ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Slime " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , p ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 2 , taunt = True )
class Spectral Spider ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Spectral Spider " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 )
class Stalagg ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Stalagg " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 7 , 4 , deathrattle = Deathrattle ( Summon ( Thaddius ( ) ) , Player Selector ( ) , In Graveyard ( Feugen ( ) ) ) )
class Stalagg ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Stalagg " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 7 , 4 , deathrattle = Deathrattle ( Summon ( Thaddius ( ) ) , Player Selector ( ) , In Graveyard ( Feugen ( ) ) ) )
class Stoneskin Gargoyle ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Stoneskin Gargoyle " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 4 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Heal ( 10000 ) , Self Selector ( ) ) ) ] )
class Thaddius ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Thaddius " , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , False ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 11 , 11 )
class Treant ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Treant " , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , _ ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 )
class Undertaker ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Undertaker " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 2 , effects = [ Effect ( Minion Summoned ( Minion Has Deathrattle ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )
class Unstable Ghoul ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Unstable Ghoul " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 3 , deathrattle = Deathrattle ( Damage ( 1 ) , Minion Selector ( players = Both Player ( ) ) ) , taunt = True )
class Webspinner ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Webspinner " , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 , deathrattle = Deathrattle ( Add Card ( Card Query ( conditions = [ Is Type ( MINION_TYPE . BEAST ) ] ) ) , Player Selector ( ) ) )
class Zombie Chow ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Zombie Chow " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 3 , deathrattle = Deathrattle ( Heal ( 5 ) , Hero Selector ( Enemy Player ( ) ) ) )
class Abomination ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Abomination " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 4 , deathrattle = Deathrattle ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) ) ) , taunt = True )
class Abusive Sergeant ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Abusive Sergeant " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 1 )
class Acolyte Of Pain ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Acolyte of Pain " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 3 , effects = [ Effect ( Damaged ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )
class Al Akir The Windlord ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Al'Akir the Windlord " , 8 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 5 , windfury = True , charge = True , divine_shield = True , taunt = True )
class Alarmo Bot ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Alarm-o-Bot " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 0 , 3 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Swap With Hand ( ) , Player Selector ( ) ) ) ] )
class Aldor Peacekeeper ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Aldor Peacekeeper " , 3 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( Set Attack ( 1 ) ) , Minion Selector ( condition = None , players = Enemy Player ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 3 )
class Ancestral Spirit ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ancestral Spirit " , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . deathrattle . append ( Deathrattle ( Summon ( self . target . card ) , Player Selector ( ) ) )
class Ancient Brewmaster ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ancient Brewmaster " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Bounce ( ) , Minion Selector ( picker = User Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 4 )
class Ancient Mage ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ancient Mage " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( Spell Damage ( 1 ) ) , Minion Selector ( condition = Adjacent ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 5 )
class Ancient Watcher ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ancient Watcher " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 5 , buffs = [ Buff ( Cant Attack ( ) ) ] )
class Ancient Of Lore ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ancient of Lore " , 7 , CHARACTER_CLASS . DRUID , CARD_RARITY . EPIC , choices = [ #NEWLINE# #INDENT# #INDENT# Choice ( Ancient Secrets ( ) , Heal ( 5 ) , Hero Selector ( ) ) , #NEWLINE# #INDENT# #INDENT# Choice ( Ancient Teachings ( ) , Draw ( 3 ) , Player Selector ( ) ) #NEWLINE# #INDENT# #INDENT# ] ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 5 )
class Ancient Of War ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ancient of War " , 7 , CHARACTER_CLASS . DRUID , CARD_RARITY . EPIC , choices = [ #NEWLINE# #INDENT# #INDENT# Choice ( Health ( ) , Give ( [ Buff ( Change Health ( 5 ) ) , Buff ( Taunt ( ) ) ] ) , Self Selector ( ) ) , #NEWLINE# #INDENT# #INDENT# Choice ( Attack ( ) , Give ( [ Buff ( Change Attack ( 5 ) ) ] ) , Self Selector ( ) ) , #NEWLINE# #INDENT# #INDENT# ] ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 5 )
class Angry Chicken ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Angry Chicken " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 , enrage = [ Aura ( Change Attack ( 5 ) , Self Selector ( ) ) ] )
class Arathi Weaponsmith ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Arathi Weaponsmith " , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , battlecry = Battlecry ( Equip ( Battle Axe ( ) ) , Player Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 3 )
class Argent Commander ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Argent Commander " , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 2 , divine_shield = True , charge = True )
class Argent Protector ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Argent Protector " , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Divine Shield ( ) ) , Minion Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 )
class Argent Squire ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Argent Squire " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 , divine_shield = True )
class Armorsmith ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Armorsmith " , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 4 , effects = [ Effect ( Character Damaged ( condition = Is Minion ( ) ) , Action Tag ( Increase Armor ( ) , Hero Selector ( ) ) ) ] )
class Ashbringer ( Weapon Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ashbringer " , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . LEGENDARY , False ) #NEWLINE# #NEWLINE# #INDENT# def create_weapon ( self , player ) : #NEWLINE# #INDENT# #INDENT# weapon = Weapon ( 5 , 3 ) #NEWLINE# #INDENT# #INDENT# return weapon
class Auchenai Soulpriest ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Auchenai Soulpriest " , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 5 , auras = [ Aura ( Heal As Damage ( ) , Player Selector ( ) ) ] )
class Avenging Wrath ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Avenging Wrath " , 6 , CHARACTER_CLASS . PALADIN , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# for i in range ( 0 , player . effective_spell_damage ( 8 ) ) : #NEWLINE# #INDENT# #INDENT# #INDENT# targets = copy . copy ( game . other_player . minions ) #NEWLINE# #INDENT# #INDENT# #INDENT# targets . append ( game . other_player . hero ) #NEWLINE# #INDENT# #INDENT# #INDENT# target = game . random_choice ( targets ) #NEWLINE# #INDENT# #INDENT# #INDENT# target . damage ( 1 , self )
class Azure Drake ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Azure Drake " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Draw ( ) , Player Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 4 , spell_damage = 1 )
class Bane Of Doom ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Bane of Doom " , 5 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# if self . target . health <= player . effective_spell_damage ( 2 ) and ( isinstance ( self . target , Minion ) and not self . target . divine_shield ) : #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 2 ) , self ) #NEWLINE# #INDENT# #INDENT# #INDENT# demons = Card Query ( conditions = [ Is Type ( MINION_TYPE . DEMON ) ] ) #NEWLINE# #INDENT# #INDENT# #INDENT# demons . get_card ( player , player , self ) . summon ( player , game , len ( player . minions ) ) #NEWLINE# #INDENT# #INDENT# else : #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 2 ) , self )
class Baron Geddon ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Baron Geddon " , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 7 , 5 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) ) ) ) ] )
class Battle Axe ( Weapon Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Battle Axe " , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , False ) #NEWLINE# #NEWLINE# #INDENT# def create_weapon ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Weapon ( 2 , 2 )
class Battle Rage ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Battle Rage " , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# def damaged_character ( character ) : #NEWLINE# #INDENT# #INDENT# #INDENT# return character . health < character . calculate_max_health ( ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# characters = copy . copy ( player . minions ) #NEWLINE# #INDENT# #INDENT# characters . append ( player . hero ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# characters = [ character for character in characters if damaged_character ( character ) ] #NEWLINE# #NEWLINE# #INDENT# #INDENT# for i in range ( 0 , len ( characters ) ) : #NEWLINE# #INDENT# #INDENT# #INDENT# player . draw ( )
class Bestial Wrath ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Bestial Wrath " , 1 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target , filter_func = lambda minion : minion . card . minion_type is MINION_TYPE . BEAST and minion . spell_targetable ( ) ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . add_buff ( Buff Until ( Immune ( ) , Turn Ended ( player = Current Player ( ) ) ) ) #NEWLINE# #INDENT# #INDENT# self . target . change_temp_attack ( 2 )
class Betrayal ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Betrayal " , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_enemy_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# left_minion = None #NEWLINE# #INDENT# #INDENT# right_minion = None #NEWLINE# #NEWLINE# #INDENT# #INDENT# index = self . target . index #NEWLINE# #INDENT# #INDENT# if index > 0 : #NEWLINE# #INDENT# #INDENT# #INDENT# left_minion = game . other_player . minions [ index - 1 ] #NEWLINE# #INDENT# #INDENT# if index < min ( len ( game . other_player . minions ) - 1 , 6 ) : #NEWLINE# #INDENT# #INDENT# #INDENT# right_minion = game . other_player . minions [ index + 1 ] #NEWLINE# #NEWLINE# #INDENT# #INDENT# original_immune = self . target . immune #NEWLINE# #INDENT# #INDENT# self . target . immune = True #NEWLINE# #INDENT# #INDENT# if left_minion is not None : #NEWLINE# #INDENT# #INDENT# #INDENT# left_minion . damage ( self . target . calculate_attack ( ) , self . target ) #NEWLINE# #INDENT# #INDENT# if right_minion is not None : #NEWLINE# #INDENT# #INDENT# #INDENT# right_minion . damage ( self . target . calculate_attack ( ) , self . target ) #NEWLINE# #INDENT# #INDENT# self . target . immune = original_immune
class Big Game Hunter ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Big Game Hunter " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Attack Greater Than ( 6 ) , Both Player ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 2 )
class Bite ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Bite " , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# player . hero . change_temp_attack ( 4 ) #NEWLINE# #INDENT# #INDENT# player . hero . increase_armor ( 4 )
class Blessing Of Wisdom ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Blessing of Wisdom " , 1 , CHARACTER_CLASS . PALADIN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# if player is game . players [ 0 ] : #NEWLINE# #INDENT# #INDENT# #INDENT# draw_player = Player One ( ) #NEWLINE# #INDENT# #INDENT# else : #NEWLINE# #INDENT# #INDENT# #INDENT# draw_player = Player Two ( ) #NEWLINE# #INDENT# #INDENT# self . target . add_effect ( Effect ( Attack ( ) , Action Tag ( Draw ( ) , Player Selector ( draw_player ) ) ) )
class Blizzard ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Blizzard " , 6 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# for minion in copy . copy ( game . other_player . minions ) : #NEWLINE# #INDENT# #INDENT# #INDENT# minion . damage ( player . effective_spell_damage ( 2 ) , self ) #NEWLINE# #INDENT# #INDENT# for minion in game . other_player . minions : #NEWLINE# #INDENT# #INDENT# #INDENT# minion . add_buff ( Buff ( Frozen ( ) ) )
class Blood Fury ( Weapon Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Blood Fury " , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , False ) #NEWLINE# #NEWLINE# #INDENT# def create_weapon ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Weapon ( 3 , 8 )
class Blood Imp ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Blood Imp " , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 0 , 1 , stealth = True , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( Change Health ( 1 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) ) ] )
class Blood Knight ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Blood Knight " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = ( Battlecry ( [ Give ( [ Buff ( Change Attack ( Count ( Minion Selector ( Has Divine Shield ( ) , Both Player ( ) ) ) , 3 ) ) , Buff ( Change Health ( Count ( Minion Selector ( Has Divine Shield ( ) , Both Player ( ) ) ) , 3 ) ) ] ) ] , Self Selector ( ) ) , Battlecry ( Remove Divine Shields ( ) , ( Minion Selector ( Has Divine Shield ( ) , Both Player ( ) ) ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 3 )
class Bloodmage Thalnos ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Bloodmage Thalnos " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 , spell_damage = 1 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( ) ) )
class Bloodsail Corsair ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Bloodsail Corsair " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Decrease Durability ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 2 )
class Bloodsail Raider ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Bloodsail Raider " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( Give ( Buff ( Change Attack ( Attribute ( " base_attack " , Weapon Selector ( ) ) ) ) ) , Self Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 3 )
class Cairne Bloodhoof ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Cairne Bloodhoof " , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 5 , deathrattle = Deathrattle ( Summon ( Baine Bloodhoof ( ) ) , Player Selector ( ) ) )
class Captain Greenskin ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Captain Greenskin " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . PIRATE , battlecry = Battlecry ( [ Increase Weapon Attack ( 1 ) , Increase Durability ( ) ] , Weapon Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 4 )
class Cenarius ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Cenarius " , 9 , CHARACTER_CLASS . DRUID , CARD_RARITY . LEGENDARY , choices = [ #NEWLINE# #INDENT# #INDENT# Choice ( Increase Stats ( ) , Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) , Buff ( Taunt ( ) ) ] ) , Minion Selector ( ) ) , #NEWLINE# #INDENT# #INDENT# Choice ( Summon Treants ( ) , Summon ( Taunt Treant ( ) , 2 ) , Player Selector ( ) ) #NEWLINE# #INDENT# #INDENT# ] ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 8 )
class Circle Of Healing ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Circle of Healing " , 0 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# targets = copy . copy ( game . other_player . minions ) #NEWLINE# #INDENT# #INDENT# targets . extend ( player . minions ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# for minion in targets : #NEWLINE# #INDENT# #INDENT# #INDENT# minion . heal ( player . effective_heal_power ( 4 ) , self )
class Cold Blood ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Cold Blood " , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# if player . cards_played > 0 : #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . change_attack ( 4 ) #NEWLINE# #INDENT# #INDENT# else : #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . change_attack ( 2 )
class Coldlight Oracle ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Coldlight Oracle " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Draw ( 2 ) , Player Selector ( players = Both Player ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 )
class Coldlight Seer ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Coldlight Seer " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC , battlecry = Battlecry ( Give ( Change Health ( 2 ) ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 3 )
class Commanding Shout ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Commanding Shout " , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# player . add_aura ( Aura Until ( Minimum Health ( 1 ) , Minion Selector ( ) , Turn Ended ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# player . draw ( )
class Counterspell ( Secret Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Counterspell " , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# def _reveal ( self , card , index ) : #NEWLINE# #INDENT# #INDENT# if card . is_spell ( ) : #NEWLINE# #INDENT# #INDENT# #INDENT# card . cancel = True #NEWLINE# #INDENT# #INDENT# #INDENT# super ( ) . reveal ( ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def activate ( self , player ) : #NEWLINE# #INDENT# #INDENT# player . game . current_player . bind ( " card_played " , self . _reveal ) #NEWLINE# #NEWLINE# #INDENT# def deactivate ( self , player ) : #NEWLINE# #INDENT# #INDENT# player . game . current_player . unbind ( " card_played " , self . _reveal )
class Crazed Alchemist ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Crazed Alchemist " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Swap Stats ( ' health ' , ' attack ' , False ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 )
class Cruel Taskmaster ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Cruel Taskmaster " , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , battlecry = Battlecry ( [ Damage ( 1 ) , Give ( Change Attack ( 2 ) ) ] , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 )
class Cult Master ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Cult Master " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 2 , effects = [ Effect ( Minion Died ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )
class Damaged Golem ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Damaged Golem " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 1 )
class Dark Iron Dwarf ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Dark Iron Dwarf " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( player = Current Player ( ) ) ) ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 4 )
class Deadly Shot ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Deadly Shot " , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# targets = hearthbreaker . targeting . find_enemy_minion_battlecry_target ( player . game , lambda x : True ) #NEWLINE# #INDENT# #INDENT# target = game . random_choice ( targets ) #NEWLINE# #INDENT# #INDENT# target . die ( None ) #NEWLINE# #INDENT# #INDENT# game . check_delayed ( ) #NEWLINE# #NEWLINE# #INDENT# def can_use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) >= 1
class Deathwing ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Deathwing " , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = ( Battlecry ( Kill ( ) , Minion Selector ( players = Both Player ( ) ) ) , Battlecry ( Discard ( amount = Count ( Card Selector ( ) ) ) , Player Selector ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 12 , 12 )
class Defias Bandit ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Defias Bandit " , 1 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , False ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 1 )
class Defias Ringleader ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Defias Ringleader " , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , combo = Battlecry ( Summon ( Defias Bandit ( ) ) , Player Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 )
class Demolisher ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Demolisher " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 4 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Damage ( 2 ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) ) ] )
class Demonfire ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Demonfire " , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# targets = copy . copy ( player . game . current_player . minions ) #NEWLINE# #INDENT# #INDENT# if self . target . card . minion_type is MINION_TYPE . DEMON and self . target in targets : #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . change_attack ( 2 ) #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . increase_health ( 2 ) #NEWLINE# #INDENT# #INDENT# else : #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 2 ) , self )
class Demonfire ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Demonfire " , 2 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# targets = copy . copy ( player . game . current_player . minions ) #NEWLINE# #INDENT# #INDENT# if self . target . card . minion_type is MINION_TYPE . DEMON and self . target in targets : #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . change_attack ( 2 ) #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . increase_health ( 2 ) #NEWLINE# #INDENT# #INDENT# else : #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 2 ) , self )
class Devilsaur ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Devilsaur " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 5 )
class Dire Wolf Alpha ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Dire Wolf Alpha " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( Adjacent ( ) ) ) ] )
class Divine Favor ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Divine Favor " , 3 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# difference = len ( game . other_player . hand ) - len ( player . hand ) #NEWLINE# #INDENT# #INDENT# for i in range ( 0 , difference ) : #NEWLINE# #INDENT# #INDENT# #INDENT# player . draw ( )
class Doomsayer ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Doomsayer " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 0 , 7 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Kill ( ) , Minion Selector ( condition = None , players = Both Player ( ) ) ) ) ] )
class Dread Corsair ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Dread Corsair " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . PIRATE , buffs = [ Buff ( Mana Change ( Attribute ( " attack " , Weapon Selector ( ) ) , - 1 ) ) ] ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 3 , taunt = True )
class Dream ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Dream " , 0 , CHARACTER_CLASS . DREAM , CARD_RARITY . COMMON , False , hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . bounce ( )
class Druid Of The Claw ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Druid of the Claw " , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ #NEWLINE# #INDENT# #INDENT# Choice ( Cat Form ( ) , Transform ( Cat Druid ( ) ) , Self Selector ( ) ) , #NEWLINE# #INDENT# #INDENT# Choice ( Bear Form ( ) , Transform ( Bear Druid ( ) ) , Self Selector ( ) ) #NEWLINE# #INDENT# #INDENT# ] ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 4 )
class Druid Of The Claw ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Druid of the Claw " , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ #NEWLINE# #INDENT# #INDENT# Choice ( Cat Form ( ) , Transform ( Cat Druid ( ) ) , Self Selector ( ) ) , #NEWLINE# #INDENT# #INDENT# Choice ( Bear Form ( ) , Transform ( Bear Druid ( ) ) , Self Selector ( ) ) #NEWLINE# #INDENT# #INDENT# ] ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 4 )
class Druid Of The Claw ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Druid of the Claw " , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ #NEWLINE# #INDENT# #INDENT# Choice ( Cat Form ( ) , Transform ( Cat Druid ( ) ) , Self Selector ( ) ) , #NEWLINE# #INDENT# #INDENT# Choice ( Bear Form ( ) , Transform ( Bear Druid ( ) ) , Self Selector ( ) ) #NEWLINE# #INDENT# #INDENT# ] ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 4 )
class Dust Devil ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Dust Devil " , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 2 ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 1 , windfury = True )
class Eaglehorn Bow ( Weapon Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Eaglehorn Bow " , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_weapon ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Weapon ( 3 , 2 , effects = [ Effect ( Secret Revealed ( ) , Action Tag ( Increase Durability ( ) , Weapon Selector ( ) ) ) ] )
class Earthen Ring Farseer ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Earthen Ring Farseer " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 3 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 3 )
class Edwin Van Cleef ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Edwin Van Cleef " , 3 , CHARACTER_CLASS . ROGUE , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Give ( [ Buff ( Change Attack ( Attribute ( " cards_played " , Player Selector ( ) ) , 2 ) ) , Buff ( Change Health ( Attribute ( " cards_played " , Player Selector ( ) ) , 2 ) ) ] ) , Self Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 )
class Emerald Drake ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Emerald Drake " , 4 , CHARACTER_CLASS . DREAM , CARD_RARITY . COMMON , False , MINION_TYPE . DRAGON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 7 , 6 )
class Emperor Cobra ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Emperor Cobra " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 3 , effects = [ Effect ( Did Damage ( ) , Action Tag ( Kill ( ) , Target Selector ( Is Minion ( ) ) ) ) ] )
class Equality ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Equality " , 2 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# targets = copy . copy ( game . other_player . minions ) #NEWLINE# #INDENT# #INDENT# targets . extend ( player . minions ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# for minion in targets : #NEWLINE# #INDENT# #INDENT# #INDENT# minion . set_health_to ( 1 ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def can_use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# return super ( ) . can_use ( player , game ) and ( len ( player . minions ) > 0 or len ( game . other_player . minions ) > 0 )
class Ethereal Arcanist ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ethereal Arcanist " , 4 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 3 , effects = [ Effect ( Turn Ended ( Has Secret ( ) ) , Action Tag ( Give ( Change Attack ( 2 ) ) , Self Selector ( ) ) ) , Effect ( Turn Ended ( Has Secret ( ) ) , Action Tag ( Give ( Change Health ( 2 ) ) , Self Selector ( ) ) ) ] )
class Eviscerate ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Eviscerate " , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# if player . cards_played > 0 : #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 4 ) , self ) #NEWLINE# #INDENT# #INDENT# else : #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 2 ) , self )
class Explosive Shot ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Explosive Shot " , 5 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# index = self . target . index #NEWLINE# #INDENT# #INDENT# if self . target . index < len ( self . target . player . minions ) - 1 : #NEWLINE# #INDENT# #INDENT# #INDENT# minion = self . target . player . minions [ index + 1 ] #NEWLINE# #INDENT# #INDENT# #INDENT# minion . damage ( player . effective_spell_damage ( 2 ) , self ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 5 ) , self ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# if self . target . index > 0 : #NEWLINE# #INDENT# #INDENT# #INDENT# minion = self . target . player . minions [ index - 1 ] #NEWLINE# #INDENT# #INDENT# #INDENT# minion . damage ( player . effective_spell_damage ( 2 ) , self )
class Faceless Manipulator ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Faceless Manipulator " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , battlecry = Battlecry ( Replace ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 3 )
class Faerie Dragon ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Faerie Dragon " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 2 , spell_targetable = False )
class Far Sight ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Far Sight " , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# def reduce_cost ( card ) : #NEWLINE# #INDENT# #INDENT# #INDENT# card . add_buff ( Buff ( Mana Change ( - 3 ) ) ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# player . bind_once ( " card_drawn " , reduce_cost ) #NEWLINE# #INDENT# #INDENT# player . draw ( )
class Felguard ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Felguard " , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Destroy Mana Crystal ( ) , Player Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 5 , taunt = True )
class Fen Creeper ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Fen Creeper " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 6 , taunt = True )
class Feral Spirit ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Feral Spirit " , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , overload = 2 ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# for i in range ( 0 , 2 ) : #NEWLINE# #INDENT# #INDENT# #INDENT# spirit_wolf = hearthbreaker . cards . minions . shaman . Spirit Wolf ( ) #NEWLINE# #INDENT# #INDENT# #INDENT# spirit_wolf . summon ( player , game , len ( player . minions ) ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def can_use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7
class Finkle Einhorn ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Finkle Einhorn " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , False ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 3 )
class Flame Imp ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Flame Imp " , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 3 ) , Hero Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 2 )
class Flesheating Ghoul ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Flesheating Ghoul " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 3 , effects = [ Effect ( Minion Died ( player = Both Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )
class Force Of Nature ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Force of Nature " , 6 , CHARACTER_CLASS . DRUID , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# from hearthbreaker . cards . minions . druid import Charge Treant #NEWLINE# #INDENT# #INDENT# for i in [ 0 , 1 , 2 ] : #NEWLINE# #INDENT# #INDENT# #INDENT# treant_card = Charge Treant ( ) #NEWLINE# #INDENT# #INDENT# #INDENT# treant_card . summon ( player , game , len ( player . minions ) ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def can_use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7
class Forked Lightning ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Forked Lightning " , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 2 ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# minions = copy . copy ( game . other_player . minions ) #NEWLINE# #INDENT# #INDENT# for i in range ( 0 , 2 ) : #NEWLINE# #INDENT# #INDENT# #INDENT# minion = game . random_choice ( minions ) #NEWLINE# #INDENT# #INDENT# #INDENT# minions . remove ( minion ) #NEWLINE# #INDENT# #INDENT# #INDENT# minion . damage ( player . effective_spell_damage ( 3 ) , self ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def can_use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) >= 2
class Freezing Trap ( Secret Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Freezing Trap " , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def activate ( self , player ) : #NEWLINE# #INDENT# #INDENT# player . game . current_player . bind ( " character_attack " , self . _reveal ) #NEWLINE# #NEWLINE# #INDENT# def deactivate ( self , player ) : #NEWLINE# #INDENT# #INDENT# player . game . current_player . unbind ( " character_attack " , self . _reveal ) #NEWLINE# #NEWLINE# #INDENT# def _reveal ( self , attacker , target ) : #NEWLINE# #INDENT# #INDENT# if isinstance ( attacker , Minion ) and not attacker . removed : #NEWLINE# #INDENT# #INDENT# #INDENT# attacker . bounce ( ) #NEWLINE# #INDENT# #INDENT# #INDENT# attacker . card . add_buff ( Buff ( Mana Change ( 2 ) ) ) #NEWLINE# #INDENT# #INDENT# #INDENT# super ( ) . reveal ( )
class Frost Elemental ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Frost Elemental " , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Frozen ( ) ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 5 )
class Frothing Berserker ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Frothing Berserker " , 3 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 4 , effects = [ Effect ( Character Damaged ( player = Both Player ( ) , condition = Is Minion ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ] )
class Gadgetzan Auctioneer ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Gadgetzan Auctioneer " , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 4 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )
class Gladiators Longbow ( Weapon Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Gladiator's Longbow " , 7 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# #INDENT# def create_weapon ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Weapon ( 5 , 2 , effects = [ Effect ( Character Attack ( Is Hero ( ) ) , Action Tag ( Give ( Buff Until ( Immune ( ) , Attack Completed ( ) ) ) , Hero Selector ( ) ) ) ] )
class Grommash Hellscream ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Grommash Hellscream " , 8 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 9 , charge = True , enrage = [ Aura ( Change Attack ( 6 ) , Self Selector ( ) ) ] )
class Gruul ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Gruul " , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 7 , 7 , effects = [ Effect ( Turn Ended ( player = Both Player ( ) ) , Action Tag ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) ) ) ] )
class Harrison Jones ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Harrison Jones " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = ( Battlecry ( Draw ( Attribute ( " durability " , Weapon Selector ( Enemy Player ( ) ) ) ) , Player Selector ( ) ) , Battlecry ( Destroy ( ) , Weapon Selector ( Enemy Player ( ) ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 4 )
class Harvest Golem ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Harvest Golem " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . MECH ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 3 , deathrattle = Deathrattle ( Summon ( Damaged Golem ( ) ) , Player Selector ( ) ) )
class Headcrack ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Headcrack " , 3 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# game . other_player . hero . damage ( player . effective_spell_damage ( 2 ) , self ) #NEWLINE# #INDENT# #INDENT# if player . cards_played > 0 : #NEWLINE# #INDENT# #INDENT# #INDENT# player . add_effect ( Effect ( Turn Ended ( ) , Action Tag ( Add Card ( self ) , Player Selector ( ) ) ) )
class Heavy Axe ( Weapon Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Heavy Axe " , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , False ) #NEWLINE# #NEWLINE# #INDENT# def create_weapon ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Weapon ( 1 , 3 )
class Hogger ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Hogger " , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 4 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Summon ( Gnoll ( ) ) , Player Selector ( ) ) ) ] )
class Holy Fire ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Holy Fire " , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 5 ) , self ) #NEWLINE# #INDENT# #INDENT# player . hero . heal ( player . effective_heal_power ( 5 ) , self )
class Hungry Crab ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Hungry Crab " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . BEAST , battlecry = ( Battlecry ( Kill ( ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) , Battlecry ( Give ( [ Buff ( Change Attack ( 2 ) ) , Buff ( Change Health ( 2 ) ) ] ) , Self Selector ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 2 )
class Hyena ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Hyena " , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , False , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 )
class Ice Barrier ( Secret Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ice Barrier " , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def _reveal ( self , attacker , target ) : #NEWLINE# #INDENT# #INDENT# if target is self . player . hero and not attacker . removed : #NEWLINE# #INDENT# #INDENT# #INDENT# attacker . player . game . other_player . hero . armor += 8 #NEWLINE# #INDENT# #INDENT# #INDENT# super ( ) . reveal ( ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def activate ( self , player ) : #NEWLINE# #INDENT# #INDENT# player . opponent . bind ( " character_attack " , self . _reveal ) #NEWLINE# #NEWLINE# #INDENT# def deactivate ( self , player ) : #NEWLINE# #INDENT# #INDENT# player . opponent . unbind ( " character_attack " , self . _reveal )
class Ice Block ( Secret Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ice Block " , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC ) #NEWLINE# #INDENT# #INDENT# self . player = None #NEWLINE# #NEWLINE# #INDENT# def _reveal ( self , character , attacker , amount ) : #NEWLINE# #INDENT# #INDENT# if character . is_hero ( ) : #NEWLINE# #INDENT# #INDENT# #INDENT# if character . health - amount <= 0 : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# character . add_buff ( Buff Until ( Immune ( ) , Turn Ended ( player = Current Player ( ) ) ) ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# super ( ) . reveal ( ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# def activate ( self , player ) : #NEWLINE# #INDENT# #INDENT# player . bind ( " pre_damage " , self . _reveal ) #NEWLINE# #NEWLINE# #INDENT# def deactivate ( self , player ) : #NEWLINE# #INDENT# #INDENT# player . unbind ( " pre_damage " , self . _reveal )
class Ice Lance ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ice Lance " , 1 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# if self . target . frozen : #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . damage ( 4 , self ) #NEWLINE# #INDENT# #INDENT# else : #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . add_buff ( Buff ( Frozen ( ) ) )
class Illidan Stormrage ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Illidan Stormrage " , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DEMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 7 , 5 , effects = [ Effect ( Card Played ( ) , Action Tag ( Summon ( Flame Of Azzinoth ( ) ) , Player Selector ( ) ) ) ] )
class Imp ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Imp " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , False , minion_type = MINION_TYPE . DEMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 )
class Imp Master ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Imp Master " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 5 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Damage ( 1 ) , Self Selector ( ) ) ) , Effect ( Turn Ended ( ) , Action Tag ( Summon ( Imp ( ) ) , Player Selector ( ) ) ) ] )
class Inner Fire ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Inner Fire " , 1 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# delta = self . target . health - self . target . calculate_attack ( ) #NEWLINE# #INDENT# #INDENT# self . target . change_attack ( delta )
class Inner Rage ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Inner Rage " , 0 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . damage ( 1 , self ) #NEWLINE# #INDENT# #INDENT# self . target . change_attack ( 2 )
class Ironbeak Owl ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ironbeak Owl " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Silence ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 1 )
class Jungle Panther ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Jungle Panther " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 2 , stealth = True )
class Keeper Of The Grove ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Keeper of the Grove " , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , choices = [ #NEWLINE# #INDENT# #INDENT# Choice ( Moonfire ( ) , Damage ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) , #NEWLINE# #INDENT# #INDENT# Choice ( Dispel ( ) , Silence ( ) , Minion Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) #NEWLINE# #INDENT# #INDENT# ] ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 4 )
class Kidnapper ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Kidnapper " , 6 , CHARACTER_CLASS . ROGUE , CARD_RARITY . EPIC , combo = Battlecry ( Bounce ( ) , Minion Selector ( picker = User Picker ( ) , players = Both Player ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 3 )
class King Krush ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " King Krush " , 9 , CHARACTER_CLASS . HUNTER , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 8 , 8 , charge = True )
class King Mukla ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " King Mukla " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Add Card ( Bananas ( ) , 2 ) , Player Selector ( Enemy Player ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 5 )
class Laughing Sister ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Laughing Sister " , 3 , CHARACTER_CLASS . DREAM , CARD_RARITY . COMMON , False ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 5 , spell_targetable = False )
class Lava Burst ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Lava Burst " , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target , overload = 2 ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 5 ) , self )
class Lay On Hands ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Lay on Hands " , 8 , CHARACTER_CLASS . PALADIN , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . heal ( player . effective_heal_power ( 8 ) , self ) #NEWLINE# #INDENT# #INDENT# player . draw ( ) #NEWLINE# #INDENT# #INDENT# player . draw ( ) #NEWLINE# #INDENT# #INDENT# player . draw ( )
class Leeroy Jenkins ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Leeroy Jenkins " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Summon ( Whelp ( ) , 2 ) , Player Selector ( players = Enemy Player ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 6 , 2 , charge = True )
class Leper Gnome ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Leper Gnome " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 1 , deathrattle = Deathrattle ( Damage ( 2 ) , Hero Selector ( Enemy Player ( ) ) ) )
class Lightning Bolt ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Lightning Bolt " , 1 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target , overload = 1 ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 3 ) , self )
class Lightning Storm ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Lightning Storm " , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , overload = 2 ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# for minion in copy . copy ( game . other_player . minions ) : #NEWLINE# #INDENT# #INDENT# #INDENT# minion . damage ( player . effective_spell_damage ( game . random_amount ( 2 , 3 ) ) , self )
class Lightspawn ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Lightspawn " , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 0 , 5 , buffs = [ Buff ( Attack Equals Health ( ) ) ] )
class Loot Hoarder ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Loot Hoarder " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 1 , deathrattle = Deathrattle ( Draw ( ) , Player Selector ( ) ) )
class Lord Jaraxxus ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Lord Jaraxxus " , 9 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DEMON , battlecry = ( Battlecry ( Replace Hero With Minion ( Jaraxxus ( ) ) , Hero Selector ( ) ) , Battlecry ( Remove ( ) , Self Selector ( ) ) , Battlecry ( Equip ( Blood Fury ( ) ) , Player Selector ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 15 )
class Lord Jaraxxus ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Lord Jaraxxus " , 9 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DEMON , battlecry = ( Battlecry ( Replace Hero With Minion ( Jaraxxus ( ) ) , Hero Selector ( ) ) , Battlecry ( Remove ( ) , Self Selector ( ) ) , Battlecry ( Equip ( Blood Fury ( ) ) , Player Selector ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 15 )
class Lorewalker Cho ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Lorewalker Cho " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 0 , 4 , effects = [ Effect ( Spell Cast ( player = Both Player ( ) ) , Action Tag ( Add Card ( Card Query ( source = CARD_SOURCE . LAST_CARD ) ) , Player Selector ( Other Player ( ) ) ) ) ] )
class Mad Bomber ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mad Bomber " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( players = Both Player ( ) , picker = Random Picker ( 3 ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 2 )
class Malygos ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Malygos " , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 12 , spell_damage = 5 )
class Mana Addict ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mana Addict " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 3 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Give ( Buff Until ( Change Attack ( 2 ) , Turn Ended ( ) ) ) , Self Selector ( ) ) ) ] )
class Mana Tide Totem ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mana Tide Totem " , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , minion_type = MINION_TYPE . TOTEM ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 0 , 3 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Draw ( ) , Player Selector ( ) ) ) ] )
class Mark Of Nature ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mark of Nature " , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# class Mark Of Nature Attack ( Choice Card ) : #NEWLINE# #INDENT# #INDENT# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# super ( ) . __init__ ( " Mark of Nature +4 Attack " , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# target . change_attack ( 4 ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# class Mark Of Nature Health ( Choice Card ) : #NEWLINE# #INDENT# #INDENT# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# super ( ) . __init__ ( " Mark of Nature +4 Health " , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# target . increase_health ( 4 ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# target . taunt = True #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# target = self . target #NEWLINE# #INDENT# #INDENT# option = game . current_player . agent . choose_option ( [ Mark Of Nature Attack ( ) , Mark Of Nature Health ( ) ] , player ) #NEWLINE# #INDENT# #INDENT# option . use ( player , game )
class Mass Dispel ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mass Dispel " , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# for minion in game . other_player . minions : #NEWLINE# #INDENT# #INDENT# #INDENT# minion . silence ( ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# player . draw ( )
class Master Swordsmith ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Master Swordsmith " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 3 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) ) ] )
class Master Of Disguise ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Master of Disguise " , 4 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE , battlecry = Battlecry ( Give ( Stealth ( ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 4 )
class Millhouse Manastorm ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Millhouse Manastorm " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Give Aura ( Aura Until ( Mana Change ( - 100 ) , Card Selector ( condition = Is Spell ( ) ) , Turn Ended ( ) ) ) , Player Selector ( players = Enemy Player ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 4 )
class Mind Control Tech ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mind Control Tech " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , battlecry = Battlecry ( Steal ( ) , Minion Selector ( players = Enemy Player ( ) , condition = None , picker = Random Picker ( ) ) , Opponent Minion Count Is Greater Than ( 3 ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 3 )
class Mindgames ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mindgames " , 4 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# minion_card = game . random_draw ( game . other_player . deck . cards , lambda c : not c . drawn and isinstance ( c , Minion Card ) ) #NEWLINE# #INDENT# #INDENT# if not minion_card : #NEWLINE# #INDENT# #INDENT# #INDENT# minion_card = Shadow Of Nothing ( ) #NEWLINE# #INDENT# #INDENT# else : #NEWLINE# #INDENT# #INDENT# #INDENT# minion_card = copy . copy ( minion_card ) #NEWLINE# #INDENT# #INDENT# minion_card . drawn = True #NEWLINE# #INDENT# #INDENT# minion_card . summon ( player , game , 0 ) #NEWLINE# #NEWLINE# #INDENT# def can_use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# return super ( ) . can_use ( player , game ) and len ( player . minions ) < 7
class Mirror Entity ( Secret Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mirror Entity " , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) #NEWLINE# #INDENT# #INDENT# self . player = None #NEWLINE# #NEWLINE# #INDENT# def _reveal ( self , minion ) : #NEWLINE# #INDENT# #INDENT# if len ( self . player . minions ) < 7 : #NEWLINE# #INDENT# #INDENT# #INDENT# mirror = minion . copy ( self . player ) #NEWLINE# #INDENT# #INDENT# #INDENT# mirror . add_to_board ( len ( self . player . minions ) ) #NEWLINE# #INDENT# #INDENT# #INDENT# minion . player . trigger ( " minion_summoned " , mirror ) #NEWLINE# #INDENT# #INDENT# #INDENT# minion . player . trigger ( " after_added " , mirror ) #NEWLINE# #INDENT# #INDENT# #INDENT# super ( ) . reveal ( ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def activate ( self , player ) : #NEWLINE# #INDENT# #INDENT# player . game . current_player . bind ( " minion_played " , self . _reveal ) #NEWLINE# #INDENT# #INDENT# self . player = player #NEWLINE# #NEWLINE# #INDENT# def deactivate ( self , player ) : #NEWLINE# #INDENT# #INDENT# player . game . current_player . unbind ( " minion_played " , self . _reveal ) #NEWLINE# #INDENT# #INDENT# self . player = None
class Molten Giant ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Molten Giant " , 20 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , buffs = [ Buff ( Mana Change ( Attribute ( " damage " , Hero Selector ( ) ) , - 1 ) ) ] ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 8 , 8 )
class Mortal Strike ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mortal Strike " , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# if player . hero . health <= 12 : #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 6 ) , self ) #NEWLINE# #INDENT# #INDENT# else : #NEWLINE# #INDENT# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 4 ) , self )
class Mountain Giant ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Mountain Giant " , 12 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , buffs = [ Buff ( Mana Change ( Count ( Card Selector ( ) ) , - 1 ) ) ] ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 8 , 8 )
class Murloc Tidecaller ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Murloc Tidecaller " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . MURLOC ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 2 , effects = [ ( Effect ( Minion Summoned ( Is Type ( MINION_TYPE . MURLOC ) , player = Both Player ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) ) ] )
class Murloc Warleader ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Murloc Warleader " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . MURLOC ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 3 , auras = [ Aura ( Change Attack ( 2 ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) , Aura ( Change Health ( 1 ) , Minion Selector ( Is Type ( MINION_TYPE . MURLOC ) , Both Player ( ) ) ) ] )
class Nat Pagle ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Nat Pagle " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 0 , 4 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Draw ( ) , Player Selector ( ) , One In ( 2 ) ) ) ] )
class Naturalize ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Naturalize " , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . die ( self ) #NEWLINE# #INDENT# #INDENT# game . other_player . draw ( ) #NEWLINE# #INDENT# #INDENT# game . other_player . draw ( )
class Nightmare ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Nightmare " , 0 , CHARACTER_CLASS . DREAM , CARD_RARITY . COMMON , False , hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . add_buff ( Buff ( Change Attack ( 5 ) ) ) #NEWLINE# #INDENT# #INDENT# self . target . add_buff ( Buff ( Change Health ( 5 ) ) ) #NEWLINE# #INDENT# #INDENT# self . target . add_effect ( Effect ( Turn Started ( player = Current Player ( ) ) , Action Tag ( Kill ( ) , Self Selector ( ) ) ) )
class Nozdormu ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Nozdormu " , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 8 , 8 )
class Onyxia ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Onyxia " , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Summon ( Whelp ( ) , 6 ) , Player Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 8 , 8 )
class Panther ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Panther " , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , _ ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 2 , MINION_TYPE . BEAST )
class Patient Assassin ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Patient Assassin " , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 , stealth = True , effects = [ Effect ( Did Damage ( ) , Action Tag ( Kill ( ) , Target Selector ( Is Minion ( ) ) ) ) ] )
class Perditions Blade ( Weapon Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Perdition's Blade " , 3 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 1 ) , Character Selector ( None , picker = User Picker ( ) ) ) , combo = Battlecry ( Damage ( 2 ) , Character Selector ( None , picker = User Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_weapon ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Weapon ( 2 , 2 )
class Pint Sized Summoner ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Pint-Sized Summoner " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 , effects = [ Effect ( Turn Started ( ) , Action Tag ( Give Aura ( Aura Until ( Mana Change ( - 1 ) , Card Selector ( condition = Is Minion ( ) ) , Minion Placed ( ) ) ) , Player Selector ( ) ) ) ] )
class Pit Lord ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Pit Lord " , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC , minion_type = MINION_TYPE . DEMON , battlecry = Battlecry ( Damage ( 5 ) , Hero Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 6 )
class Power Overwhelming ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Power Overwhelming " , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . add_effect ( Effect ( Turn Ended ( ) , Action Tag ( Kill ( ) , Self Selector ( ) ) ) ) #NEWLINE# #INDENT# #INDENT# self . target . change_attack ( 4 ) #NEWLINE# #INDENT# #INDENT# self . target . increase_health ( 4 )
class Priestess Of Elune ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Priestess of Elune " , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Heal ( 4 ) , Hero Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 4 )
class Prophet Velen ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Prophet Velen " , 7 , CHARACTER_CLASS . PRIEST , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 7 , 7 , auras = [ Aura ( Multiply Spell Damage ( 2 ) , Player Selector ( ) ) , Aura ( Multiply Heal Amount ( 2 ) , Player Selector ( ) ) ] )
class Pyroblast ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Pyroblast " , 10 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 10 ) , self )
class Questing Adventurer ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Questing Adventurer " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 , effects = [ Effect ( Card Played ( ) , Action Tag ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) ) ) ] )
class Raging Worgen ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Raging Worgen " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 3 , enrage = [ Aura ( Change Attack ( 1 ) , Self Selector ( ) ) , Aura ( Windfury ( ) , Self Selector ( ) ) ] )
class Ragnaros The Firelord ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ragnaros the Firelord " , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 8 , 8 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Damage ( 8 ) , Character Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) ) ] , buffs = [ Buff ( Cant Attack ( ) ) ] )
class Rampage ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Rampage " , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target , filter_func = lambda target : target . health != target . calculate_max_health ( ) and target . spell_targetable ( ) ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . change_attack ( 3 ) #NEWLINE# #INDENT# #INDENT# self . target . increase_health ( 3 )
class Ravenholdt Assassin ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ravenholdt Assassin " , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 7 , 5 , stealth = True )
class SI7Agent ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " SI:7 Agent " , 3 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE , combo = Battlecry ( Damage ( 2 ) , Character Selector ( players = Both Player ( ) , picker = User Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 3 )
class Savagery ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Savagery " , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( player . hero . calculate_attack ( ) ) , self )
class Savannah Highmane ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Savannah Highmane " , 6 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 6 , 5 , deathrattle = Deathrattle ( Summon ( Hyena ( ) , 2 ) , Player Selector ( ) ) )
class Scarlet Crusader ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Scarlet Crusader " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 1 , divine_shield = True )
class Scavenging Hyena ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Scavenging Hyena " , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 , effects = [ Effect ( Minion Died ( Is Type ( MINION_TYPE . BEAST ) ) , Action Tag ( Give ( Change Attack ( 2 ) ) , Self Selector ( ) ) ) , Effect ( Minion Died ( Is Type ( MINION_TYPE . BEAST ) ) , Action Tag ( Give ( Change Health ( 1 ) ) , Self Selector ( ) ) ) ] )
class Sea Giant ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Sea Giant " , 10 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , buffs = [ Buff ( Mana Change ( Count ( Minion Selector ( None , Both Player ( ) ) ) , - 1 ) ) ] ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 8 , 8 )
class Secretkeeper ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Secretkeeper " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 2 , effects = [ Effect ( Spell Cast ( Is Secret ( ) , Both Player ( ) ) , Action Tag ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) ) ) ] )
class Sense Demons ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Sense Demons " , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# for i in range ( 0 , 2 ) : #NEWLINE# #INDENT# #INDENT# #INDENT# demon_card = game . random_draw ( game . current_player . deck . cards , lambda c : not c . drawn and c . is_minion ( ) and c . minion_type == MINION_TYPE . DEMON ) #NEWLINE# #INDENT# #INDENT# #INDENT# if demon_card : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# demon_card . drawn = True #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# player . deck . left -= 1 #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# if len ( player . hand ) < 10 : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# player . hand . append ( demon_card ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# demon_card . player = player #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# self . trigger ( " card_drawn " , demon_card ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# else : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# player . trigger ( " card_destroyed " , demon_card ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# else : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# if len ( player . hand ) < 10 : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# player . hand . append ( hearthbreaker . cards . minions . warlock . Worthless Imp ( ) ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# player . hand [ - 1 ] . player = player #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# self . trigger ( " card_drawn " , hearthbreaker . cards . minions . warlock . Worthless Imp ( ) )
class Shadowflame ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Shadowflame " , 4 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# shadowflame_damage = self . target . calculate_attack ( ) #NEWLINE# #INDENT# #INDENT# self . target . die ( self ) #NEWLINE# #INDENT# #INDENT# for minion in game . other_player . minions : #NEWLINE# #INDENT# #INDENT# #INDENT# minion . damage ( player . effective_spell_damage ( shadowflame_damage ) , self )
class Shadowform ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Shadowform " , 3 , CHARACTER_CLASS . PRIEST , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# if type ( player . hero . power ) is not hearthbreaker . powers . Mind Shatter and type ( player . hero . power ) is not hearthbreaker . powers . Mind Spike : #NEWLINE# #INDENT# #INDENT# #INDENT# player . hero . power = hearthbreaker . powers . Mind Spike ( ) #NEWLINE# #INDENT# #INDENT# #INDENT# player . hero . power . hero = player . hero #NEWLINE# #INDENT# #INDENT# elif type ( player . hero . power ) is hearthbreaker . powers . Mind Spike : #NEWLINE# #INDENT# #INDENT# #INDENT# player . hero . power = hearthbreaker . powers . Mind Shatter ( ) #NEWLINE# #INDENT# #INDENT# #INDENT# player . hero . power . hero = player . hero
class Shadowstep ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Shadowstep " , 0 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_friendly_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . bounce ( ) #NEWLINE# #INDENT# #INDENT# self . target . card . add_buff ( Buff ( Mana Change ( - 3 ) ) )
class Shield Slam ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Shield Slam " , 1 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . EPIC , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( player . hero . armor ) , self )
class Shieldbearer ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Shieldbearer " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 0 , 4 , taunt = True )
class Silence ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Silence " , 0 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# self . target . silence ( )
class Silver Hand Knight ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Silver Hand Knight " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Summon ( Squire ( ) ) , Player Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 4 )
class Silvermoon Guardian ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Silvermoon Guardian " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 3 , divine_shield = True )
class Snake ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Snake " , 0 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 )
class Snake Trap ( Secret Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Snake Trap " , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# #INDENT# def activate ( self , player ) : #NEWLINE# #INDENT# #INDENT# player . game . current_player . bind ( " character_attack " , self . _reveal ) #NEWLINE# #NEWLINE# #INDENT# def deactivate ( self , player ) : #NEWLINE# #INDENT# #INDENT# player . game . current_player . unbind ( " character_attack " , self . _reveal ) #NEWLINE# #NEWLINE# #INDENT# def _reveal ( self , attacker , target ) : #NEWLINE# #INDENT# #INDENT# if isinstance ( target , Minion ) : #NEWLINE# #INDENT# #INDENT# #INDENT# snake = hearthbreaker . cards . minions . hunter . Snake ( ) #NEWLINE# #INDENT# #INDENT# #INDENT# player = target . player . game . other_player #NEWLINE# #INDENT# #INDENT# #INDENT# for i in range ( 0 , 3 ) : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# snake . summon ( player , player . game , len ( player . minions ) ) #NEWLINE# #INDENT# #INDENT# #INDENT# super ( ) . reveal ( )
class Snipe ( Secret Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Snipe " , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def activate ( self , player ) : #NEWLINE# #INDENT# #INDENT# player . game . current_player . bind ( " minion_played " , self . _reveal ) #NEWLINE# #NEWLINE# #INDENT# def deactivate ( self , player ) : #NEWLINE# #INDENT# #INDENT# player . game . current_player . unbind ( " minion_played " , self . _reveal ) #NEWLINE# #NEWLINE# #INDENT# def _reveal ( self , minion ) : #NEWLINE# #INDENT# #INDENT# minion . damage ( 4 , None ) #NEWLINE# #INDENT# #INDENT# super ( ) . reveal ( )
class Sorcerers Apprentice ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Sorcerer's Apprentice " , 2 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 2 , auras = [ Aura ( Mana Change ( - 1 ) , Card Selector ( condition = Is Spell ( ) ) ) ] )
class Soul Of The Forest ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Soul of the Forest " , 4 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# from hearthbreaker . cards . minions . druid import Treant #NEWLINE# #INDENT# #INDENT# for minion in player . minions : #NEWLINE# #INDENT# #INDENT# #INDENT# minion . deathrattle . append ( Deathrattle ( Summon ( Treant ( ) ) , Player Selector ( ) ) )
class Southsea Captain ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Southsea Captain " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . EPIC , minion_type = MINION_TYPE . PIRATE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 3 , auras = [ Aura ( Change Attack ( 1 ) , Minion Selector ( Is Type ( MINION_TYPE . PIRATE ) ) ) , Aura ( Change Health ( 1 ) , Minion Selector ( Is Type ( MINION_TYPE . PIRATE ) ) ) ] )
class Southsea Deckhand ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Southsea Deckhand " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . PIRATE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 1 , buffs = [ Buff ( Charge ( ) , Greater Than ( Count ( Weapon Selector ( ) ) , value = 0 ) ) ] )
class Spellbender ( Secret Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Spellbender " , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . EPIC ) #NEWLINE# #INDENT# #INDENT# self . player = None #NEWLINE# #NEWLINE# #INDENT# def _reveal ( self , card , index ) : #NEWLINE# #INDENT# #INDENT# if card . is_spell ( ) and len ( self . player . minions ) < 7 and card . target and card . target . is_minion ( ) : #NEWLINE# #INDENT# #INDENT# #INDENT# Spellbender Minion ( ) . summon ( self . player , self . player . game , len ( self . player . minions ) ) #NEWLINE# #INDENT# #INDENT# #INDENT# card . target = self . player . minions [ - 1 ] #NEWLINE# #INDENT# #INDENT# #INDENT# super ( ) . reveal ( ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def activate ( self , player ) : #NEWLINE# #INDENT# #INDENT# player . game . current_player . bind ( " card_played " , self . _reveal ) #NEWLINE# #INDENT# #INDENT# self . player = player #NEWLINE# #NEWLINE# #INDENT# def deactivate ( self , player ) : #NEWLINE# #INDENT# #INDENT# player . game . current_player . unbind ( " card_played " , self . _reveal ) #NEWLINE# #INDENT# #INDENT# self . player = None
class Spirit Wolf ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Spirit Wolf " , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , False ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , p ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 3 , taunt = True )
class Spiteful Smith ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Spiteful Smith " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 6 , enrage = [ Aura ( Change Attack ( 2 ) , Weapon Selector ( ) ) ] )
class Squire ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Squire " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 )
class Squirrel ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Squirrel " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 )
class Stampeding Kodo ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Stampeding Kodo " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Attack Less Than Or Equal To ( 2 ) , Enemy Player ( ) , Random Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 5 )
class Starfall ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Starfall " , 5 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def can_use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) > 0 #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# option = player . agent . choose_option ( [ Damage All ( ) , Damage One ( ) ] , player ) #NEWLINE# #INDENT# #INDENT# option . use ( player , game )
class Stormforged Axe ( Weapon Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Stormforged Axe " , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 1 ) #NEWLINE# #NEWLINE# #INDENT# def create_weapon ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Weapon ( 2 , 3 )
class Stranglethorn Tiger ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Stranglethorn Tiger " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 5 , stealth = True )
class Sunwalker ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Sunwalker " , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 5 , divine_shield = True , taunt = True )
class Sword Of Justice ( Weapon Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Sword of Justice " , 3 , CHARACTER_CLASS . PALADIN , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# #INDENT# def create_weapon ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Weapon ( 1 , 5 , effects = [ Effect ( Minion Summoned ( ) , Action Tag ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Target Selector ( ) ) ) , Effect ( Minion Summoned ( ) , Action Tag ( Decrease Durability ( ) , Weapon Selector ( ) ) ) ] )
class Sylvanas Windrunner ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Sylvanas Windrunner " , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 5 , deathrattle = Deathrattle ( Steal ( ) , Minion Selector ( players = Enemy Player ( ) , picker = Random Picker ( ) ) ) )
class Tauren Warrior ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Tauren Warrior " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 3 , taunt = True , enrage = [ Aura ( Change Attack ( 3 ) , Self Selector ( ) ) ] )
class Temple Enforcer ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Temple Enforcer " , 6 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON , battlecry = Battlecry ( Give ( Change Health ( 3 ) ) , Minion Selector ( picker = User Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 6 , 6 )
class The Beast ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " The Beast " , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 9 , 7 , deathrattle = Deathrattle ( Summon ( Finkle Einhorn ( ) ) , Player Selector ( Enemy Player ( ) ) ) )
class The Black Knight ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " The Black Knight " , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = Battlecry ( Kill ( ) , Minion Selector ( Has Status ( " taunt " ) , Enemy Player ( ) , User Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 5 )
class Thoughtsteal ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Thoughtsteal " , 3 , CHARACTER_CLASS . PRIEST , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# for i in range ( 0 , 2 ) : #NEWLINE# #INDENT# #INDENT# #INDENT# new_card = game . random_draw ( game . other_player . deck . cards , lambda c : not c . drawn ) #NEWLINE# #INDENT# #INDENT# #INDENT# if new_card : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# new_card = copy . copy ( new_card ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# new_card . drawn = True #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# if len ( player . hand ) < 10 : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# player . hand . append ( new_card ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# new_card . player = player #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# self . trigger ( " card_drawn " , new_card ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# else : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# player . trigger ( " card_destroyed " , new_card )
class Tirion Fordring ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Tirion Fordring " , 8 , CHARACTER_CLASS . PALADIN , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 6 , 6 , divine_shield = True , taunt = True , deathrattle = Deathrattle ( Equip ( Ashbringer ( ) ) , Player Selector ( ) ) )
class Treant ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Treant " , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , _ ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 )
class Treant ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Treant " , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , _ ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 )
class Treant ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Treant " , 1 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , _ ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 )
class Twilight Drake ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Twilight Drake " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Give ( Buff ( Change Health ( Count ( Card Selector ( ) ) ) ) ) , Self Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 1 )
class Twisting Nether ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Twisting Nether " , 8 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . EPIC ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# targets = copy . copy ( game . other_player . minions ) #NEWLINE# #INDENT# #INDENT# targets . extend ( game . current_player . minions ) #NEWLINE# #INDENT# #INDENT# for minion in targets : #NEWLINE# #INDENT# #INDENT# #INDENT# minion . die ( self )
class Unbound Elemental ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Unbound Elemental " , 3 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 4 , effects = [ Effect ( Card Played ( Has Overload ( ) ) , Action Tag ( Give ( Change Attack ( 1 ) ) , Self Selector ( ) ) ) , Effect ( Card Played ( Has Overload ( ) ) , Action Tag ( Give ( Change Health ( 1 ) ) , Self Selector ( ) ) ) ] )
class Unleash The Hounds ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Unleash the Hounds " , 3 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# for target in hearthbreaker . targeting . find_enemy_minion_spell_target ( player . game , lambda x : True ) : #NEWLINE# #INDENT# #INDENT# #INDENT# hound = hearthbreaker . cards . minions . hunter . Hound ( ) #NEWLINE# #INDENT# #INDENT# #INDENT# hound . summon ( player , game , len ( player . minions ) ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def can_use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# return super ( ) . can_use ( player , game ) and len ( game . other_player . minions ) >= 1 and len ( player . minions ) < 7
class Venture Co Mercenary ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Venture Co. Mercenary " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 7 , 6 , auras = [ Aura ( Mana Change ( 3 ) , Card Selector ( condition = Is Minion ( ) ) ) ] )
class Violet Apprentice ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Violet Apprentice " , 0 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 )
class Violet Teacher ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Violet Teacher " , 4 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 5 , effects = [ Effect ( Spell Cast ( ) , Action Tag ( Summon ( Violet Apprentice ( ) ) , Player Selector ( ) ) ) ] )
class Void Terror ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Void Terror " , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE , minion_type = MINION_TYPE . DEMON , battlecry = ( Battlecry ( Give ( [ Buff ( Change Health ( Attribute ( " health " , Minion Selector ( Adjacent ( ) ) ) ) ) , Buff ( Change Attack ( Attribute ( " attack " , Minion Selector ( Adjacent ( ) ) ) ) ) ] ) , Self Selector ( ) ) , Battlecry ( Kill ( ) , Minion Selector ( Adjacent ( ) ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 3 )
class Whelp ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Whelp " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 )
class Whelp ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Whelp " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 )
class Wild Pyromancer ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Wild Pyromancer " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 2 , effects = [ Effect ( Card Used ( Is Spell ( ) ) , Action Tag ( Damage ( 1 ) , Minion Selector ( condition = None , players = Both Player ( ) ) ) ) ] )
class Windfury Harpy ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Windfury Harpy " , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 5 , windfury = True )
class Worthless Imp ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Worthless Imp " , 1 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , False , MINION_TYPE . DEMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , p ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 )
class Wrath ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Wrath " , 2 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# class Wrath One ( Choice Card ) : #NEWLINE# #INDENT# #INDENT# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# super ( ) . __init__ ( " Wrath 1 Damage " , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# target . damage ( player . effective_spell_damage ( 1 ) , wrath ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# player . draw ( ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# class Wrath Three ( Choice Card ) : #NEWLINE# #INDENT# #INDENT# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# super ( ) . __init__ ( " Wrath 3 Damage " , 0 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , False , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# target . damage ( player . effective_spell_damage ( 3 ) , wrath ) #NEWLINE# #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# option = game . current_player . agent . choose_option ( [ Wrath One ( ) , Wrath Three ( ) ] , player ) #NEWLINE# #INDENT# #INDENT# target = self . target #NEWLINE# #INDENT# #INDENT# wrath = self #NEWLINE# #INDENT# #INDENT# option . use ( player , game )
class Young Dragonhawk ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Young Dragonhawk " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . BEAST ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 , windfury = True )
class Young Priestess ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Young Priestess " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 1 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Give ( Change Health ( 1 ) ) , Minion Selector ( picker = Random Picker ( ) ) ) ) ] )
class Youthful Brewmaster ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Youthful Brewmaster " , 2 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = Battlecry ( Bounce ( ) , Minion Selector ( picker = User Picker ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 2 )
class Ysera ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ysera " , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# dream_card_list = [ Emerald Drake ( ) , Laughing Sister ( ) , Nightmare ( ) , Ysera Awakens ( ) , Dream ( ) ] #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 12 , effects = [ Effect ( Turn Ended ( ) , Action Tag ( Add Card ( Card Query ( source = CARD_SOURCE . LIST , source_list = dream_card_list ) ) , Player Selector ( ) ) ) ] )
class Ysera Awakens ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Ysera Awakens " , 2 , CHARACTER_CLASS . DREAM , CARD_RARITY . COMMON , False ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# targets = copy . copy ( player . game . other_player . minions ) #NEWLINE# #INDENT# #INDENT# targets . extend ( player . game . current_player . minions ) #NEWLINE# #INDENT# #INDENT# targets . append ( player . game . other_player . hero ) #NEWLINE# #INDENT# #INDENT# targets . append ( player . game . current_player . hero ) #NEWLINE# #INDENT# #INDENT# targets = filter ( lambda m : not m . is_minion ( ) or m . card . name != " Ysera " , targets ) #NEWLINE# #INDENT# #INDENT# for minion in targets : #NEWLINE# #INDENT# #INDENT# #INDENT# minion . damage ( player . effective_spell_damage ( 5 ) , self )
class Axe Flinger ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Axe Flinger " , 4 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . COMMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 5 , effects = [ Effect ( Damaged ( ) , Action Tag ( Damage ( 2 ) , Hero Selector ( Enemy Player ( ) ) ) ) ] )
class Blackwing Technician ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Blackwing Technician " , 3 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , battlecry = ( Battlecry ( Give ( [ Buff ( Change Attack ( 1 ) ) , Buff ( Change Health ( 1 ) ) ] ) , Self Selector ( ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 4 )
class Chromaggus ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Chromaggus " , 8 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 6 , 8 , effects = [ Effect ( Card Drawn ( ) , [ Action Tag ( Add Card ( Card Query ( source = CARD_SOURCE . LAST_DRAWN , make_copy = True ) ) , Player Selector ( ) ) ] ) ] )
class Core Rager ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Core Rager " , 4 , CHARACTER_CLASS . HUNTER , CARD_RARITY . RARE , minion_type = MINION_TYPE . BEAST , battlecry = ( Battlecry ( Give ( [ Buff ( Change Attack ( 3 ) ) , Buff ( Change Health ( 3 ) ) ] ) , Self Selector ( ) , Not ( Greater Than ( Count ( Card Selector ( ) ) , value = 0 ) ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 4 )
class Dark Iron Skulker ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Dark Iron Skulker " , 5 , CHARACTER_CLASS . ROGUE , CARD_RARITY . RARE , battlecry = Battlecry ( Damage ( 2 ) , Minion Selector ( condition = Not ( Is Damaged ( ) ) , players = Enemy Player ( ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 4 , 3 )
class Demonwrath ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Demonwrath " , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# targets = copy . copy ( game . other_player . minions ) #NEWLINE# #INDENT# #INDENT# targets . extend ( game . current_player . minions ) #NEWLINE# #INDENT# #INDENT# for minion in targets : #NEWLINE# #INDENT# #INDENT# #INDENT# if minion . card . minion_type is not MINION_TYPE . DEMON : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# minion . damage ( player . effective_spell_damage ( 2 ) , self )
class Dragon Consort ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Dragon Consort " , 5 , CHARACTER_CLASS . PALADIN , CARD_RARITY . RARE , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Give Aura ( [ Aura Until ( Mana Change ( - 3 ) , Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) , Card Played ( Is Type ( MINION_TYPE . DRAGON ) ) , False ) ] ) , Player Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 5 )
class Dragon Egg ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Dragon Egg " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 0 , 2 , effects = [ Effect ( Damaged ( ) , Action Tag ( Summon ( Black Whelp ( ) ) , Player Selector ( ) ) ) ] )
class Dragons Breath ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Dragon's Breath " , 5 , CHARACTER_CLASS . MAGE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target , buffs = [ Buff ( Mana Change ( Count ( Dead Minion Selector ( players = Both Player ( ) ) ) , - 1 ) ) ] ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . damage ( player . effective_spell_damage ( 4 ) , self )
class Druid Of The Flame ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Druid of the Flame " , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ #NEWLINE# #INDENT# #INDENT# Choice ( Flame Cat Form ( ) , Transform ( Flame Cat ( ) ) , Self Selector ( ) ) , #NEWLINE# #INDENT# #INDENT# Choice ( Flame Bird Form ( ) , Transform ( Flame Bird ( ) ) , Self Selector ( ) ) #NEWLINE# #INDENT# #INDENT# ] ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 )
class Druid Of The Flame ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Druid of the Flame " , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ #NEWLINE# #INDENT# #INDENT# Choice ( Flame Cat Form ( ) , Transform ( Flame Cat ( ) ) , Self Selector ( ) ) , #NEWLINE# #INDENT# #INDENT# Choice ( Flame Bird Form ( ) , Transform ( Flame Bird ( ) ) , Self Selector ( ) ) #NEWLINE# #INDENT# #INDENT# ] ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 )
class Druid Of The Flame ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Druid of the Flame " , 3 , CHARACTER_CLASS . DRUID , CARD_RARITY . COMMON , choices = [ #NEWLINE# #INDENT# #INDENT# Choice ( Flame Cat Form ( ) , Transform ( Flame Cat ( ) ) , Self Selector ( ) ) , #NEWLINE# #INDENT# #INDENT# Choice ( Flame Bird Form ( ) , Transform ( Flame Bird ( ) ) , Self Selector ( ) ) #NEWLINE# #INDENT# #INDENT# ] ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 2 )
class Emperor Thaurissan ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Emperor Thaurissan " , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 5 , 5 , effects = [ Effect ( Turn Ended ( ) , [ Action Tag ( Give ( Buff ( Mana Change ( - 1 ) ) ) , Card Selector ( ) ) ] ) ] )
class Fireguard Destroyer ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Fireguard Destroyer " , 4 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . COMMON , overload = 1 , battlecry = Battlecry ( Give ( Buff ( Change Attack ( Random Amount ( 1 , 4 ) ) ) ) , Self Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 6 )
class Flamewaker ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Flamewaker " , 3 , CHARACTER_CLASS . MAGE , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 4 , effects = [ Effect ( Card Used ( Is Spell ( ) ) , Action Tag ( Damage ( 1 ) , Character Selector ( None , Enemy Player ( ) , Random Picker ( 2 ) ) ) ) ] )
class Gang Up ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Gang Up " , 2 , CHARACTER_CLASS . ROGUE , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_minion_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# for i in range ( 3 ) : #NEWLINE# #INDENT# #INDENT# #INDENT# player . put_back ( type ( self . target . card ) ( ) )
class Grim Patron ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Grim Patron " , 5 , CHARACTER_CLASS . ALL , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 3 , 3 , effects = [ Effect ( Damaged ( ) , [ Action Tag ( Summon ( Grim Patron ( ) ) , Player Selector ( ) , Greater Than ( Attribute ( " health " , Self Selector ( ) ) , value = 0 ) ) ] ) ] )
class Imp Gang Boss ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Imp Gang Boss " , 3 , CHARACTER_CLASS . WARLOCK , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DEMON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 2 , 4 , effects = [ Effect ( Damaged ( ) , Action Tag ( Summon ( Imp ( ) ) , Player Selector ( ) ) ) ] )
class Lava Shock ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Lava Shock " , 2 , CHARACTER_CLASS . SHAMAN , CARD_RARITY . RARE , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . damage ( 2 , self ) #NEWLINE# #INDENT# #INDENT# player . upcoming_overload = 0 #NEWLINE# #INDENT# #INDENT# player . mana += player . current_overload #NEWLINE# #INDENT# #INDENT# player . current_overload = 0
class Majordomo Executus ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Majordomo Executus " , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 9 , 7 , deathrattle = [ Deathrattle ( Transform ( Ragnaros ( ) ) , Hero Selector ( ) ) ] )
class Nefarian ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Nefarian " , 9 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , minion_type = MINION_TYPE . DRAGON , battlecry = Battlecry ( Add Card ( Card Query ( conditions = [ Is Class ( Attribute ( " character_class " , Hero Selector ( Enemy Player ( ) ) ) ) , Is Spell ( ) ] ) , 2 ) , Player Selector ( ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 8 , 8 )
class Quick Shot ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Quick Shot " , 2 , CHARACTER_CLASS . HUNTER , CARD_RARITY . COMMON , target_func = hearthbreaker . targeting . find_spell_target ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# self . target . damage ( 3 , self ) #NEWLINE# #INDENT# #INDENT# if len ( player . hand ) == 0 : #NEWLINE# #INDENT# #INDENT# #INDENT# player . draw ( )
class Rend Blackhand ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Rend Blackhand " , 7 , CHARACTER_CLASS . ALL , CARD_RARITY . LEGENDARY , battlecry = ( Battlecry ( Kill ( ) , Minion Selector ( And ( Minion Is Not Target ( ) , Is Rarity ( CARD_RARITY . LEGENDARY ) ) , Both Player ( ) , User Picker ( ) ) , Greater Than ( Count ( Card Selector ( condition = Is Type ( MINION_TYPE . DRAGON ) ) ) , value = 0 ) ) ) ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 8 , 4 )
class Resurrect ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Resurrect " , 2 , CHARACTER_CLASS . PRIEST , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# from hearthbreaker . engine import card_lookup #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# if len ( player . graveyard ) > 0 and len ( player . minions ) < 7 : #NEWLINE# #INDENT# #INDENT# #INDENT# card_name = game . random_choice ( player . graveyard ) #NEWLINE# #INDENT# #INDENT# #INDENT# card = card_lookup ( card_name ) #NEWLINE# #INDENT# #INDENT# #INDENT# card . summon ( player , game , len ( player . minions ) )
class Revenge ( Spell Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Revenge " , 2 , CHARACTER_CLASS . WARRIOR , CARD_RARITY . RARE ) #NEWLINE# #NEWLINE# #INDENT# def use ( self , player , game ) : #NEWLINE# #INDENT# #INDENT# super ( ) . use ( player , game ) #NEWLINE# #INDENT# #INDENT# targets = copy . copy ( game . other_player . minions ) #NEWLINE# #INDENT# #INDENT# targets . extend ( game . current_player . minions ) #NEWLINE# #INDENT# #INDENT# if player . hero . health <= 12 : #NEWLINE# #INDENT# #INDENT# #INDENT# for minion in targets : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# minion . damage ( player . effective_spell_damage ( 3 ) , self ) #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# #INDENT# else : #NEWLINE# #INDENT# #INDENT# #INDENT# for minion in targets : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# minion . damage ( player . effective_spell_damage ( 1 ) , self )
class Volcanic Drake ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Volcanic Drake " , 6 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , minion_type = MINION_TYPE . DRAGON , buffs = [ Buff ( Mana Change ( Count ( Dead Minion Selector ( players = Both Player ( ) ) ) , - 1 ) ) ] ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 6 , 4 )
class Volcanic Lumberer ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Volcanic Lumberer " , 9 , CHARACTER_CLASS . DRUID , CARD_RARITY . RARE , buffs = [ Buff ( Mana Change ( Count ( Dead Minion Selector ( players = Both Player ( ) ) ) , - 1 ) ) ] ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 7 , 8 , taunt = True )
class Whelp ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Whelp " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 )
class Whelp ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Whelp " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 )
class Whelp ( Minion Card ) : #NEWLINE# #INDENT# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# super ( ) . __init__ ( " Whelp " , 1 , CHARACTER_CLASS . ALL , CARD_RARITY . COMMON , False , minion_type = MINION_TYPE . DRAGON ) #NEWLINE# #NEWLINE# #INDENT# def create_minion ( self , player ) : #NEWLINE# #INDENT# #INDENT# return Minion ( 1 , 1 )
